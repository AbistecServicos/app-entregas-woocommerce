===== DeliveryStatus.js =====
 


===== EditLojaModal.js =====
// components/EditLojaModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function EditLojaModal({ isOpen, onClose, loja }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  useEffect(() => {
    if (isOpen && loja) {
      setFormData({
        veiculo: loja.veiculo || '',
        carga_maxima: loja.carga_maxima || '',
        perimetro_entrega: loja.perimetro_entrega || ''
      });
    }
  }, [isOpen, loja]);

  const handleSave = async () => {
    try {
      setLoading(true);
      
      const { error } = await supabase
        .from('loja_associada')
        .update({
          veiculo: formData.veiculo,
          carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
          perimetro_entrega: formData.perimetro_entrega
        })
        .eq('id', loja.id);

      if (error) throw error;

      alert('Dados da loja atualizados com sucesso!');
      onClose();
      window.location.reload();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      alert('Erro ao atualizar dados da loja');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">üè™ Editar Loja: {loja.loja_nome}</h2>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm font-medium text-gray-700">Ve√≠culo</label>
            <select
              value={formData.veiculo}
              onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            >
              <option value="">Selecione o ve√≠culo</option>
              <option value="carro">Carro</option>
              <option value="moto">Moto</option>
              <option value="bicicleta">Bicicleta</option>
              <option value="caminhao">Caminh√£o</option>
              <option value="van">Van</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Carga M√°xima (kg)</label>
            <input
              type="number"
              value={formData.carga_maxima}
              onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Per√≠metro de Entrega</label>
            <input
              type="text"
              value={formData.perimetro_entrega}
              onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 rounded"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-blue-600 text-white py-2 rounded disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


===== EditProfileModal.js =====
// components/EditProfileModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDI√á√ÉO DE PERFIL
// ==============================================================================
export default function EditProfileModal({ isOpen, onClose, userProfile, userRole, userLojas }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: '',
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  // ============================================================================
  // 1. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setFormData({
        nome_completo: userProfile.nome_completo || '',
        nome_usuario: userProfile.nome_usuario || '',
        telefone: userProfile.telefone || '',
        foto: userProfile.foto || '',
        veiculo: userLojas[0]?.veiculo || '',
        carga_maxima: userLojas[0]?.carga_maxima || '',
        perimetro_entrega: userLojas[0]?.perimetro_entrega || ''
      });
    }
  }, [isOpen, userProfile, userLojas]);

  // ============================================================================
  // 2. FUN√á√ÉO: SALVAR ALTERA√á√ïES
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);

      const { error: userError } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (userError) throw userError;

      if (userRole === 'entregador' && userLojas.length > 0) {
        const { error: lojaError } = await supabase
          .from('loja_associada')
          .update({
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          })
          .eq('uid_usuario', userProfile.uid)
          .eq('id_loja', userLojas[0].id_loja);

        if (lojaError) throw lojaError;
      }

      alert('Perfil atualizado com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      alert('Erro ao atualizar perfil');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw max-h-95vh overflow-y-auto">
        
        {/* CABE√áALHO */}
        <h2 className="text-xl font-bold mb-4 text-gray-800">‚úèÔ∏è Editar Perfil</h2>
        
        {/* CAMPOS DO FORMUL√ÅRIO */}
        <div className="space-y-4">
          {/* NOME COMPLETO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome Completo
            </label>
            <input
              type="text"
              value={formData.nome_completo}
              onChange={(e) => setFormData({...formData, nome_completo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome completo"
            />
          </div>

          {/* NOME DE USU√ÅRIO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome de Usu√°rio
            </label>
            <input
              type="text"
              value={formData.nome_usuario}
              onChange={(e) => setFormData({...formData, nome_usuario: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome de usu√°rio"
            />
          </div>

          {/* TELEFONE */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone
            </label>
            <input
              type="tel"
              value={formData.telefone}
              onChange={(e) => setFormData({...formData, telefone: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="(11) 99999-9999"
            />
          </div>

          {/* FOTO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL da Foto
            </label>
            <input
              type="url"
              value={formData.foto}
              onChange={(e) => setFormData({...formData, foto: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="https://exemplo.com/foto.jpg"
            />
          </div>

          {/* CAMPOS ESPEC√çFICOS PARA ENTREGADORES */}
          {userRole === 'entregador' && (
            <>
              {/* VE√çCULO */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Ve√≠culo
                </label>
                <select
                  value={formData.veiculo}
                  onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                >
                  <option value="">Selecione o ve√≠culo</option>
                  <option value="carro">Carro</option>
                  <option value="moto">Moto</option>
                  <option value="bicicleta">Bicicleta</option>
                  <option value="caminhao">Caminh√£o</option>
                  <option value="van">Van</option>
                </select>
              </div>

              {/* CARGA M√ÅXIMA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Carga M√°xima (kg)
                </label>
                <input
                  type="number"
                  value={formData.carga_maxima}
                  onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: 50"
                />
              </div>

              {/* PER√çMETRO DE ENTREGA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Per√≠metro de Entrega
                </label>
                <input
                  type="text"
                  value={formData.perimetro_entrega}
                  onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: Zona Norte, at√© 10km"
                />
              </div>
            </>
          )}
        </div>

        {/* BOT√ïES DE A√á√ÉO */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded font-medium hover:bg-gray-400 transition-colors"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-purple-600 text-white py-2 px-4 rounded font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


===== EditUsuarioModal.js =====
// components/EditUsuarioModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function EditUsuarioModal({ isOpen, onClose, userProfile }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: ''
  });

  useEffect(() => {
    if (isOpen && userProfile) {
      setFormData({
        nome_completo: userProfile.nome_completo || '',
        nome_usuario: userProfile.nome_usuario || '',
        telefone: userProfile.telefone || '',
        foto: userProfile.foto || ''
      });
    }
  }, [isOpen, userProfile]);

  const handleSave = async () => {
    try {
      setLoading(true);
      
      const { error } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (error) throw error;

      alert('Dados pessoais atualizados com sucesso!');
      onClose();
      window.location.reload();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      alert('Erro ao atualizar dados');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">‚úèÔ∏è Editar Dados Pessoais</h2>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm font-medium text-gray-700">Nome Completo</label>
            <input
              type="text"
              value={formData.nome_completo}
              onChange={(e) => setFormData({...formData, nome_completo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Nome de Usu√°rio</label>
            <input
              type="text"
              value={formData.nome_usuario}
              onChange={(e) => setFormData({...formData, nome_usuario: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Telefone</label>
            <input
              type="tel"
              value={formData.telefone}
              onChange={(e) => setFormData({...formData, telefone: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">URL da Foto</label>
            <input
              type="url"
              value={formData.foto}
              onChange={(e) => setFormData({...formData, foto: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 rounded"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-purple-600 text-white py-2 rounded disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


===== Header.js =====
// components/Header.js
export default function Header({ toggleSidebar, showMenuButton = true, title }) {
  return (
    <header className="bg-white shadow-sm border-b border-gray-200">
      <div className="flex items-center justify-between px-4 py-3">
        
        {/* ================================================================== */}
        {/* BOT√ÉO HAMBURGUER (CONDICIONAL) */}
        {/* ================================================================== */}
        <div className="flex items-center">
          {showMenuButton && (
            <button
              onClick={toggleSidebar}
              className="lg:hidden p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100"
              aria-label="Abrir menu"
            >
              {/* √çcone do hamburger */}
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          )}
          
          {/* Espa√ßo para alinhamento quando n√£o h√° bot√£o */}
          {!showMenuButton && <div className="w-10 h-10"></div>}
        </div>

        {/* ================================================================== */}
        {/* T√çTULO (CUSTOMIZ√ÅVEL PARA P√ÅGINAS SEM SIDEBAR) */}
        {/* ================================================================== */}
        <div className="flex-1 text-center lg:text-left">
          <h1 className="text-xl font-semibold text-gray-900">
            {title || 'EntregasWoo'} {/* Usa t√≠tulo customizado ou padr√£o */}
          </h1>
        </div>

        {/* ================================================================== */}
        {/* ESPA√áO PARA ELEMENTOS √Ä DIREITA (BOT√ÉO DE PERFIL, ETC) */}
        {/* ================================================================== */}
        <div className="w-10 h-10"></div>
      </div>
    </header>
  );
}


===== Layout.js =====
// components/Layout.js
import { useState, useEffect } from 'react';
import Header from './Header';
import Sidebar from './Sidebar';

// ==============================================================================
// COMPONENTE LAYOUT PRINCIPAL
// ==============================================================================
/**
 * Layout √© o componente que define a estrutura b√°sica de todas as p√°ginas
 * Ele gerencia: Sidebar, Header e Conte√∫do principal
 * 
 * @param {Object} props - Propriedades do componente
 * @param {ReactNode} props.children - Conte√∫do da p√°gina
 * @param {boolean} [props.hideSidebar=false] - Oculta a sidebar (para p√°ginas como Admin)
 */
const Layout = ({ children, hideSidebar = false }) => {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  // ============================================================================
  // 2. EFFECT: DETECTAR TAMANHO DA TELA
  // ============================================================================
  useEffect(() => {
    const checkIsMobile = () => setIsMobile(window.innerWidth < 1024);
    
    // Verificar inicialmente
    checkIsMobile();
    
    // Adicionar listener para redimensionamento
    window.addEventListener('resize', checkIsMobile);
    
    // Cleanup
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);

  // ============================================================================
  // 3. FUN√á√ïES: CONTROLE DA SIDEBAR
  // ============================================================================
  /**
   * Alterna o estado da sidebar (aberto/fechado)
   */
  const toggleSidebar = () => {
    setSidebarOpen(prev => !prev);
  };

  /**
   * Fecha a sidebar (√∫til para links mobile)
   */
  const closeSidebar = () => {
    if (isMobile) {
      setSidebarOpen(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZA√á√ÉO DO LAYOUT
  // ============================================================================
  return (
    <div className="flex h-screen bg-gray-50">
      
      {/* ====================================================================== */}
      {/* SIDEBAR - MENU LATERAL (CONDICIONAL) */}
      {/* ====================================================================== */}
      {/**
       * A sidebar √© opcional (pode ser ocultada com hideSidebar=true)
       * Mas o Header SEMPRE deve aparecer, mesmo sem sidebar
       */}
      {!hideSidebar && (
        <Sidebar 
          isOpen={sidebarOpen} 
          toggleSidebar={toggleSidebar}
          onItemClick={closeSidebar}
        />
      )}
      
      {/* ====================================================================== */}
      {/* CONTE√öDO PRINCIPAL */}
      {/* ====================================================================== */}
      <div className="flex-1 flex flex-col overflow-hidden">
        
        {/* ================================================================== */}
        {/* HEADER - CABE√áALHO (SEMPRE VIS√çVEL, INDEPENDENTE DA SIDEBAR) */}
        {/* ================================================================== */}
        {/**
         * ‚úÖ CORRE√á√ÉO: Header SEMPRE vis√≠vel, mas o bot√£o hamburger √© condicional
         * showMenuButton=false quando hideSidebar=true
         */}
        <Header 
          toggleSidebar={toggleSidebar} 
          showMenuButton={!hideSidebar} // Bot√£o s√≥ aparece se sidebar existir
          title={hideSidebar ? "Painel Administrativo" : undefined} // T√≠tulo customizado para Admin
        />
        
        {/* ================================================================== */}
        {/* CONTE√öDO DA P√ÅGINA */}
        {/* ================================================================== */}
        <main 
          className="flex-1 overflow-y-auto p-4 lg:p-6"
          id="main-content"
          tabIndex={-1}
        >
          {children}
        </main>
      </div>

      {/* ====================================================================== */}
      {/* OVERLAY - SOMENTE MOBILE E QUANDO SIDEBAR N√ÉO EST√Å OCULTA */}
      {/* ====================================================================== */}
      {!hideSidebar && sidebarOpen && isMobile && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
          onClick={closeSidebar}
          aria-hidden="true"
          role="button"
          aria-label="Fechar menu"
        />
      )}
    </div>
  );
};

export default Layout;


===== MobileMenu.js =====


===== Notification.js =====
 


===== OrderCard.js =====
 


===== Pagination.js =====
// components/Pagination.js
// ==============================================================================
// COMPONENTE PAGINATION (SEM DEPEND√äNCIAS EXTERNAS)
// ==============================================================================
export default function Pagination({ currentPage, totalPages, onPageChange }) {
  // ============================================================================
  // 1. FUN√á√ÉO: GERAR BOT√ïES DE P√ÅGINA
  // ============================================================================
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 5; // M√°ximo de p√°ginas vis√≠veis
    
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    // Ajustar se estiver no in√≠cio
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  };

  // ============================================================================
  // 2. RENDERIZA√á√ÉO DO COMPONENTE
  // ============================================================================
  if (totalPages <= 1) return null; // N√£o mostrar pagina√ß√£o se s√≥ tiver uma p√°gina

  return (
    <div className="flex items-center justify-between border-t border-gray-200 px-4 py-3 sm:px-6">
      
      {/* ‚úÖ PAGINA√á√ÉO MOBILE */}
      <div className="flex flex-1 justify-between sm:hidden">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          ‚Üê Anterior
        </button>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Pr√≥xima ‚Üí
        </button>
      </div>
      
      {/* ‚úÖ PAGINA√á√ÉO DESKTOP */}
      <div className="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        
        {/* ‚úÖ CONTADOR DE P√ÅGINAS */}
        <div>
          <p className="text-sm text-gray-700">
            P√°gina <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        
        {/* ‚úÖ NAVEGA√á√ÉO */}
        <div>
          <nav className="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
            
            {/* ‚úÖ BOT√ÉO ANTERIOR */}
            <button
              onClick={() => onPageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Anterior</span>
              ‚Üê {/* Emoji seta esquerda */}
            </button>
            
            {/* ‚úÖ BOT√ïES DE P√ÅGINA */}
            {getPageNumbers().map((page) => (
              <button
                key={page}
                onClick={() => onPageChange(page)}
                className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                  currentPage === page
                    ? 'bg-purple-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600'
                    : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                }`}
              >
                {page}
              </button>
            ))}
            
            {/* ‚úÖ BOT√ÉO PR√ìXIMA */}
            <button
              onClick={() => onPageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Pr√≥xima</span>
              ‚Üí {/* Emoji seta direita */}
            </button>
          </nav>
        </div>
      </div>
    </div>
  );
}


===== RouteGuard.js =====
// components/RouteGuard.js
import { useUserProfile } from '../hooks/useUserProfile';
import { useRouter } from 'next/router';
import { useEffect } from 'react';

const RouteGuard = ({ children, requiredRole }) => {
  const { userRole, loading } = useUserProfile();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      // Definir hierarquia de permiss√µes
      const rolesHierarchy = {
        'visitante': 0,
        'entregador': 1,
        'gerente': 2,
        'admin': 3
      };

      // Verificar se usu√°rio tem permiss√£o
      const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];
      
      if (!hasPermission) {
        // Redirecionar para p√°gina n√£o autorizada ou home
        router.push('/');
      }
    }
  }, [userRole, loading, requiredRole, router]);

  // Mostrar loading enquanto verifica permiss√µes
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Verifica√ß√£o final (caso o useEffect n√£o tenha redirecionado ainda)
  const rolesHierarchy = {
    'visitante': 0,
    'entregador': 1,
    'gerente': 2,
    'admin': 3
  };
  
  const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];

  if (!hasPermission) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600">Acesso N√£o Autorizado</h1>
          <p className="text-gray-600 mt-2">Voc√™ n√£o tem permiss√£o para acessar esta p√°gina.</p>
        </div>
      </div>
    );
  }

  return children;
};

export default RouteGuard;


===== Sidebar.js =====
// components/Sidebar.js
import { useState, useEffect } from 'react'; // ‚úÖ Adicionar useEffect
import Link from 'next/link';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import UserProfile from './UserProfile';

// ==============================================================================
// COMPONENTE SIDEBAR - MENU LATERAL
// ==============================================================================
/**
 * Sidebar √© o menu de navega√ß√£o lateral do sistema
 * Cont√©m: Logo, Menu de navega√ß√£o, Perfil do usu√°rio e Bot√£o de logout
 * Responsivo: Mobile (overlay) e Desktop (fixo)
 * ‚úÖ NOVO: Escuta mudan√ßas de autentica√ß√£o em tempo real
 */
const Sidebar = ({ isOpen, toggleSidebar }) => {
  const router = useRouter();
  const { user, userRole, loading: loadingUser, reloadUserData } = useUserProfile(); // ‚úÖ Adicionar reloadUserData
  
  // ============================================================================
  // 1. EFFECT: ESCUTAR MUDAN√áAS DE AUTENTICA√á√ÉO (NOVO)
  // ============================================================================
  /**
   * ‚úÖ NOVO: Escuta mudan√ßas no estado de autentica√ß√£o do Supabase
   * Atualiza automaticamente quando usu√°rio faz login ou logout
   * Preserva a integridade do c√≥digo existente
   */
  useEffect(() => {
    // Inscrever para receber eventos de mudan√ßa de autentica√ß√£o
    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        // Recarregar dados do usu√°rio quando houver mudan√ßa de autentica√ß√£o
        if (event === 'SIGNED_IN' || event === 'SIGNED_OUT') {
          if (reloadUserData) {
            await reloadUserData();
          }
        }
      }
    );

    // Cleanup: cancelar a inscri√ß√£o quando o componente for desmontado
    return () => {
      if (authListener && authListener.unsubscribe) {
        authListener.unsubscribe();
      }
    };
  }, [reloadUserData]); // ‚úÖ Depend√™ncia: reloadUserData

  // ============================================================================
  // 2. ITENS DO MENU COM RESTRI√á√ÉO DE ACESSO
  // ============================================================================
  /**
   * Itens base do menu - vis√≠veis para todos os usu√°rios logados
   * Inclui p√°ginas b√°sicas de pedidos
   */
  const baseItems = [
    { path: '/', icon: 'üè†', label: 'Home' },
    { path: '/pedidos-pendentes', icon: 'üìã', label: 'Pedidos Pendentes' },
    { path: '/pedidos-aceitos', icon: '‚úÖ', label: 'Pedidos Aceitos' },
    { path: '/pedidos-entregues', icon: 'üöö', label: 'Pedidos Entregues' },
    { path: '/gestao-entregadores', icon: 'üë•', label: 'Gest√£o de Entregadores' },
    { path: '/perfil', icon: 'üë§', label: 'Meu Perfil' },
  ];

  /**
   * Itens administrativos - vis√≠veis apenas para gerentes e administradores
   * Inclui gest√£o completa e administra√ß√£o
   */
  const adminItems = [
    { path: '/todos-pedidos', icon: 'üìä', label: 'Todos os Pedidos' },
    { path: '/relatorios', icon: 'üìà', label: 'Relat√≥rios' },
    { path: '/admin', icon: '‚öôÔ∏è', label: 'Administra√ß√£o' },
  ];

  /**
   * Combina itens conforme a role do usu√°rio
   * Entregadores: apenas itens base
   * Gerentes/Admin: itens base + itens administrativos
   */
  const menuItems = [
    ...baseItems,
    ...((userRole === 'admin' || userRole === 'gerente') ? adminItems : [])
  ];

// ============================================================================
// 3. FUN√á√ÉO: LOGOUT DO USU√ÅRIO (CORRIGIDA)
// ============================================================================
/**
 * ‚úÖ CORRE√á√ÉO: Logout com redirecionamento imediato SEM esperar reloadUserData
 * O listener de auth state change vai cuidar da atualiza√ß√£o da UI
 */
const handleLogout = async () => {
  try {
    // Fechar sidebar no mobile antes do logout
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
    
    // Realizar logout via Supabase
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
    
    console.log('Logout realizado com sucesso');
    
    // ‚úÖ CORRE√á√ÉO: Redirecionar IMEDIATAMENTE para login
    // O listener onAuthStateChange vai atualizar a UI automaticamente
    router.push('/login');
    
  } catch (error) {
    console.error('Erro ao fazer logout:', error);
  }
};

  // ============================================================================
  // 4. FUN√á√ÉO: REDIRECIONAR PARA LOGIN
  // ============================================================================
  /**
   * Redireciona para p√°gina de login quando usu√°rio n√£o est√° autenticado
   */
  const handleLoginRedirect = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
    router.push('/login');
  };

  // ============================================================================
  // 5. FUN√á√ÉO: FECHAR SIDEBAR AO CLICAR EM ITEM (MOBILE)
  // ============================================================================
  /**
   * Fecha automaticamente o sidebar no mobile quando um item √© clicado
   * Melhora a experi√™ncia mobile evitando overlay permanente
   */
  const handleMenuItemClick = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
  };

  // ============================================================================
  // 6. RENDERIZA√á√ÉO DO COMPONENTE
  // ============================================================================
  return (
    <>
      {/* ====================================================================== */}
      {/* OVERLAY PARA MOBILE */}
      {/* ====================================================================== */}
      {/**
       * Overlay escurece o conte√∫do de fundo quando sidebar est√° aberta no mobile
       * Ao clicar no overlay, fecha automaticamente o sidebar
       * Vis√≠vel apenas em dispositivos mobile (lg:hidden)
       */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={toggleSidebar}
        />
      )}
      
      {/* ====================================================================== */}
      {/* SIDEBAR PRINCIPAL */}
      {/* ====================================================================== */}
      {/**
       * Container principal do sidebar
       * Mobile: fixed com transi√ß√£o slide
       * Desktop: static como parte do layout
       * Background roxo com texto branco para contraste
       */}
      <div className={`
        fixed lg:static inset-y-0 left-0 z-50
        w-64 bg-purple-800 text-white
        transform transition-transform duration-300 ease-in-out
        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}
        flex flex-col h-full
      `}>
        
        {/* ================================================================== */}
        {/* LOGO / MARCA DO SISTEMA */}
        {/* ================================================================== */}
        {/**
         * Cabe√ßalho com logo e nome do sistema
         * Border inferior para separa√ß√£o visual
         * AGORA COM LINK PARA P√ÅGINA INICIAL E FECHAMENTO NO MOBILE
         */}
        <div className="p-6 border-b border-purple-700">
          <Link href="/" passHref onClick={handleMenuItemClick}>
            <div className="cursor-pointer">
              <h1 className="text-2xl font-bold">EntregasWoo</h1>
              <p className="text-purple-300 text-sm">Sistema de Gest√£o</p>
            </div>
          </Link>
        </div>

        {/* ================================================================== */}
        {/* MENU DE NAVEGA√á√ÉO */}
        {/* ================================================================== */}
        {/**
         * Lista de itens de navega√ß√£o
         * Scroll√°vel caso tenha muitos itens
         * Estilos condicionais para item ativo
         * ‚úÖ HOME adicionado como primeiro item
         * ‚úÖ RELAT√ìRIOS adicionado para admin/gerentes
         */}
        <nav className="flex-1 p-4 overflow-y-auto">
          {menuItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`flex items-center py-3 px-4 rounded-lg mb-2 transition-colors
                ${router.pathname === item.path
                  ? 'bg-purple-900 text-white shadow-md' // Item ativo
                  : 'hover:bg-purple-700 text-purple-200' // Item normal/hover
                }`}
              onClick={handleMenuItemClick}
            >
              <span className="text-xl mr-3">{item.icon}</span>
              <span className="font-medium">{item.label}</span>
            </Link>
          ))}
        </nav>

        {/* ================================================================== */}
        {/* PERFIL DO USU√ÅRIO (CONDICIONAL) */}
        {/* ================================================================== */}
        {/**
         * ‚úÖ ALTERA√á√ÉO: √Årea de perfil s√≥ aparece se usu√°rio estiver logado
         */}
        {user && (
          <div className="p-4 border-t border-purple-700 bg-purple-900">
            <UserProfile />
          </div>
        )}

        {/* ================================================================== */}
        {/* BOT√ÉO DIN√ÇMICO: ENTRAR/SAIR */}
        {/* ================================================================== */}
        {/**
         * ‚úÖ ALTERA√á√ÉO CR√çTICA: Bot√£o muda dinamicamente entre "Entrar" e "Sair"
         * baseado no estado de autentica√ß√£o do usu√°rio
         */}
        <div className="p-4 border-t border-purple-700">
          {user ? (
            // ================================================================
            // USU√ÅRIO LOGADO: MOSTRA BOT√ÉO "SAIR"
            // ================================================================
            <button
              onClick={handleLogout}
              className="w-full flex items-center justify-center py-2 px-4 bg-purple-700 hover:bg-purple-600 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              Sair
            </button>
          ) : (
            // ================================================================
            // USU√ÅRIO DESLOGADO: MOSTRA BOT√ÉO "ENTRAR"
            // ================================================================
            <button
              onClick={handleLoginRedirect}
              className="w-full flex items-center justify-center py-2 px-4 bg-green-600 hover:bg-green-500 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
              </svg>
              Entrar
            </button>
          )}
        </div>
      </div>
    </>
  );
};

export default Sidebar;


===== UserProfile.js =====
// components/UserProfile.js (VERS√ÉO SIMPLIFICADA)
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// COMPONENTE: PERFIL DO USU√ÅRIO (VERS√ÉO SIMPLIFICADA)
// ==============================================================================
/**
 * Vers√£o simplificada para o sidebar - apenas informa√ß√µes b√°sicas
 * sem bot√µes de edi√ß√£o (agora na p√°gina /perfil)
 */
const UserProfile = ({ isMobile = false }) => {
  const { userProfile, userRole, loading } = useUserProfile();

  // ============================================================================
  // 1. ESTADO DE CARREGAMENTO
  // ============================================================================
  if (loading) {
    return (
      <div className="p-4 border-t">
        <div className="animate-pulse">
          <div className="h-4 bg-purple-700 rounded mb-2"></div>
          <div className="h-3 bg-purple-700 rounded"></div>
        </div>
      </div>
    );
  }

  // ============================================================================
  // 2. USU√ÅRIO N√ÉO AUTENTICADO
  // ============================================================================
  if (!userProfile) {
    return (
      <div className="p-4 border-t">
        <p className="text-sm text-purple-300">Visitante</p>
        <p className="text-xs text-purple-400">Fa√ßa login para acessar</p>
      </div>
    );
  }

  // ============================================================================
  // 3. RENDERIZA√á√ÉO SIMPLIFICADA
  // ============================================================================
  return (
    <div className="p-4 border-t">
      
      {/* INFORMA√á√ïES B√ÅSICAS DO USU√ÅRIO */}
      <div className="space-y-2">
        
        {/* NOME E EMAIL */}
        <div className="flex items-center">
          {userProfile.foto && (
            <img
              src={userProfile.foto}
              alt="Foto do usu√°rio"
              className="w-8 h-8 rounded-full mr-3 border-2 border-purple-600"
            />
          )}
          <div className="flex-1 min-w-0">
            <p className="text-sm font-semibold text-white truncate">
              {userProfile.nome_completo || userProfile.nome_usuario}
            </p>
            <p className="text-xs text-purple-300 truncate">
              {userProfile.email}
            </p>
          </div>
        </div>

        {/* FUN√á√ÉO/ROLE (APENAS TEXTO) */}
        <div className="bg-purple-700 rounded p-1">
          <p className="text-xs text-center text-white">
            {userRole === 'admin' && 'üëë Admin'}
            {userRole === 'gerente' && 'üíº Gerente'}
            {userRole === 'entregador' && 'üöö Entregador'}
            {userRole === 'visitante' && 'üë§ Visitante'}
          </p>
        </div>

        {/* STATUS DE CONEX√ÉO (SIMPLES) */}
        <div className="flex items-center justify-between text-xs text-purple-400">
          <span>üü¢ Conectado</span>
        </div>
      </div>
    </div>
  );
};



export default UserProfile;


