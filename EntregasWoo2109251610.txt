// =========================================
// 1. lib\supabase.js
// =========================================

 import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase URL or Anon Key. Check .env.local');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);



// =========================================
// 2. lib\wooCommerce.js
// =========================================

 



// =========================================
// 1. public\firebase-messaging-sw.js
// =========================================

importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js');

// Configuração do Firebase - USE SUAS CREDENCIAIS REAIS
firebase.initializeApp({
  apiKey: "AIzaSyCQbJZQ1RP2VJvQOqUTDp-rvxCSN_cf4ZQ",
  authDomain: "entregaswoonotificacoes.firebaseapp.com",
  projectId: "entregaswoonotificacoes",
  storageBucket: "entregaswoonotificacoes.firebasestorage.app",
  messagingSenderId: "185849507222",
  appId: "1:185849507222:web:02ecd0936086cc7a5dc1b7"
});

const messaging = firebase.messaging();

// Background message handler
messaging.onBackgroundMessage((payload) => {
  console.log('[firebase-messaging-sw.js] Received background message ', payload);
  
  const notificationTitle = payload.notification.title;
  const notificationOptions = {
    body: payload.notification.body,
    icon: '/icon-192x192.png' // caminho para seu ícone
  };

  self.registration.showNotification(notificationTitle, notificationOptions);
});


// =========================================
// 2. public\firebase.js
// =========================================

// frontend/public/firebase.js
if (typeof window !== 'undefined') {
  window.firebaseInitialized = false;

  const loadFirebase = () => {
    return new Promise((resolve, reject) => {
      if (window.firebase && !window.firebaseInitialized) {
        resolve();
      } else {
        const scriptApp = document.createElement('script');
        scriptApp.src = 'https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js';
        scriptApp.async = true;
        scriptApp.onload = () => {
          console.log('Firebase App carregado.');
          const scriptMessaging = document.createElement('script');
          scriptMessaging.src = 'https://www.gstatic.com/firebasejs/9.23.0/firebase-messaging.js';
          scriptMessaging.async = true;
          scriptMessaging.onload = () => {
            console.log('Firebase Messaging carregado.');
            try {
              if (typeof window.firebase.initializeApp === 'function') {
                window.firebase.initializeApp({
                  apiKey: "AIzaSyCQbJZQ1RP2VJvQOqUTDp-rvxCSN_cf4ZQ",
                  authDomain: "entregaswoonotificacoes.firebaseapp.com",
                  projectId: "entregaswoonotificacoes",
                  storageBucket: "entregaswoonotificacoes.firebasestorage.app",
                  messagingSenderId: "185849507222",
                  appId: "1:185849507222:web:02ecd0936086cc7a5dc1b7"
                });
                window.firebase.messaging = window.firebase.messaging();
                window.firebaseInitialized = true;
                console.log('Firebase inicializado com sucesso.');
                resolve();
              } else {
                console.error('window.firebase.initializeApp não é uma função após carregamento.');
                reject(new Error('Firebase API inválida'));
              }
            } catch (error) {
              console.error('Erro ao inicializar Firebase:', error);
              reject(error);
            }
          };
          scriptMessaging.onerror = () => reject(new Error('Erro ao carregar firebase-messaging.js'));
          document.body.appendChild(scriptMessaging);
        };
        scriptApp.onerror = () => reject(new Error('Erro ao carregar firebase-app.js'));
        document.body.appendChild(scriptApp);
      }
    });
  };

  loadFirebase().then(() => {
    window.requestForToken = () => {
      return new Promise(async (resolve) => {
        if (!window.firebase.messaging) {
          console.log('Firebase Messaging não inicializado');
          resolve(null);
          return;
        }
        try {
          const currentToken = await window.firebase.messaging.getToken({ vapidKey: "BBI4OTlcRQahrvbbC_XGTak7Xae9Q9zVt5mCte7w-zuy2xVAmcNWqv2Fxt_rDmhKJggNdsyJ8P-9dMt3LImstxw" });
          if (currentToken) {
            console.log('Token atual para cliente: ', currentToken);
            resolve(currentToken);
          } else {
            console.log('Nenhum token de registro disponível.');
            resolve(null);
          }
        } catch (error) {
          console.log('Erro ao recuperar token: ', error);
          resolve(null);
        }
      });
    };

    window.onMessageListener = () => {
      return new Promise((resolve) => {
        if (!window.firebase.messaging) {
          resolve(null);
          return;
        }
        window.firebase.messaging.onMessage((payload) => {
          resolve(payload);
        });
      });
    };
  }).catch(error => console.error('Erro ao carregar ou inicializar Firebase:', error));
}


// =========================================
// 3. public\sw.js
// =========================================

/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// If the loader is already loaded, just stop.
if (!self.define) {
  let registry = {};

  // Used for `eval` and `importScripts` where we can't get script URL by other means.
  // In both cases, it's safe to use a global var because those functions are synchronous.
  let nextDefineUri;

  const singleRequire = (uri, parentUri) => {
    uri = new URL(uri + ".js", parentUri).href;
    return registry[uri] || (
      
        new Promise(resolve => {
          if ("document" in self) {
            const script = document.createElement("script");
            script.src = uri;
            script.onload = resolve;
            document.head.appendChild(script);
          } else {
            nextDefineUri = uri;
            importScripts(uri);
            resolve();
          }
        })
      
      .then(() => {
        let promise = registry[uri];
        if (!promise) {
          throw new Error(`Module ${uri} didn’t register its module`);
        }
        return promise;
      })
    );
  };

  self.define = (depsNames, factory) => {
    const uri = nextDefineUri || ("document" in self ? document.currentScript.src : "") || location.href;
    if (registry[uri]) {
      // Module is already loading or loaded.
      return;
    }
    let exports = {};
    const require = depUri => singleRequire(depUri, uri);
    const specialDeps = {
      module: { uri },
      exports,
      require
    };
    registry[uri] = Promise.all(depsNames.map(
      depName => specialDeps[depName] || require(depName)
    )).then(deps => {
      factory(...deps);
      return exports;
    });
  };
}
define(['./workbox-e43f5367'], (function (workbox) { 'use strict';

  importScripts();
  self.skipWaiting();
  workbox.clientsClaim();
  workbox.registerRoute("/", new workbox.NetworkFirst({
    "cacheName": "start-url",
    plugins: [{
      cacheWillUpdate: async ({
        request,
        response,
        event,
        state
      }) => {
        if (response && response.type === 'opaqueredirect') {
          return new Response(response.body, {
            status: 200,
            statusText: 'OK',
            headers: response.headers
          });
        }
        return response;
      }
    }]
  }), 'GET');
  workbox.registerRoute(/.*/i, new workbox.NetworkOnly({
    "cacheName": "dev",
    plugins: []
  }), 'GET');

}));



// =========================================
// 4. public\useFirebaseNotifications.js
// =========================================

import { useState, useEffect } from 'react';
import { messaging, requestForToken, onMessageListener } from '/firebase.js';
import { supabase } from '../lib/supabase';

export const useFirebaseNotifications = (userId) => {
  const [token, setToken] = useState(null);
  const [notification, setNotification] = useState(null);

  // Solicitar permissão e obter token
  useEffect(() => {
    if (userId && typeof window !== 'undefined' && 'serviceWorker' in navigator) {
      const getToken = async () => {
        try {
          const currentToken = await requestForToken();
          if (currentToken) {
            setToken(currentToken);
            
            // Salvar token no Supabase
            const { error } = await supabase
              .from('user_tokens')
              .upsert({
                user_id: userId,
                token: currentToken,
                updated_at: new Date().toISOString()
              });
            
            if (error) {
              console.error('Erro ao salvar token:', error);
            }
          }
        } catch (error) {
          console.error('Erro ao obter token:', error);
        }
      };

      getToken();
    }
  }, [userId]);

  // Escutar mensagens em foreground
  useEffect(() => {
    if (typeof window !== 'undefined') {
      onMessageListener()
        .then((payload) => {
          setNotification(payload);
          // Mostrar notificação mesmo em foreground se desejar
          if (payload.notification) {
            new Notification(payload.notification.title, {
              body: payload.notification.body,
              icon: payload.notification.icon || '/icon-192x192.png'
            });
          }
        })
        .catch((error) => console.log('Erro no listener: ', error));
    }
  }, []);

  return { token, notification };
};


// =========================================
// 5. public\workbox-e43f5367.js
// =========================================

define(['exports'], (function (exports) { 'use strict';

    // @ts-ignore
    try {
      self['workbox:core:6.5.4'] && _();
    } catch (e) {}

    /*
      Copyright 2019 Google LLC
      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    const logger = (() => {
      // Don't overwrite this value if it's already set.
      // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923
      if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {
        self.__WB_DISABLE_DEV_LOGS = false;
      }
      let inGroup = false;
      const methodToColorMap = {
        debug: `#7f8c8d`,
        log: `#2ecc71`,
        warn: `#f39c12`,
        error: `#c0392b`,
        groupCollapsed: `#3498db`,
        groupEnd: null // No colored prefix on groupEnd
      };
      const print = function (method, args) {
        if (self.__WB_DISABLE_DEV_LOGS) {
          return;
        }
        if (method === 'groupCollapsed') {
          // Safari doesn't print all console.groupCollapsed() arguments:
          // https://bugs.webkit.org/show_bug.cgi?id=182754
          if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
            console[method](...args);
            return;
          }
        }
        const styles = [`background: ${methodToColorMap[method]}`, `border-radius: 0.5em`, `color: white`, `font-weight: bold`, `padding: 2px 0.5em`];
        // When in a group, the workbox prefix is not displayed.
        const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];
        console[method](...logPrefix, ...args);
        if (method === 'groupCollapsed') {
          inGroup = true;
        }
        if (method === 'groupEnd') {
          inGroup = false;
        }
      };
      // eslint-disable-next-line @typescript-eslint/ban-types
      const api = {};
      const loggerMethods = Object.keys(methodToColorMap);
      for (const key of loggerMethods) {
        const method = key;
        api[method] = (...args) => {
          print(method, args);
        };
      }
      return api;
    })();

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    const messages$1 = {
      'invalid-value': ({
        paramName,
        validValueDescription,
        value
      }) => {
        if (!paramName || !validValueDescription) {
          throw new Error(`Unexpected input to 'invalid-value' error.`);
        }
        return `The '${paramName}' parameter was given a value with an ` + `unexpected value. ${validValueDescription} Received a value of ` + `${JSON.stringify(value)}.`;
      },
      'not-an-array': ({
        moduleName,
        className,
        funcName,
        paramName
      }) => {
        if (!moduleName || !className || !funcName || !paramName) {
          throw new Error(`Unexpected input to 'not-an-array' error.`);
        }
        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${className}.${funcName}()' must be an array.`;
      },
      'incorrect-type': ({
        expectedType,
        paramName,
        moduleName,
        className,
        funcName
      }) => {
        if (!expectedType || !paramName || !moduleName || !funcName) {
          throw new Error(`Unexpected input to 'incorrect-type' error.`);
        }
        const classNameStr = className ? `${className}.` : '';
        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}` + `${funcName}()' must be of type ${expectedType}.`;
      },
      'incorrect-class': ({
        expectedClassName,
        paramName,
        moduleName,
        className,
        funcName,
        isReturnValueProblem
      }) => {
        if (!expectedClassName || !moduleName || !funcName) {
          throw new Error(`Unexpected input to 'incorrect-class' error.`);
        }
        const classNameStr = className ? `${className}.` : '';
        if (isReturnValueProblem) {
          return `The return value from ` + `'${moduleName}.${classNameStr}${funcName}()' ` + `must be an instance of class ${expectedClassName}.`;
        }
        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}${funcName}()' ` + `must be an instance of class ${expectedClassName}.`;
      },
      'missing-a-method': ({
        expectedMethod,
        paramName,
        moduleName,
        className,
        funcName
      }) => {
        if (!expectedMethod || !paramName || !moduleName || !className || !funcName) {
          throw new Error(`Unexpected input to 'missing-a-method' error.`);
        }
        return `${moduleName}.${className}.${funcName}() expected the ` + `'${paramName}' parameter to expose a '${expectedMethod}' method.`;
      },
      'add-to-cache-list-unexpected-type': ({
        entry
      }) => {
        return `An unexpected entry was passed to ` + `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` + `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` + `strings with one or more characters, objects with a url property or ` + `Request objects.`;
      },
      'add-to-cache-list-conflicting-entries': ({
        firstEntry,
        secondEntry
      }) => {
        if (!firstEntry || !secondEntry) {
          throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);
        }
        return `Two of the entries passed to ` + `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` + `${firstEntry} but different revision details. Workbox is ` + `unable to cache and version the asset correctly. Please remove one ` + `of the entries.`;
      },
      'plugin-error-request-will-fetch': ({
        thrownErrorMessage
      }) => {
        if (!thrownErrorMessage) {
          throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);
        }
        return `An error was thrown by a plugins 'requestWillFetch()' method. ` + `The thrown error message was: '${thrownErrorMessage}'.`;
      },
      'invalid-cache-name': ({
        cacheNameId,
        value
      }) => {
        if (!cacheNameId) {
          throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);
        }
        return `You must provide a name containing at least one character for ` + `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` + `'${JSON.stringify(value)}'`;
      },
      'unregister-route-but-not-found-with-method': ({
        method
      }) => {
        if (!method) {
          throw new Error(`Unexpected input to ` + `'unregister-route-but-not-found-with-method' error.`);
        }
        return `The route you're trying to unregister was not  previously ` + `registered for the method type '${method}'.`;
      },
      'unregister-route-route-not-registered': () => {
        return `The route you're trying to unregister was not previously ` + `registered.`;
      },
      'queue-replay-failed': ({
        name
      }) => {
        return `Replaying the background sync queue '${name}' failed.`;
      },
      'duplicate-queue-name': ({
        name
      }) => {
        return `The Queue name '${name}' is already being used. ` + `All instances of backgroundSync.Queue must be given unique names.`;
      },
      'expired-test-without-max-age': ({
        methodName,
        paramName
      }) => {
        return `The '${methodName}()' method can only be used when the ` + `'${paramName}' is used in the constructor.`;
      },
      'unsupported-route-type': ({
        moduleName,
        className,
        funcName,
        paramName
      }) => {
        return `The supplied '${paramName}' parameter was an unsupported type. ` + `Please check the docs for ${moduleName}.${className}.${funcName} for ` + `valid input types.`;
      },
      'not-array-of-class': ({
        value,
        expectedClass,
        moduleName,
        className,
        funcName,
        paramName
      }) => {
        return `The supplied '${paramName}' parameter must be an array of ` + `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` + `Please check the call to ${moduleName}.${className}.${funcName}() ` + `to fix the issue.`;
      },
      'max-entries-or-age-required': ({
        moduleName,
        className,
        funcName
      }) => {
        return `You must define either config.maxEntries or config.maxAgeSeconds` + `in ${moduleName}.${className}.${funcName}`;
      },
      'statuses-or-headers-required': ({
        moduleName,
        className,
        funcName
      }) => {
        return `You must define either config.statuses or config.headers` + `in ${moduleName}.${className}.${funcName}`;
      },
      'invalid-string': ({
        moduleName,
        funcName,
        paramName
      }) => {
        if (!paramName || !moduleName || !funcName) {
          throw new Error(`Unexpected input to 'invalid-string' error.`);
        }
        return `When using strings, the '${paramName}' parameter must start with ` + `'http' (for cross-origin matches) or '/' (for same-origin matches). ` + `Please see the docs for ${moduleName}.${funcName}() for ` + `more info.`;
      },
      'channel-name-required': () => {
        return `You must provide a channelName to construct a ` + `BroadcastCacheUpdate instance.`;
      },
      'invalid-responses-are-same-args': () => {
        return `The arguments passed into responsesAreSame() appear to be ` + `invalid. Please ensure valid Responses are used.`;
      },
      'expire-custom-caches-only': () => {
        return `You must provide a 'cacheName' property when using the ` + `expiration plugin with a runtime caching strategy.`;
      },
      'unit-must-be-bytes': ({
        normalizedRangeHeader
      }) => {
        if (!normalizedRangeHeader) {
          throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);
        }
        return `The 'unit' portion of the Range header must be set to 'bytes'. ` + `The Range header provided was "${normalizedRangeHeader}"`;
      },
      'single-range-only': ({
        normalizedRangeHeader
      }) => {
        if (!normalizedRangeHeader) {
          throw new Error(`Unexpected input to 'single-range-only' error.`);
        }
        return `Multiple ranges are not supported. Please use a  single start ` + `value, and optional end value. The Range header provided was ` + `"${normalizedRangeHeader}"`;
      },
      'invalid-range-values': ({
        normalizedRangeHeader
      }) => {
        if (!normalizedRangeHeader) {
          throw new Error(`Unexpected input to 'invalid-range-values' error.`);
        }
        return `The Range header is missing both start and end values. At least ` + `one of those values is needed. The Range header provided was ` + `"${normalizedRangeHeader}"`;
      },
      'no-range-header': () => {
        return `No Range header was found in the Request provided.`;
      },
      'range-not-satisfiable': ({
        size,
        start,
        end
      }) => {
        return `The start (${start}) and end (${end}) values in the Range are ` + `not satisfiable by the cached response, which is ${size} bytes.`;
      },
      'attempt-to-cache-non-get-request': ({
        url,
        method
      }) => {
        return `Unable to cache '${url}' because it is a '${method}' request and ` + `only 'GET' requests can be cached.`;
      },
      'cache-put-with-no-response': ({
        url
      }) => {
        return `There was an attempt to cache '${url}' but the response was not ` + `defined.`;
      },
      'no-response': ({
        url,
        error
      }) => {
        let message = `The strategy could not generate a response for '${url}'.`;
        if (error) {
          message += ` The underlying error is ${error}.`;
        }
        return message;
      },
      'bad-precaching-response': ({
        url,
        status
      }) => {
        return `The precaching request for '${url}' failed` + (status ? ` with an HTTP status of ${status}.` : `.`);
      },
      'non-precached-url': ({
        url
      }) => {
        return `createHandlerBoundToURL('${url}') was called, but that URL is ` + `not precached. Please pass in a URL that is precached instead.`;
      },
      'add-to-cache-list-conflicting-integrities': ({
        url
      }) => {
        return `Two of the entries passed to ` + `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` + `${url} with different integrity values. Please remove one of them.`;
      },
      'missing-precache-entry': ({
        cacheName,
        url
      }) => {
        return `Unable to find a precached response in ${cacheName} for ${url}.`;
      },
      'cross-origin-copy-response': ({
        origin
      }) => {
        return `workbox-core.copyResponse() can only be used with same-origin ` + `responses. It was passed a response with origin ${origin}.`;
      },
      'opaque-streams-source': ({
        type
      }) => {
        const message = `One of the workbox-streams sources resulted in an ` + `'${type}' response.`;
        if (type === 'opaqueredirect') {
          return `${message} Please do not use a navigation request that results ` + `in a redirect as a source.`;
        }
        return `${message} Please ensure your sources are CORS-enabled.`;
      }
    };

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    const generatorFunction = (code, details = {}) => {
      const message = messages$1[code];
      if (!message) {
        throw new Error(`Unable to find message for code '${code}'.`);
      }
      return message(details);
    };
    const messageGenerator = generatorFunction;

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * Workbox errors should be thrown with this class.
     * This allows use to ensure the type easily in tests,
     * helps developers identify errors from workbox
     * easily and allows use to optimise error
     * messages correctly.
     *
     * @private
     */
    class WorkboxError extends Error {
      /**
       *
       * @param {string} errorCode The error code that
       * identifies this particular error.
       * @param {Object=} details Any relevant arguments
       * that will help developers identify issues should
       * be added as a key on the context object.
       */
      constructor(errorCode, details) {
        const message = messageGenerator(errorCode, details);
        super(message);
        this.name = errorCode;
        this.details = details;
      }
    }

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /*
     * This method throws if the supplied value is not an array.
     * The destructed values are required to produce a meaningful error for users.
     * The destructed and restructured object is so it's clear what is
     * needed.
     */
    const isArray = (value, details) => {
      if (!Array.isArray(value)) {
        throw new WorkboxError('not-an-array', details);
      }
    };
    const hasMethod = (object, expectedMethod, details) => {
      const type = typeof object[expectedMethod];
      if (type !== 'function') {
        details['expectedMethod'] = expectedMethod;
        throw new WorkboxError('missing-a-method', details);
      }
    };
    const isType = (object, expectedType, details) => {
      if (typeof object !== expectedType) {
        details['expectedType'] = expectedType;
        throw new WorkboxError('incorrect-type', details);
      }
    };
    const isInstance = (object,
    // Need the general type to do the check later.
    // eslint-disable-next-line @typescript-eslint/ban-types
    expectedClass, details) => {
      if (!(object instanceof expectedClass)) {
        details['expectedClassName'] = expectedClass.name;
        throw new WorkboxError('incorrect-class', details);
      }
    };
    const isOneOf = (value, validValues, details) => {
      if (!validValues.includes(value)) {
        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;
        throw new WorkboxError('invalid-value', details);
      }
    };
    const isArrayOfClass = (value,
    // Need general type to do check later.
    expectedClass,
    // eslint-disable-line
    details) => {
      const error = new WorkboxError('not-array-of-class', details);
      if (!Array.isArray(value)) {
        throw error;
      }
      for (const item of value) {
        if (!(item instanceof expectedClass)) {
          throw error;
        }
      }
    };
    const finalAssertExports = {
      hasMethod,
      isArray,
      isInstance,
      isOneOf,
      isType,
      isArrayOfClass
    };

    // @ts-ignore
    try {
      self['workbox:routing:6.5.4'] && _();
    } catch (e) {}

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * The default HTTP method, 'GET', used when there's no specific method
     * configured for a route.
     *
     * @type {string}
     *
     * @private
     */
    const defaultMethod = 'GET';
    /**
     * The list of valid HTTP methods associated with requests that could be routed.
     *
     * @type {Array<string>}
     *
     * @private
     */
    const validMethods = ['DELETE', 'GET', 'HEAD', 'PATCH', 'POST', 'PUT'];

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * @param {function()|Object} handler Either a function, or an object with a
     * 'handle' method.
     * @return {Object} An object with a handle method.
     *
     * @private
     */
    const normalizeHandler = handler => {
      if (handler && typeof handler === 'object') {
        {
          finalAssertExports.hasMethod(handler, 'handle', {
            moduleName: 'workbox-routing',
            className: 'Route',
            funcName: 'constructor',
            paramName: 'handler'
          });
        }
        return handler;
      } else {
        {
          finalAssertExports.isType(handler, 'function', {
            moduleName: 'workbox-routing',
            className: 'Route',
            funcName: 'constructor',
            paramName: 'handler'
          });
        }
        return {
          handle: handler
        };
      }
    };

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * A `Route` consists of a pair of callback functions, "match" and "handler".
     * The "match" callback determine if a route should be used to "handle" a
     * request by returning a non-falsy value if it can. The "handler" callback
     * is called when there is a match and should return a Promise that resolves
     * to a `Response`.
     *
     * @memberof workbox-routing
     */
    class Route {
      /**
       * Constructor for Route class.
       *
       * @param {workbox-routing~matchCallback} match
       * A callback function that determines whether the route matches a given
       * `fetch` event by returning a non-falsy value.
       * @param {workbox-routing~handlerCallback} handler A callback
       * function that returns a Promise resolving to a Response.
       * @param {string} [method='GET'] The HTTP method to match the Route
       * against.
       */
      constructor(match, handler, method = defaultMethod) {
        {
          finalAssertExports.isType(match, 'function', {
            moduleName: 'workbox-routing',
            className: 'Route',
            funcName: 'constructor',
            paramName: 'match'
          });
          if (method) {
            finalAssertExports.isOneOf(method, validMethods, {
              paramName: 'method'
            });
          }
        }
        // These values are referenced directly by Router so cannot be
        // altered by minificaton.
        this.handler = normalizeHandler(handler);
        this.match = match;
        this.method = method;
      }
      /**
       *
       * @param {workbox-routing-handlerCallback} handler A callback
       * function that returns a Promise resolving to a Response
       */
      setCatchHandler(handler) {
        this.catchHandler = normalizeHandler(handler);
      }
    }

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * RegExpRoute makes it easy to create a regular expression based
     * {@link workbox-routing.Route}.
     *
     * For same-origin requests the RegExp only needs to match part of the URL. For
     * requests against third-party servers, you must define a RegExp that matches
     * the start of the URL.
     *
     * @memberof workbox-routing
     * @extends workbox-routing.Route
     */
    class RegExpRoute extends Route {
      /**
       * If the regular expression contains
       * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},
       * the captured values will be passed to the
       * {@link workbox-routing~handlerCallback} `params`
       * argument.
       *
       * @param {RegExp} regExp The regular expression to match against URLs.
       * @param {workbox-routing~handlerCallback} handler A callback
       * function that returns a Promise resulting in a Response.
       * @param {string} [method='GET'] The HTTP method to match the Route
       * against.
       */
      constructor(regExp, handler, method) {
        {
          finalAssertExports.isInstance(regExp, RegExp, {
            moduleName: 'workbox-routing',
            className: 'RegExpRoute',
            funcName: 'constructor',
            paramName: 'pattern'
          });
        }
        const match = ({
          url
        }) => {
          const result = regExp.exec(url.href);
          // Return immediately if there's no match.
          if (!result) {
            return;
          }
          // Require that the match start at the first character in the URL string
          // if it's a cross-origin request.
          // See https://github.com/GoogleChrome/workbox/issues/281 for the context
          // behind this behavior.
          if (url.origin !== location.origin && result.index !== 0) {
            {
              logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` + `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` + `handle cross-origin requests if they match the entire URL.`);
            }
            return;
          }
          // If the route matches, but there aren't any capture groups defined, then
          // this will return [], which is truthy and therefore sufficient to
          // indicate a match.
          // If there are capture groups, then it will return their values.
          return result.slice(1);
        };
        super(match, handler, method);
      }
    }

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    const getFriendlyURL = url => {
      const urlObj = new URL(String(url), location.href);
      // See https://github.com/GoogleChrome/workbox/issues/2323
      // We want to include everything, except for the origin if it's same-origin.
      return urlObj.href.replace(new RegExp(`^${location.origin}`), '');
    };

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * The Router can be used to process a `FetchEvent` using one or more
     * {@link workbox-routing.Route}, responding with a `Response` if
     * a matching route exists.
     *
     * If no route matches a given a request, the Router will use a "default"
     * handler if one is defined.
     *
     * Should the matching Route throw an error, the Router will use a "catch"
     * handler if one is defined to gracefully deal with issues and respond with a
     * Request.
     *
     * If a request matches multiple routes, the **earliest** registered route will
     * be used to respond to the request.
     *
     * @memberof workbox-routing
     */
    class Router {
      /**
       * Initializes a new Router.
       */
      constructor() {
        this._routes = new Map();
        this._defaultHandlerMap = new Map();
      }
      /**
       * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP
       * method name ('GET', etc.) to an array of all the corresponding `Route`
       * instances that are registered.
       */
      get routes() {
        return this._routes;
      }
      /**
       * Adds a fetch event listener to respond to events when a route matches
       * the event's request.
       */
      addFetchListener() {
        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705
        self.addEventListener('fetch', event => {
          const {
            request
          } = event;
          const responsePromise = this.handleRequest({
            request,
            event
          });
          if (responsePromise) {
            event.respondWith(responsePromise);
          }
        });
      }
      /**
       * Adds a message event listener for URLs to cache from the window.
       * This is useful to cache resources loaded on the page prior to when the
       * service worker started controlling it.
       *
       * The format of the message data sent from the window should be as follows.
       * Where the `urlsToCache` array may consist of URL strings or an array of
       * URL string + `requestInit` object (the same as you'd pass to `fetch()`).
       *
       * ```
       * {
       *   type: 'CACHE_URLS',
       *   payload: {
       *     urlsToCache: [
       *       './script1.js',
       *       './script2.js',
       *       ['./script3.js', {mode: 'no-cors'}],
       *     ],
       *   },
       * }
       * ```
       */
      addCacheListener() {
        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705
        self.addEventListener('message', event => {
          // event.data is type 'any'
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          if (event.data && event.data.type === 'CACHE_URLS') {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const {
              payload
            } = event.data;
            {
              logger.debug(`Caching URLs from the window`, payload.urlsToCache);
            }
            const requestPromises = Promise.all(payload.urlsToCache.map(entry => {
              if (typeof entry === 'string') {
                entry = [entry];
              }
              const request = new Request(...entry);
              return this.handleRequest({
                request,
                event
              });
              // TODO(philipwalton): TypeScript errors without this typecast for
              // some reason (probably a bug). The real type here should work but
              // doesn't: `Array<Promise<Response> | undefined>`.
            })); // TypeScript
            event.waitUntil(requestPromises);
            // If a MessageChannel was used, reply to the message on success.
            if (event.ports && event.ports[0]) {
              void requestPromises.then(() => event.ports[0].postMessage(true));
            }
          }
        });
      }
      /**
       * Apply the routing rules to a FetchEvent object to get a Response from an
       * appropriate Route's handler.
       *
       * @param {Object} options
       * @param {Request} options.request The request to handle.
       * @param {ExtendableEvent} options.event The event that triggered the
       *     request.
       * @return {Promise<Response>|undefined} A promise is returned if a
       *     registered route can handle the request. If there is no matching
       *     route and there's no `defaultHandler`, `undefined` is returned.
       */
      handleRequest({
        request,
        event
      }) {
        {
          finalAssertExports.isInstance(request, Request, {
            moduleName: 'workbox-routing',
            className: 'Router',
            funcName: 'handleRequest',
            paramName: 'options.request'
          });
        }
        const url = new URL(request.url, location.href);
        if (!url.protocol.startsWith('http')) {
          {
            logger.debug(`Workbox Router only supports URLs that start with 'http'.`);
          }
          return;
        }
        const sameOrigin = url.origin === location.origin;
        const {
          params,
          route
        } = this.findMatchingRoute({
          event,
          request,
          sameOrigin,
          url
        });
        let handler = route && route.handler;
        const debugMessages = [];
        {
          if (handler) {
            debugMessages.push([`Found a route to handle this request:`, route]);
            if (params) {
              debugMessages.push([`Passing the following params to the route's handler:`, params]);
            }
          }
        }
        // If we don't have a handler because there was no matching route, then
        // fall back to defaultHandler if that's defined.
        const method = request.method;
        if (!handler && this._defaultHandlerMap.has(method)) {
          {
            debugMessages.push(`Failed to find a matching route. Falling ` + `back to the default handler for ${method}.`);
          }
          handler = this._defaultHandlerMap.get(method);
        }
        if (!handler) {
          {
            // No handler so Workbox will do nothing. If logs is set of debug
            // i.e. verbose, we should print out this information.
            logger.debug(`No route found for: ${getFriendlyURL(url)}`);
          }
          return;
        }
        {
          // We have a handler, meaning Workbox is going to handle the route.
          // print the routing details to the console.
          logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);
          debugMessages.forEach(msg => {
            if (Array.isArray(msg)) {
              logger.log(...msg);
            } else {
              logger.log(msg);
            }
          });
          logger.groupEnd();
        }
        // Wrap in try and catch in case the handle method throws a synchronous
        // error. It should still callback to the catch handler.
        let responsePromise;
        try {
          responsePromise = handler.handle({
            url,
            request,
            event,
            params
          });
        } catch (err) {
          responsePromise = Promise.reject(err);
        }
        // Get route's catch handler, if it exists
        const catchHandler = route && route.catchHandler;
        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {
          responsePromise = responsePromise.catch(async err => {
            // If there's a route catch handler, process that first
            if (catchHandler) {
              {
                // Still include URL here as it will be async from the console group
                // and may not make sense without the URL
                logger.groupCollapsed(`Error thrown when responding to: ` + ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);
                logger.error(`Error thrown by:`, route);
                logger.error(err);
                logger.groupEnd();
              }
              try {
                return await catchHandler.handle({
                  url,
                  request,
                  event,
                  params
                });
              } catch (catchErr) {
                if (catchErr instanceof Error) {
                  err = catchErr;
                }
              }
            }
            if (this._catchHandler) {
              {
                // Still include URL here as it will be async from the console group
                // and may not make sense without the URL
                logger.groupCollapsed(`Error thrown when responding to: ` + ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);
                logger.error(`Error thrown by:`, route);
                logger.error(err);
                logger.groupEnd();
              }
              return this._catchHandler.handle({
                url,
                request,
                event
              });
            }
            throw err;
          });
        }
        return responsePromise;
      }
      /**
       * Checks a request and URL (and optionally an event) against the list of
       * registered routes, and if there's a match, returns the corresponding
       * route along with any params generated by the match.
       *
       * @param {Object} options
       * @param {URL} options.url
       * @param {boolean} options.sameOrigin The result of comparing `url.origin`
       *     against the current origin.
       * @param {Request} options.request The request to match.
       * @param {Event} options.event The corresponding event.
       * @return {Object} An object with `route` and `params` properties.
       *     They are populated if a matching route was found or `undefined`
       *     otherwise.
       */
      findMatchingRoute({
        url,
        sameOrigin,
        request,
        event
      }) {
        const routes = this._routes.get(request.method) || [];
        for (const route of routes) {
          let params;
          // route.match returns type any, not possible to change right now.
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          const matchResult = route.match({
            url,
            sameOrigin,
            request,
            event
          });
          if (matchResult) {
            {
              // Warn developers that using an async matchCallback is almost always
              // not the right thing to do.
              if (matchResult instanceof Promise) {
                logger.warn(`While routing ${getFriendlyURL(url)}, an async ` + `matchCallback function was used. Please convert the ` + `following route to use a synchronous matchCallback function:`, route);
              }
            }
            // See https://github.com/GoogleChrome/workbox/issues/2079
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            params = matchResult;
            if (Array.isArray(params) && params.length === 0) {
              // Instead of passing an empty array in as params, use undefined.
              params = undefined;
            } else if (matchResult.constructor === Object &&
            // eslint-disable-line
            Object.keys(matchResult).length === 0) {
              // Instead of passing an empty object in as params, use undefined.
              params = undefined;
            } else if (typeof matchResult === 'boolean') {
              // For the boolean value true (rather than just something truth-y),
              // don't set params.
              // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353
              params = undefined;
            }
            // Return early if have a match.
            return {
              route,
              params
            };
          }
        }
        // If no match was found above, return and empty object.
        return {};
      }
      /**
       * Define a default `handler` that's called when no routes explicitly
       * match the incoming request.
       *
       * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.
       *
       * Without a default handler, unmatched requests will go against the
       * network as if there were no service worker present.
       *
       * @param {workbox-routing~handlerCallback} handler A callback
       * function that returns a Promise resulting in a Response.
       * @param {string} [method='GET'] The HTTP method to associate with this
       * default handler. Each method has its own default.
       */
      setDefaultHandler(handler, method = defaultMethod) {
        this._defaultHandlerMap.set(method, normalizeHandler(handler));
      }
      /**
       * If a Route throws an error while handling a request, this `handler`
       * will be called and given a chance to provide a response.
       *
       * @param {workbox-routing~handlerCallback} handler A callback
       * function that returns a Promise resulting in a Response.
       */
      setCatchHandler(handler) {
        this._catchHandler = normalizeHandler(handler);
      }
      /**
       * Registers a route with the router.
       *
       * @param {workbox-routing.Route} route The route to register.
       */
      registerRoute(route) {
        {
          finalAssertExports.isType(route, 'object', {
            moduleName: 'workbox-routing',
            className: 'Router',
            funcName: 'registerRoute',
            paramName: 'route'
          });
          finalAssertExports.hasMethod(route, 'match', {
            moduleName: 'workbox-routing',
            className: 'Router',
            funcName: 'registerRoute',
            paramName: 'route'
          });
          finalAssertExports.isType(route.handler, 'object', {
            moduleName: 'workbox-routing',
            className: 'Router',
            funcName: 'registerRoute',
            paramName: 'route'
          });
          finalAssertExports.hasMethod(route.handler, 'handle', {
            moduleName: 'workbox-routing',
            className: 'Router',
            funcName: 'registerRoute',
            paramName: 'route.handler'
          });
          finalAssertExports.isType(route.method, 'string', {
            moduleName: 'workbox-routing',
            className: 'Router',
            funcName: 'registerRoute',
            paramName: 'route.method'
          });
        }
        if (!this._routes.has(route.method)) {
          this._routes.set(route.method, []);
        }
        // Give precedence to all of the earlier routes by adding this additional
        // route to the end of the array.
        this._routes.get(route.method).push(route);
      }
      /**
       * Unregisters a route with the router.
       *
       * @param {workbox-routing.Route} route The route to unregister.
       */
      unregisterRoute(route) {
        if (!this._routes.has(route.method)) {
          throw new WorkboxError('unregister-route-but-not-found-with-method', {
            method: route.method
          });
        }
        const routeIndex = this._routes.get(route.method).indexOf(route);
        if (routeIndex > -1) {
          this._routes.get(route.method).splice(routeIndex, 1);
        } else {
          throw new WorkboxError('unregister-route-route-not-registered');
        }
      }
    }

    /*
      Copyright 2019 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    let defaultRouter;
    /**
     * Creates a new, singleton Router instance if one does not exist. If one
     * does already exist, that instance is returned.
     *
     * @private
     * @return {Router}
     */
    const getOrCreateDefaultRouter = () => {
      if (!defaultRouter) {
        defaultRouter = new Router();
        // The helpers that use the default Router assume these listeners exist.
        defaultRouter.addFetchListener();
        defaultRouter.addCacheListener();
      }
      return defaultRouter;
    };

    /*
      Copyright 2019 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * Easily register a RegExp, string, or function with a caching
     * strategy to a singleton Router instance.
     *
     * This method will generate a Route for you if needed and
     * call {@link workbox-routing.Router#registerRoute}.
     *
     * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture
     * If the capture param is a `Route`, all other arguments will be ignored.
     * @param {workbox-routing~handlerCallback} [handler] A callback
     * function that returns a Promise resulting in a Response. This parameter
     * is required if `capture` is not a `Route` object.
     * @param {string} [method='GET'] The HTTP method to match the Route
     * against.
     * @return {workbox-routing.Route} The generated `Route`.
     *
     * @memberof workbox-routing
     */
    function registerRoute(capture, handler, method) {
      let route;
      if (typeof capture === 'string') {
        const captureUrl = new URL(capture, location.href);
        {
          if (!(capture.startsWith('/') || capture.startsWith('http'))) {
            throw new WorkboxError('invalid-string', {
              moduleName: 'workbox-routing',
              funcName: 'registerRoute',
              paramName: 'capture'
            });
          }
          // We want to check if Express-style wildcards are in the pathname only.
          // TODO: Remove this log message in v4.
          const valueToCheck = capture.startsWith('http') ? captureUrl.pathname : capture;
          // See https://github.com/pillarjs/path-to-regexp#parameters
          const wildcards = '[*:?+]';
          if (new RegExp(`${wildcards}`).exec(valueToCheck)) {
            logger.debug(`The '$capture' parameter contains an Express-style wildcard ` + `character (${wildcards}). Strings are now always interpreted as ` + `exact matches; use a RegExp for partial or wildcard matches.`);
          }
        }
        const matchCallback = ({
          url
        }) => {
          {
            if (url.pathname === captureUrl.pathname && url.origin !== captureUrl.origin) {
              logger.debug(`${capture} only partially matches the cross-origin URL ` + `${url.toString()}. This route will only handle cross-origin requests ` + `if they match the entire URL.`);
            }
          }
          return url.href === captureUrl.href;
        };
        // If `capture` is a string then `handler` and `method` must be present.
        route = new Route(matchCallback, handler, method);
      } else if (capture instanceof RegExp) {
        // If `capture` is a `RegExp` then `handler` and `method` must be present.
        route = new RegExpRoute(capture, handler, method);
      } else if (typeof capture === 'function') {
        // If `capture` is a function then `handler` and `method` must be present.
        route = new Route(capture, handler, method);
      } else if (capture instanceof Route) {
        route = capture;
      } else {
        throw new WorkboxError('unsupported-route-type', {
          moduleName: 'workbox-routing',
          funcName: 'registerRoute',
          paramName: 'capture'
        });
      }
      const defaultRouter = getOrCreateDefaultRouter();
      defaultRouter.registerRoute(route);
      return route;
    }

    // @ts-ignore
    try {
      self['workbox:strategies:6.5.4'] && _();
    } catch (e) {}

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    const cacheOkAndOpaquePlugin = {
      /**
       * Returns a valid response (to allow caching) if the status is 200 (OK) or
       * 0 (opaque).
       *
       * @param {Object} options
       * @param {Response} options.response
       * @return {Response|null}
       *
       * @private
       */
      cacheWillUpdate: async ({
        response
      }) => {
        if (response.status === 200 || response.status === 0) {
          return response;
        }
        return null;
      }
    };

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    const _cacheNameDetails = {
      googleAnalytics: 'googleAnalytics',
      precache: 'precache-v2',
      prefix: 'workbox',
      runtime: 'runtime',
      suffix: typeof registration !== 'undefined' ? registration.scope : ''
    };
    const _createCacheName = cacheName => {
      return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix].filter(value => value && value.length > 0).join('-');
    };
    const eachCacheNameDetail = fn => {
      for (const key of Object.keys(_cacheNameDetails)) {
        fn(key);
      }
    };
    const cacheNames = {
      updateDetails: details => {
        eachCacheNameDetail(key => {
          if (typeof details[key] === 'string') {
            _cacheNameDetails[key] = details[key];
          }
        });
      },
      getGoogleAnalyticsName: userCacheName => {
        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);
      },
      getPrecacheName: userCacheName => {
        return userCacheName || _createCacheName(_cacheNameDetails.precache);
      },
      getPrefix: () => {
        return _cacheNameDetails.prefix;
      },
      getRuntimeName: userCacheName => {
        return userCacheName || _createCacheName(_cacheNameDetails.runtime);
      },
      getSuffix: () => {
        return _cacheNameDetails.suffix;
      }
    };

    /*
      Copyright 2020 Google LLC
      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    function stripParams(fullURL, ignoreParams) {
      const strippedURL = new URL(fullURL);
      for (const param of ignoreParams) {
        strippedURL.searchParams.delete(param);
      }
      return strippedURL.href;
    }
    /**
     * Matches an item in the cache, ignoring specific URL params. This is similar
     * to the `ignoreSearch` option, but it allows you to ignore just specific
     * params (while continuing to match on the others).
     *
     * @private
     * @param {Cache} cache
     * @param {Request} request
     * @param {Object} matchOptions
     * @param {Array<string>} ignoreParams
     * @return {Promise<Response|undefined>}
     */
    async function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {
      const strippedRequestURL = stripParams(request.url, ignoreParams);
      // If the request doesn't include any ignored params, match as normal.
      if (request.url === strippedRequestURL) {
        return cache.match(request, matchOptions);
      }
      // Otherwise, match by comparing keys
      const keysOptions = Object.assign(Object.assign({}, matchOptions), {
        ignoreSearch: true
      });
      const cacheKeys = await cache.keys(request, keysOptions);
      for (const cacheKey of cacheKeys) {
        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);
        if (strippedRequestURL === strippedCacheKeyURL) {
          return cache.match(cacheKey, matchOptions);
        }
      }
      return;
    }

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * The Deferred class composes Promises in a way that allows for them to be
     * resolved or rejected from outside the constructor. In most cases promises
     * should be used directly, but Deferreds can be necessary when the logic to
     * resolve a promise must be separate.
     *
     * @private
     */
    class Deferred {
      /**
       * Creates a promise and exposes its resolve and reject functions as methods.
       */
      constructor() {
        this.promise = new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
        });
      }
    }

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    // Callbacks to be executed whenever there's a quota error.
    // Can't change Function type right now.
    // eslint-disable-next-line @typescript-eslint/ban-types
    const quotaErrorCallbacks = new Set();

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * Runs all of the callback functions, one at a time sequentially, in the order
     * in which they were registered.
     *
     * @memberof workbox-core
     * @private
     */
    async function executeQuotaErrorCallbacks() {
      {
        logger.log(`About to run ${quotaErrorCallbacks.size} ` + `callbacks to clean up caches.`);
      }
      for (const callback of quotaErrorCallbacks) {
        await callback();
        {
          logger.log(callback, 'is complete.');
        }
      }
      {
        logger.log('Finished running callbacks.');
      }
    }

    /*
      Copyright 2019 Google LLC
      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * Returns a promise that resolves and the passed number of milliseconds.
     * This utility is an async/await-friendly version of `setTimeout`.
     *
     * @param {number} ms
     * @return {Promise}
     * @private
     */
    function timeout(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }

    /*
      Copyright 2020 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    function toRequest(input) {
      return typeof input === 'string' ? new Request(input) : input;
    }
    /**
     * A class created every time a Strategy instance instance calls
     * {@link workbox-strategies.Strategy~handle} or
     * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and
     * cache actions around plugin callbacks and keeps track of when the strategy
     * is "done" (i.e. all added `event.waitUntil()` promises have resolved).
     *
     * @memberof workbox-strategies
     */
    class StrategyHandler {
      /**
       * Creates a new instance associated with the passed strategy and event
       * that's handling the request.
       *
       * The constructor also initializes the state that will be passed to each of
       * the plugins handling this request.
       *
       * @param {workbox-strategies.Strategy} strategy
       * @param {Object} options
       * @param {Request|string} options.request A request to run this strategy for.
       * @param {ExtendableEvent} options.event The event associated with the
       *     request.
       * @param {URL} [options.url]
       * @param {*} [options.params] The return value from the
       *     {@link workbox-routing~matchCallback} (if applicable).
       */
      constructor(strategy, options) {
        this._cacheKeys = {};
        /**
         * The request the strategy is performing (passed to the strategy's
         * `handle()` or `handleAll()` method).
         * @name request
         * @instance
         * @type {Request}
         * @memberof workbox-strategies.StrategyHandler
         */
        /**
         * The event associated with this request.
         * @name event
         * @instance
         * @type {ExtendableEvent}
         * @memberof workbox-strategies.StrategyHandler
         */
        /**
         * A `URL` instance of `request.url` (if passed to the strategy's
         * `handle()` or `handleAll()` method).
         * Note: the `url` param will be present if the strategy was invoked
         * from a workbox `Route` object.
         * @name url
         * @instance
         * @type {URL|undefined}
         * @memberof workbox-strategies.StrategyHandler
         */
        /**
         * A `param` value (if passed to the strategy's
         * `handle()` or `handleAll()` method).
         * Note: the `param` param will be present if the strategy was invoked
         * from a workbox `Route` object and the
         * {@link workbox-routing~matchCallback} returned
         * a truthy value (it will be that value).
         * @name params
         * @instance
         * @type {*|undefined}
         * @memberof workbox-strategies.StrategyHandler
         */
        {
          finalAssertExports.isInstance(options.event, ExtendableEvent, {
            moduleName: 'workbox-strategies',
            className: 'StrategyHandler',
            funcName: 'constructor',
            paramName: 'options.event'
          });
        }
        Object.assign(this, options);
        this.event = options.event;
        this._strategy = strategy;
        this._handlerDeferred = new Deferred();
        this._extendLifetimePromises = [];
        // Copy the plugins list (since it's mutable on the strategy),
        // so any mutations don't affect this handler instance.
        this._plugins = [...strategy.plugins];
        this._pluginStateMap = new Map();
        for (const plugin of this._plugins) {
          this._pluginStateMap.set(plugin, {});
        }
        this.event.waitUntil(this._handlerDeferred.promise);
      }
      /**
       * Fetches a given request (and invokes any applicable plugin callback
       * methods) using the `fetchOptions` (for non-navigation requests) and
       * `plugins` defined on the `Strategy` object.
       *
       * The following plugin lifecycle methods are invoked when using this method:
       * - `requestWillFetch()`
       * - `fetchDidSucceed()`
       * - `fetchDidFail()`
       *
       * @param {Request|string} input The URL or request to fetch.
       * @return {Promise<Response>}
       */
      async fetch(input) {
        const {
          event
        } = this;
        let request = toRequest(input);
        if (request.mode === 'navigate' && event instanceof FetchEvent && event.preloadResponse) {
          const possiblePreloadResponse = await event.preloadResponse;
          if (possiblePreloadResponse) {
            {
              logger.log(`Using a preloaded navigation response for ` + `'${getFriendlyURL(request.url)}'`);
            }
            return possiblePreloadResponse;
          }
        }
        // If there is a fetchDidFail plugin, we need to save a clone of the
        // original request before it's either modified by a requestWillFetch
        // plugin or before the original request's body is consumed via fetch().
        const originalRequest = this.hasCallback('fetchDidFail') ? request.clone() : null;
        try {
          for (const cb of this.iterateCallbacks('requestWillFetch')) {
            request = await cb({
              request: request.clone(),
              event
            });
          }
        } catch (err) {
          if (err instanceof Error) {
            throw new WorkboxError('plugin-error-request-will-fetch', {
              thrownErrorMessage: err.message
            });
          }
        }
        // The request can be altered by plugins with `requestWillFetch` making
        // the original request (most likely from a `fetch` event) different
        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.
        const pluginFilteredRequest = request.clone();
        try {
          let fetchResponse;
          // See https://github.com/GoogleChrome/workbox/issues/1796
          fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);
          if ("development" !== 'production') {
            logger.debug(`Network request for ` + `'${getFriendlyURL(request.url)}' returned a response with ` + `status '${fetchResponse.status}'.`);
          }
          for (const callback of this.iterateCallbacks('fetchDidSucceed')) {
            fetchResponse = await callback({
              event,
              request: pluginFilteredRequest,
              response: fetchResponse
            });
          }
          return fetchResponse;
        } catch (error) {
          {
            logger.log(`Network request for ` + `'${getFriendlyURL(request.url)}' threw an error.`, error);
          }
          // `originalRequest` will only exist if a `fetchDidFail` callback
          // is being used (see above).
          if (originalRequest) {
            await this.runCallbacks('fetchDidFail', {
              error: error,
              event,
              originalRequest: originalRequest.clone(),
              request: pluginFilteredRequest.clone()
            });
          }
          throw error;
        }
      }
      /**
       * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on
       * the response generated by `this.fetch()`.
       *
       * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,
       * so you do not have to manually call `waitUntil()` on the event.
       *
       * @param {Request|string} input The request or URL to fetch and cache.
       * @return {Promise<Response>}
       */
      async fetchAndCachePut(input) {
        const response = await this.fetch(input);
        const responseClone = response.clone();
        void this.waitUntil(this.cachePut(input, responseClone));
        return response;
      }
      /**
       * Matches a request from the cache (and invokes any applicable plugin
       * callback methods) using the `cacheName`, `matchOptions`, and `plugins`
       * defined on the strategy object.
       *
       * The following plugin lifecycle methods are invoked when using this method:
       * - cacheKeyWillByUsed()
       * - cachedResponseWillByUsed()
       *
       * @param {Request|string} key The Request or URL to use as the cache key.
       * @return {Promise<Response|undefined>} A matching response, if found.
       */
      async cacheMatch(key) {
        const request = toRequest(key);
        let cachedResponse;
        const {
          cacheName,
          matchOptions
        } = this._strategy;
        const effectiveRequest = await this.getCacheKey(request, 'read');
        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), {
          cacheName
        });
        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);
        {
          if (cachedResponse) {
            logger.debug(`Found a cached response in '${cacheName}'.`);
          } else {
            logger.debug(`No cached response found in '${cacheName}'.`);
          }
        }
        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {
          cachedResponse = (await callback({
            cacheName,
            matchOptions,
            cachedResponse,
            request: effectiveRequest,
            event: this.event
          })) || undefined;
        }
        return cachedResponse;
      }
      /**
       * Puts a request/response pair in the cache (and invokes any applicable
       * plugin callback methods) using the `cacheName` and `plugins` defined on
       * the strategy object.
       *
       * The following plugin lifecycle methods are invoked when using this method:
       * - cacheKeyWillByUsed()
       * - cacheWillUpdate()
       * - cacheDidUpdate()
       *
       * @param {Request|string} key The request or URL to use as the cache key.
       * @param {Response} response The response to cache.
       * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response
       * not be cached, and `true` otherwise.
       */
      async cachePut(key, response) {
        const request = toRequest(key);
        // Run in the next task to avoid blocking other cache reads.
        // https://github.com/w3c/ServiceWorker/issues/1397
        await timeout(0);
        const effectiveRequest = await this.getCacheKey(request, 'write');
        {
          if (effectiveRequest.method && effectiveRequest.method !== 'GET') {
            throw new WorkboxError('attempt-to-cache-non-get-request', {
              url: getFriendlyURL(effectiveRequest.url),
              method: effectiveRequest.method
            });
          }
          // See https://github.com/GoogleChrome/workbox/issues/2818
          const vary = response.headers.get('Vary');
          if (vary) {
            logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` + `has a 'Vary: ${vary}' header. ` + `Consider setting the {ignoreVary: true} option on your strategy ` + `to ensure cache matching and deletion works as expected.`);
          }
        }
        if (!response) {
          {
            logger.error(`Cannot cache non-existent response for ` + `'${getFriendlyURL(effectiveRequest.url)}'.`);
          }
          throw new WorkboxError('cache-put-with-no-response', {
            url: getFriendlyURL(effectiveRequest.url)
          });
        }
        const responseToCache = await this._ensureResponseSafeToCache(response);
        if (!responseToCache) {
          {
            logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` + `will not be cached.`, responseToCache);
          }
          return false;
        }
        const {
          cacheName,
          matchOptions
        } = this._strategy;
        const cache = await self.caches.open(cacheName);
        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');
        const oldResponse = hasCacheUpdateCallback ? await cacheMatchIgnoreParams(
        // TODO(philipwalton): the `__WB_REVISION__` param is a precaching
        // feature. Consider into ways to only add this behavior if using
        // precaching.
        cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions) : null;
        {
          logger.debug(`Updating the '${cacheName}' cache with a new Response ` + `for ${getFriendlyURL(effectiveRequest.url)}.`);
        }
        try {
          await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);
        } catch (error) {
          if (error instanceof Error) {
            // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError
            if (error.name === 'QuotaExceededError') {
              await executeQuotaErrorCallbacks();
            }
            throw error;
          }
        }
        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {
          await callback({
            cacheName,
            oldResponse,
            newResponse: responseToCache.clone(),
            request: effectiveRequest,
            event: this.event
          });
        }
        return true;
      }
      /**
       * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and
       * executes any of those callbacks found in sequence. The final `Request`
       * object returned by the last plugin is treated as the cache key for cache
       * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have
       * been registered, the passed request is returned unmodified
       *
       * @param {Request} request
       * @param {string} mode
       * @return {Promise<Request>}
       */
      async getCacheKey(request, mode) {
        const key = `${request.url} | ${mode}`;
        if (!this._cacheKeys[key]) {
          let effectiveRequest = request;
          for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {
            effectiveRequest = toRequest(await callback({
              mode,
              request: effectiveRequest,
              event: this.event,
              // params has a type any can't change right now.
              params: this.params // eslint-disable-line
            }));
          }
          this._cacheKeys[key] = effectiveRequest;
        }
        return this._cacheKeys[key];
      }
      /**
       * Returns true if the strategy has at least one plugin with the given
       * callback.
       *
       * @param {string} name The name of the callback to check for.
       * @return {boolean}
       */
      hasCallback(name) {
        for (const plugin of this._strategy.plugins) {
          if (name in plugin) {
            return true;
          }
        }
        return false;
      }
      /**
       * Runs all plugin callbacks matching the given name, in order, passing the
       * given param object (merged ith the current plugin state) as the only
       * argument.
       *
       * Note: since this method runs all plugins, it's not suitable for cases
       * where the return value of a callback needs to be applied prior to calling
       * the next callback. See
       * {@link workbox-strategies.StrategyHandler#iterateCallbacks}
       * below for how to handle that case.
       *
       * @param {string} name The name of the callback to run within each plugin.
       * @param {Object} param The object to pass as the first (and only) param
       *     when executing each callback. This object will be merged with the
       *     current plugin state prior to callback execution.
       */
      async runCallbacks(name, param) {
        for (const callback of this.iterateCallbacks(name)) {
          // TODO(philipwalton): not sure why `any` is needed. It seems like
          // this should work with `as WorkboxPluginCallbackParam[C]`.
          await callback(param);
        }
      }
      /**
       * Accepts a callback and returns an iterable of matching plugin callbacks,
       * where each callback is wrapped with the current handler state (i.e. when
       * you call each callback, whatever object parameter you pass it will
       * be merged with the plugin's current state).
       *
       * @param {string} name The name fo the callback to run
       * @return {Array<Function>}
       */
      *iterateCallbacks(name) {
        for (const plugin of this._strategy.plugins) {
          if (typeof plugin[name] === 'function') {
            const state = this._pluginStateMap.get(plugin);
            const statefulCallback = param => {
              const statefulParam = Object.assign(Object.assign({}, param), {
                state
              });
              // TODO(philipwalton): not sure why `any` is needed. It seems like
              // this should work with `as WorkboxPluginCallbackParam[C]`.
              return plugin[name](statefulParam);
            };
            yield statefulCallback;
          }
        }
      }
      /**
       * Adds a promise to the
       * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}
       * of the event event associated with the request being handled (usually a
       * `FetchEvent`).
       *
       * Note: you can await
       * {@link workbox-strategies.StrategyHandler~doneWaiting}
       * to know when all added promises have settled.
       *
       * @param {Promise} promise A promise to add to the extend lifetime promises
       *     of the event that triggered the request.
       */
      waitUntil(promise) {
        this._extendLifetimePromises.push(promise);
        return promise;
      }
      /**
       * Returns a promise that resolves once all promises passed to
       * {@link workbox-strategies.StrategyHandler~waitUntil}
       * have settled.
       *
       * Note: any work done after `doneWaiting()` settles should be manually
       * passed to an event's `waitUntil()` method (not this handler's
       * `waitUntil()` method), otherwise the service worker thread my be killed
       * prior to your work completing.
       */
      async doneWaiting() {
        let promise;
        while (promise = this._extendLifetimePromises.shift()) {
          await promise;
        }
      }
      /**
       * Stops running the strategy and immediately resolves any pending
       * `waitUntil()` promises.
       */
      destroy() {
        this._handlerDeferred.resolve(null);
      }
      /**
       * This method will call cacheWillUpdate on the available plugins (or use
       * status === 200) to determine if the Response is safe and valid to cache.
       *
       * @param {Request} options.request
       * @param {Response} options.response
       * @return {Promise<Response|undefined>}
       *
       * @private
       */
      async _ensureResponseSafeToCache(response) {
        let responseToCache = response;
        let pluginsUsed = false;
        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {
          responseToCache = (await callback({
            request: this.request,
            response: responseToCache,
            event: this.event
          })) || undefined;
          pluginsUsed = true;
          if (!responseToCache) {
            break;
          }
        }
        if (!pluginsUsed) {
          if (responseToCache && responseToCache.status !== 200) {
            responseToCache = undefined;
          }
          {
            if (responseToCache) {
              if (responseToCache.status !== 200) {
                if (responseToCache.status === 0) {
                  logger.warn(`The response for '${this.request.url}' ` + `is an opaque response. The caching strategy that you're ` + `using will not cache opaque responses by default.`);
                } else {
                  logger.debug(`The response for '${this.request.url}' ` + `returned a status code of '${response.status}' and won't ` + `be cached as a result.`);
                }
              }
            }
          }
        }
        return responseToCache;
      }
    }

    /*
      Copyright 2020 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * An abstract base class that all other strategy classes must extend from:
     *
     * @memberof workbox-strategies
     */
    class Strategy {
      /**
       * Creates a new instance of the strategy and sets all documented option
       * properties as public instance properties.
       *
       * Note: if a custom strategy class extends the base Strategy class and does
       * not need more than these properties, it does not need to define its own
       * constructor.
       *
       * @param {Object} [options]
       * @param {string} [options.cacheName] Cache name to store and retrieve
       * requests. Defaults to the cache names provided by
       * {@link workbox-core.cacheNames}.
       * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}
       * to use in conjunction with this caching strategy.
       * @param {Object} [options.fetchOptions] Values passed along to the
       * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)
       * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)
       * `fetch()` requests made by this strategy.
       * @param {Object} [options.matchOptions] The
       * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}
       * for any `cache.match()` or `cache.put()` calls made by this strategy.
       */
      constructor(options = {}) {
        /**
         * Cache name to store and retrieve
         * requests. Defaults to the cache names provided by
         * {@link workbox-core.cacheNames}.
         *
         * @type {string}
         */
        this.cacheName = cacheNames.getRuntimeName(options.cacheName);
        /**
         * The list
         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}
         * used by this strategy.
         *
         * @type {Array<Object>}
         */
        this.plugins = options.plugins || [];
        /**
         * Values passed along to the
         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}
         * of all fetch() requests made by this strategy.
         *
         * @type {Object}
         */
        this.fetchOptions = options.fetchOptions;
        /**
         * The
         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}
         * for any `cache.match()` or `cache.put()` calls made by this strategy.
         *
         * @type {Object}
         */
        this.matchOptions = options.matchOptions;
      }
      /**
       * Perform a request strategy and returns a `Promise` that will resolve with
       * a `Response`, invoking all relevant plugin callbacks.
       *
       * When a strategy instance is registered with a Workbox
       * {@link workbox-routing.Route}, this method is automatically
       * called when the route matches.
       *
       * Alternatively, this method can be used in a standalone `FetchEvent`
       * listener by passing it to `event.respondWith()`.
       *
       * @param {FetchEvent|Object} options A `FetchEvent` or an object with the
       *     properties listed below.
       * @param {Request|string} options.request A request to run this strategy for.
       * @param {ExtendableEvent} options.event The event associated with the
       *     request.
       * @param {URL} [options.url]
       * @param {*} [options.params]
       */
      handle(options) {
        const [responseDone] = this.handleAll(options);
        return responseDone;
      }
      /**
       * Similar to {@link workbox-strategies.Strategy~handle}, but
       * instead of just returning a `Promise` that resolves to a `Response` it
       * it will return an tuple of `[response, done]` promises, where the former
       * (`response`) is equivalent to what `handle()` returns, and the latter is a
       * Promise that will resolve once any promises that were added to
       * `event.waitUntil()` as part of performing the strategy have completed.
       *
       * You can await the `done` promise to ensure any extra work performed by
       * the strategy (usually caching responses) completes successfully.
       *
       * @param {FetchEvent|Object} options A `FetchEvent` or an object with the
       *     properties listed below.
       * @param {Request|string} options.request A request to run this strategy for.
       * @param {ExtendableEvent} options.event The event associated with the
       *     request.
       * @param {URL} [options.url]
       * @param {*} [options.params]
       * @return {Array<Promise>} A tuple of [response, done]
       *     promises that can be used to determine when the response resolves as
       *     well as when the handler has completed all its work.
       */
      handleAll(options) {
        // Allow for flexible options to be passed.
        if (options instanceof FetchEvent) {
          options = {
            event: options,
            request: options.request
          };
        }
        const event = options.event;
        const request = typeof options.request === 'string' ? new Request(options.request) : options.request;
        const params = 'params' in options ? options.params : undefined;
        const handler = new StrategyHandler(this, {
          event,
          request,
          params
        });
        const responseDone = this._getResponse(handler, request, event);
        const handlerDone = this._awaitComplete(responseDone, handler, request, event);
        // Return an array of promises, suitable for use with Promise.all().
        return [responseDone, handlerDone];
      }
      async _getResponse(handler, request, event) {
        await handler.runCallbacks('handlerWillStart', {
          event,
          request
        });
        let response = undefined;
        try {
          response = await this._handle(request, handler);
          // The "official" Strategy subclasses all throw this error automatically,
          // but in case a third-party Strategy doesn't, ensure that we have a
          // consistent failure when there's no response or an error response.
          if (!response || response.type === 'error') {
            throw new WorkboxError('no-response', {
              url: request.url
            });
          }
        } catch (error) {
          if (error instanceof Error) {
            for (const callback of handler.iterateCallbacks('handlerDidError')) {
              response = await callback({
                error,
                event,
                request
              });
              if (response) {
                break;
              }
            }
          }
          if (!response) {
            throw error;
          } else {
            logger.log(`While responding to '${getFriendlyURL(request.url)}', ` + `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` + `a handlerDidError plugin.`);
          }
        }
        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {
          response = await callback({
            event,
            request,
            response
          });
        }
        return response;
      }
      async _awaitComplete(responseDone, handler, request, event) {
        let response;
        let error;
        try {
          response = await responseDone;
        } catch (error) {
          // Ignore errors, as response errors should be caught via the `response`
          // promise above. The `done` promise will only throw for errors in
          // promises passed to `handler.waitUntil()`.
        }
        try {
          await handler.runCallbacks('handlerDidRespond', {
            event,
            request,
            response
          });
          await handler.doneWaiting();
        } catch (waitUntilError) {
          if (waitUntilError instanceof Error) {
            error = waitUntilError;
          }
        }
        await handler.runCallbacks('handlerDidComplete', {
          event,
          request,
          response,
          error: error
        });
        handler.destroy();
        if (error) {
          throw error;
        }
      }
    }
    /**
     * Classes extending the `Strategy` based class should implement this method,
     * and leverage the {@link workbox-strategies.StrategyHandler}
     * arg to perform all fetching and cache logic, which will ensure all relevant
     * cache, cache options, fetch options and plugins are used (per the current
     * strategy instance).
     *
     * @name _handle
     * @instance
     * @abstract
     * @function
     * @param {Request} request
     * @param {workbox-strategies.StrategyHandler} handler
     * @return {Promise<Response>}
     *
     * @memberof workbox-strategies.Strategy
     */

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    const messages = {
      strategyStart: (strategyName, request) => `Using ${strategyName} to respond to '${getFriendlyURL(request.url)}'`,
      printFinalResponse: response => {
        if (response) {
          logger.groupCollapsed(`View the final response here.`);
          logger.log(response || '[No response returned]');
          logger.groupEnd();
        }
      }
    };

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * An implementation of a
     * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)
     * request strategy.
     *
     * By default, this strategy will cache responses with a 200 status code as
     * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).
     * Opaque responses are are cross-origin requests where the response doesn't
     * support [CORS](https://enable-cors.org/).
     *
     * If the network request fails, and there is no cache match, this will throw
     * a `WorkboxError` exception.
     *
     * @extends workbox-strategies.Strategy
     * @memberof workbox-strategies
     */
    class NetworkFirst extends Strategy {
      /**
       * @param {Object} [options]
       * @param {string} [options.cacheName] Cache name to store and retrieve
       * requests. Defaults to cache names provided by
       * {@link workbox-core.cacheNames}.
       * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}
       * to use in conjunction with this caching strategy.
       * @param {Object} [options.fetchOptions] Values passed along to the
       * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)
       * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)
       * `fetch()` requests made by this strategy.
       * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)
       * @param {number} [options.networkTimeoutSeconds] If set, any network requests
       * that fail to respond within the timeout will fallback to the cache.
       *
       * This option can be used to combat
       * "[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}"
       * scenarios.
       */
      constructor(options = {}) {
        super(options);
        // If this instance contains no plugins with a 'cacheWillUpdate' callback,
        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.
        if (!this.plugins.some(p => 'cacheWillUpdate' in p)) {
          this.plugins.unshift(cacheOkAndOpaquePlugin);
        }
        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;
        {
          if (this._networkTimeoutSeconds) {
            finalAssertExports.isType(this._networkTimeoutSeconds, 'number', {
              moduleName: 'workbox-strategies',
              className: this.constructor.name,
              funcName: 'constructor',
              paramName: 'networkTimeoutSeconds'
            });
          }
        }
      }
      /**
       * @private
       * @param {Request|string} request A request to run this strategy for.
       * @param {workbox-strategies.StrategyHandler} handler The event that
       *     triggered the request.
       * @return {Promise<Response>}
       */
      async _handle(request, handler) {
        const logs = [];
        {
          finalAssertExports.isInstance(request, Request, {
            moduleName: 'workbox-strategies',
            className: this.constructor.name,
            funcName: 'handle',
            paramName: 'makeRequest'
          });
        }
        const promises = [];
        let timeoutId;
        if (this._networkTimeoutSeconds) {
          const {
            id,
            promise
          } = this._getTimeoutPromise({
            request,
            logs,
            handler
          });
          timeoutId = id;
          promises.push(promise);
        }
        const networkPromise = this._getNetworkPromise({
          timeoutId,
          request,
          logs,
          handler
        });
        promises.push(networkPromise);
        const response = await handler.waitUntil((async () => {
          // Promise.race() will resolve as soon as the first promise resolves.
          return (await handler.waitUntil(Promise.race(promises))) || (
          // If Promise.race() resolved with null, it might be due to a network
          // timeout + a cache miss. If that were to happen, we'd rather wait until
          // the networkPromise resolves instead of returning null.
          // Note that it's fine to await an already-resolved promise, so we don't
          // have to check to see if it's still "in flight".
          await networkPromise);
        })());
        {
          logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));
          for (const log of logs) {
            logger.log(log);
          }
          messages.printFinalResponse(response);
          logger.groupEnd();
        }
        if (!response) {
          throw new WorkboxError('no-response', {
            url: request.url
          });
        }
        return response;
      }
      /**
       * @param {Object} options
       * @param {Request} options.request
       * @param {Array} options.logs A reference to the logs array
       * @param {Event} options.event
       * @return {Promise<Response>}
       *
       * @private
       */
      _getTimeoutPromise({
        request,
        logs,
        handler
      }) {
        let timeoutId;
        const timeoutPromise = new Promise(resolve => {
          const onNetworkTimeout = async () => {
            {
              logs.push(`Timing out the network response at ` + `${this._networkTimeoutSeconds} seconds.`);
            }
            resolve(await handler.cacheMatch(request));
          };
          timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);
        });
        return {
          promise: timeoutPromise,
          id: timeoutId
        };
      }
      /**
       * @param {Object} options
       * @param {number|undefined} options.timeoutId
       * @param {Request} options.request
       * @param {Array} options.logs A reference to the logs Array.
       * @param {Event} options.event
       * @return {Promise<Response>}
       *
       * @private
       */
      async _getNetworkPromise({
        timeoutId,
        request,
        logs,
        handler
      }) {
        let error;
        let response;
        try {
          response = await handler.fetchAndCachePut(request);
        } catch (fetchError) {
          if (fetchError instanceof Error) {
            error = fetchError;
          }
        }
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        {
          if (response) {
            logs.push(`Got response from network.`);
          } else {
            logs.push(`Unable to get a response from the network. Will respond ` + `with a cached response.`);
          }
        }
        if (error || !response) {
          response = await handler.cacheMatch(request);
          {
            if (response) {
              logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);
            } else {
              logs.push(`No response found in the '${this.cacheName}' cache.`);
            }
          }
        }
        return response;
      }
    }

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * An implementation of a
     * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)
     * request strategy.
     *
     * This class is useful if you want to take advantage of any
     * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).
     *
     * If the network request fails, this will throw a `WorkboxError` exception.
     *
     * @extends workbox-strategies.Strategy
     * @memberof workbox-strategies
     */
    class NetworkOnly extends Strategy {
      /**
       * @param {Object} [options]
       * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}
       * to use in conjunction with this caching strategy.
       * @param {Object} [options.fetchOptions] Values passed along to the
       * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)
       * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)
       * `fetch()` requests made by this strategy.
       * @param {number} [options.networkTimeoutSeconds] If set, any network requests
       * that fail to respond within the timeout will result in a network error.
       */
      constructor(options = {}) {
        super(options);
        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;
      }
      /**
       * @private
       * @param {Request|string} request A request to run this strategy for.
       * @param {workbox-strategies.StrategyHandler} handler The event that
       *     triggered the request.
       * @return {Promise<Response>}
       */
      async _handle(request, handler) {
        {
          finalAssertExports.isInstance(request, Request, {
            moduleName: 'workbox-strategies',
            className: this.constructor.name,
            funcName: '_handle',
            paramName: 'request'
          });
        }
        let error = undefined;
        let response;
        try {
          const promises = [handler.fetch(request)];
          if (this._networkTimeoutSeconds) {
            const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);
            promises.push(timeoutPromise);
          }
          response = await Promise.race(promises);
          if (!response) {
            throw new Error(`Timed out the network response after ` + `${this._networkTimeoutSeconds} seconds.`);
          }
        } catch (err) {
          if (err instanceof Error) {
            error = err;
          }
        }
        {
          logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));
          if (response) {
            logger.log(`Got response from network.`);
          } else {
            logger.log(`Unable to get a response from the network.`);
          }
          messages.printFinalResponse(response);
          logger.groupEnd();
        }
        if (!response) {
          throw new WorkboxError('no-response', {
            url: request.url,
            error
          });
        }
        return response;
      }
    }

    /*
      Copyright 2019 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * Claim any currently available clients once the service worker
     * becomes active. This is normally used in conjunction with `skipWaiting()`.
     *
     * @memberof workbox-core
     */
    function clientsClaim() {
      self.addEventListener('activate', () => self.clients.claim());
    }

    exports.NetworkFirst = NetworkFirst;
    exports.NetworkOnly = NetworkOnly;
    exports.clientsClaim = clientsClaim;
    exports.registerRoute = registerRoute;

}));



// =========================================
// 1. src\components\Filters\CourierFilter.js
// =========================================



// =========================================
// 2. src\components\Filters\StatusFilter.js
// =========================================



// =========================================
// 1. src\components\OrderModal\index.js
// =========================================

// components/OrderModal/index.js
import OrderModal from './OrderModal';
import WithCourier from './WithCourier';
import WithoutCourier from './WithoutCourier';

export { OrderModal, WithCourier, WithoutCourier };


// =========================================
// 2. src\components\OrderModal\OrderModal.js
// =========================================

// components/OrderModal/OrderModal.js
import React from 'react';

const OrderModal = ({ 
  pedido, 
  isOpen, 
  onClose, 
  children 
}) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Conteúdo específico (será injetado via children) */}
          {children}
        </div>
      </div>
    </div>
  );
};

export default OrderModal;


// =========================================
// 3. src\components\OrderModal\WithCourier.js
// =========================================

// components/OrderModal/WithCourier.js
import React from 'react';

const WithCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Entregador */}
      <div className="mb-6 p-4 bg-purple-50 rounded">
        <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
        <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithCourier;


// =========================================
// 4. src\components\OrderModal\WithoutCourier.js
// =========================================

// components/OrderModal/WithoutCourier.js
import React from 'react';

const WithoutCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithoutCourier;


// =========================================
// 1. src\components\DeliveryStatus.js
// =========================================

 



// =========================================
// 2. src\components\EditLojaModal.js
// =========================================

// components/EditLojaModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';

export default function EditLojaModal({ isOpen, onClose, loja }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  useEffect(() => {
    if (isOpen && loja) {
      setFormData({
        veiculo: loja.veiculo || '',
        carga_maxima: loja.carga_maxima || '',
        perimetro_entrega: loja.perimetro_entrega || ''
      });
    }
  }, [isOpen, loja]);

  const handleSave = async () => {
    try {
      setLoading(true);
      
      const { error } = await supabase
        .from('loja_associada')
        .update({
          veiculo: formData.veiculo,
          carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
          perimetro_entrega: formData.perimetro_entrega
        })
        .eq('id', loja.id);

      if (error) throw error;

      alert('Dados da loja atualizados com sucesso!');
      onClose();
      window.location.reload();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      alert('Erro ao atualizar dados da loja');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">🏪 Editar Loja: {loja.loja_nome}</h2>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm font-medium text-gray-700">Veículo</label>
            <select
              value={formData.veiculo}
              onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            >
              <option value="">Selecione o veículo</option>
              <option value="carro">Carro</option>
              <option value="moto">Moto</option>
              <option value="bicicleta">Bicicleta</option>
              <option value="caminhao">Caminhão</option>
              <option value="van">Van</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Carga Máxima (kg)</label>
            <input
              type="number"
              value={formData.carga_maxima}
              onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Perímetro de Entrega</label>
            <input
              type="text"
              value={formData.perimetro_entrega}
              onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 rounded"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-blue-600 text-white py-2 rounded disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 3. src\components\EditProfileModal.js
// =========================================

// components/EditProfileModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDIÇÃO DE PERFIL
// ==============================================================================
export default function EditProfileModal({ isOpen, onClose, userProfile, userRole, userLojas }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: '',
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  // ============================================================================
  // 1. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setFormData({
        nome_completo: userProfile.nome_completo || '',
        nome_usuario: userProfile.nome_usuario || '',
        telefone: userProfile.telefone || '',
        foto: userProfile.foto || '',
        veiculo: userLojas[0]?.veiculo || '',
        carga_maxima: userLojas[0]?.carga_maxima || '',
        perimetro_entrega: userLojas[0]?.perimetro_entrega || ''
      });
    }
  }, [isOpen, userProfile, userLojas]);

  // ============================================================================
  // 2. FUNÇÃO: SALVAR ALTERAÇÕES
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);

      const { error: userError } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (userError) throw userError;

      if (userRole === 'entregador' && userLojas.length > 0) {
        const { error: lojaError } = await supabase
          .from('loja_associada')
          .update({
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          })
          .eq('uid_usuario', userProfile.uid)
          .eq('id_loja', userLojas[0].id_loja);

        if (lojaError) throw lojaError;
      }

      alert('Perfil atualizado com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      alert('Erro ao atualizar perfil');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw max-h-95vh overflow-y-auto">
        
        {/* CABEÇALHO */}
        <h2 className="text-xl font-bold mb-4 text-gray-800">✏️ Editar Perfil</h2>
        
        {/* CAMPOS DO FORMULÁRIO */}
        <div className="space-y-4">
          {/* NOME COMPLETO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome Completo
            </label>
            <input
              type="text"
              value={formData.nome_completo}
              onChange={(e) => setFormData({...formData, nome_completo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome completo"
            />
          </div>

          {/* NOME DE USUÁRIO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome de Usuário
            </label>
            <input
              type="text"
              value={formData.nome_usuario}
              onChange={(e) => setFormData({...formData, nome_usuario: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome de usuário"
            />
          </div>

          {/* TELEFONE */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone
            </label>
            <input
              type="tel"
              value={formData.telefone}
              onChange={(e) => setFormData({...formData, telefone: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="(11) 99999-9999"
            />
          </div>

          {/* FOTO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL da Foto
            </label>
            <input
              type="url"
              value={formData.foto}
              onChange={(e) => setFormData({...formData, foto: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="https://exemplo.com/foto.jpg"
            />
          </div>

          {/* CAMPOS ESPECÍFICOS PARA ENTREGADORES */}
          {userRole === 'entregador' && (
            <>
              {/* VEÍCULO */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Veículo
                </label>
                <select
                  value={formData.veiculo}
                  onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                >
                  <option value="">Selecione o veículo</option>
                  <option value="carro">Carro</option>
                  <option value="moto">Moto</option>
                  <option value="bicicleta">Bicicleta</option>
                  <option value="caminhao">Caminhão</option>
                  <option value="van">Van</option>
                </select>
              </div>

              {/* CARGA MÁXIMA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Carga Máxima (kg)
                </label>
                <input
                  type="number"
                  value={formData.carga_maxima}
                  onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: 50"
                />
              </div>

              {/* PERÍMETRO DE ENTREGA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Perímetro de Entrega
                </label>
                <input
                  type="text"
                  value={formData.perimetro_entrega}
                  onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: Zona Norte, até 10km"
                />
              </div>
            </>
          )}
        </div>

        {/* BOTÕES DE AÇÃO */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded font-medium hover:bg-gray-400 transition-colors"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-purple-600 text-white py-2 px-4 rounded font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 4. src\components\EditUsuarioModal.js
// =========================================

// components/EditUsuarioModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';

// ==============================================================================
// MODAL DE EDIÇÃO SIMPLIFICADA: APENAS TELEFONE E FOTO
// ==============================================================================
export default function EditUsuarioModal({ isOpen, onClose, userProfile }) {
  // ============================================================================
  // 1. DEFINIÇÃO DE ESTADOS
  // ============================================================================
  const [loading, setLoading] = useState(false);
  const [telefone, setTelefone] = useState('');
  const [foto, setFoto] = useState('');
  const [selectedFile, setSelectedFile] = useState(null);
  const [error, setError] = useState('');
  const [showRemovePhoto, setShowRemovePhoto] = useState(false);

  // ============================================================================
  // 2. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setTelefone(userProfile.telefone || '');
      setFoto(userProfile.foto || '');
    }
  }, [isOpen, userProfile]);

  // ============================================================================
  // 3. FUNÇÃO: NORMALIZAR NOME DO ARQUIVO
  // ============================================================================
  const normalizeFileName = (fileName) => {
    return fileName
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^a-zA-Z0-9.-]/g, '_');
  };

  // ============================================================================
  // 4. FUNÇÃO: ATUALIZAR ARQUIVO DE FOTO
  // ============================================================================
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        setError('Por favor, selecione um arquivo de imagem.');
        setSelectedFile(null);
        return;
      }
      if (file.size > 5 * 1024 * 1024) {
        setError('O arquivo excede o limite de 5MB.');
        setSelectedFile(null);
        return;
      }
      setSelectedFile(file);
      setError('');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: SALVAR ALTERAÇÕES (APENAS TELEFONE E FOTO)
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);
      setError('');

      let photoUrl = foto;
      let oldFileFullPath = null;

      // Identifica foto antiga para possível exclusão
      if (foto) {
        const url = new URL(foto);
        const pathParts = url.pathname.split('/');
        oldFileFullPath = pathParts.slice(4).join('/');
      }

      // Upload da nova foto (se houver)
      if (selectedFile) {
        const baseName = normalizeFileName(selectedFile.name);
        const fileName = `${userProfile.uid}-${Date.now()}-${baseName}`;
        const fullPath = `fotos/${fileName}`;
        
        const { error: uploadError } = await supabase.storage
          .from('box')
          .upload(fullPath, selectedFile, {
            cacheControl: '3600',
            upsert: false,
          });

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('box')
          .getPublicUrl(fullPath);
        photoUrl = urlData.publicUrl;
      }

      // Atualiza APENAS telefone e foto no banco
      const { error: updateError } = await supabase
        .from('usuarios')
        .update({
          telefone: telefone,
          foto: photoUrl
        })
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      // Remove foto antiga se foi feita substituição
      if (oldFileFullPath && selectedFile) {
        try {
          await supabase.storage
            .from('box')
            .remove([oldFileFullPath]);
        } catch (deleteError) {
          console.warn('Aviso: Foto antiga não pôde ser removida:', deleteError);
        }
      }

      alert('Dados atualizados com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      setError(error.message || 'Erro ao atualizar dados. Tente novamente.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: REMOVER FOTO
  // ============================================================================
  const handleRemovePhoto = async () => {
    if (!foto) return;
    
    try {
      const url = new URL(foto);
      const pathParts = url.pathname.split('/');
      const fullPath = pathParts.slice(4).join('/');
      
      const { error: removeError } = await supabase.storage
        .from('box')
        .remove([fullPath]);
      
      if (removeError) throw removeError;
      
      // Atualiza estado local e banco
      setFoto('');
      const { error: updateError } = await supabase
        .from('usuarios')
        .update({ foto: '' })
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      setShowRemovePhoto(false);
      setSelectedFile(null);
      setError('');
      
      alert('Foto removida com sucesso!');
      
    } catch (error) {
      console.error('Erro ao remover foto:', error);
      setError('Erro ao remover foto. Tente novamente.');
    }
  };

  // ============================================================================
  // 7. RENDERIZAÇÃO DO MODAL SIMPLIFICADO
  // ============================================================================
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">
          ✏️ Editar Telefone e Foto
        </h2>
        
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-600 p-2 mb-4 rounded">
            {error}
          </div>
        )}

        <div className="space-y-4">
          {/* Campo Telefone */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone *
            </label>
            <input
              type="tel"
              value={telefone}
              onChange={(e) => setTelefone(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 focus:ring-2 focus:ring-purple-500"
              required
              disabled={loading}
            />
          </div>

          {/* Seção de Foto de Perfil */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Foto de Perfil
            </label>
            
            {/* Preview da foto atual */}
            {foto && (
              <div className="relative inline-block mb-3">
                <img
                  src={foto}
                  alt="Foto atual do perfil"
                  className="h-20 w-20 object-cover rounded-full border-2 border-gray-200"
                />
                <button
                  type="button"
                  onClick={() => setShowRemovePhoto(true)}
                  className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold hover:bg-red-600"
                  disabled={loading}
                >
                  ×
                </button>
              </div>
            )}

            {/* Input para nova foto */}
            <input
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-purple-600 file:text-white hover:file:bg-purple-700"
              disabled={loading}
            />
            <p className="text-xs text-gray-500 mt-2">
              Escolha uma imagem (máx. 5MB). Formatos: JPG, PNG, GIF.
            </p>
          </div>
        </div>

        {/* Botões de Ação */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-200 text-gray-700 py-2 rounded font-medium hover:bg-gray-300"
            disabled={loading}
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading || !telefone.trim()}
            className="flex-1 bg-purple-600 text-white py-2 rounded font-medium hover:bg-purple-700 disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar Alterações'}
          </button>
        </div>
      </div>

      {/* Modal de Confirmação para Remover Foto */}
      {showRemovePhoto && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-60">
          <div className="bg-white p-6 rounded-lg w-80 shadow-xl">
            <h3 className="text-lg font-bold text-gray-800 mb-3">Remover Foto</h3>
            <p className="text-gray-600 mb-5">
              Tem certeza que deseja remover sua foto de perfil?
            </p>
            <div className="flex gap-3">
              <button
                onClick={() => setShowRemovePhoto(false)}
                className="flex-1 bg-gray-200 text-gray-700 py-2 rounded font-medium hover:bg-gray-300"
              >
                Manter Foto
              </button>
              <button
                onClick={handleRemovePhoto}
                className="flex-1 bg-red-600 text-white py-2 rounded font-medium hover:bg-red-700"
              >
                Remover
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


// =========================================
// 5. src\components\Header.js
// =========================================

// components/Header.js
export default function Header({ toggleSidebar, showMenuButton = true, title }) {
  return (
    <header className="bg-white shadow-sm border-b border-gray-200">
      <div className="flex items-center justify-between px-4 py-3">
        
        {/* ================================================================== */}
        {/* BOTÃO HAMBURGUER (CONDICIONAL) */}
        {/* ================================================================== */}
        <div className="flex items-center">
          {showMenuButton && (
            <button
              onClick={toggleSidebar}
              className="lg:hidden p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100"
              aria-label="Abrir menu"
            >
              {/* Ícone do hamburger */}
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          )}
          
          {/* Espaço para alinhamento quando não há botão */}
          {!showMenuButton && <div className="w-10 h-10"></div>}
        </div>

        {/* ================================================================== */}
        {/* TÍTULO (CUSTOMIZÁVEL PARA PÁGINAS SEM SIDEBAR) */}
        {/* ================================================================== */}
        <div className="flex-1 text-center lg:text-left">
          <h1 className="text-xl font-semibold text-gray-900">
            {title || 'EntregasWoo'} {/* Usa título customizado ou padrão */}
          </h1>
        </div>

        {/* ================================================================== */}
        {/* ESPAÇO PARA ELEMENTOS À DIREITA (BOTÃO DE PERFIL, ETC) */}
        {/* ================================================================== */}
        <div className="w-10 h-10"></div>
      </div>
    </header>
  );
}


// =========================================
// 6. src\components\Layout.js
// =========================================

// components/Layout.js
import { useState, useEffect } from 'react';
import Header from './Header';
import Sidebar from './Sidebar';

// ==============================================================================
// COMPONENTE LAYOUT PRINCIPAL
// ==============================================================================
/**
 * Layout é o componente que define a estrutura básica de todas as páginas
 * Ele gerencia: Sidebar, Header e Conteúdo principal
 * 
 * @param {Object} props - Propriedades do componente
 * @param {ReactNode} props.children - Conteúdo da página
 * @param {boolean} [props.hideSidebar=false] - Oculta a sidebar (para páginas como Admin)
 */
const Layout = ({ children, hideSidebar = false }) => {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  // ============================================================================
  // 2. EFFECT: DETECTAR TAMANHO DA TELA
  // ============================================================================
  useEffect(() => {
    const checkIsMobile = () => setIsMobile(window.innerWidth < 1024);
    
    // Verificar inicialmente
    checkIsMobile();
    
    // Adicionar listener para redimensionamento
    window.addEventListener('resize', checkIsMobile);
    
    // Cleanup
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);

  // ============================================================================
  // 3. FUNÇÕES: CONTROLE DA SIDEBAR
  // ============================================================================
  /**
   * Alterna o estado da sidebar (aberto/fechado)
   */
  const toggleSidebar = () => {
    setSidebarOpen(prev => !prev);
  };

  /**
   * Fecha a sidebar (útil para links mobile)
   */
  const closeSidebar = () => {
    if (isMobile) {
      setSidebarOpen(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO LAYOUT
  // ============================================================================
  return (
    <div className="flex h-screen bg-gray-50">
      
      {/* ====================================================================== */}
      {/* SIDEBAR - MENU LATERAL (CONDICIONAL) */}
      {/* ====================================================================== */}
      {/**
       * A sidebar é opcional (pode ser ocultada com hideSidebar=true)
       * Mas o Header SEMPRE deve aparecer, mesmo sem sidebar
       */}
      {!hideSidebar && (
        <Sidebar 
          isOpen={sidebarOpen} 
          toggleSidebar={toggleSidebar}
          onItemClick={closeSidebar}
        />
      )}
      
      {/* ====================================================================== */}
      {/* CONTEÚDO PRINCIPAL */}
      {/* ====================================================================== */}
      <div className="flex-1 flex flex-col overflow-hidden">
        
        {/* ================================================================== */}
        {/* HEADER - CABEÇALHO (SEMPRE VISÍVEL, INDEPENDENTE DA SIDEBAR) */}
        {/* ================================================================== */}
        {/**
         * ✅ CORREÇÃO: Header SEMPRE visível, mas o botão hamburger é condicional
         * showMenuButton=false quando hideSidebar=true
         */}
        <Header 
          toggleSidebar={toggleSidebar} 
          showMenuButton={!hideSidebar} // Botão só aparece se sidebar existir
          title={hideSidebar ? "Painel Administrativo" : undefined} // Título customizado para Admin
        />
        
        {/* ================================================================== */}
        {/* CONTEÚDO DA PÁGINA */}
        {/* ================================================================== */}
        <main 
          className="flex-1 overflow-y-auto p-4 lg:p-6"
          id="main-content"
          tabIndex={-1}
        >
          {children}
        </main>
      </div>

      {/* ====================================================================== */}
      {/* OVERLAY - SOMENTE MOBILE E QUANDO SIDEBAR NÃO ESTÁ OCULTA */}
      {/* ====================================================================== */}
      {!hideSidebar && sidebarOpen && isMobile && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
          onClick={closeSidebar}
          aria-hidden="true"
          role="button"
          aria-label="Fechar menu"
        />
      )}
    </div>
  );
};

export default Layout;


// =========================================
// 7. src\components\MobileMenu.js
// =========================================



// =========================================
// 8. src\components\Notification.js
// =========================================

 



// =========================================
// 9. src\components\OrderCard.js
// =========================================

 



// =========================================
// 10. src\components\Pagination.js
// =========================================

// components/Pagination.js
// ==============================================================================
// COMPONENTE PAGINATION (SEM DEPENDÊNCIAS EXTERNAS)
// ==============================================================================
export default function Pagination({ currentPage, totalPages, onPageChange }) {
  // ============================================================================
  // 1. FUNÇÃO: GERAR BOTÕES DE PÁGINA
  // ============================================================================
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 5; // Máximo de páginas visíveis
    
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    // Ajustar se estiver no início
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  };

  // ============================================================================
  // 2. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (totalPages <= 1) return null; // Não mostrar paginação se só tiver uma página

  return (
    <div className="flex items-center justify-between border-t border-gray-200 px-4 py-3 sm:px-6">
      
      {/* ✅ PAGINAÇÃO MOBILE */}
      <div className="flex flex-1 justify-between sm:hidden">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          ← Anterior
        </button>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Próxima →
        </button>
      </div>
      
      {/* ✅ PAGINAÇÃO DESKTOP */}
      <div className="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        
        {/* ✅ CONTADOR DE PÁGINAS */}
        <div>
          <p className="text-sm text-gray-700">
            Página <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        
        {/* ✅ NAVEGAÇÃO */}
        <div>
          <nav className="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
            
            {/* ✅ BOTÃO ANTERIOR */}
            <button
              onClick={() => onPageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Anterior</span>
              ← {/* Emoji seta esquerda */}
            </button>
            
            {/* ✅ BOTÕES DE PÁGINA */}
            {getPageNumbers().map((page) => (
              <button
                key={page}
                onClick={() => onPageChange(page)}
                className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                  currentPage === page
                    ? 'bg-purple-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600'
                    : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                }`}
              >
                {page}
              </button>
            ))}
            
            {/* ✅ BOTÃO PRÓXIMA */}
            <button
              onClick={() => onPageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Próxima</span>
              → {/* Emoji seta direita */}
            </button>
          </nav>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 11. src\components\PedidosEntregues.js
// =========================================

// components/PedidosEntregues.js
// ============================================================================
// 1. IMPORTAÇÕES
// ============================================================================
import { useEffect } from "react";
import { useUserProfile } from "../hooks/useUserProfile";

// Importa as versões da página, cada uma para um tipo de usuário
import PedidosEntreguesAdmin from "./PedidosEntreguesAdmin";
import PedidosEntreguesGerente from "./PedidosEntreguesGerente";
import PedidosEntreguesEntregador from "./PedidosEntreguesEntregador";

// ============================================================================
// 2. COMPONENTE PRINCIPAL
// ============================================================================
export default function PedidosEntregues() {
  // Hook que carrega dados do usuário
  const { userProfile, userRole, userLojas, loading } = useUserProfile();

    // ==========================================================================
  // 3. ESTADOS DE CARREGAMENTO E AUTENTICAÇÃO
  // ==========================================================================
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-purple-600 text-lg">Carregando...</div>
      </div>
    );
  }

  if (!userProfile) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-red-600 text-lg">Usuário não autenticado</div>
        <p className="text-gray-600 text-sm mt-2">
          Faça login para acessar esta página.
        </p>
      </div>
    );
  }



    // ==========================================================================
  // 4. ROTEAMENTO BASEADO NO TIPO DE USUÁRIO
  // ==========================================================================
  switch (userRole?.toLowerCase()) {
    // ------------------------------------------------------------------------
    // CASO 1: ADMINISTRADOR
    // ------------------------------------------------------------------------
    case "admin":
    case "administrador":
    case "administrator":
      return <PedidosEntreguesAdmin userProfile={userProfile} />;

    // ------------------------------------------------------------------------
    // CASO 2: GERENTE
    // ------------------------------------------------------------------------
    case "gerente":
    case "manager":
    case "gestor":
      return (
        <PedidosEntreguesGerente
          userProfile={userProfile}
          userLojas={userLojas}
        />
      );

    // ------------------------------------------------------------------------
    // CASO 3: ENTREGADOR
    // ------------------------------------------------------------------------
    case "entregador":
    case "delivery":
    case "courier":
    case "motoboy":
      return (
        <PedidosEntreguesEntregador
          userProfile={userProfile}
          userLojas={userLojas}
        />
      );

    // ------------------------------------------------------------------------
    // CASO PADRÃO: ACESSO NEGADO
    // ------------------------------------------------------------------------
    default:
      return (
        <div className="flex flex-col items-center justify-center min-h-screen p-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 max-w-md text-center">
            <h2 className="text-red-800 text-xl font-bold mb-2">
              ⚠️ Acesso Não Autorizado
            </h2>

            <p className="text-gray-700 mb-3">
              Seu tipo de usuário não tem permissão para acessar esta página.
            </p>

            <div className="bg-gray-100 p-3 rounded text-sm mb-4">
              <p>
                <strong>Tipo de usuário:</strong>{" "}
                {userRole || "Não definido"}
              </p>
              <p>
                <strong>Usuário:</strong>{" "}
                {userProfile.nome_completo || userProfile.email}
              </p>
            </div>

            <p className="text-sm text-gray-600">
              Contate o administrador do sistema para solicitar acesso.
            </p>

            <button
              onClick={() => window.history.back()}
              className="mt-4 bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 transition-colors"
            >
              Voltar
            </button>
          </div>
        </div>
      );
  }
}




// =========================================
// 12. src\components\PedidosEntreguesAdmin.js
// =========================================

import React, { useState, useEffect, useCallback } from 'react';
import { createClient } from '@supabase/supabase-js';
import { jsPDF } from 'jspdf';

// ==============================================================================
// 1. CONFIGURAÇÃO DO SUPABASE
// ==============================================================================
const supabaseUrl = 'https://czzidhzzpqegfvvmdgno.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6emlkaHp6cHFlZ2Z2dm1kZ25vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5NTIwMDMsImV4cCI6MjA2ODUyODAwM30.zK2iFp-b4e5vghpHgWGuOk0LooujlyU7kVm4sbM85m0';
const supabase = createClient(supabaseUrl, supabaseKey);

// ==============================================================================
// 2. FUNÇÕES AUXILIARES
// ==============================================================================

/**
 * Formata data para o padrão do Supabase (YYYY-MM-DD)
 */
const formatarDataParaSupabase = (dataString) => {
  if (!dataString) return '';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) return dataString;
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) {
    const [dia, mes, ano] = dataString.split('/');
    return `${ano}-${mes}-${dia}`;
  }
  return dataString;
};

/**
 * Formata data para exibição (DD/MM/YYYY)
 */
const formatarDataParaExibicao = (dataString) => {
  if (!dataString) return '-';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) {
    const [ano, mes, dia] = dataString.split('-');
    return `${dia}/${mes}/${ano}`;
  }
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) return dataString;
  try {
    const data = new Date(dataString);
    if (!isNaN(data.getTime())) return data.toLocaleDateString('pt-BR');
  } catch (e) {
    console.error('Erro ao formatar data:', e);
  }
  return dataString;
};

// ==============================================================================
// 3. COMPONENTE MODAL DE DETALHES
// ==============================================================================
const ModalDetalhesPedido = ({ pedido, isOpen, onClose }) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Informações da Loja */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p><strong>ID:</strong> {pedido.id}</p>
                <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
                <p><strong>Data:</strong> {pedido.data ? new Date(pedido.data).toLocaleString('pt-BR') : 'N/A'}</p>
              </div>
              <div>
                <p><strong>Telefone da Loja:</strong> {pedido.loja_telefone || 'N/A'}</p>
                <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
              </div>
            </div>
          </div>

          {/* Informações do Cliente */}
          <div className="mb-6 p-4 bg-gray-50 rounded">
            <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
            <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
            <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
          </div>

          {/* Produtos */}
          <div className="mb-6">
            <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
            <div className="bg-white border rounded p-3">
              {pedido.produto ? (
                <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
              ) : (
                <p>Nenhum produto informado</p>
              )}
            </div>
          </div>

          {/* Informações de Pagamento e Total */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div>
              <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
              <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p><strong>Frete Pago:</strong> R$ {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            </div>
            <div>
              <p><strong>Status Pagamento:</strong> {pedido.status_pagamento ? 'Pago' : 'Pendente'}</p>
              <p><strong>Data Pagamento:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
            </div>
          </div>

          {/* Observações */}
          {pedido.observacao_pedido && (
            <div className="mb-6">
              <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
              <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
            </div>
          )}

          {/* Entregador */}
          <div className="mb-6 p-4 bg-purple-50 rounded">
            <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
            <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
          </div>

          {/* Botão Fechar */}
          <div className="flex justify-end">
            <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition-colors">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// ==============================================================================
// 4. FUNÇÕES DE CARREGAMENTO DE IMAGEM E GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};

// ==============================================================================
// 5. COMPONENTE PRINCIPAL
// ==============================================================================
export default function PedidosEntregues() {
  // Estados do componente
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);

  // ============================================================================
  // 5.1 FUNÇÕES DE CÁLCULO E CARREGAMENTO
  // ============================================================================

  /**
   * Calcula o total dos pedidos selecionados
   */
  const calcularTotais = useCallback((pedidosList, selecionados) => {
    const total = Array.from(selecionados).reduce((sum, id) => {
      const pedido = pedidosList.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, []);

  /**
   * Carrega pedidos do Supabase com filtros aplicados
   */
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      let query = supabase.from('pedidos').select('*, loja_logo').eq('status_transporte', 'entregue');
      
      if (filtroEntregador) query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      if (filtroLoja) query = query.eq('id_loja', filtroLoja);
      if (filtroStatus) query = query.eq('status_pagamento', filtroStatus === 'true');
      
      const { data, error } = await query;
      if (error) throw error;
      
      setPedidos(data || []);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Atualiza pedidos selecionados no Supabase
   */
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }
    
    const dataFormatada = formatarDataParaSupabase(dataPagamento);
    
    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;
        
        const { error } = await supabase
          .from('pedidos')
          .update({
            frete_pago: fretePago,
            status_pagamento: fretePago > 0,
            data_pagamento: dataFormatada,
          })
          .eq('id', id);
        
        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pedidos atualizados com sucesso!');
      
      // Atualizar estado local
      setPedidos(prevPedidos => 
        prevPedidos.map(pedido => 
          pedidosSelecionados.has(pedido.id) 
            ? { 
                ...pedido, 
                data_pagamento: dataFormatada,
                status_pagamento: parseFloat(pedido.frete_pago || 0) > 0
              } 
            : pedido
        )
      );
      
      setPedidosSelecionados(new Set());
      
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ============================================================================
  // 5.2 HANDLERS DE INTERAÇÃO
  // ============================================================================

  /**
   * Manipula seleção/deseleção de pedidos
   */
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) {
      newSet.add(pedidoId);
    } else {
      newSet.delete(pedidoId);
    }
    setPedidosSelecionados(newSet);
  };

  /**
   * Atualiza valor do frete de um pedido
   */
  const handleAtualizarFrete = (pedidoId, novoValor) => {
    const newPedidos = pedidos.map(p => 
      p.id === pedidoId ? { ...p, frete_pago: novoValor } : p
    );
    setPedidos(newPedidos);
  };

  /**
   * Abre modal com detalhes do pedido
   */
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  /**
   * Fecha modal de detalhes
   */
  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 5.3 USE EFFECTS
  // ============================================================================

  // Carrega pedidos quando os filtros mudam
  useEffect(() => {
    carregarPedidos();
  }, [filtroEntregador, filtroLoja, filtroStatus]);

  // Calcula totais quando a seleção ou pedidos mudam
  useEffect(() => {
    calcularTotais(pedidos, pedidosSelecionados);
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ============================================================================
  // 5.4 DADOS DERIVADOS
  // ============================================================================

  // Lista de lojas únicas para o filtro
  const lojasUnicas = [...new Set(pedidos.map(p => p.id_loja))].map(id => {
    const nome = pedidos.find(p => p.id_loja === id)?.loja_nome;
    return { id, nome: nome || id };
  });

  // ============================================================================
  // 5.5 RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================

  return (
    <div className="bg-gray-50 min-h-screen mobile-optimized">
      {/* Modal de Detalhes */}
      <ModalDetalhesPedido
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={fecharModal}
      />

      {/* Cabeçalho Otimizado para Mobile */}
      <div className="bg-white shadow-md rounded-lg p-3 mb-3 sticky top-2 z-10 mobile-header">
        <div className="flex justify-between items-center mb-3">
          <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">{pedidosSelecionados.size}</span>
            <div className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </div>
          </div>
        </div>

        {/* Filtros sem rótulos */}
        <div className="grid grid-cols-1 gap-2 mb-3">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Entregadores</option>
            {[...new Set(pedidos.map(p => p.aceito_por_nome).filter(Boolean))].map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todas Lojas</option>
            {lojasUnicas.map(loja => (
              <option key={loja.id} value={loja.id}>{loja.nome}</option>
            ))}
          </select>
          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data e Botões na mesma linha */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded mobile-field"
          />
          <button 
            onClick={atualizarPedidos} 
            className="bg-purple-600 text-white p-2 rounded hover:bg-purple-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Atualizar
          </button>
          <button 
            onClick={async () => await gerarRecibosPDF(pedidosSelecionados, pedidos)}
            className="bg-green-600 text-white p-2 rounded hover:bg-green-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Recibo
          </button>
        </div>
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        <div className="grid grid-cols-1 gap-3">
          {isLoading ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Carregando...</p>
            </div>
          ) : pedidos.length === 0 ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow card-pedido p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="mobile-checkbox h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800 mobile-text-small">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 mobile-text-small">
                  <p><span className="font-semibold">Entregador:</span> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><span className="font-semibold">Pago em:</span> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p className="flex items-center">
                    <span className="font-semibold mr-1">Pagamento:</span> 
                    {pedido.status_pagamento ? (
                      <span className="text-green-600 mr-1">✔</span>
                    ) : (
                      <span className="text-red-600 mr-1">✘</span>
                    )} 
                    {pedido.status_pagamento ? 'Pago' : 'Pendente'}
                  </p>
                  <p className="flex items-center">
                    <span className="font-semibold">Frete Pago: R$</span>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0.0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500 focus:border-transparent mobile-text-small"
                    />
                  </p>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

{/* Estilos inline para mobile */}
<style jsx>{`
  @media (max-width: 768px) {
    .mobile-optimized :global(*) {
      font-size: 14px !important;
    }
    .mobile-header :global(*) {
      padding: 0px 10px !important;
    }
    .mobile-field :global(*) {
      padding: 10px !important;
      font-size: 14px !important;
    }
    .mobile-button :global(*) {
      padding: 10px 12px !important;
      font-size: 14px !important;
    }
    .mobile-text-small :global(*) {
      font-size: 13px !important;
    }
    .mobile-checkbox :global(*) {
      width: 18px !important;
      height: 18px !important;
    }
  }

  /* Estilos para tablet/PC (acima de 768px) - mantém o padrão */
  @media (min-width: 769px) {
    .mobile-header :global(*) {
      padding: 12px 10px !important; /* Valor original para tablet/PC */
    }
  }
`}</style>
    </div>
  );
}


// =========================================
// 13. src\components\PedidosEntreguesEntregador.js
// =========================================

// ============================================================================
// IMPORTAÇÕES
// ============================================================================
import React, { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { OrderModal, WithCourier } from './OrderModal';

// ============================================================================
// COMPONENTE: PEDIDOS ENTREGUES - ENTREGADOR
// ============================================================================
/**
 * Versão exclusiva para ENTREGADORES:
 * - Só pode visualizar seus próprios pedidos entregues.
 * - Pode filtrar por loja e status de pagamento.
 * - Não pode editar valores, nem atualizar, nem gerar recibos.
 */
export default function PedidosEntreguesEntregador({ userProfile }) {
  // ==========================================================================
  // 1. ESTADOS DO COMPONENTE
  // ==========================================================================
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const [lojas, setLojas] = useState([]);
  const [error, setError] = useState(null); // Estado para erros

  // ==========================================================================
  // 2. CARREGAR LOJAS ASSOCIADAS AO ENTREGADOR
  // ==========================================================================
  useEffect(() => {
    const carregarLojas = async () => {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      try {
        console.log('🔍 Carregando lojas para UID:', userProfile.uid); // Log para depuração
        const { data, error } = await supabase
          .from('loja_associada')
          .select('id_loja, loja_nome')
          .eq('uid_usuario', userProfile.uid); // ✅ Corrigido: 'uid_usuario'

        if (error) throw error;
        console.log('✅ Lojas carregadas:', data); // Log para depuração
        
        // Processar para uniques por id_loja
        const uniqueLojas = [...new Map(data.map(item => [item.id_loja, item])).values()];
        setLojas(uniqueLojas);
      } catch (err) {
        console.error('Erro ao carregar lojas do entregador:', err.message);
        setError('Falha ao carregar lojas associadas. Verifique o schema da tabela loja_associada.');
      }
    };

    carregarLojas();
  }, [userProfile]);

  // ==========================================================================
  // 3. CARREGAR PEDIDOS DO ENTREGADOR LOGADO
  // ==========================================================================
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      console.log('🔍 Carregando pedidos para UID:', userProfile.uid); // Log para depuração
      let query = supabase
        .from('pedidos')
        .select('*')
        .eq('status_transporte', 'entregue')
        .eq('aceito_por_uid', userProfile.uid); // ✅ Corrigido: 'aceito_por_uid'

      if (filtroLoja) {
        query = query.eq('id_loja', filtroLoja);
      }
      if (filtroStatus) {
        query = query.eq('status_pagamento', filtroStatus === 'true');
      }

      const { data, error } = await query;
      if (error) throw error;

      console.log('✅ Pedidos carregados:', data); // Log para depuração
      setPedidos(data || []);
      setError(null);
    } catch (err) {
      console.error('Erro ao carregar pedidos do entregador:', err.message);
      setError('Falha ao carregar pedidos. Verifique o schema da tabela pedidos.');
    } finally {
      setIsLoading(false);
    }
  };

  // ==========================================================================
  // 4. ABRIR MODAL DE DETALHES
  // ==========================================================================
  const abrirModalDetalhes = (pedido) => {
    if (pedido) {
      setPedidoSelecionado(pedido);
      setModalAberto(true);
    }
  };

  // ==========================================================================
  // 5. USEEFFECT PARA CARREGAR PEDIDOS
  // ==========================================================================
  useEffect(() => {
    if (userProfile?.uid) carregarPedidos();
  }, [userProfile, filtroLoja, filtroStatus]);

  // ==========================================================================
  // 6. RENDERIZAÇÃO
  // ==========================================================================
  return (
    <div className="bg-gray-50 min-h-screen p-4">
      {/* Cabeçalho do entregador */}
      <div className="bg-white shadow-md rounded-lg p-4 mb-4 sticky top-4 z-10">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-xl font-bold text-purple-800">Meus Pedidos Entregues</h1>
            <p className="text-sm text-gray-600">
              Entregador: {userProfile.nome_completo || 'Não informado'}
            </p>
          </div>
        </div>

        {/* Filtros → Loja + Status */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todas Lojas</option>
            {lojas.map((loja) => (
              <option key={loja.id_loja} value={loja.id_loja}>
                {loja.loja_nome || `Loja ${loja.id_loja}`} {/* Fallback e desambiguação */}
              </option>
            ))}
          </select>

          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>
        {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
      </div>

      {/* Lista de pedidos (apenas visualização) */}
      <div className="container mx-auto px-2">
        {isLoading ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Carregando seus pedidos...</p>
          </div>
        ) : pedidos.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Nenhum pedido entregue encontrado.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {pedidos.map((pedido) => (
              <div key={pedido.id} className="bg-white rounded-lg shadow p-3">
                <button
                  onClick={() => abrirModalDetalhes(pedido)}
                  className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline w-full text-left"
                >
                  Pedido #{pedido.id_loja_woo}
                </button>
                <p className="text-sm font-semibold text-blue-800">{pedido.loja_nome}</p>
                <div className="mt-2 text-sm">
  <p>
    <strong>Data Entrega:</strong>{' '}
    {pedido.data ? new Date(pedido.data).toLocaleDateString('pt-BR') : '-'}
  </p>
  <p>
    <strong>Status Pagamento:</strong>{' '}
    {pedido.status_pagamento ? '✅ Pago' : '❌ Pendente'}
  </p>
  
  {/* FRETE OFERECIDO - ADICIONADO */}
  {pedido.frete_oferecido && (
    <p>
      <strong>Frete Oferecido:</strong> R${' '}
      {parseFloat(pedido.frete_oferecido).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
    </p>
  )}
  
  <p>
    <strong>Frete:</strong> R${' '}
    {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
  </p>
</div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modal de detalhes */}
      <OrderModal
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={() => setModalAberto(false)}
      >
        <WithCourier
          pedido={pedidoSelecionado}
          onClose={() => setModalAberto(false)}
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 14. src\components\PedidosEntreguesGerente.js
// =========================================

// ============================================================================
// IMPORTAÇÕES
// ============================================================================
import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '../../lib/supabase';
import { OrderModal, WithCourier } from './OrderModal';
import { gerarRecibosPDF } from '../utils/pdfUtils';

// ============================================================================
// COMPONENTE: PEDIDOS ENTREGUES - GERENTE
// ============================================================================
/**
 * Versão exclusiva para GERENTES:
 * - Filtra pedidos apenas da loja do gerente.
 * - Pode visualizar, filtrar (entregador/status), atualizar pagamentos e gerar recibos.
 * - Não vê pedidos de outras lojas.
 */
export default function PedidosEntreguesGerente({ userProfile }) {
  // ==========================================================================
  // 1. ESTADOS DO COMPONENTE
  // ==========================================================================
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const [entregadores, setEntregadores] = useState([]);
  const [lojaInfo, setLojaInfo] = useState({ id_loja: null, loja_nome: null });
  const [error, setError] = useState(null); // Novo estado para erros

  // ==========================================================================
  // 2. CARREGAR LOJA DO GERENTE
  // ==========================================================================
  useEffect(() => {
    const carregarLojaGerente = async () => {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      try {
        const { data, error } = await supabase
          .from('loja_associada')
          .select('id_loja, loja_nome')
          .eq('uid_usuario', userProfile.uid)
          .eq('funcao', 'gerente')
          .single(); // Gerente tem apenas uma loja

        if (error) throw error;
        if (!data) {
          setError('Usuário sem loja associada como gerente.');
          return;
        }

        setLojaInfo({ id_loja: data.id_loja, loja_nome: data.loja_nome });
      } catch (err) {
        console.error('Erro ao carregar loja do gerente:', err.message);
        setError('Falha ao carregar loja associada.');
      }
    };

    carregarLojaGerente();
  }, [userProfile]);

  // ==========================================================================
  // 3. CARREGAR ENTREGADORES DA LOJA DO GERENTE
  // ==========================================================================
  useEffect(() => {
    const carregarEntregadores = async () => {
      if (!lojaInfo.id_loja) return;

      try {
        const { data, error } = await supabase
          .from('loja_associada')
          .select('nome_completo, uid_usuario')
          .eq('funcao', 'entregador')
          .eq('id_loja', lojaInfo.id_loja)
          .order('nome_completo');

        if (error) throw error;
        setEntregadores(data.map(u => u.nome_completo).filter(Boolean) || []);
      } catch (error) {
        console.error('Erro ao carregar entregadores:', error.message);
        setError('Falha ao carregar entregadores.');
      }
    };

    carregarEntregadores();
  }, [lojaInfo]);

  // ==========================================================================
  // 4. CARREGAR PEDIDOS DA LOJA DO GERENTE
  // ==========================================================================
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      if (!lojaInfo.id_loja) {
        setError('Usuário sem loja associada.');
        return;
      }

      let query = supabase
        .from('pedidos')
        .select('*')
        .eq('status_transporte', 'entregue')
        .eq('id_loja', lojaInfo.id_loja); // Filtro essencial

      if (filtroEntregador) {
        query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      }
      if (filtroStatus) {
        query = query.eq('status_pagamento', filtroStatus === 'true');
      }

      const { data, error } = await query;
      if (error) throw error;

      setPedidos(data || []);
      setError(null);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
      setError('Falha ao carregar pedidos.');
    } finally {
      setIsLoading(false);
    }
  };

  // ==========================================================================
  // 5. CALCULAR TOTAIS DOS PEDIDOS SELECIONADOS
  // ==========================================================================
  const calcularTotais = useCallback(() => {
    const total = Array.from(pedidosSelecionados).reduce((sum, id) => {
      const pedido = pedidos.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, [pedidosSelecionados, pedidos]);

  // ==========================================================================
  // 6. ATUALIZAR PAGAMENTOS DOS PEDIDOS SELECIONADOS
  // ==========================================================================
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }

    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;

        const { error } = await supabase
          .from('pedidos')
          .update({
            status_pagamento: fretePago > 0,
            data_pagamento: dataPagamento,
            frete_pago: fretePago, // Persistir frete atualizado
          })
          .eq('id', id);

        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pagamentos atualizados com sucesso!');
      carregarPedidos(); // Recarregar para refletir mudanças
      setPedidosSelecionados(new Set());
      setDataPagamento('');
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ==========================================================================
  // 7. MANIPULAR SELEÇÃO DE PEDIDOS
  // ==========================================================================
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) newSet.add(pedidoId);
    else newSet.delete(pedidoId);
    setPedidosSelecionados(newSet);
  };

  // ==========================================================================
  // 8. ATUALIZAR VALOR DO FRETE (LOCAL E BANCO)
  // ==========================================================================
  const handleAtualizarFrete = async (pedidoId, novoValor) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ frete_pago: novoValor })
        .eq('id', pedidoId);
      if (error) throw error;

      setPedidos(prevPedidos =>
        prevPedidos.map(p => p.id === pedidoId ? { ...p, frete_pago: novoValor } : p)
      );
    } catch (err) {
      console.error('Erro ao atualizar frete:', err.message);
      setError('Falha ao atualizar frete.');
    }
  };

  // ==========================================================================
  // 9. ABRIR MODAL DE DETALHES
  // ==========================================================================
  const abrirModalDetalhes = (pedido) => {
    if (pedido) {
      setPedidoSelecionado(pedido);
      setModalAberto(true);
    }
  };

  // ==========================================================================
  // 10. USEEFFECTS → carregar pedidos e recalcular totais
  // ==========================================================================
  useEffect(() => {
    if (lojaInfo.id_loja) carregarPedidos();
  }, [lojaInfo, filtroEntregador, filtroStatus]);

  useEffect(() => {
    calcularTotais();
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ==========================================================================
  // 11. FORMATAR DATA PARA EXIBIÇÃO
  // ==========================================================================
  const formatarDataParaExibicao = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return 'Data inválida';
    }
  };

  // ==========================================================================
  // 12. RENDERIZAÇÃO
  // ==========================================================================
  return (
    <div className="bg-gray-50 min-h-screen p-4">
      {/* Modal de Detalhes */}
      <OrderModal
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={() => setModalAberto(false)}
      >
        <WithCourier
          pedido={pedidoSelecionado}
          onClose={() => setModalAberto(false)}
        />
      </OrderModal>

      {/* Cabeçalho com nome da loja */}
      <div className="bg-white shadow-md rounded-lg p-4 mb-4 sticky top-4 z-10">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
            <p className="text-sm text-gray-600">
              Loja: {lojaInfo.loja_nome || lojaInfo.id_loja || 'Não definida'}
            </p>
          </div>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">
              {pedidosSelecionados.size} selecionados
            </span>
            <span className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
            </span>
          </div>
        </div>

        {/* Filtros: entregador e status */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Entregadores</option>
            {entregadores.map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>

          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data + botões de ação */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded"
          />
          <button
            onClick={atualizarPedidos}
            className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700"
            disabled={isLoading}
          >
            Atualizar
          </button>
          <button
            onClick={() => gerarRecibosPDF(pedidosSelecionados, pedidos, lojaInfo.id_loja)} // Passar id_loja para filtrar
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
            disabled={isLoading || pedidosSelecionados.size === 0}
          >
            Recibo
          </button>
        </div>
        {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        {isLoading ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Carregando pedidos...</p>
          </div>
        ) : pedidos.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Nenhum pedido encontrado para esta loja.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="h-4 w-4 text-purple-600 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 text-sm">
                  <p><strong>Entregador:</strong> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><strong>Pago em:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p>
                    <strong>Pagamento:</strong>{' '}
                    {pedido.status_pagamento ? '✅ Pago' : '❌ Pendente'}
                  </p>
                  <p className="flex items-center">
                    <strong>Frete Pago: R$</strong>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500"
                      disabled={isLoading}
                    />
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


// =========================================
// 15. src\components\RouteGuard.js
// =========================================

// components/RouteGuard.js
import { useUserProfile } from '../hooks/useUserProfile';
import { useRouter } from 'next/router';
import { useEffect } from 'react';

const RouteGuard = ({ children, requiredRole }) => {
  const { userRole, loading } = useUserProfile();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      // Definir hierarquia de permissões
      const rolesHierarchy = {
        'visitante': 0,
        'entregador': 1,
        'gerente': 2,
        'admin': 3
      };

      // Verificar se usuário tem permissão
      const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];
      
      if (!hasPermission) {
        // Redirecionar para página não autorizada ou home
        router.push('/');
      }
    }
  }, [userRole, loading, requiredRole, router]);

  // Mostrar loading enquanto verifica permissões
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Verificação final (caso o useEffect não tenha redirecionado ainda)
  const rolesHierarchy = {
    'visitante': 0,
    'entregador': 1,
    'gerente': 2,
    'admin': 3
  };
  
  const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];

  if (!hasPermission) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600">Acesso Não Autorizado</h1>
          <p className="text-gray-600 mt-2">Você não tem permissão para acessar esta página.</p>
        </div>
      </div>
    );
  }

  return children;
};

export default RouteGuard;


// =========================================
// 16. src\components\Sidebar.js
// =========================================

// components/Sidebar.js
import { useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
// Corrigido de '../lib/supabase' para '../../lib/supabase'
import { supabase } from '../../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import UserProfile from './UserProfile';

// ==============================================================================
// COMPONENTE SIDEBAR - MENU LATERAL
// ==============================================================================
/**
 * Sidebar é o menu de navegação lateral do sistema.
 * Contém: Logo, Menu de navegação, Perfil do usuário e Botão de login/logout.
 * Responsivo: Mobile (overlay) e Desktop (fixo).
 * Integra com useUserProfile para gerenciar autenticação e visibilidade de menus.
 */
const Sidebar = ({ isOpen, toggleSidebar }) => {
  const router = useRouter();
  const { user, userRole, userLojas, loading: loadingUser } = useUserProfile();
  
  // ============================================================================
  // 1. DEFINIÇÃO DOS ITENS DO MENU (INDIVIDUAIS)
  // ============================================================================
  /**
   * Definimos cada item separadamente para facilitar a montagem condicional.
   * Cada item tem: path (rota), icon (emoji), label (texto).
   */
  const homeItem = { path: '/', icon: '🏠', label: 'Home' };
  const perfilItem = { path: '/perfil', icon: '👤', label: 'Meu Perfil' };
  const pendentesItem = { path: '/pedidos-pendentes', icon: '📋', label: 'Pedidos Pendentes' };
  const aceitosItem = { path: '/pedidos-aceitos', icon: '✅', label: 'Pedidos Aceitos' };
  const entreguesItem = { path: '/pedidos-entregues', icon: '🚚', label: 'Pedidos Entregues' };
  const gestaoItem = { path: '/gestao-entregadores', icon: '👥', label: 'Gestão de Entregadores' };
  const todosItem = { path: '/todos-pedidos', icon: '📊', label: 'Todos os Pedidos' };
  const relatoriosItem = { path: '/relatorios', icon: '📈', label: 'Relatórios' };
  const adminItem = { path: '/admin', icon: '⚙️', label: 'Administração' };

  // ============================================================================
  // 2. MONTAGEM CONDICIONAL DOS ITENS DO MENU (CORRIGIDA)
  // ============================================================================
  /**
   * Constrói a lista de menuItems dinamicamente com base no user e userRole.
   * - Sempre inclui 'Home'.
   * - Para logados: Adiciona 'Meu Perfil'.
   * - Para 'entregador': Adiciona menus de pedidos pendentes e aceitos.
   * - Para 'entregador', 'gerente' e 'admin': Adiciona pedidos entregues.
   * - Para associados à loja (userLojas.length > 0) ou admin: Adiciona 'Relatórios'.
   * - Para 'gerente' ou 'admin': Adiciona gestão e todos os pedidos.
   * - Para 'admin': Adiciona administração.
   * 
   * ✅ CORREÇÃO: Pedidos Pendentes e Aceitos são APENAS para entregadores.
   */
  let menuItems = [homeItem]; // Sempre visível (até para não logados)

  if (user) { // Apenas para usuários logados
    menuItems.push(perfilItem);

    // --------------------------------------------------------------------------
    // BLOCO A: ITENS DE PEDIDOS PENDENTES E ACEITOS (APENAS ENTREGADORES)
    // --------------------------------------------------------------------------
    if (userRole === 'entregador') {
      menuItems.push(pendentesItem, aceitosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO B: ITENS DE PEDIDOS ENTREGUES (ENTREGADORES, GERENTES E ADMIN)
    // --------------------------------------------------------------------------
    if (['entregador', 'gerente', 'admin'].includes(userRole)) {
      menuItems.push(entreguesItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO C: RELATÓRIOS (para quem está vinculado a loja ou admin)
    // --------------------------------------------------------------------------
    if (userLojas.length > 0 || userRole === 'admin') {
      menuItems.push(relatoriosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO D: GESTÃO E TODOS OS PEDIDOS (GERENTE E ADMIN)
    // --------------------------------------------------------------------------
    if (['gerente', 'admin'].includes(userRole)) {
      menuItems.push(gestaoItem, todosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO E: ADMINISTRAÇÃO (APENAS ADMIN)
    // --------------------------------------------------------------------------
    if (userRole === 'admin') {
      menuItems.push(adminItem);
    }
  }

  // ============================================================================
  // 3. FUNÇÃO: LOGOUT DO USUÁRIO
  // ============================================================================
  /**
   * Realiza o logout do usuário via Supabase.
   * O useUserProfile lida com a atualização dos estados e redirecionamento.
   */
  const handleLogout = async () => {
    try {
      // Fechar sidebar no mobile antes do logout
      if (window.innerWidth < 1024) {
        toggleSidebar();
      }
      
      // Realizar logout
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      console.log('Logout realizado com sucesso');
    } catch (error) {
      console.error('Erro ao fazer logout:', error);
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: REDIRECIONAR PARA LOGIN
  // ============================================================================
  /**
   * Redireciona para a página de login quando o usuário não está autenticado.
   */
  const handleLoginRedirect = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
    router.push('/login');
  };

  // ============================================================================
  // 5. FUNÇÃO: FECHAR SIDEBAR AO CLICAR EM ITEM (MOBILE)
  // ============================================================================
  /**
   * Fecha o sidebar no mobile quando um item de menu é clicado.
   */
  const handleMenuItemClick = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <>
      {/* Overlay para mobile */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={toggleSidebar}
        />
      )}
      
      {/* Sidebar principal */}
      <div className={`
        fixed lg:static inset-y-0 left-0 z-50
        w-64 bg-purple-800 text-white
        transform transition-transform duration-300 ease-in-out
        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}
        flex flex-col h-full
      `}>
        {/* Logo / Marca do sistema */}
        <div className="p-6 border-b border-purple-700">
          <Link href="/" passHref onClick={handleMenuItemClick}>
            <div className="cursor-pointer">
              <h1 className="text-2xl font-bold">EntregasWoo</h1>
              <p className="text-purple-300 text-sm">Sistema de Gestão</p>
            </div>
          </Link>
        </div>

        {/* Menu de navegação */}
        <nav className="flex-1 p-4 overflow-y-auto">
          {menuItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`flex items-center py-3 px-4 rounded-lg mb-2 transition-colors
                ${router.pathname === item.path
                  ? 'bg-purple-900 text-white shadow-md'
                  : 'hover:bg-purple-700 text-purple-200'
                }`}
              onClick={handleMenuItemClick}
            >
              <span className="text-xl mr-3">{item.icon}</span>
              <span className="font-medium">{item.label}</span>
            </Link>
          ))}
        </nav>

        {/* Perfil do usuário (condicional) */}
        {user && (
          <div className="p-4 border-t border-purple-700 bg-purple-900">
            <UserProfile />
          </div>
        )}

        {/* Botão dinâmico: Entrar/Sair */}
        <div className="p-4 border-t border-purple-700">
          {user ? (
            <button
              onClick={handleLogout}
              className="w-full flex items-center justify-center py-2 px-4 bg-purple-700 hover:bg-purple-600 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              Sair
            </button>
          ) : (
            <button
              onClick={handleLoginRedirect}
              className="w-full flex items-center justify-center py-2 px-4 bg-green-600 hover:bg-green-500 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l-4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
              </svg>
              Entrar
            </button>
          )}
        </div>
      </div>
    </>
  );
};

export default Sidebar;


// =========================================
// 17. src\components\UserProfile.js
// =========================================

// components/UserProfile.js (VERSÃO SIMPLIFICADA)
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// COMPONENTE: PERFIL DO USUÁRIO (VERSÃO SIMPLIFICADA)
// ==============================================================================
/**
 * Componente de perfil simplificado para sidebar, exibindo informações básicas
 * (foto, nome, email, função e status) sem opções de edição.
 * Utiliza hook useUserProfile para dados e suporta modo mobile.
 * Aprimoramentos: Acessibilidade, feedback de erro e design responsivo.
 */
const UserProfile = ({ isMobile = false }) => {
  // ============================================================================
  // 1. OBTENÇÃO DE DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Usa o hook useUserProfile para obter perfil, função e estado de carregamento.
   * Desestruturação para acessar os valores retornados.
   */
  const { userProfile, userRole, loading, error } = useUserProfile();

  // ============================================================================
  // 2. ESTADO DE CARREGAMENTO
  // ============================================================================
  /**
   * Exibe um placeholder animado durante o carregamento dos dados.
   * Design aprimorado com múltiplos elementos para simular conteúdo.
   */
  if (loading) {
    return (
      <div
        className="p-4 border-t"
        role="status"
        aria-label="Carregando perfil do usuário"
      >
        <div className="animate-pulse space-y-2">
          <div className="h-4 bg-purple-700 rounded w-3/4 mb-2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/3 mt-2"></div>
        </div>
      </div>
    );
  }

  // ============================================================================
  // 3. TRATAMENTO DE ERRO
  // ============================================================================
  /**
   * Exibe uma mensagem de erro se a busca de perfil falhar.
   * Permite ao usuário tentar novamente ou entrar em contato com suporte.
   */
  if (error) {
    return (
      <div
        className="p-4 border-t"
        role="alert"
        aria-label="Erro ao carregar perfil"
      >
        <p className="text-sm text-red-300">Erro ao carregar perfil.</p>
        <p className="text-xs text-red-400">Tente novamente ou contate o suporte.</p>
      </div>
    );
  }

  // ============================================================================
  // 4. USUÁRIO NÃO AUTENTICADO
  // ============================================================================
  /**
   * Exibe mensagem para visitantes não autenticados, incentivando login.
   */
  if (!userProfile) {
    return (
      <div
        className="p-4 border-t"
        role="region"
        aria-label="Status de visitante"
      >
        <p className="text-sm text-purple-300">Visitante</p>
        <p className="text-xs text-purple-400">Faça login para acessar</p>
      </div>
    );
  }

  // ============================================================================
  // 5. RENDERIZAÇÃO SIMPLIFICADA
  // ============================================================================
  /**
   * Exibe informações do usuário autenticado com foto, nome, email, função e status.
   * Ajustes para responsividade em modo mobile e acessibilidade.
   */
  return (
    <div
      className={`p-4 border-t ${isMobile ? 'text-sm' : 'text-base'}`}
      role="region"
      aria-label="Perfil do usuário"
    >
      {/* INFORMAÇÕES BÁSICAS DO USUÁRIO */}
      <div className="space-y-2">
        {/* NOME E EMAIL */}
        <div className="flex items-center">
          {userProfile.foto && (
            <img
              src={userProfile.foto}
              alt={`${userProfile.nome_completo || userProfile.nome_usuario} foto de perfil`}
              className="w-8 h-8 rounded-full mr-3 border-2 border-purple-600"
              loading="lazy" // Otimização de carregamento
            />
          )}
          <div className="flex-1 min-w-0">
            <p
              className="text-sm font-semibold text-white truncate"
              title={userProfile.nome_completo || userProfile.nome_usuario}
            >
              {userProfile.nome_completo || userProfile.nome_usuario}
            </p>
            <p
              className="text-xs text-purple-300 truncate"
              title={userProfile.email}
            >
              {userProfile.email}
            </p>
          </div>
        </div>

        {/* FUNÇÃO/ROLE (APENAS TEXTO) */}
        <div className="bg-purple-700 rounded p-1">
          <p
            className="text-xs text-center text-white"
            role="status"
            aria-label={`Função: ${userRole}`}
          >
            {userRole === 'admin' && '👑 Admin'}
            {userRole === 'gerente' && '💼 Gerente'}
            {userRole === 'entregador' && '🚚 Entregador'}
            {userRole === 'visitante' && '👤 Visitante'}
          </p>
        </div>

        {/* STATUS DE CONEXÃO (SIMPLES) */}
        <div
          className="flex items-center justify-between text-xs text-purple-400"
          role="status"
          aria-label="Status de conexão"
        >
          <span>🟢 Conectado</span>
        </div>
      </div>
    </div>
  );
};

export default UserProfile;


// =========================================
// 1. src\hooks\useFirebaseNotifications.js
// =========================================

// hooks/useFirebaseNotifications.js
import { useState, useEffect } from 'react';
// Atualiza o import para o novo caminho em public/
import { messaging, requestForToken, onMessageListener } from '/firebase.js';
import { supabase } from '../lib/supabase';

// ==============================================================================
// HOOK PERSONALIZADO PARA GERENCIAR NOTIFICAÇÕES DO FIREBASE
// ==============================================================================
/**
 * Hook para gerenciar notificações push do Firebase
 * 
 * @param {string} userId - ID do usuário autenticado (opcional)
 * @returns {Object} - Token e notificação atual
 */
export const useFirebaseNotifications = (userId) => {
  // ============================================================================
  // 1. ESTADOS DO HOOK
  // ============================================================================
  const [token, setToken] = useState(null);
  const [notification, setNotification] = useState(null);

  // ============================================================================
  // 2. EFFECT: SOLICITAR PERMISSÃO E OBTER TOKEN
  // ============================================================================
  useEffect(() => {
    if (userId && typeof window !== 'undefined' && 'serviceWorker' in navigator) {
      const getToken = async () => {
        try {
          const currentToken = await requestForToken();
          if (currentToken) {
            setToken(currentToken);
            
            console.log('✅ Token FCM obtido:', currentToken);
            
            // Salvar token no Supabase
            const { error } = await supabase
              .from('user_tokens')
              .upsert({
                user_id: userId,
                token: currentToken,
                updated_at: new Date().toISOString()
              }, {
                onConflict: 'user_id,token'
              });
            
            if (error) {
              console.error('❌ Erro ao salvar token:', error);
            } else {
              console.log('✅ Token salvo no Supabase com sucesso!');
            }
          }
        } catch (error) {
          console.error('❌ Erro ao obter token:', error);
        }
      };

      getToken();
    }
  }, [userId]);

  // ============================================================================
  // 3. EFFECT: ESCUTAR MENSAGENS EM FOREGROUND
  // ============================================================================
  useEffect(() => {
    if (typeof window !== 'undefined') {
      onMessageListener()
        .then((payload) => {
          console.log('📩 Mensagem em foreground recebida:', payload);
          setNotification(payload);
        })
        .catch((error) => console.log('❌ Erro no listener: ', error));
    }
  }, []);

  // ============================================================================
  // 4. RETORNO DO HOOK
  // ============================================================================
  return { token, notification };
};


// =========================================
// 2. src\hooks\useOrders.js
// =========================================

 import { notifyNewOrder, notifyOrderStatusChange } from '../utils/notificationSender';

// Quando um novo pedido é criado
const handleNewOrder = (order) => {
  // Notificar entregadores da loja
  notifyNewOrder(entregadorId, order.id, order.loja_nome);
};

// Quando o status de um pedido muda
const updateOrderStatus = async (orderId, newStatus) => {
  // Sua lógica existente...
  
  // Notificar envolvidos
  if (newStatus === 'aceito') {
    // Notificar gerente que pedido foi aceito
    notifyOrderStatusChange(gerenteId, orderId, newStatus, order.nome_cliente);
  } else if (newStatus === 'entregue') {
    // Notificar gerente que pedido foi entregue
    notifyOrderStatusChange(gerenteId, orderId, newStatus, order.nome_cliente);
  }
};



// =========================================
// 3. src\hooks\useRealtimePedidos.js
// =========================================

// hooks/useRealtimePedidos.js
import { useEffect } from 'react';
import { supabase } from '../lib/supabase';

export const useRealtimePedidos = (callback) => {
  useEffect(() => {
    const subscription = supabase
      .channel('pedidos-realtime')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'pedidos' 
        }, 
        (payload) => {
          callback(payload);
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, [callback]);
};

// Como usar em uma página:
const [pedidos, setPedidos] = useState([]);

useRealtimePedidos((payload) => {
  // Atualizar a lista de pedidos em tempo real
  if (payload.eventType === 'INSERT') {
    setPedidos(prev => [payload.new, ...prev]);
  } else if (payload.eventType === 'UPDATE') {
    setPedidos(prev => prev.map(p => 
      p.id === payload.new.id ? payload.new : p
    ));
  } else if (payload.eventType === 'DELETE') {
    setPedidos(prev => prev.filter(p => p.id !== payload.old.id));
  }
});


// =========================================
// 4. src\hooks\useUserProfile.js
// =========================================

// src/hooks/useUserProfile.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';

// ==============================================================================
// 1. HOOK PERSONALIZADO: useUserProfile
// ==============================================================================
/**
 * Hook para gerenciar dados do usuário autenticado com sistema de permissões baseado em:
 * 1. ✅ Tabela 'usuarios': Campo 'is_admin' (boolean) - Define administradores do sistema
 * 2. ✅ Tabela 'loja_associada': Campo 'funcao' (string) - Define gerentes e entregadores
 * 
 * Fluxo de decisão de permissões:
 * 1. Se is_admin = true → Administrador (acesso completo)
 * 2. Se tem registro em loja_associada com funcao = 'gerente' → Gerente (acesso à loja)
 * 3. Se tem registro em loja_associada com funcao = 'entregador' → Entregador (acesso limitado)
 * 4. Se não atende nenhum critério → Visitante (acesso mínimo)
 */
export const useUserProfile = () => {
  // ============================================================================
  // 2. ESTADOS DO HOOK
  // ============================================================================
  const [user, setUser] = useState(null); // Dados do Supabase Auth
  const [userProfile, setUserProfile] = useState(null); // Dados da tabela 'usuarios'
  const [userRole, setUserRole] = useState('visitante'); // Função: 'admin', 'gerente', 'entregador', 'visitante'
  const [userLojas, setUserLojas] = useState([]); // Lojas associadas da tabela 'loja_associada'
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [error, setError] = useState(null); // Mensagens de erro
  const [updating, setUpdating] = useState(false); // Estado de atualização
  const [isInitialized, setIsInitialized] = useState(false); // Novo estado para verificar inicialização do Supabase

  // ============================================================================
  // 3. FUNÇÃO AUXILIAR: ESPERAR INICIALIZAÇÃO DO SUPABASE
  // ============================================================================
  /**
   * Aguarda até que o Supabase esteja inicializado e a sessão esteja carregada
   */
  const waitForSupabase = async () => {
    try {
      console.log('⏳ Aguardando inicialização do Supabase...');
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        console.log('⚠️ Nenhuma sessão encontrada na inicialização');
        return null;
      }
      console.log('✅ Sessão inicial carregada');
      return session.user;
    } catch (error) {
      console.error('❌ Erro ao verificar sessão inicial:', error);
      return null;
    }
  };

  // ============================================================================
  // 4. FUNÇÃO PRINCIPAL: CARREGAR DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Carrega todos os dados do usuário de forma sequencial e determinística
   * Segue a hierarquia de permissões do sistema
   */
  const loadUserData = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('🔄 Iniciando carregamento de dados do usuário...');

      // 4.1. VERIFICAR INICIALIZAÇÃO DO SUPABASE
      if (!isInitialized) {
        console.log('⏳ Supabase ainda não inicializado, aguardando...');
        const initialUser = await waitForSupabase();
        if (!initialUser) {
          console.log('👤 Nenhum usuário autenticado na inicialização');
          resetToVisitor();
          return;
        }
        setUser(initialUser);
        setIsInitialized(true);
      }

      // 4.2. OBTER USUÁRIO AUTENTICADO
      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        console.error('❌ Erro de autenticação:', authError);
        setError('Falha na autenticação: ' + authError.message);
        resetToVisitor();
        return;
      }

      if (!authUser) {
        console.log('👤 Nenhum usuário autenticado');
        resetToVisitor();
        return;
      }

      setUser(authUser);
      console.log('✅ Usuário autenticado:', authUser.email);

      // 4.3. BUSCAR PERFIL NA TABELA 'usuarios'
      const { data: usuarioData, error: usuarioError } = await supabase
        .from('usuarios')
        .select('*')
        .eq('uid', authUser.id)
        .single();

      if (usuarioError) {
        console.error('❌ Erro ao buscar perfil:', usuarioError);
        setError('Perfil não encontrado: ' + usuarioError.message);
        resetToVisitor();
        return;
      }

      setUserProfile(usuarioData);
      console.log('✅ Perfil carregado:', usuarioData.nome_completo);

      // 4.4. VERIFICAÇÃO CRÍTICA: É ADMINISTRADOR?
      if (usuarioData.is_admin === true) {
        console.log('🎯 Usuário é ADMINISTRADOR (is_admin = true)');
        setUserRole('admin');
        setUserLojas([]); // Admin não precisa de lojas associadas
        setLoading(false);
        return;
      }

      // 4.5. BUSCAR LOJAS ASSOCIADAS NA TABELA 'loja_associada'
      const { data: lojasData, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', authUser.id)
        .eq('status_vinculacao', 'ativo');

      if (lojasError) {
        console.warn('⚠️ Erro ao buscar lojas associadas:', lojasError);
        setUserLojas([]);
        setUserRole('visitante');
        setLoading(false);
        return;
      }

      setUserLojas(lojasData || []);
      console.log('📊 Lojas associadas encontradas:', lojasData?.length || 0);

      // 4.6. DETERMINAR FUNÇÃO BASEADA NAS LOJAS ASSOCIADAS
      if (!lojasData || lojasData.length === 0) {
        console.log('👤 Usuário é VISITANTE (sem lojas associadas)');
        setUserRole('visitante');
      } else {
        const lojasComoGerente = lojasData.filter(loja => loja.funcao === 'gerente');
        
        if (lojasComoGerente.length > 0) {
          if (lojasComoGerente.length > 1) {
            console.error('❌ CONFLITO: Usuário é gerente em múltiplas lojas');
            setError('Configuração inválida: Gerente em múltiplas lojas');
            setUserRole('erro');
          } else {
            console.log('💼 Usuário é GERENTE da loja:', lojasComoGerente[0].id_loja);
            setUserRole('gerente');
          }
        } else {
          console.log('🚚 Usuário é ENTREGADOR em', lojasData.length, 'loja(s)');
          setUserRole('entregador');
        }
      }

    } catch (error) {
      console.error('💥 Erro inesperado no carregamento:', error);
      setError('Erro inesperado: ' + error.message);
      resetToVisitor();
    } finally {
      setLoading(false);
      console.log('✅ Carregamento finalizado. Função:', userRole);
    }
  };

  // ============================================================================
  // 5. FUNÇÃO AUXILIAR: RESETAR PARA VISITANTE
  // ============================================================================
  /**
   * Reinicia todos os estados para usuário visitante (não autenticado)
   * Usado em casos de erro ou logout
   */
  const resetToVisitor = () => {
    setUser(null);
    setUserProfile(null);
    setUserRole('visitante');
    setUserLojas([]);
    setLoading(false);
  };

  // ============================================================================
  // 6. EFFECT: INICIALIZAÇÃO E OBSERVADOR DE AUTENTICAÇÃO
  // ============================================================================
  /**
   * Executa o carregamento inicial e fica observando mudanças de autenticação
   * Atualiza automaticamente quando usuário faz login/logout
   */
  useEffect(() => {
    // Carregamento inicial com verificação de sessão
    const initialize = async () => {
      const initialUser = await waitForSupabase();
      if (initialUser) {
        setUser(initialUser);
        setIsInitialized(true);
        await loadUserData();
      } else {
        resetToVisitor();
        setIsInitialized(true);
      }
    };

    initialize();

    // Observar mudanças de estado de autenticação
    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('🔐 Evento de autenticação:', event);
        
        if (event === 'SIGNED_IN' && session?.user) {
          console.log('✅ Usuário logado:', session.user.email);
          setUser(session.user);
          await loadUserData();
        } else if (event === 'SIGNED_OUT') {
          console.log('👋 Usuário desconectado');
          resetToVisitor();
        }
      }
    );

    // Cleanup: Remover observador quando componente desmontar
    return () => {
      if (authListener?.subscription) {
        authListener.subscription.unsubscribe();
        console.log('🧹 Observador de autenticação removido');
      }
    };
  }, []);

  // ============================================================================
  // 7. FUNÇÃO: ATUALIZAR PERFIL DO USUÁRIO
  // ============================================================================
  /**
   * Atualiza dados do perfil na tabela 'usuarios'
   * ⚠️ Não permite alterar 'is_admin' via interface comum
   */
  const updateUserProfile = async (formData) => {
    try {
      setUpdating(true);
      setError(null);

      if (!userProfile?.uid) throw new Error('Perfil não carregado');
      if (!formData.nome_completo || !formData.telefone) {
        throw new Error('Nome completo e telefone são obrigatórios');
      }

      const updateData = {
        nome_completo: formData.nome_completo,
        nome_usuario: formData.nome_usuario || userProfile.nome_usuario,
        telefone: formData.telefone,
        foto: formData.foto || userProfile.foto
      };

      const { error: updateError } = await supabase
        .from('usuarios')
        .update(updateData)
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      setUserProfile(prev => ({ ...prev, ...updateData }));

      return { success: true, message: 'Perfil atualizado com sucesso!' };

    } catch (error) {
      const errorMsg = 'Erro ao atualizar: ' + error.message;
      setError(errorMsg);
      return { success: false, message: errorMsg };
    } finally {
      setUpdating(false);
    }
  };

  // ============================================================================
  // 8. FUNÇÃO: RECARREGAR DADOS
  // ============================================================================
  /**
   * Força recarregamento completo dos dados do usuário
   * Útil após atualizações externas ou para sincronização
   */
  const reloadUserData = async () => {
    console.log('🔄 Recarregando dados do usuário...');
    await loadUserData();
  };

  // ============================================================================
  // 9. RETORNO DO HOOK
  // ============================================================================
  /**
   * Expõe estados e funções para componentes consumidores
   */
  return {
    user,
    userProfile,
    userRole,
    userLojas,
    loading,
    error,
    updating,
    updateUserProfile,
    reloadUserData
  };
};


// =========================================
// 1. src\pages\tests\test-notifications.js
// =========================================

// 1. IMPORTAÇÕES
import { useEffect, useState } from 'react';

// 2. COMPONENTE DE TESTE
export default function TestNotifications() {
  const [isFirebaseLoaded, setIsFirebaseLoaded] = useState(false);

  // 3. HOOK USEEFFECT
  useEffect(() => {
    console.log('Iniciando carregamento do Firebase via firebase.js...');
    const script = document.createElement('script');
    script.src = '/firebase.js';
    script.async = true;
    script.onload = () => {
      console.log('Script firebase.js carregado com sucesso.');
      let checkAttempts = 0;
      const maxAttempts = 150; // Aumenta para 15 segundos (150 * 100ms)

      const checkFirebase = () => {
        if (window.requestForToken) {
          console.log('requestForToken detectado após', checkAttempts, 'tentativas.');
          setIsFirebaseLoaded(true);
        } else if (checkAttempts < maxAttempts) {
          console.log('Aguardando requestForToken... Tentativa', checkAttempts + 1);
          checkAttempts++;
          setTimeout(checkFirebase, 100);
        } else {
          console.error('Tempo esgotado esperando requestForToken.');
        }
      };

      checkFirebase();
    };
    script.onerror = () => console.error('Erro ao carregar firebase.js');
    document.body.appendChild(script);

    return () => {
      document.body.removeChild(script);
    };
  }, []);

  // 4. FUNÇÃO DE TESTE
  const handleTestNotification = () => {
    if (!isFirebaseLoaded || !window.requestForToken) {
      console.error('Firebase não está pronto. Aguarde o carregamento ou verifique os logs.');
      return;
    }

    window.requestForToken().then(token => console.log('Token:', token)).catch(error => console.error('Erro:', error));
  };

  // 5. RETORNO JSX
  return (
    <div style={{ padding: '20px', textAlign: 'center' }}>
      <h1>Teste de Notificações</h1>
      <button
        onClick={handleTestNotification}
        style={{ padding: '10px 20px', backgroundColor: '#3b7b2b', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}
        disabled={!isFirebaseLoaded}
      >
        Testar Notificação
      </button>
      {!isFirebaseLoaded && <p style={{ color: 'red' }}>Carregando Firebase...</p>}
    </div>
  );
}


// =========================================
// 1. src\pages\_app.js
// =========================================

// pages/_app.js (VERSÃO SUPER SIMPLES)
import '../styles/globals.css';
import Layout from '../components/Layout';

function MyApp({ Component, pageProps }) {
  // ✅ Use layout em TODAS as páginas por enquanto
  // Depois ajustamos as exceções
  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  );
}

export default MyApp;


// =========================================
// 2. src\pages\_document.js
// =========================================

 import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link rel="manifest" href="/manifest.json" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;



// =========================================
// 3. src\pages\admin.js
// =========================================

// pages/admin.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ==============================================================================
// PÁGINA DE ADMINISTRAÇÃO
// ==============================================================================
/**
 * Painel administrativo para gerenciamento do sistema
 * Acessível apenas para usuários com role 'admin'
 * 
 * IMPORTANTE: Esta página NÃO usa o Layout padrão (já é aplicado pelo _app.js)
 * Por isso NÃO devemos envolver com <Layout> aqui
 */
export default function Admin() {
  // ============================================================================
  // 1. ESTADOS E HOOKS
  // ============================================================================
  const { userRole, loading: userLoading } = useUserProfile();
  const [activeTab, setActiveTab] = useState('lojas');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  // Estados para dados das abas
  const [lojas, setLojas] = useState([]);
  const [usuariosPendentes, setUsuariosPendentes] = useState([]);
  const [associacoes, setAssociacoes] = useState([]);

  // ============================================================================
  // 2. EFFECT: CARREGAR DADOS COM BASE NA ABA ATIVA
  // ============================================================================
  useEffect(() => {
    if (activeTab === 'lojas') {
      loadLojas();
    } else if (activeTab === 'usuarios') {
      loadUsuariosPendentes();
    } else if (activeTab === 'associacoes') {
      loadAssociacoes();
    }
  }, [activeTab]);

// ============================================================================
// 3. FUNÇÕES: CARREGAMENTO DE DADOS
// ============================================================================
/**
 * Carrega lista de lojas cadastradas
 */
const loadLojas = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('lojas')
      .select('*')
      .order('loja_nome');
    
    if (error) throw error;
    setLojas(data || []);
  } catch (err) {
    setError('Erro ao carregar lojas: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Carrega usuários não vinculados a lojas (pendentes)
 */
const loadUsuariosPendentes = async () => {
  try {
    setLoading(true);
    // ✅ CORREÇÃO: Consulta mais simples para evitar erro de UUID
    const { data: usuariosAssociados, error: errorAssociados } = await supabase
      .from('loja_associada')
      .select('uid_usuario')
      .eq('status_vinculacao', 'ativo');

    if (errorAssociados) {
      throw new Error('Erro ao buscar usuários associados: ' + errorAssociados.message);
    }

    // Extrair apenas os UIDs
    const uidsAssociados = usuariosAssociados?.map(ua => ua.uid_usuario) || [];

    // Buscar usuários NÃO presentes na lista de associados
    let query = supabase
      .from('usuarios')
      .select('*');

    // Aplicar filtro apenas se houver usuários associados
    if (uidsAssociados.length > 0) {
      query = query.not('uid', 'in', `(${uidsAssociados.map(uid => `"${uid}"`).join(',')})`);
    }

    const { data, error } = await query;

    if (error) {
      throw new Error('Erro ao buscar usuários pendentes: ' + error.message);
    }

    setUsuariosPendentes(data || []);

  } catch (err) {
    setError('Erro ao carregar usuários: ' + err.message);
    console.error('Erro detalhado:', err);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// ✅ CORREÇÃO: FUNÇÃO loadAssociacoes ADICIONADA
// ============================================================================
/**
 * Carrega associações ativas entre usuários e lojas
 */
const loadAssociacoes = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        *,
        usuarios:uid_usuario(nome_completo, email),
        lojas:id_loja(loja_nome)
      `)
      .order('ultimo_status_vinculacao', { ascending: false });
    
    if (error) throw error;
    setAssociacoes(data || []);
  } catch (err) {
    setError('Erro ao carregar associações: ' + err.message);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// 4. FUNÇÕES: AÇÕES DO ADMIN
// ============================================================================
/**
 * Cria uma nova loja no sistema
 */
const handleCriarLoja = async (dadosLoja) => {
  try {
    setLoading(true);
    setError(null);
    
    const { error } = await supabase
      .from('lojas')
      .insert([{
        id_loja: dadosLoja.id_loja,
        loja_nome: dadosLoja.loja_nome,
        loja_endereco: dadosLoja.loja_endereco,
        loja_telefone: dadosLoja.loja_telefone,
        loja_perimetro_entrega: dadosLoja.loja_perimetro_entrega,
        cnpj: dadosLoja.cnpj,
        ativa: true
      }]);
    
    if (error) throw error;
    
    setSuccess('Loja criada com sucesso!');
    await loadLojas();
  } catch (err) {
    setError('Erro ao criar loja: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Associa um usuário como gerente de uma loja
 */
const handleAssociarGerente = async (usuarioId, lojaId) => {
  try {
    setLoading(true);
    setError(null);
    
    // Buscar dados do usuário e loja em paralelo
    const [{ data: usuario }, { data: loja }] = await Promise.all([
      supabase.from('usuarios').select('*').eq('uid', usuarioId).single(),
      supabase.from('lojas').select('*').eq('id_loja', lojaId).single()
    ]);
    
    if (!usuario || !loja) throw new Error('Usuário ou loja não encontrados');
    
    // Criar associação
    const { error } = await supabase
      .from('loja_associada')
      .insert([{
        uid_usuario: usuarioId,
        nome_completo: usuario.nome_completo,
        id_loja: lojaId,
        loja_nome: loja.loja_nome,
        loja_endereco: loja.loja_endereco,
        loja_telefone: loja.loja_telefone,
        funcao: 'gerente',
        status_vinculacao: 'ativo',
        ultimo_status_vinculacao: new Date().toISOString()
      }]);
    
    if (error) throw error;
    
    setSuccess('Gerente associado com sucesso!');
    await loadAssociacoes(); // ✅ Agora esta função existe
    await loadUsuariosPendentes();
  } catch (err) {
    setError('Erro ao associar gerente: ' + err.message);
  } finally {
    setLoading(false);
  }
};
  // ============================================================================
  // 5. VERIFICAÇÕES DE ACESSO E LOADING
  // ============================================================================
  if (userLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // ============================================================================
  // 6. RENDERIZAÇÃO PRINCIPAL
  // ============================================================================
  return (
    <RouteGuard requiredRole="admin">
      {/* ✅ REMOVIDO: <Layout> wrapper (já é aplicado pelo _app.js) */}
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Painel Administrativo</h1>
        
        {/* Mensagens de status */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            {success}
          </div>
        )}

        {/* Navegação por abas */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="flex space-x-8">
            {['lojas', 'usuarios', 'associacoes'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                {tab === 'lojas' && 'Lojas'}
                {tab === 'usuarios' && 'Usuários Pendentes'}
                {tab === 'associacoes' && 'Associações'}
              </button>
            ))}
          </nav>
        </div>

        {/* Conteúdo das abas */}
        <div className="mt-6">
          {/* Aba: Lojas */}
          {activeTab === 'lojas' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Gerenciar Lojas</h2>
              
              {/* Formulário de criação */}
              <div className="bg-white p-4 rounded-lg shadow-md mb-4">
                <h3 className="text-lg font-medium mb-3">Criar Nova Loja</h3>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target);
                  handleCriarLoja({
                    id_loja: formData.get('id_loja'),
                    loja_nome: formData.get('loja_nome'),
                    loja_endereco: formData.get('loja_endereco'),
                    loja_telefone: formData.get('loja_telefone'),
                    loja_perimetro_entrega: formData.get('loja_perimetro_entrega'),
                    cnpj: formData.get('cnpj')
                  });
                }}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                    <input name="id_loja" placeholder="ID da Loja (ex: L1)" required />
                    <input name="loja_nome" placeholder="Nome da Loja" required />
                    <input name="loja_endereco" placeholder="Endereço" />
                    <input name="loja_telefone" placeholder="Telefone" />
                    <input name="loja_perimetro_entrega" placeholder="Perímetro de Entrega" />
                    <input name="cnpj" placeholder="CNPJ" />
                  </div>
                  <button type="submit" disabled={loading}>
                    {loading ? 'Criando...' : 'Criar Loja'}
                  </button>
                </form>
              </div>

              {/* Listagem de lojas */}
              <div>
                <h3 className="text-lg font-medium mb-3">Lojas Cadastradas</h3>
                {loading ? (
                  <div className="text-center py-4">Carregando...</div>
                ) : (
                  <div className="grid gap-4">
                    {lojas.map(loja => (
                      <div key={loja.id} className="bg-white p-4 rounded-lg shadow-md">
                        <h4 className="font-semibold">{loja.loja_nome} ({loja.id_loja})</h4>
                        <p className="text-gray-600">{loja.loja_endereco}</p>
                        <p className="text-gray-600">{loja.loja_telefone}</p>
                        <p className="text-gray-600">Perímetro: {loja.loja_perimetro_entrega}</p>
                        <span className={`inline-block px-2 py-1 rounded text-xs ${
                          loja.ativa ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {loja.ativa ? 'Ativa' : 'Inativa'}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Aba: Usuários Pendentes */}
          {activeTab === 'usuarios' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Usuários Pendentes</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {usuariosPendentes.map(usuario => (
                    <div key={usuario.uid} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{usuario.nome_completo}</h4>
                      <p className="text-gray-600">{usuario.email}</p>
                      <p className="text-gray-600">{usuario.telefone}</p>
                      <button
                        onClick={() => {
                          const lojaId = prompt('Digite o ID da loja para associar (ex: L1):');
                          if (lojaId) handleAssociarGerente(usuario.uid, lojaId);
                        }}
                        className="bg-green-500 text-white px-3 py-1 rounded text-sm mt-2"
                      >
                        Associar como Gerente
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Aba: Associações */}
          {activeTab === 'associacoes' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Associações Ativas</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {associacoes.map(associacao => (
                    <div key={associacao.id} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{associacao.nome_completo}</h4>
                      <p className="text-gray-600">Função: {associacao.funcao}</p>
                      <p className="text-gray-600">Loja: {associacao.loja_nome}</p>
                      <p className="text-gray-600">Status: {associacao.status_vinculacao}</p>
                      <p className="text-gray-600 text-sm">
                        Última atualização: {new Date(associacao.ultimo_status_vinculacao).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}

// ==============================================================================
// MARCAÇÃO: ESTA PÁGINA NÃO USA LAYOUT PADRÃO (já é aplicado pelo _app.js)
// ==============================================================================



// =========================================
// 4. src\pages\atualizar-senha.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import Link from 'next/link';

export default function AtualizarSenha() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [session, setSession] = useState(null);
  const router = useRouter();

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
    });

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    return () => subscription.unsubscribe();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    if (password !== confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }

    if (password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) throw error;

      setSuccess('Senha atualizada com sucesso!');
      
      setTimeout(() => {
        router.push('/login');
      }, 2000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  if (!session) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 flex items-center justify-center">
        <div className="bg-white p-8 rounded-2xl shadow-2xl text-center">
          <p className="text-red-600 mb-4">Link inválido ou expirado</p>
          <Link href="/recuperar-senha" className="text-purple-600 hover:text-purple-800">
            Solicitar novo link
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">Nova Senha</h2>
          <p className="text-purple-200 mt-2">Digite sua nova senha</p>
        </div>

        {/* Card de Atualização */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Atualizar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Campo Nova Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                Nova Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Mínimo 6 caracteres"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            {/* Campo Confirmar Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                Confirmar Nova Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Digite novamente a senha"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Atualizando...' : 'Atualizar Senha'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
AtualizarSenha.noLayout = true;


// =========================================
// 5. src\pages\cadastro.js
// =========================================

// pages/cadastro.js
import { useState } from 'react';
import { supabase } from '../../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE CADASTRO COM NOME E TELEFONE
// ==============================================================================
/**
 * Inclui campos para nome completo e telefone, essenciais para credenciamento de motoristas.
 * Exibe mensagem sobre confirmação de email após cadastro.
 * Redireciona para /login após sucesso para tentativa de login.
 * Aprendizado: Integre mensagens de suporte ao fluxo de autenticação do Supabase.
 */
export default function Cadastro() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE (BLOCO DE ESTADOS)
  // ============================================================================
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    nome_completo: '',
    telefone: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. FUNÇÃO: ATUALIZAÇÃO DOS CAMPOS (BLOCO DE FUNÇÃO)
  // ============================================================================
  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  // ============================================================================
  // 3. FUNÇÃO: SUBMISSÃO DO CADASTRO (BLOCO DE FUNÇÃO ASSÍNCRONA)
  // ============================================================================
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    // 3.1. VALIDAÇÕES
    if (formData.password !== formData.confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }
    if (formData.password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }
    if (!formData.nome_completo.trim()) {
      setError('O nome completo é obrigatório');
      setLoading(false);
      return;
    }
    if (!formData.telefone.trim()) {
      setError('O telefone é obrigatório');
      setLoading(false);
      return;
    }

    try {
      // 3.2. CRIAÇÃO NO AUTH
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
        options: {
          data: {
            nome_completo: formData.nome_completo,
            telefone: formData.telefone
          }
        }
      });

      if (authError) throw authError;

      // 3.3. INSERÇÃO NA TABELA USUÁRIOS
      const { error: userError } = await supabase
        .from('usuarios')
        .insert({
          uid: authData.user.id,
          email: formData.email,
          nome_usuario: formData.email,
          nome_completo: formData.nome_completo,
          telefone: formData.telefone,
          foto: '',
          is_admin: false
        });

      if (userError) throw userError;

      // 3.4. SUCESSO E REDIRECIONAMENTO
      setSuccess('Cadastro realizado! Verifique seu email e clique no link de confirmação para fazer login.');
      setTimeout(() => {
        router.push('/login');
      }, 2000);
    } catch (error) {
      console.error('Erro detalhado:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO COMPONENTE (BLOCO DE JSX)
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 4.1. SEÇÃO VISUAL: LOGO E TÍTULO */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Criar Nova Conta</p>
        </div>

        {/* 4.2. CARD PRINCIPAL: CONTAINER DE CADASTRO */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Cadastro
          </h3>

          {/* 4.2.1. EXIBIÇÃO DE ERRO OU SUCESSO */}
          {error && <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">{error}</div>}
          {success && <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">{success}</div>}

          {/* 4.2.2. FORMULÁRIO COM NOME E TELEFONE */}
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="nome_completo" className="block text-sm font-medium text-gray-700">
                Nome Completo
              </label>
              <input
                id="nome_completo"
                name="nome_completo"
                type="text"
                value={formData.nome_completo}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="Seu nome completo"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="telefone" className="block text-sm font-medium text-gray-700">
                Telefone
              </label>
              <input
                id="telefone"
                name="telefone"
                type="tel"
                value={formData.telefone}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="(11) 99999-9999"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
                disabled={loading}
              />
            </div>

            <div className="relative">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  value={formData.password}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Mínimo 6 caracteres"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={loading}
                >
                  {showPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <div className="relative">
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirmar Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Digite novamente sua senha"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  disabled={loading}
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Criando conta...' : 'Criar Conta'}
            </button>
          </form>

          {/* 4.2.3. LINK PARA LOGIN */}
          <div className="mt-6 text-center">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Já tem uma conta? Faça login
            </Link>
          </div>
        </div>

        {/* 4.3. SEÇÃO DE RODAPÉ */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2025 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
Cadastro.noLayout = true;


// =========================================
// 6. src\pages\gestao-entregadores.js
// =========================================

// pages/gestao-entregadores.js (VERSÃO MELHORADA)
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// PÁGINA: GESTÃO DE ENTREGADORES
// ==============================================================================
export default function GestaoEntregadores() {
  const [entregadores, setEntregadores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [buscaEmail, setBuscaEmail] = useState('');
  const [usuarioEncontrado, setUsuarioEncontrado] = useState(null);
  const [buscando, setBuscando] = useState(false);

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 1. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 2. CARREGAR ENTREGADORES DA LOJA (COM MAIS CAMPOS)
  // ============================================================================
  useEffect(() => {
    if (userRole === 'gerente' || userRole === 'admin') {
      carregarEntregadores();
    }
  }, [userRole]);

  const carregarEntregadores = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('loja_associada')
        .select('*');

      // Gerente só vê pessoas da sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      // Filtrar apenas entregadores e gerentes
      const pessoasLoja = data.filter(pessoa => 
        pessoa.funcao === 'entregador' || pessoa.funcao === 'gerente'
      );
      
      setEntregadores(pessoasLoja || []);
    } catch (error) {
      console.error('Erro ao carregar pessoas da loja:', error);
      alert('Erro ao carregar lista de pessoas');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 3. BUSCAR USUÁRIO POR EMAIL NO SISTEMA (COM MAIS DETALHES)
  // ============================================================================
  const buscarUsuarioPorEmail = async () => {
    if (!buscaEmail.trim()) {
      alert('Por favor, digite um email para buscar');
      return;
    }
    
    try {
      setBuscando(true);
      
      // Buscar usuário na tabela usuarios pelo email
      const { data: usuario, error: usuarioError } = await supabase
        .from('usuarios')
        .select('uid, email, nome_completo, telefone, foto')
        .eq('email', buscaEmail.trim())
        .single();

      if (usuarioError) {
        if (usuarioError.code === 'PGRST116') {
          setUsuarioEncontrado(null);
          alert('Usuário não encontrado no sistema');
        } else {
          throw usuarioError;
        }
        return;
      }

      // Buscar TODOS os detalhes das lojas associadas a este usuário
      const { data: lojasAssociadas, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', usuario.uid);

      if (lojasError) throw lojasError;

      // Combinar dados do usuário com suas lojas
      setUsuarioEncontrado({
        ...usuario,
        lojasAssociadas: lojasAssociadas || []
      });

    } catch (error) {
      console.error('Erro ao buscar usuário:', error);
      alert('Erro ao buscar usuário. Verifique o console.');
      setUsuarioEncontrado(null);
    } finally {
      setBuscando(false);
    }
  };

  // ============================================================================
  // 4. VINCULAR USUÁRIO COMO ENTREGADOR
  // ============================================================================
  const vincularComoEntregador = async (usuario) => {
    if (!confirm(`Vincular ${usuario.nome_completo} como entregador nesta loja?`)) return;
    
    try {
      if (userRole === 'gerente' && (!userLojas || userLojas.length === 0)) {
        alert('Erro: Gerente não está vinculado a nenhuma loja');
        return;
      }

      const lojaId = userRole === 'gerente' ? userLojas[0].id_loja : prompt('Digite o ID da loja (admin):');
      const lojaNome = userRole === 'gerente' ? userLojas[0].loja_nome : prompt('Digite o nome da loja (admin):');

      if (!lojaId || !lojaNome) return;

      // Verificar se usuário já está vinculado a esta loja
      const { data: vinculoExistente } = await supabase
        .from('loja_associada')
        .select('id')
        .eq('uid_usuario', usuario.uid)
        .eq('id_loja', lojaId)
        .single();

      if (vinculoExistente) {
        alert('Este usuário já está vinculado a esta loja');
        return;
      }

      // Vincular usuário como entregador
      const { error } = await supabase
        .from('loja_associada')
        .insert({
          uid_usuario: usuario.uid,
          nome_completo: usuario.nome_completo,
          email_usuario: usuario.email, // ✅ NOVO CAMPO
          funcao: 'entregador',
          id_loja: lojaId,
          loja_nome: lojaNome,
          status_vinculacao: 'ativo',
          veiculo: 'Não informado',
          carga_maxima: 0,
          perimetro_entrega: 'Não definido',
          ultimo_status_vinculacao: new Date().toISOString()
        });

      if (error) throw error;

      alert('✅ Entregador vinculado com sucesso!');
      setBuscaEmail('');
      setUsuarioEncontrado(null);
      carregarEntregadores();
    } catch (error) {
      console.error('Erro ao vincular entregador:', error);
      alert('❌ Erro ao vincular entregador');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: FORMATAR VALOR NULO
  // ============================================================================
  const formatarValor = (valor) => {
    return valor || 'Não informado';
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  if (userRole !== 'admin' && userRole !== 'gerente') {
    return <div className="min-h-screen flex items-center justify-center">Acesso não autorizado</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">👥 Gestão de Entregadores</h1>

      {/* BUSCA POR EMAIL */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Buscar Usuário no Sistema</h2>
        <div className="flex gap-2 mb-4">
          <input
            type="email"
            placeholder="Digite o email do usuário"
            value={buscaEmail}
            onChange={(e) => setBuscaEmail(e.target.value)}
            className="flex-1 p-2 border border-gray-300 rounded"
            onKeyPress={(e) => e.key === 'Enter' && buscarUsuarioPorEmail()}
          />
          <button
            onClick={buscarUsuarioPorEmail}
            disabled={buscando}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
          >
            {buscando ? 'Buscando...' : 'Buscar'}
          </button>
        </div>

        {/* RESULTADO DA BUSCA - COM MAIS DETALHES */}
        {usuarioEncontrado && (
          <div className="mt-4 p-4 border border-green-200 bg-green-50 rounded">
            <h3 className="font-semibold text-green-800 mb-3">👤 Usuário encontrado:</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
              <div>
                <p><strong>Nome:</strong> {usuarioEncontrado.nome_completo}</p>
                <p><strong>Email:</strong> {usuarioEncontrado.email}</p>
                {usuarioEncontrado.telefone && (
                  <p><strong>Telefone:</strong> {usuarioEncontrado.telefone}</p>
                )}
              </div>
              
              {usuarioEncontrado.foto && (
                <div className="flex justify-center">
                  <img 
                    src={usuarioEncontrado.foto} 
                    alt="Foto do usuário"
                    className="w-16 h-16 rounded-full"
                  />
                </div>
              )}
            </div>

            <div className="mt-3">
              <strong>🏪 Lojas Associadas:</strong>
              {usuarioEncontrado.lojasAssociadas.length > 0 ? (
                <div className="ml-4 mt-2 space-y-2">
                  {usuarioEncontrado.lojasAssociadas.map((loja, index) => (
                    <div key={index} className="p-2 bg-white rounded border">
                      <p><strong>Loja:</strong> {loja.loja_nome} ({loja.id_loja})</p>
                      <p><strong>Função:</strong> 
                        <span className={`ml-1 ${
                          loja.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                        }`}>
                          {loja.funcao}
                        </span>
                      </p>
                      <p><strong>Status:</strong> 
                        <span className={`ml-1 ${
                          loja.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {loja.status_vinculacao}
                        </span>
                      </p>
                      {loja.veiculo && <p><strong>🚗 Veículo:</strong> {formatarValor(loja.veiculo)}</p>}
                      {loja.carga_maxima > 0 && <p><strong>📦 Carga Máxima:</strong> {loja.carga_maxima} kg</p>}
                      {loja.perimetro_entrega && <p><strong>📍 Perímetro:</strong> {formatarValor(loja.perimetro_entrega)}</p>}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-600 ml-4">Nenhuma loja associada</p>
              )}
            </div>

            <button
              onClick={() => vincularComoEntregador(usuarioEncontrado)}
              className="mt-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
            >
              ➕ Vincular como Entregador
            </button>
          </div>
        )}
      </div>

      {/* LISTA DE PESSOAS DA LOJA - COM MAIS DETALHES */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4">
          {userRole === 'gerente' ? '👥 Pessoas da Minha Loja' : '👥 Pessoas do Sistema'}
        </h2>
        
        {loading ? (
          <p className="text-gray-500">Carregando...</p>
        ) : entregadores.length === 0 ? (
          <p className="text-gray-500">Nenhuma pessoa encontrada</p>
        ) : (
          <div className="grid gap-4">
            {entregadores.map((pessoa) => (
              <div key={pessoa.id} className="border p-4 rounded-lg bg-gray-50">
                <h3 className="font-semibold text-lg text-purple-800">
                  {pessoa.funcao === 'gerente' ? '👑 ' : '🚚 '}
                  {pessoa.nome_completo}
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-2">
                  <div>
                    <p><strong>📧 Email:</strong> {pessoa.email_usuario}</p>
                    <p><strong>🎯 Função:</strong> 
                      <span className={`ml-1 ${
                        pessoa.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                      }`}>
                        {pessoa.funcao}
                      </span>
                    </p>
                    <p><strong>📊 Status:</strong> 
                      <span className={`ml-1 ${
                        pessoa.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {pessoa.status_vinculacao}
                      </span>
                    </p>
                  </div>
                  
<div>
  <p><strong>🏪 Loja:</strong> {pessoa.loja_nome} ({pessoa.id_loja})</p>
  
  {/* MOSTRAR CAMPOS DE ENTREGA APENAS PARA ENTREGADORES */}
  {pessoa.funcao === 'entregador' && (
    <>
      <p><strong>🚗 Veículo:</strong> {formatarValor(pessoa.veiculo)}</p>
      {pessoa.carga_maxima > 0 && (
        <p><strong>📦 Carga Máx:</strong> {pessoa.carga_maxima} kg</p>
      )}
      {pessoa.perimetro_entrega && (
        <p><strong>📍 Perímetro:</strong> {formatarValor(pessoa.perimetro_entrega)}</p>
      )}
    </>
  )}

  {/* MOSTRAR MENSAGEM ESPECIAL PARA GERENTES */}
  {pessoa.funcao === 'gerente' && (
    <p className="text-green-600 text-sm mt-1">
      👑 Gerente da loja
    </p>
  )}
</div>
                </div>
                
                {pessoa.data_desligamento && (
                  <p className="text-red-600 text-sm mt-2">
                    <strong>🗓️ Data desligamento:</strong> {new Date(pessoa.data_desligamento).toLocaleDateString('pt-BR')}
                  </p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


// =========================================
// 7. src\pages\index.js
// =========================================

// Importação de dependências necessárias do Next.js e React
import Head from 'next/head';
import Link from 'next/link';
import { useEffect } from 'react';

// Componente principal da página inicial
export default function HomePage() {
  // Hook useEffect para configurar a navegação suave
  useEffect(() => {
    // Seleção de todos os links internos que começam com '#'
    const anchors = document.querySelectorAll('a[href^="#"]');

    // Função para lidar com o clique em links internos
    const handleAnchorClick = (e) => {
      e.preventDefault();
      const targetId = e.currentTarget.getAttribute('href');

      // Verifica se o link não é apenas '#'
      if (targetId === '#') return;

      // Encontra o elemento alvo pelo ID
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        // Realiza a rolagem suave com offset para compensar o cabeçalho
        window.scrollTo({
          top: targetElement.offsetTop - 80, // Ajuste de 80px para o cabeçalho
          behavior: 'smooth'
        });
      }
    };

    // Adiciona event listeners para todos os links internos
    anchors.forEach(anchor => {
      anchor.addEventListener('click', handleAnchorClick);
    });

    // Cleanup: remove os event listeners quando o componente é desmontado
    return () => {
      anchors.forEach(anchor => {
        anchor.removeEventListener('click', handleAnchorClick);
      });
    };
  }, []);

  return (
    <>
      {/* Configuração do cabeçalho HTML com título e importação de Font Awesome */}
      <Head>
        <title>VendasWoo + EntregasWoo - Sistema Completo para E-commerce e Entregas</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
      </Head>

      {/* Cabeçalho da página com apenas o título */}
      <header>
        <div className="container">
          <div className="header-content">
            <div className="logo">
              <h1>VendasWoo <span>+ EntregasWoo</span></h1>
            </div>
          </div>
        </div>
      </header>

      {/* Seção Hero com chamada principal */}
      <section className="hero">
        <div className="container">
          <h2>Sistema Completo para E-commerce e Entregas</h2>
          <p>Conectamos lojas a entregadores locais para simplificar e agilizar as entregas na sua região.</p>
          <div className="hero-buttons">
            <Link href="#para-lojas" className="btn">Sou Lojista</Link>
            <Link href="#para-entregadores" className="btn btn-accent">Sou Entregador</Link>
            <a href="https://wa.me/552132727548" className="btn btn-outline" target="_blank" rel="noopener noreferrer">Fale no WhatsApp</a>
          </div>
        </div>
      </section>

      {/* Seção Como Funciona com passos para entregadores e lojas */}
      <section className="how-it-works" id="como-funciona">
        <div className="container">
          <div className="section-title">
            <h2>Como Funciona</h2>
            <p>Dois sistemas integrados para atender lojas e entregadores</p>
          </div>
          
          <div className="dual-steps">
            <div className="steps-container">
              <h3 className="steps-title">Para Entregadores</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Cadastro Simplificado</h4>
                  <p>Faça seu cadastro como motorista autônomo MEI com documentação em ordem.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Defina sua Área de Atuação</h4>
                  <p>Informe seu veículo, capacidade de carga e o perímetro onde quer trabalhar.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Conexão com Lojas</h4>
                  <p>Conectamos você às empresas que precisam de entregas na sua região.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Combine Preços e Área</h4>
                  <p>Negocie diretamente com as lojas os valores e detalhes do serviço.</p>
                </div>
              </div>
            </div>
            
            <div className="steps-container">
              <h3 className="steps-title">Para Lojas</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Plataforma Completa</h4>
                  <p>Tenha seu e-commerce com catálogo de produtos, atualização de preços fácil e múltiplas formas de pagamento.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Integração Total</h4>
                  <p>Receba pedidos pelo app, computador e WhatsApp integrados em um único sistema.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Gestão Completa</h4>
                  <p>Controle de estoque, relatórios, emissão de recibos e muito mais.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Entregas Terceirizadas</h4>
                  <p>Use o EntregasWoo para conectar-se a entregadores de bairro e terceirizar suas entregas.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Seção Para Lojas com benefícios */}
      <section id="para-lojas" className="benefits">
        <div className="container">
          <div className="section-title">
            <h2>Para Lojas e Empresas</h2>
            <p>Sistema completo para vendas online e gestão de entregas</p>
          </div>
          <ul className="benefits-list">
            <li>Plataforma online para apresentar seus produtos de forma profissional</li>
            <li>Atualização de preços fácil e intuitiva</li>
            <li>Múltiplas formas de pagamento integradas (PIX, cartão, etc)</li>
            <li>Recebimento de pedidos por app, computador e WhatsApp</li>
            <li>Controle de estoque em tempo real</li>
            <li>Relatórios detalhados de vendas e desempenho</li>
            <li>Emissão de recibos e comprovantes</li>
            <li>App EntregasWoo para terceirizar entregas para motoristas de bairro</li>
            <li>Gestão integrada de pedidos e entregas em um único sistema</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de saber mais sobre o sistema para lojas" className="btn">Quero saber mais</a>
          </div>
        </div>
      </section>

      {/* Seção Para Entregadores com benefícios */}
      <section id="para-entregadores" className="benefits" style={{backgroundColor: 'var(--light-gray)'}}>
        <div className="container">
          <div className="section-title">
            <h2>Para Entregadores</h2>
            <p>Conecte-se com lojas da sua região e aumente sua renda</p>
          </div>
          <ul className="benefits-list">
            <li>Cadastro gratuito para motoristas MEI com documentação regular</li>
            <li>Defina o tipo de veículo, capacidade de carga e área de atuação</li>
            <li>Escolha o perímetro onde quer trabalhar (bairros, regiões)</li>
            <li>Conexão direta com empresas que precisam de entregas na sua área</li>
            <li>Negociação direta de preços e condições de serviço</li>
            <li>Flexibilidade de horários - trabalhe quando quiser</li>
            <li>App simples para gerenciar corridas e ganhos</li>
            <li>Pagamentos rápidos e transparentes</li>
            <li>Construa sua reputação com avaliações das lojas</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de me cadastrar como entregador" className="btn btn-accent">Quero me cadastrar</a>
          </div>
        </div>
      </section>

      {/* Seção de Chamada para Ação (CTA) */}
      <section className="cta">
        <div className="container">
          <h2>Pronto para transformar seu negócio ou aumentar sua renda?</h2>
          <p>Entre em contato e faça um teste grátis dos nossos sistemas</p>
          <a href="https://wa.me/552132727548" className="btn" target="_blank" rel="noopener noreferrer">Fale conosco no WhatsApp</a>
        </div>
      </section>

      {/* Rodapé com links rápidos e informações de contato */}
      <footer id="contato">
        <div className="container">
          <div className="footer-content">
            <div className="footer-column">
              <h3>VendasWoo + EntregasWoo</h3>
              <p>Sistema integrado de e-commerce e gestão de entregas</p>
            </div>
            <div className="footer-column">
              <h3>Links Rápidos</h3>
              <ul>
                <li><Link href="#como-funciona">Como Funciona</Link></li>
                <li><Link href="#para-lojas">Para Lojas</Link></li>
                <li><Link href="#para-entregadores">Para Entregadores</Link></li>
                <li><a href="https://pedidossimples.com.br/vendaswoo/" target="_blank" rel="noopener noreferrer">VendasWoo</a></li>
              </ul>
            </div>
            <div className="footer-column">
              <h3>Contato</h3>
              <ul>
                <li>Email: comercial@abistec.com.br</li>
                <li>WhatsApp: (21) 3272-7548</li>
                <li>Site: <a href="https://pedidossimples.com.br">pedidossimples.com.br</a></li>
              </ul>
            </div>
          </div>
          <div className="copyright">
            <p>&copy; 2023 VendasWoo + EntregasWoo - Abistec Serviços Tecnológicos Ltda</p>
          </div>
        </div>
      </footer>

      {/* Estilos globais usando styled-jsx */}
      <style jsx global>{`
        :root {
          --primary: #3b7b2b;
          --secondary: #5c3b27;
          --accent: #f39c12;
          --light: #fdfaf6;
          --dark: #333;
          --gray: #777;
          --light-gray: #f5f5f5;
        }
        
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
          background-color: var(--light);
          color: var(--dark);
          line-height: 1.6;
        }
        
        .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0 20px;
        }
        
        /* Estilos do Cabeçalho */
        header {
          background-color: white;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          /* Removido o comportamento sticky para fluir com a rolagem */
        }
        
        .header-content {
          display: flex;
          justify-content: center;
          align-items: center;
          padding: 15px 0;
        }
        
        .logo {
          display: flex;
          align-items: center;
        }
        
        .logo h1 {
          color: var(--primary);
          font-size: 1.8rem;
          font-weight: bold;
        }
        
        .logo span {
          color: var(--secondary);
        }
        
        nav ul {
          display: flex;
          list-style: none;
        }
        
        nav li {
          margin-left: 25px;
        }
        
        nav a {
          text-decoration: none;
          color: var(--dark);
          font-weight: 500;
          transition: color 0.3s;
        }
        
        nav a:hover {
          color: var(--primary);
        }
        
        .btn {
          display: inline-block;
          padding: 12px 25px;
          background-color: var(--primary);
          color: white;
          border-radius: 5px;
          text-decoration: none;
          font-weight: 600;
          transition: all 0.3s;
          border: none;
          cursor: pointer;
        }
        
        .btn:hover {
          background-color: #2c5e20;
          transform: translateY(-2px);
        }
        
        .btn-outline {
          background-color: transparent;
          border: 2px solid var(--primary);
          color: var(--primary);
        }
        
        .btn-outline:hover {
          background-color: var(--primary);
          color: white;
        }
        
        .btn-accent {
          background-color: var(--accent);
        }
        
        .btn-accent:hover {
          background-color: #e67e22;
        }
        
        /* Estilos da Seção Hero */
        .hero {
          padding: 80px 0;
          background: linear-gradient(135deg, rgba(59,123,43,0.1) 0%, rgba(92,59,39,0.1) 100%);
          text-align: center;
        }
        
        .hero h2 {
          font-size: 2.5rem;
          margin-bottom: 20px;
          color: var(--secondary);
        }
        
        .hero p {
          font-size: 1.2rem;
          max-width: 800px;
          margin: 0 auto 30px;
          color: var(--gray);
        }
        
        .hero-buttons {
          display: flex;
          justify-content: center;
          gap: 15px;
          margin-top: 30px;
          flex-wrap: wrap;
        }
        
        /* Estilos da Seção Como Funciona */
        .how-it-works {
          padding: 80px 0;
          background-color: var(--light-gray);
        }
        
        .section-title {
          text-align: center;
          margin-bottom: 50px;
        }
        
        .section-title h2 {
          font-size: 2rem;
          color: var(--secondary);
          margin-bottom: 15px;
        }
        
        .section-title p {
          color: var(--gray);
          max-width: 700px;
          margin: 0 auto;
        }
        
        .dual-steps {
          display: flex;
          justify-content: space-between;
          flex-wrap: wrap;
          gap: 40px;
        }
        
        .steps-container {
          flex: 1;
          min-width: 300px;
          background: white;
          border-radius: 10px;
          padding: 30px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        .steps-title {
          text-align: center;
          margin-bottom: 30px;
          color: var(--primary);
          font-size: 1.5rem;
        }
        
        .step {
          display: flex;
          margin-bottom: 25px;
          align-items: flex-start;
        }
        
        .step-number {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background-color: var(--primary);
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          margin-right: 15px;
          flex-shrink: 0;
        }
        
        .step-content {
          flex: 1;
        }
        
        /* Estilos da Seção Benefícios */
        .benefits {
          padding: 80px 0;
          background-color: white;
        }
        
        .benefits-list {
          list-style: none;
          max-width: 800px;
          margin: 0 auto;
        }
        
        .benefits-list li {
          padding: 15px 0;
          border-bottom: 1px solid #eee;
          display: flex;
          align-items: center;
        }
        
        .benefits-list li:before {
          content: "✓";
          color: var(--primary);
          font-weight: bold;
          margin-right: 10px;
          font-size: 1.2rem;
        }
        
        /* Estilos da Seção CTA */
        .cta {
          padding: 80px 0;
          background: linear-gradient(135deg, var(--primary) 0%, #2c5e20 100%);
          color: white;
          text-align: center;
        }
        
        .cta h2 {
          font-size: 2.2rem;
          margin-bottom: 20px;
        }
        
        .cta p {
          max-width: 700px;
          margin: 0 auto 30px;
          font-size: 1.1rem;
        }
        
        .cta .btn {
          background-color: white;
          color: var(--primary);
        }
        
        .cta .btn:hover {
          background-color: #f0f0f0;
        }
        
        /* Estilos do Rodapé */
        footer {
          background-color: var(--secondary);
          color: white;
          padding: 50px 0 20px;
        }
        
        .footer-content {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 30px;
          margin-bottom: 30px;
        }
        
        .footer-column h3 {
          margin-bottom: 20px;
          font-size: 1.2rem;
        }
        
        .footer-column ul {
          list-style: none;
        }
        
        .footer-column li {
          margin-bottom: 10px;
        }
        
        .footer-column a {
          color: #ddd;
          text-decoration: none;
          transition: color 0.3s;
        }
        
        .footer-column a:hover {
          color: white;
        }
        
        .copyright {
          text-align: center;
          padding-top: 20px;
          border-top: 1px solid rgba(255,255,255,0.1);
          font-size: 0.9rem;
          color: #ddd;
        }
        
        /* Estilos Responsivos */
        @media (max-width: 768px) {
          .header-content {
            flex-direction: column;
          }
          
          .hero h2 {
            font-size: 2rem;
          }
          
          .hero-buttons {
            flex-direction: column;
            align-items: center;
          }
          
          .dual-steps {
            flex-direction: column;
          }
        }
      `}</style>
    </>
  );
}



// =========================================
// 8. src\pages\login.js
// =========================================

// pages/login.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE LOGIN
// ==============================================================================
/**
 * Página de login com suporte a autenticação via Google OAuth e email/senha.
 * Inclui modal controlado, redirecionamento baseado em perfil (admin, gerente, entregador)
 * e links para cadastro e recuperação de senha.
 * Aprimoramentos: Validação de formulário, acessibilidade e feedback visual.
 */
export default function Login() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [email, setEmail] = useState('');              // Email do usuário
  const [password, setPassword] = useState('');        // Senha do usuário
  const [loading, setLoading] = useState(false);       // Estado de carregamento
  const [error, setError] = useState('');              // Mensagens de erro
  const [showPassword, setShowPassword] = useState(false); // Visibilidade da senha
  const [isModalOpen, setIsModalOpen] = useState(false);  // Controle do modal
  const [formValid, setFormValid] = useState(false);    // Validação do formulário
  const router = useRouter();

  // ============================================================================
  // 2. EFFECT: VALIDAR FORMULÁRIO EM TEMPO REAL
  // ============================================================================
  /**
   * Valida email e senha em tempo real, atualizando o estado de validade.
   * Requisitos: Email válido e senha com no mínimo 6 caracteres.
   */
  useEffect(() => {
    const emailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    const passwordValid = password.length >= 6;
    setFormValid(emailValid && passwordValid);
  }, [email, password]);

  // ============================================================================
  // 3. FUNÇÃO: TRADUZIR ERROS TÉCNICOS PARA MENSAGENS AMIGÁVEIS
  // ============================================================================
  /**
   * Converte erros técnicos do Supabase em mensagens amigáveis para o usuário
   */
  const translateError = (error) => {
    if (error.message.includes('Invalid login credentials')) {
      return 'E-mail ou senha incorretos. Verifique suas credenciais.';
    } else if (error.message.includes('Email not confirmed')) {
      return 'E-mail não confirmado. Verifique sua caixa de entrada.';
    } else if (error.message.includes('User not found')) {
      return 'Usuário não encontrado. Verifique o e-mail ou crie uma conta.';
    } else if (error.message.includes('Network error')) {
      return 'Erro de conexão. Verifique sua internet e tente novamente.';
    } else if (error.message.includes('Too many requests')) {
      return 'Muitas tentativas. Tente novamente em alguns minutos.';
    } else {
      return 'Erro ao fazer login. Tente novamente.';
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: LOGIN COM EMAIL/SENHA
  // ============================================================================
  /**
   * Autentica o usuário com email/senha e redireciona com base no perfil.
   * Inclui validação prévia e tratamento de erros detalhado.
   */
  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    if (!formValid) {
      setError('Por favor, insira um email válido e uma senha com pelo menos 6 caracteres.');
      setLoading(false);
      return;
    }

    try {
      // 4.1. AUTENTICAÇÃO COM SUPABASE
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      
      if (authError) {
        throw authError;
      }

      // 4.2. VERIFICAÇÃO DE PERFIL E REDIRECIONAMENTO
      const { data: usuario, error: userError } = await supabase
        .from('usuarios')
        .select('is_admin')
        .eq('uid', authData.user.id)
        .single();
      
      if (userError) throw userError;

      if (usuario.is_admin) {
        router.push('/admin');
        return;
      }

      const { data: associacoes, error: assocError } = await supabase
        .from('loja_associada')
        .select('funcao')
        .eq('uid_usuario', authData.user.id)
        .eq('status_vinculacao', 'ativo');
      
      if (assocError) throw new Error('Erro ao verificar permissões: ' + assocError.message);

      if (!associacoes || associacoes.length === 0) {
        setError('Você não possui acesso ativo. Contate o administrador.');
        await supabase.auth.signOut(); // Desconta usuário sem acesso
        return;
      }

      const primeiraAssociacao = associacoes[0];
      switch (primeiraAssociacao.funcao) {
        case 'gerente':
          router.push('/todos-pedidos');
          break;
        case 'entregador':
          router.push('/pedidos-pendentes');
          break;
        default:
          throw new Error('Função não reconhecida.');
      }
    } catch (error) {
      // 4.3. TRATAMENTO DE ERROS AMIGÁVEL
      setError(translateError(error));
      console.error('Erro no login:', error);
    } finally {
      // 4.4. FINALIZAÇÃO
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: LOGIN COM GOOGLE
  // ============================================================================
  /**
   * Inicia o fluxo de login com Google OAuth, redirecionando para completar perfil.
   * Inclui tratamento de erros e feedback visual.
   */
  const handleGoogleLogin = async () => {
    try {
      setLoading(true);
      setError('');
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/perfil`,
        },
      });
      if (error) throw error;
    } catch (error) {
      setError(translateError(error));
      console.error('Erro no login Google:', error);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 6.1. SEÇÃO VISUAL: LOGO E TÍTULO */}
        <div className="text-center mb-8">
          <div
            className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center"
            role="img"
            aria-label="Ícone de entrega"
          >
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h1 className="text-3xl font-bold text-white">EntregasWoo</h1>
          <p className="text-purple-200 mt-2">Sistema de Gestão de Entregas</p>
        </div>

        {/* 6.2. CARD PRINCIPAL: CONTAINER DE LOGIN */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h2 className="text-2xl font-bold text-gray-800 text-center mb-6" id="login-title">
            Acessar Sistema
          </h2>

          {/* 6.2.1. EXIBIÇÃO DE ERRO */}
          {error && (
            <div
              className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4 flex items-start"
              role="alert"
            >
              <svg className="w-5 h-5 mr-2 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>{error}</span>
            </div>
          )}

          {/* 6.2.2. BOTÃO DE LOGIN GOOGLE */}
          <button
            onClick={handleGoogleLogin}
            disabled={loading}
            className="w-full flex items-center justify-center py-3 px-4 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Login com Google"
          >
            {loading ? (
              <span className="flex items-center">
                <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Carregando...
              </span>
            ) : (
              <>
                <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Entrar com Google
              </>
            )}
          </button>

          {/* 6.2.3. ABRE MODAL PARA LOGIN EMAIL/SENHA */}
          <div className="mt-4 text-center">
            <button
              onClick={() => setIsModalOpen(true)}
              className="text-purple-600 hover:text-purple-800 font-medium"
              aria-controls="email-login-modal"
            >
              Ou entre com email e senha
            </button>
          </div>

          {/* 6.2.4. MODAL DE LOGIN EMAIL/SENHA */}
          {isModalOpen && (
            <div
              className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
              role="dialog"
              aria-labelledby="email-login-modal-title"
              aria-modal="true"
              onClick={() => setIsModalOpen(false)}
            >
              <div 
                className="bg-white rounded-2xl shadow-2xl p-6 w-full max-w-md"
                onClick={(e) => e.stopPropagation()}
              >
                <div className="flex justify-between items-center mb-4">
                  <h3
                    id="email-login-modal-title"
                    className="text-xl font-bold text-gray-800"
                  >
                    Login com Email
                  </h3>
                  <button
                    onClick={() => setIsModalOpen(false)}
                    className="text-gray-500 hover:text-gray-700"
                    aria-label="Fechar modal"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                <form onSubmit={handleLogin} className="space-y-4">
                  <div>
                    <label
                      htmlFor="email-input"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Email
                    </label>
                    <input
                      id="email-input"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      required
                      disabled={loading}
                      aria-required="true"
                      placeholder="seu@email.com"
                    />
                  </div>
                  
                  <div className="relative">
                    <label
                      htmlFor="password-input"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Senha
                    </label>
                    <input
                      id="password-input"
                      type={showPassword ? "text" : "password"}
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      required
                      disabled={loading}
                      aria-required="true"
                      placeholder="Sua senha"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute right-3 top-9 text-gray-500"
                      disabled={loading}
                      aria-label={showPassword ? "Ocultar senha" : "Mostrar senha"}
                    >
                      {showPassword ? (
                        <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                        </svg>
                      ) : (
                        <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                        </svg>
                      )}
                    </button>
                  </div>
                  
                  <button
                    type="submit"
                    disabled={loading || !formValid}
                    className="w-full bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {loading ? (
                      <span className="flex items-center justify-center">
                        <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Entrando...
                      </span>
                    ) : (
                      'Entrar'
                    )}
                  </button>
                </form>
                
                <div className="mt-4 text-center">
                  <Link
                    href="/recuperar-senha"
                    className="text-purple-600 hover:text-purple-800 text-sm"
                    onClick={() => setIsModalOpen(false)}
                  >
                    Esqueceu sua senha?
                  </Link>
                </div>
              </div>
            </div>
          )}

          {/* 6.2.5. LINKS EXTRAS */}
          <div className="mt-6 text-center space-y-3">
            <p className="text-gray-600 text-sm">
              Não tem uma conta?{' '}
              <Link
                href="/cadastro"
                className="text-purple-600 hover:text-purple-800 font-medium"
              >
                Criar nova conta
              </Link>
            </p>
          </div>
        </div>

        {/* 6.3. SEÇÃO DE RODAPÉ */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2025 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 9. src\pages\orders.js
// =========================================

import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const { data, error } = await supabase.from('pedidos').select('*');
        if (error) throw error;
        setOrders(data || []);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

  if (loading) return <p>Carregando pedidos...</p>;
  if (error) return <p>Erro: {error}</p>;

  return (
    <div>
      <h1>Lista de Pedidos</h1>
      {orders.length === 0 ? (
        <p>Nenhum pedido encontrado.</p>
      ) : (
        <ul>
          {orders.map((order) => (
            <li key={order.id} style={{ marginBottom: '10px' }}>
              <strong>Pedido #{order.id_woo}</strong> - Cliente: {order.nome_cliente} - 
              Total: R${order.total} - Status: {order.status_transporte || 'Pendente'}
              <button
                onClick={() => handleAcceptOrder(order.id)}
                style={{ marginLeft: '10px', padding: '5px 10px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '3px' }}
                disabled={order.status_transporte === 'Entregue'}
              >
                Aceitar
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );

  async function handleAcceptOrder(orderId) {
    const { error } = await supabase
      .from('pedidos')
      .update({ status_transporte: 'Aceito' })
      .eq('id', orderId);
    if (error) {
      setError(`Erro ao aceitar pedido: ${error.message}`);
    } else {
      setOrders(orders.map(order =>
        order.id === orderId ? { ...order, status_transporte: 'Aceito' } : order
      ));
    }
  }
}


// =========================================
// 10. src\pages\pedidos-aceitos.js
// =========================================

// pages/pedidos-aceitos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { filterPedidosPorUsuario } from '../utils/filterPedidos';
import { OrderModal, WithCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS ACEITOS
// ==============================================================================
export default function PedidosAceitos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]); // Todos os pedidos do banco
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [loadingAcoes, setLoadingAcoes] = useState(false); // Loading para ações
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null); // Pedido para modal
  const [modalAberto, setModalAberto] = useState(false); // Controle do modal
  
  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getPedidosAceitos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS ACEITOS/EM ROTA
  // ============================================================================
  const getPedidosAceitos = async () => {
    try {
      setLoading(true);
      
      // Busca TODOS os pedidos com status aceito ou em rota
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aceito', 'em rota'])
        .order('data', { ascending: false });

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. FILTRAR PEDIDOS POR USUÁRIO
  // ============================================================================
  const pedidosFiltrados = filterPedidosPorUsuario(
    todosPedidos,
    userRole, 
    userLojas
  );

  // ============================================================================
  // 6. FUNÇÕES DE AÇÃO: SAIR PARA ENTREGA / ENTREGAR / CANCELAR
  // ============================================================================
  const handleSairEntrega = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'em rota' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Atualiza lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, status_transporte: 'em rota' } : p
      ));
      
    } catch (error) {
      console.error('Erro ao atualizar status:', error);
      alert('Erro ao sair para entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleEntregar = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'entregue' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista (pedido entregue vai para outra página)
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Pedido marcado como entregue com sucesso!');
      
    } catch (error) {
      console.error('Erro ao entregar pedido:', error);
      alert('Erro ao marcar como entregue.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleCancelar = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja cancelar esta entrega?')) return;
    
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'cancelado' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Entrega cancelada com sucesso.');
      
    } catch (error) {
      console.error('Erro ao cancelar pedido:', error);
      alert('Erro ao cancelar entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  // ============================================================================
  // 7. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 8. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Carregando perfil...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">✅ Pedidos Aceitos</h1>

      {/* ESTADO DE CARREGAMENTO */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        /* LISTA DE PEDIDOS */
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido aceito encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>

{/* FRETE OFERECIDO - ADICIONADO */}
{pedido.frete_oferecido && (
  <p className="text-sm text-green-600 font-medium mt-1">
    💰 Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
  </p>
)}

<p className="text-sm">
  <span className="font-medium">Status:</span> 
  <span className={pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-green-600'}>
    {pedido.status_transporte === 'em rota' ? ' 🚚 Em Rota' : ' ✅ Aceito'}
  </span>
</p>
                  </div>

                  {/* BOTÕES DE AÇÃO */}
                  <div className="flex flex-col gap-2 ml-4">
                    {pedido.status_transporte === 'aceito' && (
                      <button 
                        onClick={() => handleSairEntrega(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-orange-500 text-white px-4 py-2 rounded text-sm hover:bg-orange-600 transition-colors"
                      >
                        🚚 Sair para Entrega
                      </button>
                    )}
                    
                    {pedido.status_transporte === 'em rota' && (
                      <button 
                        onClick={() => handleEntregar(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-green-500 text-white px-4 py-2 rounded text-sm hover:bg-green-600 transition-colors"
                      >
                        ✅ Entregar
                      </button>
                    )}
                    
                    <button 
                      onClick={() => handleCancelar(pedido.id)}
                      disabled={loadingAcoes}
                      className="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600 transition-colors"
                    >
                      ❌ Cancelar
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 11. src\pages\pedidos-entregues.js
// =========================================

// pages/pedidos-entregues.js
import PedidosEntregues from '../components/PedidosEntregues';

/**
 * Página principal de Pedidos Entregues
 * Delega a renderização para o componente PedidosEntregues
 * que decide qual versão mostrar (Admin, Gerente ou Entregador)
 */
export default function PedidosEntreguesPage() {
  return <PedidosEntregues />;
}


// =========================================
// 12. src\pages\pedidos-pendentes.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { OrderModal, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS PENDENTES
// ==============================================================================
export default function PedidosPendentes() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [pedidos, setPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [loadingAceitar, setLoadingAceitar] = useState(false);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    checkAuthAndGetPedidos();
  }, []);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }
      await getPedidosPendentes();
    } catch (error) {
      console.error('Erro na autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS PENDENTES
  // ============================================================================
  const getPedidosPendentes = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aguardando', 'revertido'])
        .order('data', { ascending: false });

      if (error) throw error;
      setPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos.');
    } finally {
      setLoading(false);
    }
  };

// ============================================================================
// 5. FUNÇÃO: ACEITAR PEDIDO (CORRIGIDA - ESTRUTURA CORRETA)
// ============================================================================
const handleAceitarPedido = async (pedidoId) => {
  try {
    setLoadingAceitar(true);
    
    // 1. Verificar se usuário está autenticado
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      alert('Sessão expirada. Faça login novamente.');
      router.push('/login');
      return;
    }

    // 2. ✅ BUSCAR TELEFONE DO USUÁRIO na tabela usuarios
    const { data: usuarioData, error: usuarioError } = await supabase
      .from('usuarios')
      .select('telefone, nome_completo')
      .eq('uid', user.id)
      .single();

    if (usuarioError) {
      console.warn('Erro ao buscar telefone do usuário:', usuarioError);
      // Não impede a continuação - usamos valores padrão
    }

    // 3. ✅ BUSCAR DADOS DA LOJA ASSOCIADA
    const { data: entregadorData, error: entregadorError } = await supabase
      .from('loja_associada')
      .select('nome_completo, loja_telefone, loja_nome')
      .eq('uid_usuario', user.id)
      .limit(1);

    if (entregadorError) {
      console.warn('Erro ao buscar dados da loja:', entregadorError);
      // Não impede a continuação
    }

    const entregador = entregadorData?.[0];
    const usuario = usuarioData;

    // 4. ✅ ATUALIZAR PEDIDO COM DADOS CORRETOS
    const { error: updateError } = await supabase
      .from('pedidos')
      .update({
        status_transporte: 'aceito',
        aceito_por_uid: user.id,
        aceito_por_nome: entregador?.nome_completo || usuario?.nome_completo || user.email,
        aceito_por_email: user.email,
        aceito_por_telefone: usuario?.telefone || entregador?.loja_telefone || 'Não informado',
        ultimo_status: new Date().toISOString()
      })
      .eq('id', pedidoId);

    if (updateError) {
      throw new Error('Erro ao atualizar pedido: ' + updateError.message);
    }

    // 5. Atualizar lista localmente
    setPedidos(pedidos.filter(pedido => pedido.id !== pedidoId));
    alert('✅ Pedido aceito com sucesso!');

  } catch (error) {
    console.error('Erro ao aceitar pedido:', error);
    alert(`❌ ${error.message}`);
  } finally {
    setLoadingAceitar(false);
  }
};

  // ============================================================================
  // 6. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 7. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📋 Pedidos Pendentes</h1>
      
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidos.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido pendente encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>
                    {pedido.frete_oferecido && (
                      <p className="text-sm text-green-600 font-medium mt-1">
                        💰 Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
                      </p>
                    )}
                  </div>

                  <button 
                    onClick={() => handleAceitarPedido(pedido.id)}
                    disabled={loadingAceitar}
                    className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 
                             transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed
                             ml-4 min-w-[80px]"
                  >
                    {loadingAceitar ? '⏳' : '✅'} Aceitar
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithoutCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 13. src\pages\perfil.js
// =========================================

// pages/perfil.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import EditUsuarioModal from '../components/EditUsuarioModal';
import EditLojaModal from '../components/EditLojaModal';

// ==============================================================================
// PÁGINA: PERFIL DO USUÁRIO
// ==============================================================================
export default function Perfil() {
  const router = useRouter();
  const { userProfile, userRole, userLojas, loading, error } = useUserProfile();
  const [modalUsuarioOpen, setModalUsuarioOpen] = useState(false);
  const [modalLojaOpen, setModalLojaOpen] = useState(false);
  const [lojaSelecionada, setLojaSelecionada] = useState(null);
  const [lojasAtualizadas, setLojasAtualizadas] = useState([]);

  // ============================================================================
  // 1. MAPEAMENTO DOS NOMES CORRETOS DAS LOJAS
  // ============================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ============================================================================
  // 2. ATUALIZAR OS NOMES DAS LOJAS COM OS VALORES CORRETOS
  // ============================================================================
  useEffect(() => {
    if (userLojas && userLojas.length > 0) {
      const lojasCorrigidas = userLojas.map(loja => ({
        ...loja,
        // Usa o nome correto do mapeamento, mantendo o original como fallback
        loja_nome: mapeamentoLojas[loja.id_loja] || loja.loja_nome
      }));
      setLojasAtualizadas(lojasCorrigidas);
    }
  }, [userLojas]);

  // ============================================================================
  // 3. REDIRECIONAR SE NÃO ESTIVER LOGADO
  // ============================================================================
  if (!loading && !userProfile) {
    router.push('/login');
    return null;
  }

  // ============================================================================
  // 4. ABRIR MODAL DE EDIÇÃO DA LOJA
  // ============================================================================
  const abrirModalLoja = (loja) => {
    setLojaSelecionada(loja);
    setModalLojaOpen(true);
  };

  // ============================================================================
  // 5. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      
      {/* CABEÇALHO */}
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-purple-800 mb-2">👤 Meu Perfil</h1>
        <p className="text-gray-600">Gerencie suas informações pessoais e de entrega</p>
      </div>

      {loading ? (
        <div className="text-center">
          <p className="text-purple-600">Carregando...</p>
        </div>
      ) : error ? (
        <div className="bg-red-100 border border-red-400 text-red-700 p-4 rounded">
          <p>Erro: {error}</p>
        </div>
      ) : (
        <div className="grid md:grid-cols-2 gap-8">
          
          {/* ================================================================== */}
          {/* CARD: DADOS DO USUÁRIO */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">📋 Dados Pessoais</h2>
            
            <div className="space-y-3 mb-4">
              {userProfile.foto && (
                <div className="text-center">
                  <img
                    src={userProfile.foto}
                    alt="Foto do perfil"
                    className="w-20 h-20 rounded-full mx-auto border-2 border-purple-600"
                  />
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome Completo</label>
                <p className="text-gray-800 font-medium">{userProfile.nome_completo || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome de Usuário</label>
                <p className="text-gray-800">{userProfile.nome_usuario || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Email</label>
                <p className="text-gray-800">{userProfile.email}</p>
              </div>
              
              {userProfile.telefone && (
                <div>
                  <label className="block text-sm font-medium text-gray-600">Telefone</label>
                  <p className="text-gray-800">{userProfile.telefone}</p>
                </div>
              )}
            </div>

            <button
              onClick={() => setModalUsuarioOpen(true)}
              className="w-full bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700 transition-colors"
            >
              ✏️ Editar Dados Pessoais
            </button>
          </div>

          {/* ================================================================== */}
          {/* CARD: LOJAS ASSOCIADAS */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            {/* Título dinâmico baseado na função */}
            <h2 className="text-xl font-semibold text-purple-800 mb-4">
              {userRole === 'entregador' ? '🏪 Lojas Associadas' : '👑 Sua Gerência'}
            </h2>
            
            {lojasAtualizadas.length === 0 ? (
              <p className="text-gray-600 text-center py-4">Nenhuma loja associada</p>
            ) : (
              <div className="space-y-3">
                {lojasAtualizadas.map((loja) => (
                  <div key={loja.id} className="border rounded-lg p-3 hover:bg-gray-50">
                    <h3 className="font-semibold text-gray-800">{loja.loja_nome}</h3>
                    <p className="text-sm text-gray-600">ID: {loja.id_loja}</p>
                    <p className="text-sm text-purple-600">Função: {loja.funcao}</p>
                    
                    {/* BLOCO: Mostrar campos de ENTREGADOR apenas se a função na LOJA for 'entregador' */}
                    {loja.funcao === 'entregador' && (
                      <div className="mt-2 text-sm text-gray-700">
                        <p>🚗 Veículo: {loja.veiculo || 'Não informado'}</p>
                        <p>📦 Carga máxima: {loja.carga_maxima || '0'} kg</p>
                        <p>📍 Perímetro: {loja.perimetro_entrega || 'Não definido'}</p>
                      </div>
                    )}

                    {/* BLOCO: Mostrar mensagem especial para GERENTES */}
                    {loja.funcao === 'gerente' && (
                      <div className="mt-2">
                        <p className="text-sm text-green-600 font-medium">👑 Você é o gerente desta loja.</p>
                        <p className="text-xs text-gray-500">Para editar dados da loja, contate um administrador.</p>
                      </div>
                    )}

                    {/* BOTÃO: Mostrar botão de edição APENAS para lojas onde o usuário é ENTREGADOR */}
                    {loja.funcao === 'entregador' && (
                      <button
                        onClick={() => abrirModalLoja(loja)}
                        className="mt-2 w-full bg-blue-600 text-white py-1 px-3 rounded text-sm hover:bg-blue-700 transition-colors"
                      >
                        ✏️ Editar Dados de Entrega
                      </button>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* ====================================================================== */}
      {/* MODAIS */}
      {/* ====================================================================== */}
      <EditUsuarioModal
        isOpen={modalUsuarioOpen}
        onClose={() => setModalUsuarioOpen(false)}
        userProfile={userProfile}
      />
      
      {lojaSelecionada && (
        <EditLojaModal
          isOpen={modalLojaOpen}
          onClose={() => setModalLojaOpen(false)}
          loja={lojaSelecionada}
        />
      )}
    </div>
  );
}


// =========================================
// 14. src\pages\recuperar-senha.js
// =========================================

import { useState } from 'react';
import { supabase } from '../../lib/supabase';
import Link from 'next/link';

export default function RecuperarSenha() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/atualizar-senha`,
      });

      if (error) throw error;

      setSuccess('Email de recuperação enviado! Verifique sua caixa de entrada.');

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Recuperar Senha</p>
        </div>

        {/* Card de Recuperação */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Recuperar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Enviando...' : 'Enviar Email de Recuperação'}
            </button>
          </form>

          {/* Links */}
          <div className="mt-6 text-center space-y-3">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Voltar para o login
            </Link>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2024 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
RecuperarSenha.noLayout = true;


// =========================================
// 15. src\pages\relatorios.js
// =========================================

// pages/relatorios.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE RELATÓRIOS
// ============================================================================
export default function Relatorios() {
  // ==========================================================================
  // 1. ESTADOS E HOOKS
  // ==========================================================================
  const { userRole, userLojas, userProfile, loading: userLoading } = useUserProfile();
  const [loading, setLoading] = useState(true);
  const [dadosRelatorios, setDadosRelatorios] = useState(null);
  const [periodo, setPeriodo] = useState('mes'); // dia, semana, mes, ano
  const [dadosTempoReal, setDadosTempoReal] = useState([]); // Dados do dia atual

  // ==========================================================================
  // 2. MAPEAMENTO DOS NOMES DAS LOJAS
  // ==========================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ==========================================================================
  // 3. FUNÇÃO PARA CORRIGIR NOME DA LOJA
  // ==========================================================================
  const corrigirNomeLoja = (idLoja, nomeOriginal) => {
    return mapeamentoLojas[idLoja] || nomeOriginal;
  };

  // ==========================================================================
  // 4. EFFECT PRINCIPAL - CARREGAR DADOS
  // ==========================================================================
  useEffect(() => {
    if (!userLoading) {
      carregarRelatorios();
      carregarDadosTempoReal(); // Dados do dia atual em tempo real
    }
  }, [userLoading, periodo]);

// ==========================================================================
// 5. CARREGAR DADOS EM TEMPO REAL (HOJE) - CORRIGIDO
// ==========================================================================
const carregarDadosTempoReal = async () => {
  try {
    // Data de hoje no formato YYYY-MM-DD
    const hoje = new Date().toISOString().split('T')[0];
    
    let query = supabase
      .from('pedidos')
      .select('*')
      .eq('status_transporte', 'entregue')
      .gte('ultimo_status', `${hoje}T00:00:00`)  // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
      .lte('ultimo_status', `${hoje}T23:59:59`); // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
    
    // Aplicar filtros por perfil
    if (userRole === 'gerente' && userLojas.length > 0) {
      query = query.eq('id_loja', userLojas[0].id_loja);
    } else if (userRole === 'entregador') {
      query = query.eq('aceito_por_uid', userProfile?.uid); // ✅ CORRIGIDO: aceito_por_uid em vez de aceito_por
    }
    
    const { data, error } = await query;
    
    if (error) throw error;
    
    // Processar dados para exibição
    const processados = data.map(pedido => ({
      id: pedido.id,
      pedido: pedido.id_loja_woo,
      cliente: pedido.nome_cliente,
      loja: corrigirNomeLoja(pedido.id_loja, pedido.loja_nome),
      entregador: pedido.aceito_por_nome,
      valor: pedido.frete_pago || 0,
      data: pedido.ultimo_status // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
    }));
    
    setDadosTempoReal(processados);
  } catch (error) {
    console.error('Erro ao carregar dados em tempo real:', error);
  }
};

  // ==========================================================================
  // 6. CARREGAR RELATÓRIOS PRINCIPAIS (CUMULATIVOS)
  // ==========================================================================
  const carregarRelatorios = async () => {
    try {
      setLoading(true);
      
      let dados = null;

      // LÓGICA POR TIPO DE USUÁRIO
      if (userRole === 'admin') {
        dados = await carregarRelatoriosAdmin();
      } else if (userRole === 'gerente') {
        dados = await carregarRelatoriosGerente();
      } else if (userRole === 'entregador') {
        dados = await carregarRelatoriosEntregador();
      }

      setDadosRelatorios(dados);
      
    } catch (error) {
      console.error('Erro ao carregar relatórios:', error);
    } finally {
      setLoading(false);
    }
  };

  // ==========================================================================
  // 7. RELATÓRIOS PARA ADMIN - TODAS AS LOJAS
  // ==========================================================================
  const carregarRelatoriosAdmin = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado,
        usuarios:uid_usuario(nome_completo, email)
      `)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador');

    if (error) throw error;

    // Aplicar correção dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const totalEntregadores = new Set(lojasCorrigidas.map(item => item.uid_usuario)).size;
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'admin',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      totalEntregadores,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // ==========================================================================
  // 8. RELATÓRIOS PARA GERENTE - APENAS SUA LOJA
  // ==========================================================================
  const carregarRelatoriosGerente = async () => {
    if (!userLojas || userLojas.length === 0) return null;

    const idLoja = userLojas[0].id_loja;
    const nomeLojaCorrigido = corrigirNomeLoja(idLoja, userLojas[0].loja_nome);

    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        nome_completo,
        email_usuario,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado,
        veiculo
      `)
      .eq('id_loja', idLoja)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador')
      .order('mes_entregue', { ascending: false });

    if (error) throw error;

    const totalEntregas = data.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = data.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'gerente',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      totalEntregadores: data.length,
      entregadores: data,
      loja: nomeLojaCorrigido,
      periodo
    };
  };

  // ==========================================================================
  // 9. RELATÓRIOS PARA ENTREGADOR - SEUS DADOS
  // ==========================================================================
  const carregarRelatoriosEntregador = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado
      `)
      .eq('uid_usuario', userProfile?.uid)
      .eq('status_vinculacao', 'ativo');

    if (error) throw error;

    // Aplicar correção dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'entregador',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // ==========================================================================
  // 10. CALCULAR TOTAL DE FRETE DOS DADOS EM TEMPO REAL
  // ==========================================================================
  const calcularTotalFreteHoje = () => {
    return dadosTempoReal.reduce((total, pedido) => total + (pedido.valor || 0), 0);
  };

  // ==========================================================================
  // 11. COMPONENTE DE CARREGAMENTO
  // ==========================================================================
  if (userLoading || loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        <span className="ml-3">Carregando relatórios...</span>
      </div>
    );
  }

  // ==========================================================================
  // 12. RENDERIZAÇÃO PRINCIPAL
  // ==========================================================================
  return (
    <RouteGuard requiredRole="entregador">
      <div className="container mx-auto px-4 py-8">
        {/* CABEÇALHO E FILTROS */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
          <h1 className="text-3xl font-bold text-purple-800 mb-4 md:mb-0">
            📊 Relatórios - {userRole?.toUpperCase()}
          </h1>
          
          <select
            value={periodo}
            onChange={(e) => setPeriodo(e.target.value)}
            className="bg-white border border-gray-300 rounded-lg px-4 py-2"
          >
            <option value="dia">Hoje</option>
            <option value="semana">Esta Semana</option>
            <option value="mes">Este Mês</option>
            <option value="ano">Este Ano</option>
          </select>
        </div>

        {/* SEÇÃO DE DADOS EM TEMPO REAL (HOJE) */}
        <div className="bg-blue-50 p-6 rounded-lg shadow-md mb-8">
          <h2 className="text-xl font-semibold mb-4 text-blue-800">
            🕒 Entregas de Hoje (Tempo Real)
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-blue-600 mb-1">
                {dadosTempoReal.length}
              </div>
              <div className="text-sm text-gray-600">Entregas Hoje</div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-green-600 mb-1">
                R$ {calcularTotalFreteHoje().toFixed(2)}
              </div>
              <div className="text-sm text-gray-600">Total em Fretes</div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-purple-600 mb-1">
                {new Date().toLocaleDateString('pt-BR')}
              </div>
              <div className="text-sm text-gray-600">Data</div>
            </div>
          </div>
          
          {/* LISTA DE ENTREGAS DO DIA */}
          {dadosTempoReal.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white rounded-lg">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Pedido</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Cliente</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Loja</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Valor</th>
                  </tr>
                </thead>
                <tbody>
                  {dadosTempoReal.map((pedido, index) => (
                    <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                      <td className="p-3 text-sm">{pedido.pedido}</td>
                      <td className="p-3 text-sm">{pedido.cliente}</td>
                      <td className="p-3 text-sm">{pedido.loja}</td>
                      <td className="p-3 text-sm font-medium">R$ {pedido.valor.toFixed(2)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p className="text-gray-500 text-center py-4">Nenhuma entrega registrada hoje</p>
          )}
        </div>

        {/* ESTATÍSTICAS CUMULATIVAS */}
        <div className="bg-white p-6 rounded-lg shadow-md mb-8">
          <h2 className="text-xl font-semibold mb-4">
            {periodo === 'dia' ? 'Estatísticas de Hoje' : 
             periodo === 'semana' ? 'Estatísticas da Semana' :
             periodo === 'mes' ? 'Estatísticas do Mês' : 'Estatísticas do Ano'}
          </h2>

          {/* CARDS DE ESTATÍSTICAS */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-green-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">
                {dadosRelatorios?.totalEntregas || 0}
              </div>
              <div className="text-gray-600">Total de Entregas</div>
            </div>
            
            <div className="bg-red-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-red-600 mb-2">
                {dadosRelatorios?.totalCancelamentos || 0}
              </div>
              <div className="text-gray-600">Cancelamentos</div>
            </div>
            
            <div className="bg-blue-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-blue-600 mb-2">
                {dadosRelatorios?.taxaSucesso || 0}%
              </div>
              <div className="text-gray-600">Taxa de Sucesso</div>
            </div>
            
            {userRole !== 'entregador' && (
              <div className="bg-purple-50 p-6 rounded-lg shadow-sm text-center">
                <div className="text-3xl font-bold text-purple-600 mb-2">
                  {dadosRelatorios?.totalEntregadores || 0}
                </div>
                <div className="text-gray-600">Entregadores</div>
              </div>
            )}
          </div>

          {/* DETALHES ESPECÍFICOS POR TIPO DE USUÁRIO */}
          <h3 className="text-lg font-medium mb-4">
            {userRole === 'admin' && '🏢 Desempenho por Loja'}
            {userRole === 'gerente' && `👥 Desempenho por Entregador - ${dadosRelatorios?.loja}`}
            {userRole === 'entregador' && '🏪 Meu Desempenho por Loja'}
          </h3>

          {userRole === 'admin' && dadosRelatorios?.lojas && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {dadosRelatorios.lojas.map((loja, index) => {
                const entregas = loja[`${periodo}_entregue`] || 0;
                const cancelamentos = loja[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{loja.loja_nome}</h4>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                      <div>
                        <span className="font-semibold">Entregadores:</span> {loja.usuarios ? 1 : 0}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {userRole === 'gerente' && dadosRelatorios?.entregadores && (
            <div className="space-y-4">
              {dadosRelatorios.entregadores.map((entregador, index) => {
                const entregas = entregador[`${periodo}_entregue`] || 0;
                const cancelamentos = entregador[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{entregador.nome_completo}</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                      <div>
                        <span className="font-semibold">Veículo:</span> {entregador.veiculo}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {userRole === 'entregador' && dadosRelatorios?.lojas && (
            <div className="space-y-4">
              {dadosRelatorios.lojas.map((loja, index) => {
                const entregas = loja[`${periodo}_entregue`] || 0;
                const cancelamentos = loja[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{loja.loja_nome}</h4>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}


// =========================================
// 16. src\pages\todos-pedidos.js
// =========================================

// pages/todos-pedidos.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { OrderModal, WithCourier, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - TODOS OS PEDIDOS
// ==============================================================================
export default function TodosPedidos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  
  // Estados para filtros
  const [filtroStatus, setFiltroStatus] = useState('');
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [editandoFrete, setEditandoFrete] = useState(null);
  const [valorFrete, setValorFrete] = useState('');

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 4. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getTodosPedidos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: BUSCAR TODOS OS PEDIDOS
  // ============================================================================
  const getTodosPedidos = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('pedidos')
        .select('*')
        .order('data', { ascending: false });

      // Se for gerente, filtrar apenas pela sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: FILTRAR PEDIDOS
  // ============================================================================
  const pedidosFiltrados = todosPedidos.filter(pedido => {
    // Filtro por status
    if (filtroStatus && pedido.status_transporte !== filtroStatus) {
      return false;
    }
    
    // Filtro por entregador
    if (filtroEntregador && pedido.aceito_por_nome !== filtroEntregador) {
      return false;
    }
    
    // Filtro por loja (apenas para admin)
    if (userRole === 'admin' && filtroLoja && pedido.id_loja !== filtroLoja) {
      return false;
    }
    
    return true;
  });

  // ============================================================================
  // 7. FUNÇÃO: REVERTER PEDIDO (BOTÃO GERENTE/ADMIN)
  // ============================================================================
  const handleReverterPedido = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja reverter este pedido?')) return;
    
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { 
          ...p, 
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null
        } : p
      ));
      
      alert('✅ Pedido revertido com sucesso!');
    } catch (error) {
      console.error('Erro ao reverter pedido:', error);
      alert('❌ Erro ao reverter pedido.');
    }
  };

  // ============================================================================
  // 8. FUNÇÃO: EDITAR FRETE OFERECIDO
  // ============================================================================
  const handleEditarFrete = (pedido, valor) => {
    setEditandoFrete(pedido.id);
    setValorFrete(valor || '');
  };

  const handleSalvarFrete = async (pedidoId) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ 
          frete_oferecido: parseFloat(valorFrete) || null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, frete_oferecido: parseFloat(valorFrete) || null } : p
      ));
      
      setEditandoFrete(null);
      alert('✅ Frete atualizado com sucesso!');
    } catch (error) {
      console.error('Erro ao atualizar frete:', error);
      alert('❌ Erro ao atualizar frete.');
    }
  };

  // ============================================================================
  // 9. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 10. DADOS PARA FILTROS
  // ============================================================================
  const statusUnicos = [...new Set(todosPedidos.map(p => p.status_transporte))].filter(Boolean);
  const entregadoresUnicos = [...new Set(todosPedidos.map(p => p.aceito_por_nome))].filter(Boolean);
  const lojasUnicas = [...new Set(todosPedidos.map(p => p.id_loja))].filter(Boolean);

  // ============================================================================
  // 11. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📊 Todos os Pedidos</h1>

      {/* FILTROS */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Filtros</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Filtro Status */}
          <div>
            <label className="block text-sm font-medium mb-1">Status</label>
            <select
              value={filtroStatus}
              onChange={(e) => setFiltroStatus(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os status</option>
              {statusUnicos.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>

          {/* Filtro Entregador */}
          <div>
            <label className="block text-sm font-medium mb-1">Entregador</label>
            <select
              value={filtroEntregador}
              onChange={(e) => setFiltroEntregador(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os entregadores</option>
              {entregadoresUnicos.map(entregador => (
                <option key={entregador} value={entregador}>{entregador}</option>
              ))}
            </select>
          </div>

          {/* Filtro Loja (apenas admin) */}
          {userRole === 'admin' && (
            <div>
              <label className="block text-sm font-medium mb-1">Loja</label>
              <select
                value={filtroLoja}
                onChange={(e) => setFiltroLoja(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded"
              >
                <option value="">Todas as lojas</option>
                {lojasUnicas.map(loja => (
                  <option key={loja} value={loja}>{loja}</option>
                ))}
              </select>
            </div>
          )}
        </div>
      </div>

      {/* LISTA DE PEDIDOS */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-start justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Status:</span> 
                      <span className={`ml-1 ${
                        pedido.status_transporte === 'entregue' ? 'text-green-600' :
                        pedido.status_transporte === 'cancelado' ? 'text-red-600' :
                        pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-blue-600'
                      }`}>
                        {pedido.status_transporte}
                      </span>
                    </p>
                    
                    {pedido.aceito_por_nome && (
                      <p className="text-sm"><span className="font-medium">Entregador:</span> {pedido.aceito_por_nome}</p>
                    )}

                    {/* EDIÇÃO DE FRETE */}
                    <div className="mt-2">
                      <span className="text-sm font-medium">Frete oferecido: </span>
                      {editandoFrete === pedido.id ? (
                        <div className="flex items-center gap-2 mt-1">
                          <input
                            type="number"
                            step="0.01"
                            value={valorFrete}
                            onChange={(e) => setValorFrete(e.target.value)}
                            className="w-20 p-1 border border-gray-300 rounded"
                            placeholder="0.00"
                          />
                          <button
                            onClick={() => handleSalvarFrete(pedido.id)}
                            className="bg-green-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ✅
                          </button>
                          <button
                            onClick={() => setEditandoFrete(null)}
                            className="bg-gray-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ❌
                          </button>
                        </div>
                      ) : (
                        <span className="text-green-600">
                          R$ {pedido.frete_oferecido?.toFixed(2) || '0.00'} 
                          <button
                            onClick={() => handleEditarFrete(pedido, pedido.frete_oferecido)}
                            className="ml-2 text-blue-600 text-sm"
                          >
                            ✏️
                          </button>
                        </span>
                      )}
                    </div>
                  </div>

                  {/* BOTÕES DE AÇÃO (GERENTE/ADMIN) */}
                  <div className="flex flex-col gap-2 ml-4">
                    {/* BOTÃO REVERTER (para pedidos aceitos/em rota) */}
                    {['aceito', 'em rota'].includes(pedido.status_transporte) && (
                      <button 
                        onClick={() => handleReverterPedido(pedido.id)}
                        className="bg-yellow-500 text-white px-4 py-2 rounded text-sm hover:bg-yellow-600"
                      >
                        ↩️ Reverter
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        {pedidoSelecionado?.aceito_por_nome ? (
          <WithCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        ) : (
          <WithoutCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        )}
      </OrderModal>
    </div>
  );
}


// =========================================
// 1. src\public\favicon.ico
// =========================================

 



// =========================================
// 2. src\public\manifest.json
// =========================================

 {
  "name": "EntregasWoo - Sistema de Gestão",
  "short_name": "EntregasWoo",
  "description": "Sistema de gestão de entregas para WooCommerce",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#000000",
  "icons": [
    {
      "src": "/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}



// =========================================
// 1. src\styles\globals.css
// =========================================

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Estilos globais para WooCommerce */
:root {
  --woo-purple: #7f54b3;
  --woo-purple-dark: #6b3fa0;
  --woo-purple-light: #f0e6ff;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  margin: 0;
  padding: 0;
}

/* Cabeçalho fixo */
.sticky-header {
  position: sticky;
  top: 0;
  z-index: 50;
  background: white;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  border-bottom: 2px solid #e9d5ff;
}


// =========================================
// 1. src\utils\filterPedidos.js
// =========================================

// utils/filterPedidos.js
export const filterPedidosPorUsuario = (pedidos, userRole, userLojas) => {
  if (userRole === 'admin') {
    // Admin vê TUDO
    return pedidos;
  }

  if (userRole === 'gerente' && userLojas.length === 1) {
    // Gerente vê apenas sua loja
    return pedidos.filter(pedido => pedido.id_loja === userLojas[0].id_loja);
  }

  if (userRole === 'entregador' && userLojas.length > 0) {
    // Entregador vê pedidos de todas as suas lojas
    const lojasIds = userLojas.map(loja => loja.id_loja);
    return pedidos.filter(pedido => lojasIds.includes(pedido.id_loja));
  }

  // Visitante ou erro não vê nada
  return [];
};


// =========================================
// 2. src\utils\formatters.js
// =========================================

 



// =========================================
// 3. src\utils\notificationSender.js
// =========================================

import { supabase } from '../lib/supabase';

export const sendNotification = async (userId, title, body, data = {}) => {
  try {
    const { error } = await supabase.functions.invoke('send-notification', {
      body: { userId, title, body, data }
    });

    if (error) {
      console.error('Erro ao enviar notificação:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Erro ao enviar notificação:', error);
    return false;
  }
};

// Funções específicas para seu sistema
export const notifyNewOrder = (userId, orderId, storeName) => {
  return sendNotification(
    userId,
    'Novo Pedido Disponível',
    `Um novo pedido da loja ${storeName} está aguardando entrega.`,
    { type: 'new_order', orderId, storeName }
  );
};

export const notifyOrderStatusChange = (userId, orderId, status, customerName) => {
  const statusMessages = {
    'aceito': `Pedido para ${customerName} foi aceito`,
    'em rota': `Pedido para ${customerName} saiu para entrega`,
    'entregue': `Pedido para ${customerName} foi entregue`,
    'cancelado': `Pedido para ${customerName} foi cancelado`
  };

  return sendNotification(
    userId,
    'Status do Pedido Atualizado',
    statusMessages[status] || `Status do pedido alterado para ${status}`,
    { type: 'status_change', orderId, status, customerName }
  );
};


// =========================================
// 4. src\utils\pdfUtils.js
// =========================================

// utils/pdfUtils.js
import { jsPDF } from 'jspdf';

// ==============================================================================
// FUNÇÕES UTILITÁRIAS PARA GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
export const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
export const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};


// =========================================
// 1. src\serviceWorker.js
// =========================================

 



// =========================================
// 1. tests\orders.test.js
// =========================================

 



// =========================================
// 2. tests\test-notifications.js
// =========================================

// 1. IMPORTAÇÕES
// Importação de dependências básicas do React
import { useEffect } from 'react';

// 2. COMPONENTE DE TESTE
// Componente simples para testar notificações
export default function TestNotifications() {
  // 3. HOOK USEEFFECT
  // Carrega o script firebase.js dinamicamente
  useEffect(() => {
    const script = document.createElement('script');
    script.src = '/firebase.js';
    script.type = 'module';
    script.async = true;
    document.body.appendChild(script);

    // Cleanup ao desmontar o componente
    return () => {
      document.body.removeChild(script);
    };
  }, []);

  // 4. RETORNO JSX
  return (
    <div style={{ padding: '20px', textAlign: 'center' }}>
      <h1>Teste de Notificações</h1>
      {/* 5. BOTÃO DE TESTE (PROVISÓRIO)
      - Botão para testar a obtenção de token. Remova após testes. */}
      <button
        onClick={() => {
          if (window.requestForToken) {
            window.requestForToken().then(token => console.log('Token:', token)).catch(error => console.error('Erro:', error));
          } else {
            console.error('requestForToken não está disponível. Aguarde o carregamento do script.');
          }
        }}
        style={{ padding: '10px 20px', backgroundColor: '#3b7b2b', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}
      >
        Testar Notificação
      </button>
    </div>
  );
}


// =========================================
// 1. .gitignore
// =========================================

# Ignorar pasta gerada pelo Next.js
.next/
# Ignorar node_modules
node_modules/
# Ignorar ambiente local
.env.local
# Ignorar logs ou arquivos temporários
*.log


// =========================================
// 2. components.txt
// =========================================

===== DeliveryStatus.js =====
 


===== EditLojaModal.js =====
// components/EditLojaModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function EditLojaModal({ isOpen, onClose, loja }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  useEffect(() => {
    if (isOpen && loja) {
      setFormData({
        veiculo: loja.veiculo || '',
        carga_maxima: loja.carga_maxima || '',
        perimetro_entrega: loja.perimetro_entrega || ''
      });
    }
  }, [isOpen, loja]);

  const handleSave = async () => {
    try {
      setLoading(true);
      
      const { error } = await supabase
        .from('loja_associada')
        .update({
          veiculo: formData.veiculo,
          carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
          perimetro_entrega: formData.perimetro_entrega
        })
        .eq('id', loja.id);

      if (error) throw error;

      alert('Dados da loja atualizados com sucesso!');
      onClose();
      window.location.reload();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      alert('Erro ao atualizar dados da loja');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">🏪 Editar Loja: {loja.loja_nome}</h2>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm font-medium text-gray-700">Veículo</label>
            <select
              value={formData.veiculo}
              onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            >
              <option value="">Selecione o veículo</option>
              <option value="carro">Carro</option>
              <option value="moto">Moto</option>
              <option value="bicicleta">Bicicleta</option>
              <option value="caminhao">Caminhão</option>
              <option value="van">Van</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Carga Máxima (kg)</label>
            <input
              type="number"
              value={formData.carga_maxima}
              onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Perímetro de Entrega</label>
            <input
              type="text"
              value={formData.perimetro_entrega}
              onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 rounded"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-blue-600 text-white py-2 rounded disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


===== EditProfileModal.js =====
// components/EditProfileModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDIÇÃO DE PERFIL
// ==============================================================================
export default function EditProfileModal({ isOpen, onClose, userProfile, userRole, userLojas }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: '',
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  // ============================================================================
  // 1. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setFormData({
        nome_completo: userProfile.nome_completo || '',
        nome_usuario: userProfile.nome_usuario || '',
        telefone: userProfile.telefone || '',
        foto: userProfile.foto || '',
        veiculo: userLojas[0]?.veiculo || '',
        carga_maxima: userLojas[0]?.carga_maxima || '',
        perimetro_entrega: userLojas[0]?.perimetro_entrega || ''
      });
    }
  }, [isOpen, userProfile, userLojas]);

  // ============================================================================
  // 2. FUNÇÃO: SALVAR ALTERAÇÕES
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);

      const { error: userError } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (userError) throw userError;

      if (userRole === 'entregador' && userLojas.length > 0) {
        const { error: lojaError } = await supabase
          .from('loja_associada')
          .update({
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          })
          .eq('uid_usuario', userProfile.uid)
          .eq('id_loja', userLojas[0].id_loja);

        if (lojaError) throw lojaError;
      }

      alert('Perfil atualizado com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      alert('Erro ao atualizar perfil');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw max-h-95vh overflow-y-auto">
        
        {/* CABEÇALHO */}
        <h2 className="text-xl font-bold mb-4 text-gray-800">✏️ Editar Perfil</h2>
        
        {/* CAMPOS DO FORMULÁRIO */}
        <div className="space-y-4">
          {/* NOME COMPLETO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome Completo
            </label>
            <input
              type="text"
              value={formData.nome_completo}
              onChange={(e) => setFormData({...formData, nome_completo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome completo"
            />
          </div>

          {/* NOME DE USUÁRIO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome de Usuário
            </label>
            <input
              type="text"
              value={formData.nome_usuario}
              onChange={(e) => setFormData({...formData, nome_usuario: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome de usuário"
            />
          </div>

          {/* TELEFONE */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone
            </label>
            <input
              type="tel"
              value={formData.telefone}
              onChange={(e) => setFormData({...formData, telefone: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="(11) 99999-9999"
            />
          </div>

          {/* FOTO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL da Foto
            </label>
            <input
              type="url"
              value={formData.foto}
              onChange={(e) => setFormData({...formData, foto: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="https://exemplo.com/foto.jpg"
            />
          </div>

          {/* CAMPOS ESPECÍFICOS PARA ENTREGADORES */}
          {userRole === 'entregador' && (
            <>
              {/* VEÍCULO */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Veículo
                </label>
                <select
                  value={formData.veiculo}
                  onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                >
                  <option value="">Selecione o veículo</option>
                  <option value="carro">Carro</option>
                  <option value="moto">Moto</option>
                  <option value="bicicleta">Bicicleta</option>
                  <option value="caminhao">Caminhão</option>
                  <option value="van">Van</option>
                </select>
              </div>

              {/* CARGA MÁXIMA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Carga Máxima (kg)
                </label>
                <input
                  type="number"
                  value={formData.carga_maxima}
                  onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: 50"
                />
              </div>

              {/* PERÍMETRO DE ENTREGA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Perímetro de Entrega
                </label>
                <input
                  type="text"
                  value={formData.perimetro_entrega}
                  onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: Zona Norte, até 10km"
                />
              </div>
            </>
          )}
        </div>

        {/* BOTÕES DE AÇÃO */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded font-medium hover:bg-gray-400 transition-colors"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-purple-600 text-white py-2 px-4 rounded font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


===== EditUsuarioModal.js =====
// components/EditUsuarioModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function EditUsuarioModal({ isOpen, onClose, userProfile }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: ''
  });

  useEffect(() => {
    if (isOpen && userProfile) {
      setFormData({
        nome_completo: userProfile.nome_completo || '',
        nome_usuario: userProfile.nome_usuario || '',
        telefone: userProfile.telefone || '',
        foto: userProfile.foto || ''
      });
    }
  }, [isOpen, userProfile]);

  const handleSave = async () => {
    try {
      setLoading(true);
      
      const { error } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (error) throw error;

      alert('Dados pessoais atualizados com sucesso!');
      onClose();
      window.location.reload();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      alert('Erro ao atualizar dados');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">✏️ Editar Dados Pessoais</h2>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm font-medium text-gray-700">Nome Completo</label>
            <input
              type="text"
              value={formData.nome_completo}
              onChange={(e) => setFormData({...formData, nome_completo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Nome de Usuário</label>
            <input
              type="text"
              value={formData.nome_usuario}
              onChange={(e) => setFormData({...formData, nome_usuario: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Telefone</label>
            <input
              type="tel"
              value={formData.telefone}
              onChange={(e) => setFormData({...formData, telefone: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">URL da Foto</label>
            <input
              type="url"
              value={formData.foto}
              onChange={(e) => setFormData({...formData, foto: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 rounded"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-purple-600 text-white py-2 rounded disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


===== Header.js =====
// components/Header.js
export default function Header({ toggleSidebar, showMenuButton = true, title }) {
  return (
    <header className="bg-white shadow-sm border-b border-gray-200">
      <div className="flex items-center justify-between px-4 py-3">
        
        {/* ================================================================== */}
        {/* BOTÃO HAMBURGUER (CONDICIONAL) */}
        {/* ================================================================== */}
        <div className="flex items-center">
          {showMenuButton && (
            <button
              onClick={toggleSidebar}
              className="lg:hidden p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100"
              aria-label="Abrir menu"
            >
              {/* Ícone do hamburger */}
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          )}
          
          {/* Espaço para alinhamento quando não há botão */}
          {!showMenuButton && <div className="w-10 h-10"></div>}
        </div>

        {/* ================================================================== */}
        {/* TÍTULO (CUSTOMIZÁVEL PARA PÁGINAS SEM SIDEBAR) */}
        {/* ================================================================== */}
        <div className="flex-1 text-center lg:text-left">
          <h1 className="text-xl font-semibold text-gray-900">
            {title || 'EntregasWoo'} {/* Usa título customizado ou padrão */}
          </h1>
        </div>

        {/* ================================================================== */}
        {/* ESPAÇO PARA ELEMENTOS À DIREITA (BOTÃO DE PERFIL, ETC) */}
        {/* ================================================================== */}
        <div className="w-10 h-10"></div>
      </div>
    </header>
  );
}


===== Layout.js =====
// components/Layout.js
import { useState, useEffect } from 'react';
import Header from './Header';
import Sidebar from './Sidebar';

// ==============================================================================
// COMPONENTE LAYOUT PRINCIPAL
// ==============================================================================
/**
 * Layout é o componente que define a estrutura básica de todas as páginas
 * Ele gerencia: Sidebar, Header e Conteúdo principal
 * 
 * @param {Object} props - Propriedades do componente
 * @param {ReactNode} props.children - Conteúdo da página
 * @param {boolean} [props.hideSidebar=false] - Oculta a sidebar (para páginas como Admin)
 */
const Layout = ({ children, hideSidebar = false }) => {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  // ============================================================================
  // 2. EFFECT: DETECTAR TAMANHO DA TELA
  // ============================================================================
  useEffect(() => {
    const checkIsMobile = () => setIsMobile(window.innerWidth < 1024);
    
    // Verificar inicialmente
    checkIsMobile();
    
    // Adicionar listener para redimensionamento
    window.addEventListener('resize', checkIsMobile);
    
    // Cleanup
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);

  // ============================================================================
  // 3. FUNÇÕES: CONTROLE DA SIDEBAR
  // ============================================================================
  /**
   * Alterna o estado da sidebar (aberto/fechado)
   */
  const toggleSidebar = () => {
    setSidebarOpen(prev => !prev);
  };

  /**
   * Fecha a sidebar (útil para links mobile)
   */
  const closeSidebar = () => {
    if (isMobile) {
      setSidebarOpen(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO LAYOUT
  // ============================================================================
  return (
    <div className="flex h-screen bg-gray-50">
      
      {/* ====================================================================== */}
      {/* SIDEBAR - MENU LATERAL (CONDICIONAL) */}
      {/* ====================================================================== */}
      {/**
       * A sidebar é opcional (pode ser ocultada com hideSidebar=true)
       * Mas o Header SEMPRE deve aparecer, mesmo sem sidebar
       */}
      {!hideSidebar && (
        <Sidebar 
          isOpen={sidebarOpen} 
          toggleSidebar={toggleSidebar}
          onItemClick={closeSidebar}
        />
      )}
      
      {/* ====================================================================== */}
      {/* CONTEÚDO PRINCIPAL */}
      {/* ====================================================================== */}
      <div className="flex-1 flex flex-col overflow-hidden">
        
        {/* ================================================================== */}
        {/* HEADER - CABEÇALHO (SEMPRE VISÍVEL, INDEPENDENTE DA SIDEBAR) */}
        {/* ================================================================== */}
        {/**
         * ✅ CORREÇÃO: Header SEMPRE visível, mas o botão hamburger é condicional
         * showMenuButton=false quando hideSidebar=true
         */}
        <Header 
          toggleSidebar={toggleSidebar} 
          showMenuButton={!hideSidebar} // Botão só aparece se sidebar existir
          title={hideSidebar ? "Painel Administrativo" : undefined} // Título customizado para Admin
        />
        
        {/* ================================================================== */}
        {/* CONTEÚDO DA PÁGINA */}
        {/* ================================================================== */}
        <main 
          className="flex-1 overflow-y-auto p-4 lg:p-6"
          id="main-content"
          tabIndex={-1}
        >
          {children}
        </main>
      </div>

      {/* ====================================================================== */}
      {/* OVERLAY - SOMENTE MOBILE E QUANDO SIDEBAR NÃO ESTÁ OCULTA */}
      {/* ====================================================================== */}
      {!hideSidebar && sidebarOpen && isMobile && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
          onClick={closeSidebar}
          aria-hidden="true"
          role="button"
          aria-label="Fechar menu"
        />
      )}
    </div>
  );
};

export default Layout;


===== MobileMenu.js =====


===== Notification.js =====
 


===== OrderCard.js =====
 


===== Pagination.js =====
// components/Pagination.js
// ==============================================================================
// COMPONENTE PAGINATION (SEM DEPENDÊNCIAS EXTERNAS)
// ==============================================================================
export default function Pagination({ currentPage, totalPages, onPageChange }) {
  // ============================================================================
  // 1. FUNÇÃO: GERAR BOTÕES DE PÁGINA
  // ============================================================================
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 5; // Máximo de páginas visíveis
    
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    // Ajustar se estiver no início
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  };

  // ============================================================================
  // 2. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (totalPages <= 1) return null; // Não mostrar paginação se só tiver uma página

  return (
    <div className="flex items-center justify-between border-t border-gray-200 px-4 py-3 sm:px-6">
      
      {/* ✅ PAGINAÇÃO MOBILE */}
      <div className="flex flex-1 justify-between sm:hidden">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          ← Anterior
        </button>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Próxima →
        </button>
      </div>
      
      {/* ✅ PAGINAÇÃO DESKTOP */}
      <div className="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        
        {/* ✅ CONTADOR DE PÁGINAS */}
        <div>
          <p className="text-sm text-gray-700">
            Página <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        
        {/* ✅ NAVEGAÇÃO */}
        <div>
          <nav className="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
            
            {/* ✅ BOTÃO ANTERIOR */}
            <button
              onClick={() => onPageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Anterior</span>
              ← {/* Emoji seta esquerda */}
            </button>
            
            {/* ✅ BOTÕES DE PÁGINA */}
            {getPageNumbers().map((page) => (
              <button
                key={page}
                onClick={() => onPageChange(page)}
                className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                  currentPage === page
                    ? 'bg-purple-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600'
                    : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                }`}
              >
                {page}
              </button>
            ))}
            
            {/* ✅ BOTÃO PRÓXIMA */}
            <button
              onClick={() => onPageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Próxima</span>
              → {/* Emoji seta direita */}
            </button>
          </nav>
        </div>
      </div>
    </div>
  );
}


===== RouteGuard.js =====
// components/RouteGuard.js
import { useUserProfile } from '../hooks/useUserProfile';
import { useRouter } from 'next/router';
import { useEffect } from 'react';

const RouteGuard = ({ children, requiredRole }) => {
  const { userRole, loading } = useUserProfile();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      // Definir hierarquia de permissões
      const rolesHierarchy = {
        'visitante': 0,
        'entregador': 1,
        'gerente': 2,
        'admin': 3
      };

      // Verificar se usuário tem permissão
      const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];
      
      if (!hasPermission) {
        // Redirecionar para página não autorizada ou home
        router.push('/');
      }
    }
  }, [userRole, loading, requiredRole, router]);

  // Mostrar loading enquanto verifica permissões
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Verificação final (caso o useEffect não tenha redirecionado ainda)
  const rolesHierarchy = {
    'visitante': 0,
    'entregador': 1,
    'gerente': 2,
    'admin': 3
  };
  
  const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];

  if (!hasPermission) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600">Acesso Não Autorizado</h1>
          <p className="text-gray-600 mt-2">Você não tem permissão para acessar esta página.</p>
        </div>
      </div>
    );
  }

  return children;
};

export default RouteGuard;


===== Sidebar.js =====
// components/Sidebar.js
import { useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import UserProfile from './UserProfile';

// ==============================================================================
// COMPONENTE SIDEBAR - MENU LATERAL
// ==============================================================================
/**
 * Sidebar é o menu de navegação lateral do sistema.
 * Contém: Logo, Menu de navegação, Perfil do usuário e Botão de login/logout.
 * Responsivo: Mobile (overlay) e Desktop (fixo).
 * Integra com useUserProfile para gerenciar autenticação.
 */
const Sidebar = ({ isOpen, toggleSidebar }) => {
  const router = useRouter();
  const { user, userRole, loading: loadingUser } = useUserProfile();
  
  // ============================================================================
  // 1. ITENS DO MENU COM RESTRIÇÃO DE ACESSO
  // ============================================================================
  /**
   * Itens base do menu, visíveis para todos os usuários logados.
   */
  const baseItems = [
    { path: '/', icon: '🏠', label: 'Home' },
    { path: '/pedidos-pendentes', icon: '📋', label: 'Pedidos Pendentes' },
    { path: '/pedidos-aceitos', icon: '✅', label: 'Pedidos Aceitos' },
    { path: '/pedidos-entregues', icon: '🚚', label: 'Pedidos Entregues' },
    { path: '/gestao-entregadores', icon: '👥', label: 'Gestão de Entregadores' },
    { path: '/perfil', icon: '👤', label: 'Meu Perfil' },
  ];

  /**
   * Itens administrativos, visíveis apenas para gerentes e administradores.
   */
  const adminItems = [
    { path: '/todos-pedidos', icon: '📊', label: 'Todos os Pedidos' },
    { path: '/relatorios', icon: '📈', label: 'Relatórios' },
    { path: '/admin', icon: '⚙️', label: 'Administração' },
  ];

  /**
   * Combina itens conforme a role do usuário.
   */
  const menuItems = [
    ...baseItems,
    ...((userRole === 'admin' || userRole === 'gerente') ? adminItems : [])
  ];

  // ============================================================================
  // 2. FUNÇÃO: LOGOUT DO USUÁRIO
  // ============================================================================
  /**
   * Realiza o logout do usuário via Supabase.
   * O useUserProfile lida com a atualização dos estados e redirecionamento.
   */
  const handleLogout = async () => {
    try {
      // Fechar sidebar no mobile antes do logout
      if (window.innerWidth < 1024) {
        toggleSidebar();
      }
      
      // Realizar logout
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      console.log('Logout realizado com sucesso');
    } catch (error) {
      console.error('Erro ao fazer logout:', error);
    }
  };

  // ============================================================================
  // 3. FUNÇÃO: REDIRECIONAR PARA LOGIN
  // ============================================================================
  /**
   * Redireciona para a página de login quando o usuário não está autenticado.
   */
  const handleLoginRedirect = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
    router.push('/login');
  };

  // ============================================================================
  // 4. FUNÇÃO: FECHAR SIDEBAR AO CLICAR EM ITEM (MOBILE)
  // ============================================================================
  /**
   * Fecha o sidebar no mobile quando um item de menu é clicado.
   */
  const handleMenuItemClick = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
  };

  // ============================================================================
  // 5. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <>
      {/* Overlay para mobile */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={toggleSidebar}
        />
      )}
      
      {/* Sidebar principal */}
      <div className={`
        fixed lg:static inset-y-0 left-0 z-50
        w-64 bg-purple-800 text-white
        transform transition-transform duration-300 ease-in-out
        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}
        flex flex-col h-full
      `}>
        {/* Logo / Marca do sistema */}
        <div className="p-6 border-b border-purple-700">
          <Link href="/" passHref onClick={handleMenuItemClick}>
            <div className="cursor-pointer">
              <h1 className="text-2xl font-bold">EntregasWoo</h1>
              <p className="text-purple-300 text-sm">Sistema de Gestão</p>
            </div>
          </Link>
        </div>

        {/* Menu de navegação */}
        <nav className="flex-1 p-4 overflow-y-auto">
          {menuItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`flex items-center py-3 px-4 rounded-lg mb-2 transition-colors
                ${router.pathname === item.path
                  ? 'bg-purple-900 text-white shadow-md'
                  : 'hover:bg-purple-700 text-purple-200'
                }`}
              onClick={handleMenuItemClick}
            >
              <span className="text-xl mr-3">{item.icon}</span>
              <span className="font-medium">{item.label}</span>
            </Link>
          ))}
        </nav>

        {/* Perfil do usuário (condicional) */}
        {user && (
          <div className="p-4 border-t border-purple-700 bg-purple-900">
            <UserProfile />
          </div>
        )}

        {/* Botão dinâmico: Entrar/Sair */}
        <div className="p-4 border-t border-purple-700">
          {user ? (
            <button
              onClick={handleLogout}
              className="w-full flex items-center justify-center py-2 px-4 bg-purple-700 hover:bg-purple-600 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              Sair
            </button>
          ) : (
            <button
              onClick={handleLoginRedirect}
              className="w-full flex items-center justify-center py-2 px-4 bg-green-600 hover:bg-green-500 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l-4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
              </svg>
              Entrar
            </button>
          )}
        </div>
      </div>
    </>
  );
};

export default Sidebar;


===== UserProfile.js =====
// components/UserProfile.js (VERSÃO SIMPLIFICADA)
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// COMPONENTE: PERFIL DO USUÁRIO (VERSÃO SIMPLIFICADA)
// ==============================================================================
/**
 * Versão simplificada para o sidebar - apenas informações básicas
 * sem botões de edição (agora na página /perfil)
 */
const UserProfile = ({ isMobile = false }) => {
  const { userProfile, userRole, loading } = useUserProfile();

  // ============================================================================
  // 1. ESTADO DE CARREGAMENTO
  // ============================================================================
  if (loading) {
    return (
      <div className="p-4 border-t">
        <div className="animate-pulse">
          <div className="h-4 bg-purple-700 rounded mb-2"></div>
          <div className="h-3 bg-purple-700 rounded"></div>
        </div>
      </div>
    );
  }

  // ============================================================================
  // 2. USUÁRIO NÃO AUTENTICADO
  // ============================================================================
  if (!userProfile) {
    return (
      <div className="p-4 border-t">
        <p className="text-sm text-purple-300">Visitante</p>
        <p className="text-xs text-purple-400">Faça login para acessar</p>
      </div>
    );
  }

  // ============================================================================
  // 3. RENDERIZAÇÃO SIMPLIFICADA
  // ============================================================================
  return (
    <div className="p-4 border-t">
      
      {/* INFORMAÇÕES BÁSICAS DO USUÁRIO */}
      <div className="space-y-2">
        
        {/* NOME E EMAIL */}
        <div className="flex items-center">
          {userProfile.foto && (
            <img
              src={userProfile.foto}
              alt="Foto do usuário"
              className="w-8 h-8 rounded-full mr-3 border-2 border-purple-600"
            />
          )}
          <div className="flex-1 min-w-0">
            <p className="text-sm font-semibold text-white truncate">
              {userProfile.nome_completo || userProfile.nome_usuario}
            </p>
            <p className="text-xs text-purple-300 truncate">
              {userProfile.email}
            </p>
          </div>
        </div>

        {/* FUNÇÃO/ROLE (APENAS TEXTO) */}
        <div className="bg-purple-700 rounded p-1">
          <p className="text-xs text-center text-white">
            {userRole === 'admin' && '👑 Admin'}
            {userRole === 'gerente' && '💼 Gerente'}
            {userRole === 'entregador' && '🚚 Entregador'}
            {userRole === 'visitante' && '👤 Visitante'}
          </p>
        </div>

        {/* STATUS DE CONEXÃO (SIMPLES) */}
        <div className="flex items-center justify-between text-xs text-purple-400">
          <span>🟢 Conectado</span>
        </div>
      </div>
    </div>
  );
};



export default UserProfile;





// =========================================
// 3. concatenar-js.ps1
// =========================================

# Diretório base do projeto (agora inclui frontend inteiro, não só src)
$baseDir = "C:\dev\app-entregas-woocommerce\frontend"

# Pasta onde o arquivo de saída será gerado
$outputDir = $baseDir

# Arquivo de saída
$outfile = "$outputDir\saida.txt"

# Remove arquivo anterior (se existir)
Remove-Item $outfile -ErrorAction SilentlyContinue

# Inicializa uma coleção mutável para as linhas da árvore
$treeLines = New-Object System.Collections.ArrayList

# Função para percorrer diretórios e coletar linhas da árvore
function Traverse-And-Collect($dir, $indent = "", $baseDir, $parentFolder = "") {
    $items = Get-ChildItem -Path $dir -ErrorAction SilentlyContinue | Sort-Object -Property @{Expression={$_.PSIsContainer}; Descending=$true}, Name
    $fileCounter = 1
    $localTreeLines = New-Object System.Collections.ArrayList

    foreach ($item in $items) {
        $relativePath = $item.FullName.Replace($baseDir, "").TrimStart("\")
        $currentFolder = if ($parentFolder) { "$parentFolder/$($item.Name)" } else { $item.Name }

        if ($item.PSIsContainer) {
            # Ignora node_modules e .next (não queremos na árvore)
            if ($item.Name -in @("node_modules", ".next")) { continue }

            $subTree = Traverse-And-Collect $item.FullName "$indent  " $baseDir $currentFolder

            # Forçar subTree a ser uma ArrayList
            $subTreeArray = New-Object System.Collections.ArrayList
            if ($subTree -is [string]) {
                $null = $subTreeArray.Add($subTree)
            } elseif ($subTree -and $subTree.Length -gt 0) {
                $null = $subTreeArray.AddRange($subTree)
            }

            if ($subTreeArray.Count -gt 0) {
                $null = $localTreeLines.Add("$indent📦$currentFolder/")
                $null = $localTreeLines.AddRange($subTreeArray)
            }
        } else {
            # Inclui arquivos que podem ser relevantes (js, css, ico, json, txt, ps1, config, env, ignore)
            if ($item.Name -match "\.(js|css|ico|json|txt|ps1|config.js)$" -or
                $item.Name -match "^(\.env|\.gitignore|package\.json|package-lock\.json|vercel\.json)$") {

                Add-Content $outfile "// ========================================="
                Add-Content $outfile "// $fileCounter. $relativePath"
                Add-Content $outfile "// ========================================="
                Add-Content $outfile ""
                Get-Content $item.FullName -Raw -ErrorAction SilentlyContinue | Add-Content $outfile
                Add-Content $outfile "`n"

                $null = $localTreeLines.Add("$indent$fileCounter 📜$relativePath")
                $fileCounter++
            }
        }
    }
    return $localTreeLines.ToArray()
}

# Adiciona o root à árvore
$null = $treeLines.Add("📦frontend/")

# Inicia o traversal no baseDir
$subTree = Traverse-And-Collect $baseDir "" $baseDir

# Forçar subTree a ser uma ArrayList
$subTreeArray = New-Object System.Collections.ArrayList
if ($subTree -is [string]) {
    $null = $subTreeArray.Add($subTree)
} elseif ($subTree -and $subTree.Length -gt 0) {
    $null = $subTreeArray.AddRange($subTree)
}
if ($subTreeArray.Count -gt 0) {
    $null = $treeLines.AddRange($subTreeArray)
}

# Adiciona a seção da árvore no final
Add-Content $outfile "`n// ========================================="
Add-Content $outfile "// ÁRVORE DE DIRETÓRIOS"
Add-Content $outfile "// ========================================="
foreach ($line in $treeLines) {
    Add-Content $outfile $line
}

Write-Host "Arquivo 'saida.txt' gerado com sucesso em: $outputDir"



// =========================================
// 4. concatenar(b)-js.ps1
// =========================================


# Diretório base do projeto
$baseDir = "C:\dev\app-entregas-woocommerce\frontend\src"

# Pasta onde o arquivo de saída será gerado
$outputDir = "C:\dev\app-entregas-woocommerce\frontend"

# Arquivo de saída
$outfile = "$outputDir\saida.txt"

# Remove arquivo anterior (se existir)
Remove-Item $outfile -ErrorAction SilentlyContinue

# Inicializa uma coleção mutável para as linhas da árvore
$treeLines = New-Object System.Collections.ArrayList

# Função para percorrer diretórios, concatenar arquivos e coletar linhas da árvore
function Traverse-And-Collect($dir, $indent = "", $baseDir, $parentFolder = "") {
    $items = Get-ChildItem -Path $dir -ErrorAction SilentlyContinue | Sort-Object -Property @{Expression={$_.PSIsContainer}; Descending=$true}, Name
    $fileCounter = 1
    $localTreeLines = New-Object System.Collections.ArrayList

    foreach ($item in $items) {
        $relativePath = $item.FullName.Replace($baseDir, "").TrimStart("\")
        $currentFolder = if ($parentFolder) { "$parentFolder/$($item.Name)" } else { $item.Name }

        if ($item.PSIsContainer) {
            $subTree = Traverse-And-Collect $item.FullName "$indent  " $baseDir $currentFolder
            # Forçar subTree a ser uma ArrayList
            $subTreeArray = New-Object System.Collections.ArrayList
            if ($subTree -is [string]) {
                $null = $subTreeArray.Add($subTree)
            } elseif ($subTree -and $subTree.Length -gt 0) {
                $null = $subTreeArray.AddRange($subTree)
            }
            # Só adiciona a pasta se houver arquivos relevantes na subárvore
            if ($subTreeArray.Count -gt 0) {
                $null = $localTreeLines.Add("$indent📦$currentFolder/")
                $null = $localTreeLines.AddRange($subTreeArray)
            }
        } else {
            # Inclui arquivos .js, .css, .ico e .json
            if ($item.Name -match "\.(js|css|ico|json)$") {
                Add-Content $outfile "// ========================================="
                Add-Content $outfile "// $fileCounter. $relativePath"
                Add-Content $outfile "// ========================================="
                Add-Content $outfile ""
                Get-Content $item.FullName -Raw -ErrorAction SilentlyContinue | Add-Content $outfile
                Add-Content $outfile "`n"
                $null = $localTreeLines.Add("$indent$fileCounter 📜$relativePath")
                $fileCounter++
            }
        }
    }
    return $localTreeLines.ToArray()
}

# Adiciona o root à árvore
$null = $treeLines.Add("📦src/")

# Inicia o traversal no baseDir
$subTree = Traverse-And-Collect $baseDir "" $baseDir
# Forçar subTree a ser uma ArrayList
$subTreeArray = New-Object System.Collections.ArrayList
if ($subTree -is [string]) {
    $null = $subTreeArray.Add($subTree)
} elseif ($subTree -and $subTree.Length -gt 0) {
    $null = $subTreeArray.AddRange($subTree)
}
if ($subTreeArray.Count -gt 0) {
    $null = $treeLines.AddRange($subTreeArray)
}

# Adiciona a seção da árvore no final
Add-Content $outfile "`n// ========================================="
Add-Content $outfile "// ÁRVORE DE DIRETÓRIOS"
Add-Content $outfile "// ========================================="
foreach ($line in $treeLines) {
    Add-Content $outfile $line
}

Write-Host "Arquivo 'saida.txt' gerado com sucesso em: $outputDir"



// =========================================
// 5. EntregasWoo.txt
// =========================================

// =========================================
// 1. components\Filters\CourierFilter.js
// =========================================



// =========================================
// 2. components\Filters\StatusFilter.js
// =========================================



// =========================================
// 1. components\OrderModal\index.js
// =========================================

// components/OrderModal/index.js
import OrderModal from './OrderModal';
import WithCourier from './WithCourier';
import WithoutCourier from './WithoutCourier';

export { OrderModal, WithCourier, WithoutCourier };


// =========================================
// 2. components\OrderModal\OrderModal.js
// =========================================

// components/OrderModal/OrderModal.js
import React from 'react';

const OrderModal = ({ 
  pedido, 
  isOpen, 
  onClose, 
  children 
}) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Conteúdo específico (será injetado via children) */}
          {children}
        </div>
      </div>
    </div>
  );
};

export default OrderModal;


// =========================================
// 3. components\OrderModal\WithCourier.js
// =========================================

// components/OrderModal/WithCourier.js
import React from 'react';

const WithCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Entregador */}
      <div className="mb-6 p-4 bg-purple-50 rounded">
        <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
        <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithCourier;


// =========================================
// 4. components\OrderModal\WithoutCourier.js
// =========================================

// components/OrderModal/WithoutCourier.js
import React from 'react';

const WithoutCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithoutCourier;


// =========================================
// 1. components\DeliveryStatus.js
// =========================================

 



// =========================================
// 2. components\EditLojaModal.js
// =========================================

// components/EditLojaModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function EditLojaModal({ isOpen, onClose, loja }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  useEffect(() => {
    if (isOpen && loja) {
      setFormData({
        veiculo: loja.veiculo || '',
        carga_maxima: loja.carga_maxima || '',
        perimetro_entrega: loja.perimetro_entrega || ''
      });
    }
  }, [isOpen, loja]);

  const handleSave = async () => {
    try {
      setLoading(true);
      
      const { error } = await supabase
        .from('loja_associada')
        .update({
          veiculo: formData.veiculo,
          carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
          perimetro_entrega: formData.perimetro_entrega
        })
        .eq('id', loja.id);

      if (error) throw error;

      alert('Dados da loja atualizados com sucesso!');
      onClose();
      window.location.reload();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      alert('Erro ao atualizar dados da loja');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">🏪 Editar Loja: {loja.loja_nome}</h2>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm font-medium text-gray-700">Veículo</label>
            <select
              value={formData.veiculo}
              onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            >
              <option value="">Selecione o veículo</option>
              <option value="carro">Carro</option>
              <option value="moto">Moto</option>
              <option value="bicicleta">Bicicleta</option>
              <option value="caminhao">Caminhão</option>
              <option value="van">Van</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Carga Máxima (kg)</label>
            <input
              type="number"
              value={formData.carga_maxima}
              onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Perímetro de Entrega</label>
            <input
              type="text"
              value={formData.perimetro_entrega}
              onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 rounded"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-blue-600 text-white py-2 rounded disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 3. components\EditProfileModal.js
// =========================================

// components/EditProfileModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDIÇÃO DE PERFIL
// ==============================================================================
export default function EditProfileModal({ isOpen, onClose, userProfile, userRole, userLojas }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: '',
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  // ============================================================================
  // 1. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setFormData({
        nome_completo: userProfile.nome_completo || '',
        nome_usuario: userProfile.nome_usuario || '',
        telefone: userProfile.telefone || '',
        foto: userProfile.foto || '',
        veiculo: userLojas[0]?.veiculo || '',
        carga_maxima: userLojas[0]?.carga_maxima || '',
        perimetro_entrega: userLojas[0]?.perimetro_entrega || ''
      });
    }
  }, [isOpen, userProfile, userLojas]);

  // ============================================================================
  // 2. FUNÇÃO: SALVAR ALTERAÇÕES
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);

      const { error: userError } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (userError) throw userError;

      if (userRole === 'entregador' && userLojas.length > 0) {
        const { error: lojaError } = await supabase
          .from('loja_associada')
          .update({
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          })
          .eq('uid_usuario', userProfile.uid)
          .eq('id_loja', userLojas[0].id_loja);

        if (lojaError) throw lojaError;
      }

      alert('Perfil atualizado com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      alert('Erro ao atualizar perfil');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw max-h-95vh overflow-y-auto">
        
        {/* CABEÇALHO */}
        <h2 className="text-xl font-bold mb-4 text-gray-800">✏️ Editar Perfil</h2>
        
        {/* CAMPOS DO FORMULÁRIO */}
        <div className="space-y-4">
          {/* NOME COMPLETO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome Completo
            </label>
            <input
              type="text"
              value={formData.nome_completo}
              onChange={(e) => setFormData({...formData, nome_completo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome completo"
            />
          </div>

          {/* NOME DE USUÁRIO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome de Usuário
            </label>
            <input
              type="text"
              value={formData.nome_usuario}
              onChange={(e) => setFormData({...formData, nome_usuario: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome de usuário"
            />
          </div>

          {/* TELEFONE */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone
            </label>
            <input
              type="tel"
              value={formData.telefone}
              onChange={(e) => setFormData({...formData, telefone: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="(11) 99999-9999"
            />
          </div>

          {/* FOTO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL da Foto
            </label>
            <input
              type="url"
              value={formData.foto}
              onChange={(e) => setFormData({...formData, foto: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="https://exemplo.com/foto.jpg"
            />
          </div>

          {/* CAMPOS ESPECÍFICOS PARA ENTREGADORES */}
          {userRole === 'entregador' && (
            <>
              {/* VEÍCULO */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Veículo
                </label>
                <select
                  value={formData.veiculo}
                  onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                >
                  <option value="">Selecione o veículo</option>
                  <option value="carro">Carro</option>
                  <option value="moto">Moto</option>
                  <option value="bicicleta">Bicicleta</option>
                  <option value="caminhao">Caminhão</option>
                  <option value="van">Van</option>
                </select>
              </div>

              {/* CARGA MÁXIMA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Carga Máxima (kg)
                </label>
                <input
                  type="number"
                  value={formData.carga_maxima}
                  onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: 50"
                />
              </div>

              {/* PERÍMETRO DE ENTREGA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Perímetro de Entrega
                </label>
                <input
                  type="text"
                  value={formData.perimetro_entrega}
                  onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: Zona Norte, até 10km"
                />
              </div>
            </>
          )}
        </div>

        {/* BOTÕES DE AÇÃO */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded font-medium hover:bg-gray-400 transition-colors"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-purple-600 text-white py-2 px-4 rounded font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 4. components\EditUsuarioModal.js
// =========================================

// components/EditUsuarioModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDIÇÃO DE DADOS PESSOAIS DO USUÁRIO
// ==============================================================================
/**
 * Componente de modal para edição de dados pessoais, incluindo upload de foto.
 * Suporta normalização de nomes de arquivos e integração com Supabase Storage.
 * Aprimoramentos: Validação, acessibilidade e feedback visual.
 */
export default function EditUsuarioModal({ isOpen, onClose, userProfile }) {
  // ============================================================================
  // 1. DEFINIÇÃO DE ESTADOS
  // ============================================================================
  /**
   * Gerencia carregamento, dados do formulário, arquivo selecionado e erros.
   * Adicionado estado para validação de formulário.
   */
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: ''
  });
  const [selectedFile, setSelectedFile] = useState(null);
  const [error, setError] = useState('');
  const [formValid, setFormValid] = useState(false); // Novo estado para validação
  const [showRemovePhoto, setShowRemovePhoto] = useState(false); // ADICIONE ESTA LINHA

// ============================================================================
// 2. CARREGAR DADOS ATUAIS AO ABRIR MODAL
// ============================================================================
/**
 * Carrega os dados do perfil do usuário ao abrir o modal e valida o formulário.
 * Executa apenas se o modal estiver aberto e userProfile existir.
 */
useEffect(() => {
  if (isOpen && userProfile) {
    const newFormData = {
      nome_completo: userProfile.nome_completo || '',
      nome_usuario: userProfile.nome_usuario || '',
      telefone: userProfile.telefone || '',
      foto: userProfile.foto || ''
    };
    
    setFormData(newFormData);
    validateForm(newFormData); // Valida com os dados carregados
  }
}, [isOpen, userProfile]);

// ============================================================================
// 3. FUNÇÃO: VALIDAR FORMULÁRIO
// ============================================================================
/**
 * Valida campos obrigatórios (nome_completo e telefone) e atualiza estado de validade.
 * Requisitos: Nome completo e telefone não podem ser vazios.
 */
const validateForm = (data = formData) => {
  const isValid = data.nome_completo.trim() !== '' && data.telefone.trim() !== '';
  setFormValid(isValid);
};

// ============================================================================
// 4. FUNÇÃO: ATUALIZAR CAMPOS DO FORMULÁRIO
// ============================================================================
/**
 * Atualiza o estado do formulário com base nos inputs e revalida.
 * @param {Object} e - Evento de mudança do input.
 */
const handleChange = (e) => {
  const { name, value } = e.target;
  setFormData((prev) => {
    const newData = { ...prev, [name]: value };
    validateForm(newData); // Revalida após mudança
    return newData;
  });
};

  // ============================================================================
  // 5. FUNÇÃO: NORMALIZAR NOME DO ARQUIVO
  // ============================================================================
  /**
   * Remove acentos e caracteres especiais do nome do arquivo para compatibilidade.
   * @param {string} fileName - Nome original do arquivo.
   * @returns {string} Nome normalizado.
   */
  const normalizeFileName = (fileName) => {
    return fileName
      .normalize('NFD') // Decompõe caracteres acentuados
      .replace(/[\u0300-\u036f]/g, '') // Remove diacríticos
      .replace(/[^a-zA-Z0-9.-]/g, '_'); // Substitui especiais por underscore
  };

  // ============================================================================
  // 6. FUNÇÃO: ATUALIZAR ARQUIVO DE FOTO
  // ============================================================================
  /**
   * Valida e armazena o arquivo de imagem selecionado, com limite de tamanho (5MB).
   * @param {Object} e - Evento de mudança do input de arquivo.
   */
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        setError('Por favor, selecione um arquivo de imagem.');
        setSelectedFile(null);
        return;
      }
      if (file.size > 5 * 1024 * 1024) { // Limite de 5MB
        setError('O arquivo excede o limite de 5MB.');
        setSelectedFile(null);
        return;
      }
      setSelectedFile(file);
      setError(''); // Limpa erro se válido
    }
  };




// ============================================================================
// 7 FUNÇÃO: SALVAR ALTERAÇÕES
// ============================================================================
/**
 * Salva os dados atualizados no Supabase, incluindo upload de foto se houver.
 * Gerencia a remoção de fotos antigas para evitar acúmulo no storage.
 * Inclui tratamento robusto de erros e feedback ao usuário.
 */
const handleSave = async () => {
  if (!formValid) {
    setError('Preencha o nome completo e o telefone.');
    return;
  }

  try {
    setLoading(true);
    setError('');

    let photoUrl = formData.foto;
    let oldFileFullPath = null;

    // Identifica foto antiga para possível exclusão
    if (formData.foto) {
      const url = new URL(formData.foto);
      const pathParts = url.pathname.split('/');
      oldFileFullPath = pathParts.slice(4).join('/');
    }

    if (selectedFile) {
      const baseName = normalizeFileName(selectedFile.name);
      const fileName = `${userProfile.uid}-${Date.now()}-${baseName}`;
      const fullPath = `fotos/${fileName}`; // Caminho completo
      
      // Faz upload da nova foto
      const { error: uploadError } = await supabase.storage
        .from('box')
        .upload(fullPath, selectedFile, {
          cacheControl: '3600',
          upsert: false,
        });

      if (uploadError) throw uploadError;

      // Obtém URL pública da nova foto
      const { data: urlData } = supabase.storage
        .from('box')
        .getPublicUrl(fullPath);
      photoUrl = urlData.publicUrl;
    }

    // Atualiza dados do usuário no banco
    const { error: updateError } = await supabase
      .from('usuarios')
      .update({
        nome_completo: formData.nome_completo,
        nome_usuario: formData.nome_usuario,
        telefone: formData.telefone,
        foto: photoUrl
      })
      .eq('uid', userProfile.uid);

    if (updateError) throw updateError;

    // Remove foto antiga APÓS sucesso na atualização
    if (oldFileFullPath && selectedFile) {
      try {
        await supabase.storage
          .from('box')
          .remove([oldFileFullPath]);
      } catch (deleteError) {
        console.warn('Aviso: Foto antiga não pôde ser removida:', deleteError);
      }
    }

    alert('Dados pessoais atualizados com sucesso!');
    onClose();
    window.location.reload();

  } catch (error) {
    console.error('Erro ao atualizar perfil:', error);
    setError(error.message || 'Erro ao atualizar dados. Tente novamente.');
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// 8. FUNÇÃO: REMOVER FOTO
// ============================================================================
/**
 * Remove a foto atual do perfil tanto do estado local quanto do storage.
 * Inclui confirmação do usuário para evitar remoções acidentais.
 */
const handleRemovePhoto = async () => {
  if (!formData.foto) return;
  
  try {
    // Extrai o caminho completo do arquivo da URL
    // A URL é algo como: https://xxx.supabase.co/storage/v1/object/public/box/fotos/nome-arquivo.jpg
    const url = new URL(formData.foto);
    const pathParts = url.pathname.split('/');
    
    // O caminho completo é: 'box/fotos/nome-arquivo.jpg'
    // Precisamos remover '/storage/v1/object/public/' do início
    const fullPath = pathParts.slice(4).join('/');
    
    // Remove do storage do Supabase usando o caminho completo
    const { error: removeError } = await supabase.storage
      .from('box') // Nome do bucket
      .remove([fullPath]);
    
    if (removeError) throw removeError;
    
    // Atualiza estado local
    setFormData(prev => ({ ...prev, foto: '' }));
    setShowRemovePhoto(false);
    setSelectedFile(null); // Limpa qualquer arquivo selecionado
    setError('');
    
    alert('Foto removida com sucesso!');
    
  } catch (error) {
    console.error('Erro ao remover foto:', error);
    setError('Erro ao remover foto. Tente novamente.');
  }
};

// ============================================================================
// 9. RENDERIZAÇÃO DO COMPONENTE
// ============================================================================
/**
 * Renderiza o modal de edição com formulário completo.
 * Inclui seção de foto com opção de remoção e confirmação.
 * Implementa acessibilidade e feedback visual adequados.
 */
if (!isOpen) return null;

return (
  <div
    className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
    role="dialog"
    aria-labelledby="edit-user-modal-title"
    aria-modal="true"
  >
    <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
      <h2
        id="edit-user-modal-title"
        className="text-xl font-bold text-gray-800 mb-4"
      >
        ✏️ Editar Dados Pessoais
      </h2>
      
      {error && (
        <div
          className="bg-red-50 border border-red-200 text-red-600 p-2 mb-4 rounded"
          role="alert"
        >
          {error}
        </div>
      )}

      <div className="space-y-4">
        {/* Campo Nome Completo */}
        <div>
          <label
            htmlFor="nome-completo-input"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Nome Completo *
          </label>
          <input
            id="nome-completo-input"
            type="text"
            name="nome_completo"
            value={formData.nome_completo}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded text-gray-800 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            required
            disabled={loading}
            aria-required="true"
          />
        </div>

        {/* Campo Nome de Usuário */}
        <div>
          <label
            htmlFor="nome-usuario-input"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Nome de Usuário
          </label>
          <input
            id="nome-usuario-input"
            type="text"
            name="nome_usuario"
            value={formData.nome_usuario}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded text-gray-800 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            disabled={loading}
          />
        </div>

        {/* Campo Telefone */}
        <div>
          <label
            htmlFor="telefone-input"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Telefone *
          </label>
          <input
            id="telefone-input"
            type="tel"
            name="telefone"
            value={formData.telefone}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded text-gray-800 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            required
            disabled={loading}
            aria-required="true"
          />
        </div>

        {/* Seção de Foto de Perfil */}
        <div>
          <label
            htmlFor="foto-input"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Foto de Perfil
          </label>
          
          {/* Preview da foto atual com botão de remoção */}
          {formData.foto && (
            <div className="relative inline-block mb-3">
              <img
                src={formData.foto}
                alt="Foto atual do perfil"
                className="h-20 w-20 object-cover rounded-full border-2 border-gray-200"
              />
              <button
                type="button"
                onClick={() => setShowRemovePhoto(true)}
                className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold hover:bg-red-600 transition-colors shadow-md"
                disabled={loading}
                aria-label="Remover foto de perfil"
                title="Remover foto"
              >
                ×
              </button>
            </div>
          )}

          {/* Input para selecionar nova foto */}
          <input
            id="foto-input"
            type="file"
            accept="image/*"
            onChange={handleFileChange}
            className="w-full p-2 border border-gray-300 rounded text-gray-800 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-purple-600 file:text-white hover:file:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500"
            disabled={loading}
            aria-label="Selecionar nova foto de perfil"
          />
          <p className="text-xs text-gray-500 mt-2">
            Escolha uma imagem (máx. 5MB). Formatos: JPG, PNG, GIF.
          </p>
        </div>
      </div>

      {/* Botões de Ação */}
      <div className="flex gap-3 mt-6">
        <button
          onClick={onClose}
          className="flex-1 bg-gray-200 text-gray-700 py-2 rounded font-medium hover:bg-gray-300 transition-colors"
          disabled={loading}
          aria-label="Cancelar edição"
        >
          Cancelar
        </button>
        <button
          onClick={handleSave}
          disabled={loading || !formValid}
          className="flex-1 bg-purple-600 text-white py-2 rounded font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          aria-label="Salvar alterações"
        >
          {loading ? (
            <span className="flex items-center justify-center">
              <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Salvando...
            </span>
          ) : (
            'Salvar Alterações'
          )}
        </button>
      </div>
    </div>

    {/* Modal de Confirmação para Remover Foto */}
    {showRemovePhoto && (
      <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-60">
        <div className="bg-white p-6 rounded-lg w-80 shadow-xl">
          <h3 className="text-lg font-bold text-gray-800 mb-3">Remover Foto</h3>
          <p className="text-gray-600 mb-5">
            Tem certeza que deseja remover sua foto de perfil?
            Esta ação não pode ser desfeita.
          </p>
          <div className="flex gap-3">
            <button
              onClick={() => setShowRemovePhoto(false)}
              className="flex-1 bg-gray-200 text-gray-700 py-2 rounded font-medium hover:bg-gray-300 transition-colors"
            >
              Manter Foto
            </button>
            <button
              onClick={handleRemovePhoto}
              className="flex-1 bg-red-600 text-white py-2 rounded font-medium hover:bg-red-700 transition-colors"
            >
              Remover
            </button>
          </div>
        </div>
      </div>
    )}
  </div>
);
}


// =========================================
// 5. components\Header.js
// =========================================

// components/Header.js
export default function Header({ toggleSidebar, showMenuButton = true, title }) {
  return (
    <header className="bg-white shadow-sm border-b border-gray-200">
      <div className="flex items-center justify-between px-4 py-3">
        
        {/* ================================================================== */}
        {/* BOTÃO HAMBURGUER (CONDICIONAL) */}
        {/* ================================================================== */}
        <div className="flex items-center">
          {showMenuButton && (
            <button
              onClick={toggleSidebar}
              className="lg:hidden p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100"
              aria-label="Abrir menu"
            >
              {/* Ícone do hamburger */}
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          )}
          
          {/* Espaço para alinhamento quando não há botão */}
          {!showMenuButton && <div className="w-10 h-10"></div>}
        </div>

        {/* ================================================================== */}
        {/* TÍTULO (CUSTOMIZÁVEL PARA PÁGINAS SEM SIDEBAR) */}
        {/* ================================================================== */}
        <div className="flex-1 text-center lg:text-left">
          <h1 className="text-xl font-semibold text-gray-900">
            {title || 'EntregasWoo'} {/* Usa título customizado ou padrão */}
          </h1>
        </div>

        {/* ================================================================== */}
        {/* ESPAÇO PARA ELEMENTOS À DIREITA (BOTÃO DE PERFIL, ETC) */}
        {/* ================================================================== */}
        <div className="w-10 h-10"></div>
      </div>
    </header>
  );
}


// =========================================
// 6. components\Layout.js
// =========================================

// components/Layout.js
import { useState, useEffect } from 'react';
import Header from './Header';
import Sidebar from './Sidebar';

// ==============================================================================
// COMPONENTE LAYOUT PRINCIPAL
// ==============================================================================
/**
 * Layout é o componente que define a estrutura básica de todas as páginas
 * Ele gerencia: Sidebar, Header e Conteúdo principal
 * 
 * @param {Object} props - Propriedades do componente
 * @param {ReactNode} props.children - Conteúdo da página
 * @param {boolean} [props.hideSidebar=false] - Oculta a sidebar (para páginas como Admin)
 */
const Layout = ({ children, hideSidebar = false }) => {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  // ============================================================================
  // 2. EFFECT: DETECTAR TAMANHO DA TELA
  // ============================================================================
  useEffect(() => {
    const checkIsMobile = () => setIsMobile(window.innerWidth < 1024);
    
    // Verificar inicialmente
    checkIsMobile();
    
    // Adicionar listener para redimensionamento
    window.addEventListener('resize', checkIsMobile);
    
    // Cleanup
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);

  // ============================================================================
  // 3. FUNÇÕES: CONTROLE DA SIDEBAR
  // ============================================================================
  /**
   * Alterna o estado da sidebar (aberto/fechado)
   */
  const toggleSidebar = () => {
    setSidebarOpen(prev => !prev);
  };

  /**
   * Fecha a sidebar (útil para links mobile)
   */
  const closeSidebar = () => {
    if (isMobile) {
      setSidebarOpen(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO LAYOUT
  // ============================================================================
  return (
    <div className="flex h-screen bg-gray-50">
      
      {/* ====================================================================== */}
      {/* SIDEBAR - MENU LATERAL (CONDICIONAL) */}
      {/* ====================================================================== */}
      {/**
       * A sidebar é opcional (pode ser ocultada com hideSidebar=true)
       * Mas o Header SEMPRE deve aparecer, mesmo sem sidebar
       */}
      {!hideSidebar && (
        <Sidebar 
          isOpen={sidebarOpen} 
          toggleSidebar={toggleSidebar}
          onItemClick={closeSidebar}
        />
      )}
      
      {/* ====================================================================== */}
      {/* CONTEÚDO PRINCIPAL */}
      {/* ====================================================================== */}
      <div className="flex-1 flex flex-col overflow-hidden">
        
        {/* ================================================================== */}
        {/* HEADER - CABEÇALHO (SEMPRE VISÍVEL, INDEPENDENTE DA SIDEBAR) */}
        {/* ================================================================== */}
        {/**
         * ✅ CORREÇÃO: Header SEMPRE visível, mas o botão hamburger é condicional
         * showMenuButton=false quando hideSidebar=true
         */}
        <Header 
          toggleSidebar={toggleSidebar} 
          showMenuButton={!hideSidebar} // Botão só aparece se sidebar existir
          title={hideSidebar ? "Painel Administrativo" : undefined} // Título customizado para Admin
        />
        
        {/* ================================================================== */}
        {/* CONTEÚDO DA PÁGINA */}
        {/* ================================================================== */}
        <main 
          className="flex-1 overflow-y-auto p-4 lg:p-6"
          id="main-content"
          tabIndex={-1}
        >
          {children}
        </main>
      </div>

      {/* ====================================================================== */}
      {/* OVERLAY - SOMENTE MOBILE E QUANDO SIDEBAR NÃO ESTÁ OCULTA */}
      {/* ====================================================================== */}
      {!hideSidebar && sidebarOpen && isMobile && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
          onClick={closeSidebar}
          aria-hidden="true"
          role="button"
          aria-label="Fechar menu"
        />
      )}
    </div>
  );
};

export default Layout;


// =========================================
// 7. components\MobileMenu.js
// =========================================



// =========================================
// 8. components\Notification.js
// =========================================

 



// =========================================
// 9. components\OrderCard.js
// =========================================

 



// =========================================
// 10. components\Pagination.js
// =========================================

// components/Pagination.js
// ==============================================================================
// COMPONENTE PAGINATION (SEM DEPENDÊNCIAS EXTERNAS)
// ==============================================================================
export default function Pagination({ currentPage, totalPages, onPageChange }) {
  // ============================================================================
  // 1. FUNÇÃO: GERAR BOTÕES DE PÁGINA
  // ============================================================================
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 5; // Máximo de páginas visíveis
    
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    // Ajustar se estiver no início
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  };

  // ============================================================================
  // 2. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (totalPages <= 1) return null; // Não mostrar paginação se só tiver uma página

  return (
    <div className="flex items-center justify-between border-t border-gray-200 px-4 py-3 sm:px-6">
      
      {/* ✅ PAGINAÇÃO MOBILE */}
      <div className="flex flex-1 justify-between sm:hidden">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          ← Anterior
        </button>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Próxima →
        </button>
      </div>
      
      {/* ✅ PAGINAÇÃO DESKTOP */}
      <div className="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        
        {/* ✅ CONTADOR DE PÁGINAS */}
        <div>
          <p className="text-sm text-gray-700">
            Página <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        
        {/* ✅ NAVEGAÇÃO */}
        <div>
          <nav className="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
            
            {/* ✅ BOTÃO ANTERIOR */}
            <button
              onClick={() => onPageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Anterior</span>
              ← {/* Emoji seta esquerda */}
            </button>
            
            {/* ✅ BOTÕES DE PÁGINA */}
            {getPageNumbers().map((page) => (
              <button
                key={page}
                onClick={() => onPageChange(page)}
                className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                  currentPage === page
                    ? 'bg-purple-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600'
                    : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                }`}
              >
                {page}
              </button>
            ))}
            
            {/* ✅ BOTÃO PRÓXIMA */}
            <button
              onClick={() => onPageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Próxima</span>
              → {/* Emoji seta direita */}
            </button>
          </nav>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 11. components\PedidosEntregues.js
// =========================================

// components/PedidosEntregues.js
// ============================================================================
// 1. IMPORTAÇÕES
// ============================================================================
import { useEffect } from "react";
import { useUserProfile } from "../hooks/useUserProfile";

// Importa as versões da página, cada uma para um tipo de usuário
import PedidosEntreguesAdmin from "./PedidosEntreguesAdmin";
import PedidosEntreguesGerente from "./PedidosEntreguesGerente";
import PedidosEntreguesEntregador from "./PedidosEntreguesEntregador";

// ============================================================================
// 2. COMPONENTE PRINCIPAL
// ============================================================================
export default function PedidosEntregues() {
  // Hook que carrega dados do usuário
  const { userProfile, userRole, userLojas, loading } = useUserProfile();

    // ==========================================================================
  // 3. ESTADOS DE CARREGAMENTO E AUTENTICAÇÃO
  // ==========================================================================
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-purple-600 text-lg">Carregando...</div>
      </div>
    );
  }

  if (!userProfile) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-red-600 text-lg">Usuário não autenticado</div>
        <p className="text-gray-600 text-sm mt-2">
          Faça login para acessar esta página.
        </p>
      </div>
    );
  }



    // ==========================================================================
  // 4. ROTEAMENTO BASEADO NO TIPO DE USUÁRIO
  // ==========================================================================
  switch (userRole?.toLowerCase()) {
    // ------------------------------------------------------------------------
    // CASO 1: ADMINISTRADOR
    // ------------------------------------------------------------------------
    case "admin":
    case "administrador":
    case "administrator":
      return <PedidosEntreguesAdmin userProfile={userProfile} />;

    // ------------------------------------------------------------------------
    // CASO 2: GERENTE
    // ------------------------------------------------------------------------
    case "gerente":
    case "manager":
    case "gestor":
      return (
        <PedidosEntreguesGerente
          userProfile={userProfile}
          userLojas={userLojas}
        />
      );

    // ------------------------------------------------------------------------
    // CASO 3: ENTREGADOR
    // ------------------------------------------------------------------------
    case "entregador":
    case "delivery":
    case "courier":
    case "motoboy":
      return (
        <PedidosEntreguesEntregador
          userProfile={userProfile}
          userLojas={userLojas}
        />
      );

    // ------------------------------------------------------------------------
    // CASO PADRÃO: ACESSO NEGADO
    // ------------------------------------------------------------------------
    default:
      return (
        <div className="flex flex-col items-center justify-center min-h-screen p-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 max-w-md text-center">
            <h2 className="text-red-800 text-xl font-bold mb-2">
              ⚠️ Acesso Não Autorizado
            </h2>

            <p className="text-gray-700 mb-3">
              Seu tipo de usuário não tem permissão para acessar esta página.
            </p>

            <div className="bg-gray-100 p-3 rounded text-sm mb-4">
              <p>
                <strong>Tipo de usuário:</strong>{" "}
                {userRole || "Não definido"}
              </p>
              <p>
                <strong>Usuário:</strong>{" "}
                {userProfile.nome_completo || userProfile.email}
              </p>
            </div>

            <p className="text-sm text-gray-600">
              Contate o administrador do sistema para solicitar acesso.
            </p>

            <button
              onClick={() => window.history.back()}
              className="mt-4 bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 transition-colors"
            >
              Voltar
            </button>
          </div>
        </div>
      );
  }
}




// =========================================
// 12. components\PedidosEntreguesAdmin.js
// =========================================

import React, { useState, useEffect, useCallback } from 'react';
import { createClient } from '@supabase/supabase-js';
import { jsPDF } from 'jspdf';

// ==============================================================================
// 1. CONFIGURAÇÃO DO SUPABASE
// ==============================================================================
const supabaseUrl = 'https://czzidhzzpqegfvvmdgno.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6emlkaHp6cHFlZ2Z2dm1kZ25vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5NTIwMDMsImV4cCI6MjA2ODUyODAwM30.zK2iFp-b4e5vghpHgWGuOk0LooujlyU7kVm4sbM85m0';
const supabase = createClient(supabaseUrl, supabaseKey);

// ==============================================================================
// 2. FUNÇÕES AUXILIARES
// ==============================================================================

/**
 * Formata data para o padrão do Supabase (YYYY-MM-DD)
 */
const formatarDataParaSupabase = (dataString) => {
  if (!dataString) return '';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) return dataString;
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) {
    const [dia, mes, ano] = dataString.split('/');
    return `${ano}-${mes}-${dia}`;
  }
  return dataString;
};

/**
 * Formata data para exibição (DD/MM/YYYY)
 */
const formatarDataParaExibicao = (dataString) => {
  if (!dataString) return '-';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) {
    const [ano, mes, dia] = dataString.split('-');
    return `${dia}/${mes}/${ano}`;
  }
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) return dataString;
  try {
    const data = new Date(dataString);
    if (!isNaN(data.getTime())) return data.toLocaleDateString('pt-BR');
  } catch (e) {
    console.error('Erro ao formatar data:', e);
  }
  return dataString;
};

// ==============================================================================
// 3. COMPONENTE MODAL DE DETALHES
// ==============================================================================
const ModalDetalhesPedido = ({ pedido, isOpen, onClose }) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Informações da Loja */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p><strong>ID:</strong> {pedido.id}</p>
                <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
                <p><strong>Data:</strong> {pedido.data ? new Date(pedido.data).toLocaleString('pt-BR') : 'N/A'}</p>
              </div>
              <div>
                <p><strong>Telefone da Loja:</strong> {pedido.loja_telefone || 'N/A'}</p>
                <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
              </div>
            </div>
          </div>

          {/* Informações do Cliente */}
          <div className="mb-6 p-4 bg-gray-50 rounded">
            <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
            <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
            <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
          </div>

          {/* Produtos */}
          <div className="mb-6">
            <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
            <div className="bg-white border rounded p-3">
              {pedido.produto ? (
                <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
              ) : (
                <p>Nenhum produto informado</p>
              )}
            </div>
          </div>

          {/* Informações de Pagamento e Total */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div>
              <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
              <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p><strong>Frete Pago:</strong> R$ {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            </div>
            <div>
              <p><strong>Status Pagamento:</strong> {pedido.status_pagamento ? 'Pago' : 'Pendente'}</p>
              <p><strong>Data Pagamento:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
            </div>
          </div>

          {/* Observações */}
          {pedido.observacao_pedido && (
            <div className="mb-6">
              <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
              <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
            </div>
          )}

          {/* Entregador */}
          <div className="mb-6 p-4 bg-purple-50 rounded">
            <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
            <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
          </div>

          {/* Botão Fechar */}
          <div className="flex justify-end">
            <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition-colors">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// ==============================================================================
// 4. FUNÇÕES DE CARREGAMENTO DE IMAGEM E GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};

// ==============================================================================
// 5. COMPONENTE PRINCIPAL
// ==============================================================================
export default function PedidosEntregues() {
  // Estados do componente
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);

  // ============================================================================
  // 5.1 FUNÇÕES DE CÁLCULO E CARREGAMENTO
  // ============================================================================

  /**
   * Calcula o total dos pedidos selecionados
   */
  const calcularTotais = useCallback((pedidosList, selecionados) => {
    const total = Array.from(selecionados).reduce((sum, id) => {
      const pedido = pedidosList.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, []);

  /**
   * Carrega pedidos do Supabase com filtros aplicados
   */
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      let query = supabase.from('pedidos').select('*, loja_logo').eq('status_transporte', 'entregue');
      
      if (filtroEntregador) query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      if (filtroLoja) query = query.eq('id_loja', filtroLoja);
      if (filtroStatus) query = query.eq('status_pagamento', filtroStatus === 'true');
      
      const { data, error } = await query;
      if (error) throw error;
      
      setPedidos(data || []);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Atualiza pedidos selecionados no Supabase
   */
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }
    
    const dataFormatada = formatarDataParaSupabase(dataPagamento);
    
    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;
        
        const { error } = await supabase
          .from('pedidos')
          .update({
            frete_pago: fretePago,
            status_pagamento: fretePago > 0,
            data_pagamento: dataFormatada,
          })
          .eq('id', id);
        
        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pedidos atualizados com sucesso!');
      
      // Atualizar estado local
      setPedidos(prevPedidos => 
        prevPedidos.map(pedido => 
          pedidosSelecionados.has(pedido.id) 
            ? { 
                ...pedido, 
                data_pagamento: dataFormatada,
                status_pagamento: parseFloat(pedido.frete_pago || 0) > 0
              } 
            : pedido
        )
      );
      
      setPedidosSelecionados(new Set());
      
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ============================================================================
  // 5.2 HANDLERS DE INTERAÇÃO
  // ============================================================================

  /**
   * Manipula seleção/deseleção de pedidos
   */
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) {
      newSet.add(pedidoId);
    } else {
      newSet.delete(pedidoId);
    }
    setPedidosSelecionados(newSet);
  };

  /**
   * Atualiza valor do frete de um pedido
   */
  const handleAtualizarFrete = (pedidoId, novoValor) => {
    const newPedidos = pedidos.map(p => 
      p.id === pedidoId ? { ...p, frete_pago: novoValor } : p
    );
    setPedidos(newPedidos);
  };

  /**
   * Abre modal com detalhes do pedido
   */
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  /**
   * Fecha modal de detalhes
   */
  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 5.3 USE EFFECTS
  // ============================================================================

  // Carrega pedidos quando os filtros mudam
  useEffect(() => {
    carregarPedidos();
  }, [filtroEntregador, filtroLoja, filtroStatus]);

  // Calcula totais quando a seleção ou pedidos mudam
  useEffect(() => {
    calcularTotais(pedidos, pedidosSelecionados);
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ============================================================================
  // 5.4 DADOS DERIVADOS
  // ============================================================================

  // Lista de lojas únicas para o filtro
  const lojasUnicas = [...new Set(pedidos.map(p => p.id_loja))].map(id => {
    const nome = pedidos.find(p => p.id_loja === id)?.loja_nome;
    return { id, nome: nome || id };
  });

  // ============================================================================
  // 5.5 RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================

  return (
    <div className="bg-gray-50 min-h-screen mobile-optimized">
      {/* Modal de Detalhes */}
      <ModalDetalhesPedido
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={fecharModal}
      />

      {/* Cabeçalho Otimizado para Mobile */}
      <div className="bg-white shadow-md rounded-lg p-3 mb-3 sticky top-2 z-10 mobile-header">
        <div className="flex justify-between items-center mb-3">
          <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">{pedidosSelecionados.size}</span>
            <div className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </div>
          </div>
        </div>

        {/* Filtros sem rótulos */}
        <div className="grid grid-cols-1 gap-2 mb-3">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Entregadores</option>
            {[...new Set(pedidos.map(p => p.aceito_por_nome).filter(Boolean))].map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todas Lojas</option>
            {lojasUnicas.map(loja => (
              <option key={loja.id} value={loja.id}>{loja.nome}</option>
            ))}
          </select>
          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data e Botões na mesma linha */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded mobile-field"
          />
          <button 
            onClick={atualizarPedidos} 
            className="bg-purple-600 text-white p-2 rounded hover:bg-purple-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Atualizar
          </button>
          <button 
            onClick={async () => await gerarRecibosPDF(pedidosSelecionados, pedidos)}
            className="bg-green-600 text-white p-2 rounded hover:bg-green-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Recibo
          </button>
        </div>
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        <div className="grid grid-cols-1 gap-3">
          {isLoading ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Carregando...</p>
            </div>
          ) : pedidos.length === 0 ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow card-pedido p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="mobile-checkbox h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800 mobile-text-small">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 mobile-text-small">
                  <p><span className="font-semibold">Entregador:</span> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><span className="font-semibold">Pago em:</span> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p className="flex items-center">
                    <span className="font-semibold mr-1">Pagamento:</span> 
                    {pedido.status_pagamento ? (
                      <span className="text-green-600 mr-1">✔</span>
                    ) : (
                      <span className="text-red-600 mr-1">✘</span>
                    )} 
                    {pedido.status_pagamento ? 'Pago' : 'Pendente'}
                  </p>
                  <p className="flex items-center">
                    <span className="font-semibold">Frete Pago: R$</span>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0.0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500 focus:border-transparent mobile-text-small"
                    />
                  </p>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

{/* Estilos inline para mobile */}
<style jsx>{`
  @media (max-width: 768px) {
    .mobile-optimized :global(*) {
      font-size: 14px !important;
    }
    .mobile-header :global(*) {
      padding: 0px 10px !important;
    }
    .mobile-field :global(*) {
      padding: 10px !important;
      font-size: 14px !important;
    }
    .mobile-button :global(*) {
      padding: 10px 12px !important;
      font-size: 14px !important;
    }
    .mobile-text-small :global(*) {
      font-size: 13px !important;
    }
    .mobile-checkbox :global(*) {
      width: 18px !important;
      height: 18px !important;
    }
  }

  /* Estilos para tablet/PC (acima de 768px) - mantém o padrão */
  @media (min-width: 769px) {
    .mobile-header :global(*) {
      padding: 12px 10px !important; /* Valor original para tablet/PC */
    }
  }
`}</style>
    </div>
  );
}


// =========================================
// 13. components\PedidosEntreguesEntregador.js
// =========================================

// ============================================================================
// IMPORTAÇÕES
// ============================================================================
import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { OrderModal, WithCourier } from './OrderModal';

// ============================================================================
// COMPONENTE: PEDIDOS ENTREGUES - ENTREGADOR
// ============================================================================
/**
 * Versão exclusiva para ENTREGADORES:
 * - Só pode visualizar seus próprios pedidos entregues.
 * - Pode filtrar por loja e status de pagamento.
 * - Não pode editar valores, nem atualizar, nem gerar recibos.
 */
export default function PedidosEntreguesEntregador({ userProfile }) {
  // ==========================================================================
  // 1. ESTADOS DO COMPONENTE
  // ==========================================================================
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const [lojas, setLojas] = useState([]);
  const [error, setError] = useState(null); // Estado para erros

  // ==========================================================================
  // 2. CARREGAR LOJAS ASSOCIADAS AO ENTREGADOR
  // ==========================================================================
  useEffect(() => {
    const carregarLojas = async () => {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      try {
        console.log('🔍 Carregando lojas para UID:', userProfile.uid); // Log para depuração
        const { data, error } = await supabase
          .from('loja_associada')
          .select('id_loja, loja_nome')
          .eq('uid_usuario', userProfile.uid); // ✅ Corrigido: 'uid_usuario'

        if (error) throw error;
        console.log('✅ Lojas carregadas:', data); // Log para depuração
        
        // Processar para uniques por id_loja
        const uniqueLojas = [...new Map(data.map(item => [item.id_loja, item])).values()];
        setLojas(uniqueLojas);
      } catch (err) {
        console.error('Erro ao carregar lojas do entregador:', err.message);
        setError('Falha ao carregar lojas associadas. Verifique o schema da tabela loja_associada.');
      }
    };

    carregarLojas();
  }, [userProfile]);

  // ==========================================================================
  // 3. CARREGAR PEDIDOS DO ENTREGADOR LOGADO
  // ==========================================================================
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      console.log('🔍 Carregando pedidos para UID:', userProfile.uid); // Log para depuração
      let query = supabase
        .from('pedidos')
        .select('*')
        .eq('status_transporte', 'entregue')
        .eq('aceito_por_uid', userProfile.uid); // ✅ Corrigido: 'aceito_por_uid'

      if (filtroLoja) {
        query = query.eq('id_loja', filtroLoja);
      }
      if (filtroStatus) {
        query = query.eq('status_pagamento', filtroStatus === 'true');
      }

      const { data, error } = await query;
      if (error) throw error;

      console.log('✅ Pedidos carregados:', data); // Log para depuração
      setPedidos(data || []);
      setError(null);
    } catch (err) {
      console.error('Erro ao carregar pedidos do entregador:', err.message);
      setError('Falha ao carregar pedidos. Verifique o schema da tabela pedidos.');
    } finally {
      setIsLoading(false);
    }
  };

  // ==========================================================================
  // 4. ABRIR MODAL DE DETALHES
  // ==========================================================================
  const abrirModalDetalhes = (pedido) => {
    if (pedido) {
      setPedidoSelecionado(pedido);
      setModalAberto(true);
    }
  };

  // ==========================================================================
  // 5. USEEFFECT PARA CARREGAR PEDIDOS
  // ==========================================================================
  useEffect(() => {
    if (userProfile?.uid) carregarPedidos();
  }, [userProfile, filtroLoja, filtroStatus]);

  // ==========================================================================
  // 6. RENDERIZAÇÃO
  // ==========================================================================
  return (
    <div className="bg-gray-50 min-h-screen p-4">
      {/* Cabeçalho do entregador */}
      <div className="bg-white shadow-md rounded-lg p-4 mb-4 sticky top-4 z-10">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-xl font-bold text-purple-800">Meus Pedidos Entregues</h1>
            <p className="text-sm text-gray-600">
              Entregador: {userProfile.nome_completo || 'Não informado'}
            </p>
          </div>
        </div>

        {/* Filtros → Loja + Status */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todas Lojas</option>
            {lojas.map((loja) => (
              <option key={loja.id_loja} value={loja.id_loja}>
                {loja.loja_nome || `Loja ${loja.id_loja}`} {/* Fallback e desambiguação */}
              </option>
            ))}
          </select>

          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>
        {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
      </div>

      {/* Lista de pedidos (apenas visualização) */}
      <div className="container mx-auto px-2">
        {isLoading ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Carregando seus pedidos...</p>
          </div>
        ) : pedidos.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Nenhum pedido entregue encontrado.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {pedidos.map((pedido) => (
              <div key={pedido.id} className="bg-white rounded-lg shadow p-3">
                <button
                  onClick={() => abrirModalDetalhes(pedido)}
                  className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline w-full text-left"
                >
                  Pedido #{pedido.id_loja_woo}
                </button>
                <p className="text-sm font-semibold text-blue-800">{pedido.loja_nome}</p>
                <div className="mt-2 text-sm">
                  <p>
                    <strong>Data Entrega:</strong>{' '}
                    {pedido.data ? new Date(pedido.data).toLocaleDateString('pt-BR') : '-'}
                  </p>
                  <p>
                    <strong>Status Pagamento:</strong>{' '}
                    {pedido.status_pagamento ? '✅ Pago' : '❌ Pendente'}
                  </p>
                  <p>
                    <strong>Frete:</strong> R${' '}
                    {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modal de detalhes */}
      <OrderModal
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={() => setModalAberto(false)}
      >
        <WithCourier
          pedido={pedidoSelecionado}
          onClose={() => setModalAberto(false)}
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 14. components\PedidosEntreguesGerente.js
// =========================================

// ============================================================================
// IMPORTAÇÕES
// ============================================================================
import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '../lib/supabase';
import { OrderModal, WithCourier } from './OrderModal';
import { gerarRecibosPDF } from '../utils/pdfUtils';

// ============================================================================
// COMPONENTE: PEDIDOS ENTREGUES - GERENTE
// ============================================================================
/**
 * Versão exclusiva para GERENTES:
 * - Filtra pedidos apenas da loja do gerente.
 * - Pode visualizar, filtrar (entregador/status), atualizar pagamentos e gerar recibos.
 * - Não vê pedidos de outras lojas.
 */
export default function PedidosEntreguesGerente({ userProfile }) {
  // ==========================================================================
  // 1. ESTADOS DO COMPONENTE
  // ==========================================================================
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const [entregadores, setEntregadores] = useState([]);
  const [lojaInfo, setLojaInfo] = useState({ id_loja: null, loja_nome: null });
  const [error, setError] = useState(null); // Novo estado para erros

  // ==========================================================================
  // 2. CARREGAR LOJA DO GERENTE
  // ==========================================================================
  useEffect(() => {
    const carregarLojaGerente = async () => {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      try {
        const { data, error } = await supabase
          .from('loja_associada')
          .select('id_loja, loja_nome')
          .eq('uid_usuario', userProfile.uid)
          .eq('funcao', 'gerente')
          .single(); // Gerente tem apenas uma loja

        if (error) throw error;
        if (!data) {
          setError('Usuário sem loja associada como gerente.');
          return;
        }

        setLojaInfo({ id_loja: data.id_loja, loja_nome: data.loja_nome });
      } catch (err) {
        console.error('Erro ao carregar loja do gerente:', err.message);
        setError('Falha ao carregar loja associada.');
      }
    };

    carregarLojaGerente();
  }, [userProfile]);

  // ==========================================================================
  // 3. CARREGAR ENTREGADORES DA LOJA DO GERENTE
  // ==========================================================================
  useEffect(() => {
    const carregarEntregadores = async () => {
      if (!lojaInfo.id_loja) return;

      try {
        const { data, error } = await supabase
          .from('loja_associada')
          .select('nome_completo, uid_usuario')
          .eq('funcao', 'entregador')
          .eq('id_loja', lojaInfo.id_loja)
          .order('nome_completo');

        if (error) throw error;
        setEntregadores(data.map(u => u.nome_completo).filter(Boolean) || []);
      } catch (error) {
        console.error('Erro ao carregar entregadores:', error.message);
        setError('Falha ao carregar entregadores.');
      }
    };

    carregarEntregadores();
  }, [lojaInfo]);

  // ==========================================================================
  // 4. CARREGAR PEDIDOS DA LOJA DO GERENTE
  // ==========================================================================
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      if (!lojaInfo.id_loja) {
        setError('Usuário sem loja associada.');
        return;
      }

      let query = supabase
        .from('pedidos')
        .select('*')
        .eq('status_transporte', 'entregue')
        .eq('id_loja', lojaInfo.id_loja); // Filtro essencial

      if (filtroEntregador) {
        query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      }
      if (filtroStatus) {
        query = query.eq('status_pagamento', filtroStatus === 'true');
      }

      const { data, error } = await query;
      if (error) throw error;

      setPedidos(data || []);
      setError(null);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
      setError('Falha ao carregar pedidos.');
    } finally {
      setIsLoading(false);
    }
  };

  // ==========================================================================
  // 5. CALCULAR TOTAIS DOS PEDIDOS SELECIONADOS
  // ==========================================================================
  const calcularTotais = useCallback(() => {
    const total = Array.from(pedidosSelecionados).reduce((sum, id) => {
      const pedido = pedidos.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, [pedidosSelecionados, pedidos]);

  // ==========================================================================
  // 6. ATUALIZAR PAGAMENTOS DOS PEDIDOS SELECIONADOS
  // ==========================================================================
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }

    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;

        const { error } = await supabase
          .from('pedidos')
          .update({
            status_pagamento: fretePago > 0,
            data_pagamento: dataPagamento,
            frete_pago: fretePago, // Persistir frete atualizado
          })
          .eq('id', id);

        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pagamentos atualizados com sucesso!');
      carregarPedidos(); // Recarregar para refletir mudanças
      setPedidosSelecionados(new Set());
      setDataPagamento('');
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ==========================================================================
  // 7. MANIPULAR SELEÇÃO DE PEDIDOS
  // ==========================================================================
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) newSet.add(pedidoId);
    else newSet.delete(pedidoId);
    setPedidosSelecionados(newSet);
  };

  // ==========================================================================
  // 8. ATUALIZAR VALOR DO FRETE (LOCAL E BANCO)
  // ==========================================================================
  const handleAtualizarFrete = async (pedidoId, novoValor) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ frete_pago: novoValor })
        .eq('id', pedidoId);
      if (error) throw error;

      setPedidos(prevPedidos =>
        prevPedidos.map(p => p.id === pedidoId ? { ...p, frete_pago: novoValor } : p)
      );
    } catch (err) {
      console.error('Erro ao atualizar frete:', err.message);
      setError('Falha ao atualizar frete.');
    }
  };

  // ==========================================================================
  // 9. ABRIR MODAL DE DETALHES
  // ==========================================================================
  const abrirModalDetalhes = (pedido) => {
    if (pedido) {
      setPedidoSelecionado(pedido);
      setModalAberto(true);
    }
  };

  // ==========================================================================
  // 10. USEEFFECTS → carregar pedidos e recalcular totais
  // ==========================================================================
  useEffect(() => {
    if (lojaInfo.id_loja) carregarPedidos();
  }, [lojaInfo, filtroEntregador, filtroStatus]);

  useEffect(() => {
    calcularTotais();
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ==========================================================================
  // 11. FORMATAR DATA PARA EXIBIÇÃO
  // ==========================================================================
  const formatarDataParaExibicao = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return 'Data inválida';
    }
  };

  // ==========================================================================
  // 12. RENDERIZAÇÃO
  // ==========================================================================
  return (
    <div className="bg-gray-50 min-h-screen p-4">
      {/* Modal de Detalhes */}
      <OrderModal
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={() => setModalAberto(false)}
      >
        <WithCourier
          pedido={pedidoSelecionado}
          onClose={() => setModalAberto(false)}
        />
      </OrderModal>

      {/* Cabeçalho com nome da loja */}
      <div className="bg-white shadow-md rounded-lg p-4 mb-4 sticky top-4 z-10">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
            <p className="text-sm text-gray-600">
              Loja: {lojaInfo.loja_nome || lojaInfo.id_loja || 'Não definida'}
            </p>
          </div>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">
              {pedidosSelecionados.size} selecionados
            </span>
            <span className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
            </span>
          </div>
        </div>

        {/* Filtros: entregador e status */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Entregadores</option>
            {entregadores.map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>

          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data + botões de ação */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded"
          />
          <button
            onClick={atualizarPedidos}
            className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700"
            disabled={isLoading}
          >
            Atualizar
          </button>
          <button
            onClick={() => gerarRecibosPDF(pedidosSelecionados, pedidos, lojaInfo.id_loja)} // Passar id_loja para filtrar
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
            disabled={isLoading || pedidosSelecionados.size === 0}
          >
            Recibo
          </button>
        </div>
        {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        {isLoading ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Carregando pedidos...</p>
          </div>
        ) : pedidos.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Nenhum pedido encontrado para esta loja.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="h-4 w-4 text-purple-600 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 text-sm">
                  <p><strong>Entregador:</strong> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><strong>Pago em:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p>
                    <strong>Pagamento:</strong>{' '}
                    {pedido.status_pagamento ? '✅ Pago' : '❌ Pendente'}
                  </p>
                  <p className="flex items-center">
                    <strong>Frete Pago: R$</strong>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500"
                      disabled={isLoading}
                    />
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


// =========================================
// 15. components\RouteGuard.js
// =========================================

// components/RouteGuard.js
import { useUserProfile } from '../hooks/useUserProfile';
import { useRouter } from 'next/router';
import { useEffect } from 'react';

const RouteGuard = ({ children, requiredRole }) => {
  const { userRole, loading } = useUserProfile();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      // Definir hierarquia de permissões
      const rolesHierarchy = {
        'visitante': 0,
        'entregador': 1,
        'gerente': 2,
        'admin': 3
      };

      // Verificar se usuário tem permissão
      const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];
      
      if (!hasPermission) {
        // Redirecionar para página não autorizada ou home
        router.push('/');
      }
    }
  }, [userRole, loading, requiredRole, router]);

  // Mostrar loading enquanto verifica permissões
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Verificação final (caso o useEffect não tenha redirecionado ainda)
  const rolesHierarchy = {
    'visitante': 0,
    'entregador': 1,
    'gerente': 2,
    'admin': 3
  };
  
  const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];

  if (!hasPermission) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600">Acesso Não Autorizado</h1>
          <p className="text-gray-600 mt-2">Você não tem permissão para acessar esta página.</p>
        </div>
      </div>
    );
  }

  return children;
};

export default RouteGuard;


// =========================================
// 16. components\Sidebar.js
// =========================================

// components/Sidebar.js
import { useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import UserProfile from './UserProfile';

// ==============================================================================
// COMPONENTE SIDEBAR - MENU LATERAL
// ==============================================================================
/**
 * Sidebar é o menu de navegação lateral do sistema.
 * Contém: Logo, Menu de navegação, Perfil do usuário e Botão de login/logout.
 * Responsivo: Mobile (overlay) e Desktop (fixo).
 * Integra com useUserProfile para gerenciar autenticação e visibilidade de menus.
 */
const Sidebar = ({ isOpen, toggleSidebar }) => {
  const router = useRouter();
  const { user, userRole, userLojas, loading: loadingUser } = useUserProfile();
  
  // ============================================================================
  // 1. DEFINIÇÃO DOS ITENS DO MENU (INDIVIDUAIS)
  // ============================================================================
  /**
   * Definimos cada item separadamente para facilitar a montagem condicional.
   * Cada item tem: path (rota), icon (emoji), label (texto).
   */
  const homeItem = { path: '/', icon: '🏠', label: 'Home' };
  const perfilItem = { path: '/perfil', icon: '👤', label: 'Meu Perfil' };
  const pendentesItem = { path: '/pedidos-pendentes', icon: '📋', label: 'Pedidos Pendentes' };
  const aceitosItem = { path: '/pedidos-aceitos', icon: '✅', label: 'Pedidos Aceitos' };
  const entreguesItem = { path: '/pedidos-entregues', icon: '🚚', label: 'Pedidos Entregues' };
  const gestaoItem = { path: '/gestao-entregadores', icon: '👥', label: 'Gestão de Entregadores' };
  const todosItem = { path: '/todos-pedidos', icon: '📊', label: 'Todos os Pedidos' };
  const relatoriosItem = { path: '/relatorios', icon: '📈', label: 'Relatórios' };
  const adminItem = { path: '/admin', icon: '⚙️', label: 'Administração' };

  // ============================================================================
  // 2. MONTAGEM CONDICIONAL DOS ITENS DO MENU (CORRIGIDA)
  // ============================================================================
  /**
   * Constrói a lista de menuItems dinamicamente com base no user e userRole.
   * - Sempre inclui 'Home'.
   * - Para logados: Adiciona 'Meu Perfil'.
   * - Para 'entregador': Adiciona menus de pedidos pendentes e aceitos.
   * - Para 'entregador', 'gerente' e 'admin': Adiciona pedidos entregues.
   * - Para associados à loja (userLojas.length > 0) ou admin: Adiciona 'Relatórios'.
   * - Para 'gerente' ou 'admin': Adiciona gestão e todos os pedidos.
   * - Para 'admin': Adiciona administração.
   * 
   * ✅ CORREÇÃO: Pedidos Pendentes e Aceitos são APENAS para entregadores.
   */
  let menuItems = [homeItem]; // Sempre visível (até para não logados)

  if (user) { // Apenas para usuários logados
    menuItems.push(perfilItem);

    // --------------------------------------------------------------------------
    // BLOCO A: ITENS DE PEDIDOS PENDENTES E ACEITOS (APENAS ENTREGADORES)
    // --------------------------------------------------------------------------
    if (userRole === 'entregador') {
      menuItems.push(pendentesItem, aceitosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO B: ITENS DE PEDIDOS ENTREGUES (ENTREGADORES, GERENTES E ADMIN)
    // --------------------------------------------------------------------------
    if (['entregador', 'gerente', 'admin'].includes(userRole)) {
      menuItems.push(entreguesItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO C: RELATÓRIOS (para quem está vinculado a loja ou admin)
    // --------------------------------------------------------------------------
    if (userLojas.length > 0 || userRole === 'admin') {
      menuItems.push(relatoriosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO D: GESTÃO E TODOS OS PEDIDOS (GERENTE E ADMIN)
    // --------------------------------------------------------------------------
    if (['gerente', 'admin'].includes(userRole)) {
      menuItems.push(gestaoItem, todosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO E: ADMINISTRAÇÃO (APENAS ADMIN)
    // --------------------------------------------------------------------------
    if (userRole === 'admin') {
      menuItems.push(adminItem);
    }
  }

  // ============================================================================
  // 3. FUNÇÃO: LOGOUT DO USUÁRIO
  // ============================================================================
  /**
   * Realiza o logout do usuário via Supabase.
   * O useUserProfile lida com a atualização dos estados e redirecionamento.
   */
  const handleLogout = async () => {
    try {
      // Fechar sidebar no mobile antes do logout
      if (window.innerWidth < 1024) {
        toggleSidebar();
      }
      
      // Realizar logout
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      console.log('Logout realizado com sucesso');
    } catch (error) {
      console.error('Erro ao fazer logout:', error);
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: REDIRECIONAR PARA LOGIN
  // ============================================================================
  /**
   * Redireciona para a página de login quando o usuário não está autenticado.
   */
  const handleLoginRedirect = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
    router.push('/login');
  };

  // ============================================================================
  // 5. FUNÇÃO: FECHAR SIDEBAR AO CLICAR EM ITEM (MOBILE)
  // ============================================================================
  /**
   * Fecha o sidebar no mobile quando um item de menu é clicado.
   */
  const handleMenuItemClick = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <>
      {/* Overlay para mobile */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={toggleSidebar}
        />
      )}
      
      {/* Sidebar principal */}
      <div className={`
        fixed lg:static inset-y-0 left-0 z-50
        w-64 bg-purple-800 text-white
        transform transition-transform duration-300 ease-in-out
        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}
        flex flex-col h-full
      `}>
        {/* Logo / Marca do sistema */}
        <div className="p-6 border-b border-purple-700">
          <Link href="/" passHref onClick={handleMenuItemClick}>
            <div className="cursor-pointer">
              <h1 className="text-2xl font-bold">EntregasWoo</h1>
              <p className="text-purple-300 text-sm">Sistema de Gestão</p>
            </div>
          </Link>
        </div>

        {/* Menu de navegação */}
        <nav className="flex-1 p-4 overflow-y-auto">
          {menuItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`flex items-center py-3 px-4 rounded-lg mb-2 transition-colors
                ${router.pathname === item.path
                  ? 'bg-purple-900 text-white shadow-md'
                  : 'hover:bg-purple-700 text-purple-200'
                }`}
              onClick={handleMenuItemClick}
            >
              <span className="text-xl mr-3">{item.icon}</span>
              <span className="font-medium">{item.label}</span>
            </Link>
          ))}
        </nav>

        {/* Perfil do usuário (condicional) */}
        {user && (
          <div className="p-4 border-t border-purple-700 bg-purple-900">
            <UserProfile />
          </div>
        )}

        {/* Botão dinâmico: Entrar/Sair */}
        <div className="p-4 border-t border-purple-700">
          {user ? (
            <button
              onClick={handleLogout}
              className="w-full flex items-center justify-center py-2 px-4 bg-purple-700 hover:bg-purple-600 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              Sair
            </button>
          ) : (
            <button
              onClick={handleLoginRedirect}
              className="w-full flex items-center justify-center py-2 px-4 bg-green-600 hover:bg-green-500 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l-4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
              </svg>
              Entrar
            </button>
          )}
        </div>
      </div>
    </>
  );
};

export default Sidebar;


// =========================================
// 17. components\UserProfile.js
// =========================================

// components/UserProfile.js (VERSÃO SIMPLIFICADA)
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// COMPONENTE: PERFIL DO USUÁRIO (VERSÃO SIMPLIFICADA)
// ==============================================================================
/**
 * Componente de perfil simplificado para sidebar, exibindo informações básicas
 * (foto, nome, email, função e status) sem opções de edição.
 * Utiliza hook useUserProfile para dados e suporta modo mobile.
 * Aprimoramentos: Acessibilidade, feedback de erro e design responsivo.
 */
const UserProfile = ({ isMobile = false }) => {
  // ============================================================================
  // 1. OBTENÇÃO DE DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Usa o hook useUserProfile para obter perfil, função e estado de carregamento.
   * Desestruturação para acessar os valores retornados.
   */
  const { userProfile, userRole, loading, error } = useUserProfile();

  // ============================================================================
  // 2. ESTADO DE CARREGAMENTO
  // ============================================================================
  /**
   * Exibe um placeholder animado durante o carregamento dos dados.
   * Design aprimorado com múltiplos elementos para simular conteúdo.
   */
  if (loading) {
    return (
      <div
        className="p-4 border-t"
        role="status"
        aria-label="Carregando perfil do usuário"
      >
        <div className="animate-pulse space-y-2">
          <div className="h-4 bg-purple-700 rounded w-3/4 mb-2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/3 mt-2"></div>
        </div>
      </div>
    );
  }

  // ============================================================================
  // 3. TRATAMENTO DE ERRO
  // ============================================================================
  /**
   * Exibe uma mensagem de erro se a busca de perfil falhar.
   * Permite ao usuário tentar novamente ou entrar em contato com suporte.
   */
  if (error) {
    return (
      <div
        className="p-4 border-t"
        role="alert"
        aria-label="Erro ao carregar perfil"
      >
        <p className="text-sm text-red-300">Erro ao carregar perfil.</p>
        <p className="text-xs text-red-400">Tente novamente ou contate o suporte.</p>
      </div>
    );
  }

  // ============================================================================
  // 4. USUÁRIO NÃO AUTENTICADO
  // ============================================================================
  /**
   * Exibe mensagem para visitantes não autenticados, incentivando login.
   */
  if (!userProfile) {
    return (
      <div
        className="p-4 border-t"
        role="region"
        aria-label="Status de visitante"
      >
        <p className="text-sm text-purple-300">Visitante</p>
        <p className="text-xs text-purple-400">Faça login para acessar</p>
      </div>
    );
  }

  // ============================================================================
  // 5. RENDERIZAÇÃO SIMPLIFICADA
  // ============================================================================
  /**
   * Exibe informações do usuário autenticado com foto, nome, email, função e status.
   * Ajustes para responsividade em modo mobile e acessibilidade.
   */
  return (
    <div
      className={`p-4 border-t ${isMobile ? 'text-sm' : 'text-base'}`}
      role="region"
      aria-label="Perfil do usuário"
    >
      {/* INFORMAÇÕES BÁSICAS DO USUÁRIO */}
      <div className="space-y-2">
        {/* NOME E EMAIL */}
        <div className="flex items-center">
          {userProfile.foto && (
            <img
              src={userProfile.foto}
              alt={`${userProfile.nome_completo || userProfile.nome_usuario} foto de perfil`}
              className="w-8 h-8 rounded-full mr-3 border-2 border-purple-600"
              loading="lazy" // Otimização de carregamento
            />
          )}
          <div className="flex-1 min-w-0">
            <p
              className="text-sm font-semibold text-white truncate"
              title={userProfile.nome_completo || userProfile.nome_usuario}
            >
              {userProfile.nome_completo || userProfile.nome_usuario}
            </p>
            <p
              className="text-xs text-purple-300 truncate"
              title={userProfile.email}
            >
              {userProfile.email}
            </p>
          </div>
        </div>

        {/* FUNÇÃO/ROLE (APENAS TEXTO) */}
        <div className="bg-purple-700 rounded p-1">
          <p
            className="text-xs text-center text-white"
            role="status"
            aria-label={`Função: ${userRole}`}
          >
            {userRole === 'admin' && '👑 Admin'}
            {userRole === 'gerente' && '💼 Gerente'}
            {userRole === 'entregador' && '🚚 Entregador'}
            {userRole === 'visitante' && '👤 Visitante'}
          </p>
        </div>

        {/* STATUS DE CONEXÃO (SIMPLES) */}
        <div
          className="flex items-center justify-between text-xs text-purple-400"
          role="status"
          aria-label="Status de conexão"
        >
          <span>🟢 Conectado</span>
        </div>
      </div>
    </div>
  );
};

export default UserProfile;


// =========================================
// 1. hooks\useOrders.js
// =========================================

 



// =========================================
// 2. hooks\useRealtimePedidos.js
// =========================================

// hooks/useRealtimePedidos.js
import { useEffect } from 'react';
import { supabase } from '../lib/supabase';

export const useRealtimePedidos = (callback) => {
  useEffect(() => {
    const subscription = supabase
      .channel('pedidos-realtime')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'pedidos' 
        }, 
        (payload) => {
          callback(payload);
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, [callback]);
};

// Como usar em uma página:
const [pedidos, setPedidos] = useState([]);

useRealtimePedidos((payload) => {
  // Atualizar a lista de pedidos em tempo real
  if (payload.eventType === 'INSERT') {
    setPedidos(prev => [payload.new, ...prev]);
  } else if (payload.eventType === 'UPDATE') {
    setPedidos(prev => prev.map(p => 
      p.id === payload.new.id ? payload.new : p
    ));
  } else if (payload.eventType === 'DELETE') {
    setPedidos(prev => prev.filter(p => p.id !== payload.old.id));
  }
});


// =========================================
// 3. hooks\useUserProfile.js
// =========================================

// hooks/useUserProfile.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// HOOK PERSONALIZADO: useUserProfile
// ==============================================================================
/**
 * Hook para gerenciar dados do usuário autenticado com sistema de permissões baseado em:
 * 1. ✅ Tabela 'usuarios': Campo 'is_admin' (boolean) - Define administradores do sistema
 * 2. ✅ Tabela 'loja_associada': Campo 'funcao' (string) - Define gerentes e entregadores
 * 
 * Fluxo de decisão de permissões:
 * 1. Se is_admin = true → Administrador (acesso completo)
 * 2. Se tem registro em loja_associada com funcao = 'gerente' → Gerente (acesso à loja)
 * 3. Se tem registro em loja_associada com funcao = 'entregador' → Entregador (acesso limitado)
 * 4. Se não atende nenhum critério → Visitante (acesso mínimo)
 */
export const useUserProfile = () => {
  // ============================================================================
  // 1. ESTADOS DO HOOK
  // ============================================================================
  const [user, setUser] = useState(null); // Dados do Supabase Auth
  const [userProfile, setUserProfile] = useState(null); // Dados da tabela 'usuarios'
  const [userRole, setUserRole] = useState('visitante'); // Função: 'admin', 'gerente', 'entregador', 'visitante'
  const [userLojas, setUserLojas] = useState([]); // Lojas associadas da tabela 'loja_associada'
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [error, setError] = useState(null); // Mensagens de erro
  const [updating, setUpdating] = useState(false); // Estado de atualização

  // ============================================================================
  // 2. FUNÇÃO PRINCIPAL: CARREGAR DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Carrega todos os dados do usuário de forma sequencial e determinística
   * Segue a hierarquia de permissões do sistema
   */
  const loadUserData = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('🔄 Iniciando carregamento de dados do usuário...');

      // 2.1. OBTER USUÁRIO AUTENTICADO
      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        console.error('❌ Erro de autenticação:', authError);
        setError('Falha na autenticação: ' + authError.message);
        resetToVisitor();
        return;
      }

      if (!authUser) {
        console.log('👤 Nenhum usuário autenticado');
        resetToVisitor();
        return;
      }

      setUser(authUser);
      console.log('✅ Usuário autenticado:', authUser.email);

      // 2.2. BUSCAR PERFIL NA TABELA 'usuarios'
      const { data: usuarioData, error: usuarioError } = await supabase
        .from('usuarios')
        .select('*')
        .eq('uid', authUser.id)
        .single();

      if (usuarioError) {
        console.error('❌ Erro ao buscar perfil:', usuarioError);
        setError('Perfil não encontrado: ' + usuarioError.message);
        resetToVisitor();
        return;
      }

      setUserProfile(usuarioData);
      console.log('✅ Perfil carregado:', usuarioData.nome_completo);

      // 2.3. ✅ VERIFICAÇÃO CRÍTICA: É ADMINISTRADOR?
      if (usuarioData.is_admin === true) {
        console.log('🎯 Usuário é ADMINISTRADOR (is_admin = true)');
        setUserRole('admin');
        setUserLojas([]); // Admin não precisa de lojas associadas
        setLoading(false);
        return; // Interrompe aqui - admin tem acesso total
      }

      // 2.4. BUSCAR LOJAS ASSOCIADAS NA TABELA 'loja_associada'
      const { data: lojasData, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', authUser.id)
        .eq('status_vinculacao', 'ativo');

      if (lojasError) {
        console.warn('⚠️ Erro ao buscar lojas associadas:', lojasError);
        setUserLojas([]);
        setUserRole('visitante'); // Sem lojas = visitante
        setLoading(false);
        return;
      }

      setUserLojas(lojasData || []);
      console.log('📊 Lojas associadas encontradas:', lojasData?.length || 0);

      // 2.5. DETERMINAR FUNÇÃO BASEADA NAS LOJAS ASSOCIADAS
      if (!lojasData || lojasData.length === 0) {
        console.log('👤 Usuário é VISITANTE (sem lojas associadas)');
        setUserRole('visitante');
      } else {
        // Verificar se é gerente em alguma loja
        const lojasComoGerente = lojasData.filter(loja => loja.funcao === 'gerente');
        
        if (lojasComoGerente.length > 0) {
          if (lojasComoGerente.length > 1) {
            console.error('❌ CONFLITO: Usuário é gerente em múltiplas lojas');
            setError('Configuração inválida: Gerente em múltiplas lojas');
            setUserRole('erro');
          } else {
            console.log('💼 Usuário é GERENTE da loja:', lojasComoGerente[0].id_loja);
            setUserRole('gerente');
          }
        } else {
          // Se não é gerente, assume que é entregador
          console.log('🚚 Usuário é ENTREGADOR em', lojasData.length, 'loja(s)');
          setUserRole('entregador');
        }
      }

    } catch (error) {
      console.error('💥 Erro inesperado no carregamento:', error);
      setError('Erro inesperado: ' + error.message);
      resetToVisitor();
    } finally {
      setLoading(false);
      console.log('✅ Carregamento finalizado. Função:', userRole);
    }
  };

  // ============================================================================
  // 3. FUNÇÃO AUXILIAR: RESETAR PARA VISITANTE
  // ============================================================================
  /**
   * Reinicia todos os estados para usuário visitante (não autenticado)
   * Usado em casos de erro ou logout
   */
  const resetToVisitor = () => {
    setUser(null);
    setUserProfile(null);
    setUserRole('visitante');
    setUserLojas([]);
    setLoading(false);
  };

  // ============================================================================
  // 4. EFFECT: INICIALIZAÇÃO E OBSERVADOR DE AUTENTICAÇÃO
  // ============================================================================
  /**
   * Executa o carregamento inicial e fica observando mudanças de autenticação
   * Atualiza automaticamente quando usuário faz login/logout
   */
  useEffect(() => {
    // Carregamento inicial
    loadUserData();

    // Observar mudanças de estado de autenticação
    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('🔐 Evento de autenticação:', event);
        
        if (event === 'SIGNED_IN') {
          // Usuário fez login - recarregar dados
          await loadUserData();
        } else if (event === 'SIGNED_OUT') {
          // Usuário fez logout - resetar para visitante
          console.log('👋 Usuário desconectado');
          resetToVisitor();
        }
      }
    );

    // Cleanup: Remover observador quando componente desmontar
    return () => {
      if (authListener?.subscription) {
        authListener.subscription.unsubscribe();
        console.log('🧹 Observador de autenticação removido');
      }
    };
  }, []);

  // ============================================================================
  // 5. FUNÇÃO: ATUALIZAR PERFIL DO USUÁRIO
  // ============================================================================
  /**
   * Atualiza dados do perfil na tabela 'usuarios'
   * ⚠️ Não permite alterar 'is_admin' via interface comum
   */
  const updateUserProfile = async (formData) => {
    try {
      setUpdating(true);
      setError(null);

      // Validações
      if (!userProfile?.uid) throw new Error('Perfil não carregado');
      if (!formData.nome_completo || !formData.telefone) {
        throw new Error('Nome completo e telefone são obrigatórios');
      }

      // Dados para atualização
      const updateData = {
        nome_completo: formData.nome_completo,
        nome_usuario: formData.nome_usuario || userProfile.nome_usuario,
        telefone: formData.telefone,
        foto: formData.foto || userProfile.foto
      };

      // Executar atualização
      const { error: updateError } = await supabase
        .from('usuarios')
        .update(updateData)
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      // Atualizar estado local
      setUserProfile(prev => ({ ...prev, ...updateData }));

      return { success: true, message: 'Perfil atualizado com sucesso!' };

    } catch (error) {
      const errorMsg = 'Erro ao atualizar: ' + error.message;
      setError(errorMsg);
      return { success: false, message: errorMsg };
    } finally {
      setUpdating(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: RECARREGAR DADOS
  // ============================================================================
  /**
   * Força recarregamento completo dos dados do usuário
   * Útil após atualizações externas ou para sincronização
   */
  const reloadUserData = async () => {
    console.log('🔄 Recarregando dados do usuário...');
    await loadUserData();
  };

  // ============================================================================
  // 7. RETORNO DO HOOK
  // ============================================================================
  /**
   * Expõe estados e funções para componentes consumidores
   */
  return {
    // Estados
    user,
    userProfile,
    userRole, // 'admin', 'gerente', 'entregador', 'visitante'
    userLojas,
    loading,
    error,
    updating,
    
    // Funções
    updateUserProfile,
    reloadUserData
  };
};


// =========================================
// 1. lib\firebase.js
// =========================================

 



// =========================================
// 2. lib\supabase.js
// =========================================

 import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase URL or Anon Key. Check .env.local');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);



// =========================================
// 3. lib\wooCommerce.js
// =========================================

 



// =========================================
// 1. pages\_app.js
// =========================================

// pages/_app.js
import '../styles/globals.css';
import Layout from '../components/Layout';

// ==============================================================================
// COMPONENTE MyApp - PONTO DE ENTRADA DA APLICAÇÃO
// ==============================================================================
/**
 * MyApp é o componente raiz que envolve todas as páginas
 * Aqui definimos layouts globais, providers e configurações comuns
 * 
 * @param {Object} props - Propriedades do Next.js
 * @param {React.Component} props.Component - Componente da página atual
 * @param {Object} props.pageProps - Props específicas da página
 */
function MyApp({ Component, pageProps }) {
  
  // ============================================================================
  // 1. DECISÃO DE LAYOUT POR PÁGINA
  // ============================================================================
  /**
   * Estratégia: Cada página pode definir se quer ou não o layout padrão
   * através da propriedade estática `noLayout`
   * 
   * Páginas que devem SEM layout:
   * - Login, Cadastro, Erros, Admin (porque tem layout próprio)
   */
  
  // Verificar se a página atual deve usar layout
  const shouldUseLayout = !Component.noLayout;

  // ============================================================================
  // 2. RENDERIZAÇÃO CONDICIONAL
  // ============================================================================
  return (
    <>
      {shouldUseLayout ? (
        // PÁGINAS COM LAYOUT PADRÃO (com sidebar e header)
        <Layout>
          <Component {...pageProps} />
        </Layout>
      ) : (
        // PÁGINAS SEM LAYOUT PADRÃO (renderizar apenas o conteúdo)
        <Component {...pageProps} />
      )}
    </>
  );
}

export default MyApp;


// =========================================
// 2. pages\_document.js
// =========================================

 import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link rel="manifest" href="/manifest.json" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;



// =========================================
// 3. pages\admin.js
// =========================================

// pages/admin.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ==============================================================================
// PÁGINA DE ADMINISTRAÇÃO
// ==============================================================================
/**
 * Painel administrativo para gerenciamento do sistema
 * Acessível apenas para usuários com role 'admin'
 * 
 * IMPORTANTE: Esta página NÃO usa o Layout padrão (já é aplicado pelo _app.js)
 * Por isso NÃO devemos envolver com <Layout> aqui
 */
export default function Admin() {
  // ============================================================================
  // 1. ESTADOS E HOOKS
  // ============================================================================
  const { userRole, loading: userLoading } = useUserProfile();
  const [activeTab, setActiveTab] = useState('lojas');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  // Estados para dados das abas
  const [lojas, setLojas] = useState([]);
  const [usuariosPendentes, setUsuariosPendentes] = useState([]);
  const [associacoes, setAssociacoes] = useState([]);

  // ============================================================================
  // 2. EFFECT: CARREGAR DADOS COM BASE NA ABA ATIVA
  // ============================================================================
  useEffect(() => {
    if (activeTab === 'lojas') {
      loadLojas();
    } else if (activeTab === 'usuarios') {
      loadUsuariosPendentes();
    } else if (activeTab === 'associacoes') {
      loadAssociacoes();
    }
  }, [activeTab]);

// ============================================================================
// 3. FUNÇÕES: CARREGAMENTO DE DADOS
// ============================================================================
/**
 * Carrega lista de lojas cadastradas
 */
const loadLojas = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('lojas')
      .select('*')
      .order('loja_nome');
    
    if (error) throw error;
    setLojas(data || []);
  } catch (err) {
    setError('Erro ao carregar lojas: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Carrega usuários não vinculados a lojas (pendentes)
 */
const loadUsuariosPendentes = async () => {
  try {
    setLoading(true);
    // ✅ CORREÇÃO: Consulta mais simples para evitar erro de UUID
    const { data: usuariosAssociados, error: errorAssociados } = await supabase
      .from('loja_associada')
      .select('uid_usuario')
      .eq('status_vinculacao', 'ativo');

    if (errorAssociados) {
      throw new Error('Erro ao buscar usuários associados: ' + errorAssociados.message);
    }

    // Extrair apenas os UIDs
    const uidsAssociados = usuariosAssociados?.map(ua => ua.uid_usuario) || [];

    // Buscar usuários NÃO presentes na lista de associados
    let query = supabase
      .from('usuarios')
      .select('*');

    // Aplicar filtro apenas se houver usuários associados
    if (uidsAssociados.length > 0) {
      query = query.not('uid', 'in', `(${uidsAssociados.map(uid => `"${uid}"`).join(',')})`);
    }

    const { data, error } = await query;

    if (error) {
      throw new Error('Erro ao buscar usuários pendentes: ' + error.message);
    }

    setUsuariosPendentes(data || []);

  } catch (err) {
    setError('Erro ao carregar usuários: ' + err.message);
    console.error('Erro detalhado:', err);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// ✅ CORREÇÃO: FUNÇÃO loadAssociacoes ADICIONADA
// ============================================================================
/**
 * Carrega associações ativas entre usuários e lojas
 */
const loadAssociacoes = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        *,
        usuarios:uid_usuario(nome_completo, email),
        lojas:id_loja(loja_nome)
      `)
      .order('ultimo_status_vinculacao', { ascending: false });
    
    if (error) throw error;
    setAssociacoes(data || []);
  } catch (err) {
    setError('Erro ao carregar associações: ' + err.message);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// 4. FUNÇÕES: AÇÕES DO ADMIN
// ============================================================================
/**
 * Cria uma nova loja no sistema
 */
const handleCriarLoja = async (dadosLoja) => {
  try {
    setLoading(true);
    setError(null);
    
    const { error } = await supabase
      .from('lojas')
      .insert([{
        id_loja: dadosLoja.id_loja,
        loja_nome: dadosLoja.loja_nome,
        loja_endereco: dadosLoja.loja_endereco,
        loja_telefone: dadosLoja.loja_telefone,
        loja_perimetro_entrega: dadosLoja.loja_perimetro_entrega,
        cnpj: dadosLoja.cnpj,
        ativa: true
      }]);
    
    if (error) throw error;
    
    setSuccess('Loja criada com sucesso!');
    await loadLojas();
  } catch (err) {
    setError('Erro ao criar loja: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Associa um usuário como gerente de uma loja
 */
const handleAssociarGerente = async (usuarioId, lojaId) => {
  try {
    setLoading(true);
    setError(null);
    
    // Buscar dados do usuário e loja em paralelo
    const [{ data: usuario }, { data: loja }] = await Promise.all([
      supabase.from('usuarios').select('*').eq('uid', usuarioId).single(),
      supabase.from('lojas').select('*').eq('id_loja', lojaId).single()
    ]);
    
    if (!usuario || !loja) throw new Error('Usuário ou loja não encontrados');
    
    // Criar associação
    const { error } = await supabase
      .from('loja_associada')
      .insert([{
        uid_usuario: usuarioId,
        nome_completo: usuario.nome_completo,
        id_loja: lojaId,
        loja_nome: loja.loja_nome,
        loja_endereco: loja.loja_endereco,
        loja_telefone: loja.loja_telefone,
        funcao: 'gerente',
        status_vinculacao: 'ativo',
        ultimo_status_vinculacao: new Date().toISOString()
      }]);
    
    if (error) throw error;
    
    setSuccess('Gerente associado com sucesso!');
    await loadAssociacoes(); // ✅ Agora esta função existe
    await loadUsuariosPendentes();
  } catch (err) {
    setError('Erro ao associar gerente: ' + err.message);
  } finally {
    setLoading(false);
  }
};
  // ============================================================================
  // 5. VERIFICAÇÕES DE ACESSO E LOADING
  // ============================================================================
  if (userLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // ============================================================================
  // 6. RENDERIZAÇÃO PRINCIPAL
  // ============================================================================
  return (
    <RouteGuard requiredRole="admin">
      {/* ✅ REMOVIDO: <Layout> wrapper (já é aplicado pelo _app.js) */}
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Painel Administrativo</h1>
        
        {/* Mensagens de status */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            {success}
          </div>
        )}

        {/* Navegação por abas */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="flex space-x-8">
            {['lojas', 'usuarios', 'associacoes'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                {tab === 'lojas' && 'Lojas'}
                {tab === 'usuarios' && 'Usuários Pendentes'}
                {tab === 'associacoes' && 'Associações'}
              </button>
            ))}
          </nav>
        </div>

        {/* Conteúdo das abas */}
        <div className="mt-6">
          {/* Aba: Lojas */}
          {activeTab === 'lojas' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Gerenciar Lojas</h2>
              
              {/* Formulário de criação */}
              <div className="bg-white p-4 rounded-lg shadow-md mb-4">
                <h3 className="text-lg font-medium mb-3">Criar Nova Loja</h3>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target);
                  handleCriarLoja({
                    id_loja: formData.get('id_loja'),
                    loja_nome: formData.get('loja_nome'),
                    loja_endereco: formData.get('loja_endereco'),
                    loja_telefone: formData.get('loja_telefone'),
                    loja_perimetro_entrega: formData.get('loja_perimetro_entrega'),
                    cnpj: formData.get('cnpj')
                  });
                }}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                    <input name="id_loja" placeholder="ID da Loja (ex: L1)" required />
                    <input name="loja_nome" placeholder="Nome da Loja" required />
                    <input name="loja_endereco" placeholder="Endereço" />
                    <input name="loja_telefone" placeholder="Telefone" />
                    <input name="loja_perimetro_entrega" placeholder="Perímetro de Entrega" />
                    <input name="cnpj" placeholder="CNPJ" />
                  </div>
                  <button type="submit" disabled={loading}>
                    {loading ? 'Criando...' : 'Criar Loja'}
                  </button>
                </form>
              </div>

              {/* Listagem de lojas */}
              <div>
                <h3 className="text-lg font-medium mb-3">Lojas Cadastradas</h3>
                {loading ? (
                  <div className="text-center py-4">Carregando...</div>
                ) : (
                  <div className="grid gap-4">
                    {lojas.map(loja => (
                      <div key={loja.id} className="bg-white p-4 rounded-lg shadow-md">
                        <h4 className="font-semibold">{loja.loja_nome} ({loja.id_loja})</h4>
                        <p className="text-gray-600">{loja.loja_endereco}</p>
                        <p className="text-gray-600">{loja.loja_telefone}</p>
                        <p className="text-gray-600">Perímetro: {loja.loja_perimetro_entrega}</p>
                        <span className={`inline-block px-2 py-1 rounded text-xs ${
                          loja.ativa ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {loja.ativa ? 'Ativa' : 'Inativa'}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Aba: Usuários Pendentes */}
          {activeTab === 'usuarios' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Usuários Pendentes</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {usuariosPendentes.map(usuario => (
                    <div key={usuario.uid} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{usuario.nome_completo}</h4>
                      <p className="text-gray-600">{usuario.email}</p>
                      <p className="text-gray-600">{usuario.telefone}</p>
                      <button
                        onClick={() => {
                          const lojaId = prompt('Digite o ID da loja para associar (ex: L1):');
                          if (lojaId) handleAssociarGerente(usuario.uid, lojaId);
                        }}
                        className="bg-green-500 text-white px-3 py-1 rounded text-sm mt-2"
                      >
                        Associar como Gerente
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Aba: Associações */}
          {activeTab === 'associacoes' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Associações Ativas</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {associacoes.map(associacao => (
                    <div key={associacao.id} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{associacao.nome_completo}</h4>
                      <p className="text-gray-600">Função: {associacao.funcao}</p>
                      <p className="text-gray-600">Loja: {associacao.loja_nome}</p>
                      <p className="text-gray-600">Status: {associacao.status_vinculacao}</p>
                      <p className="text-gray-600 text-sm">
                        Última atualização: {new Date(associacao.ultimo_status_vinculacao).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}

// ==============================================================================
// MARCAÇÃO: ESTA PÁGINA NÃO USA LAYOUT PADRÃO (já é aplicado pelo _app.js)
// ==============================================================================



// =========================================
// 4. pages\atualizar-senha.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import Link from 'next/link';

export default function AtualizarSenha() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [session, setSession] = useState(null);
  const router = useRouter();

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
    });

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    return () => subscription.unsubscribe();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    if (password !== confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }

    if (password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) throw error;

      setSuccess('Senha atualizada com sucesso!');
      
      setTimeout(() => {
        router.push('/login');
      }, 2000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  if (!session) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 flex items-center justify-center">
        <div className="bg-white p-8 rounded-2xl shadow-2xl text-center">
          <p className="text-red-600 mb-4">Link inválido ou expirado</p>
          <Link href="/recuperar-senha" className="text-purple-600 hover:text-purple-800">
            Solicitar novo link
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">Nova Senha</h2>
          <p className="text-purple-200 mt-2">Digite sua nova senha</p>
        </div>

        {/* Card de Atualização */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Atualizar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Campo Nova Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                Nova Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Mínimo 6 caracteres"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            {/* Campo Confirmar Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                Confirmar Nova Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Digite novamente a senha"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Atualizando...' : 'Atualizar Senha'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
AtualizarSenha.noLayout = true;


// =========================================
// 5. pages\cadastro.js
// =========================================

// pages/cadastro.js
import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE CADASTRO COM NOME E TELEFONE
// ==============================================================================
/**
 * Inclui campos para nome completo e telefone, essenciais para credenciamento de motoristas.
 * Exibe mensagem sobre confirmação de email após cadastro.
 * Redireciona para /login após sucesso para tentativa de login.
 * Aprendizado: Integre mensagens de suporte ao fluxo de autenticação do Supabase.
 */
export default function Cadastro() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE (BLOCO DE ESTADOS)
  // ============================================================================
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    nome_completo: '',
    telefone: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. FUNÇÃO: ATUALIZAÇÃO DOS CAMPOS (BLOCO DE FUNÇÃO)
  // ============================================================================
  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  // ============================================================================
  // 3. FUNÇÃO: SUBMISSÃO DO CADASTRO (BLOCO DE FUNÇÃO ASSÍNCRONA)
  // ============================================================================
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    // 3.1. VALIDAÇÕES
    if (formData.password !== formData.confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }
    if (formData.password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }
    if (!formData.nome_completo.trim()) {
      setError('O nome completo é obrigatório');
      setLoading(false);
      return;
    }
    if (!formData.telefone.trim()) {
      setError('O telefone é obrigatório');
      setLoading(false);
      return;
    }

    try {
      // 3.2. CRIAÇÃO NO AUTH
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
        options: {
          data: {
            nome_completo: formData.nome_completo,
            telefone: formData.telefone
          }
        }
      });

      if (authError) throw authError;

      // 3.3. INSERÇÃO NA TABELA USUÁRIOS
      const { error: userError } = await supabase
        .from('usuarios')
        .insert({
          uid: authData.user.id,
          email: formData.email,
          nome_usuario: formData.email,
          nome_completo: formData.nome_completo,
          telefone: formData.telefone,
          foto: '',
          is_admin: false
        });

      if (userError) throw userError;

      // 3.4. SUCESSO E REDIRECIONAMENTO
      setSuccess('Cadastro realizado! Verifique seu email e clique no link de confirmação para fazer login.');
      setTimeout(() => {
        router.push('/login');
      }, 2000);
    } catch (error) {
      console.error('Erro detalhado:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO COMPONENTE (BLOCO DE JSX)
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 4.1. SEÇÃO VISUAL: LOGO E TÍTULO */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Criar Nova Conta</p>
        </div>

        {/* 4.2. CARD PRINCIPAL: CONTAINER DE CADASTRO */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Cadastro
          </h3>

          {/* 4.2.1. EXIBIÇÃO DE ERRO OU SUCESSO */}
          {error && <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">{error}</div>}
          {success && <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">{success}</div>}

          {/* 4.2.2. FORMULÁRIO COM NOME E TELEFONE */}
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="nome_completo" className="block text-sm font-medium text-gray-700">
                Nome Completo
              </label>
              <input
                id="nome_completo"
                name="nome_completo"
                type="text"
                value={formData.nome_completo}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="Seu nome completo"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="telefone" className="block text-sm font-medium text-gray-700">
                Telefone
              </label>
              <input
                id="telefone"
                name="telefone"
                type="tel"
                value={formData.telefone}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="(11) 99999-9999"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
                disabled={loading}
              />
            </div>

            <div className="relative">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  value={formData.password}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Mínimo 6 caracteres"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={loading}
                >
                  {showPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <div className="relative">
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirmar Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Digite novamente sua senha"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  disabled={loading}
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Criando conta...' : 'Criar Conta'}
            </button>
          </form>

          {/* 4.2.3. LINK PARA LOGIN */}
          <div className="mt-6 text-center">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Já tem uma conta? Faça login
            </Link>
          </div>
        </div>

        {/* 4.3. SEÇÃO DE RODAPÉ */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2025 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
Cadastro.noLayout = true;


// =========================================
// 6. pages\gestao-entregadores.js
// =========================================

// pages/gestao-entregadores.js (VERSÃO MELHORADA)
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// PÁGINA: GESTÃO DE ENTREGADORES
// ==============================================================================
export default function GestaoEntregadores() {
  const [entregadores, setEntregadores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [buscaEmail, setBuscaEmail] = useState('');
  const [usuarioEncontrado, setUsuarioEncontrado] = useState(null);
  const [buscando, setBuscando] = useState(false);

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 1. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 2. CARREGAR ENTREGADORES DA LOJA (COM MAIS CAMPOS)
  // ============================================================================
  useEffect(() => {
    if (userRole === 'gerente' || userRole === 'admin') {
      carregarEntregadores();
    }
  }, [userRole]);

  const carregarEntregadores = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('loja_associada')
        .select('*');

      // Gerente só vê pessoas da sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      // Filtrar apenas entregadores e gerentes
      const pessoasLoja = data.filter(pessoa => 
        pessoa.funcao === 'entregador' || pessoa.funcao === 'gerente'
      );
      
      setEntregadores(pessoasLoja || []);
    } catch (error) {
      console.error('Erro ao carregar pessoas da loja:', error);
      alert('Erro ao carregar lista de pessoas');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 3. BUSCAR USUÁRIO POR EMAIL NO SISTEMA (COM MAIS DETALHES)
  // ============================================================================
  const buscarUsuarioPorEmail = async () => {
    if (!buscaEmail.trim()) {
      alert('Por favor, digite um email para buscar');
      return;
    }
    
    try {
      setBuscando(true);
      
      // Buscar usuário na tabela usuarios pelo email
      const { data: usuario, error: usuarioError } = await supabase
        .from('usuarios')
        .select('uid, email, nome_completo, telefone, foto')
        .eq('email', buscaEmail.trim())
        .single();

      if (usuarioError) {
        if (usuarioError.code === 'PGRST116') {
          setUsuarioEncontrado(null);
          alert('Usuário não encontrado no sistema');
        } else {
          throw usuarioError;
        }
        return;
      }

      // Buscar TODOS os detalhes das lojas associadas a este usuário
      const { data: lojasAssociadas, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', usuario.uid);

      if (lojasError) throw lojasError;

      // Combinar dados do usuário com suas lojas
      setUsuarioEncontrado({
        ...usuario,
        lojasAssociadas: lojasAssociadas || []
      });

    } catch (error) {
      console.error('Erro ao buscar usuário:', error);
      alert('Erro ao buscar usuário. Verifique o console.');
      setUsuarioEncontrado(null);
    } finally {
      setBuscando(false);
    }
  };

  // ============================================================================
  // 4. VINCULAR USUÁRIO COMO ENTREGADOR
  // ============================================================================
  const vincularComoEntregador = async (usuario) => {
    if (!confirm(`Vincular ${usuario.nome_completo} como entregador nesta loja?`)) return;
    
    try {
      if (userRole === 'gerente' && (!userLojas || userLojas.length === 0)) {
        alert('Erro: Gerente não está vinculado a nenhuma loja');
        return;
      }

      const lojaId = userRole === 'gerente' ? userLojas[0].id_loja : prompt('Digite o ID da loja (admin):');
      const lojaNome = userRole === 'gerente' ? userLojas[0].loja_nome : prompt('Digite o nome da loja (admin):');

      if (!lojaId || !lojaNome) return;

      // Verificar se usuário já está vinculado a esta loja
      const { data: vinculoExistente } = await supabase
        .from('loja_associada')
        .select('id')
        .eq('uid_usuario', usuario.uid)
        .eq('id_loja', lojaId)
        .single();

      if (vinculoExistente) {
        alert('Este usuário já está vinculado a esta loja');
        return;
      }

      // Vincular usuário como entregador
      const { error } = await supabase
        .from('loja_associada')
        .insert({
          uid_usuario: usuario.uid,
          nome_completo: usuario.nome_completo,
          email_usuario: usuario.email, // ✅ NOVO CAMPO
          funcao: 'entregador',
          id_loja: lojaId,
          loja_nome: lojaNome,
          status_vinculacao: 'ativo',
          veiculo: 'Não informado',
          carga_maxima: 0,
          perimetro_entrega: 'Não definido',
          ultimo_status_vinculacao: new Date().toISOString()
        });

      if (error) throw error;

      alert('✅ Entregador vinculado com sucesso!');
      setBuscaEmail('');
      setUsuarioEncontrado(null);
      carregarEntregadores();
    } catch (error) {
      console.error('Erro ao vincular entregador:', error);
      alert('❌ Erro ao vincular entregador');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: FORMATAR VALOR NULO
  // ============================================================================
  const formatarValor = (valor) => {
    return valor || 'Não informado';
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  if (userRole !== 'admin' && userRole !== 'gerente') {
    return <div className="min-h-screen flex items-center justify-center">Acesso não autorizado</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">👥 Gestão de Entregadores</h1>

      {/* BUSCA POR EMAIL */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Buscar Usuário no Sistema</h2>
        <div className="flex gap-2 mb-4">
          <input
            type="email"
            placeholder="Digite o email do usuário"
            value={buscaEmail}
            onChange={(e) => setBuscaEmail(e.target.value)}
            className="flex-1 p-2 border border-gray-300 rounded"
            onKeyPress={(e) => e.key === 'Enter' && buscarUsuarioPorEmail()}
          />
          <button
            onClick={buscarUsuarioPorEmail}
            disabled={buscando}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
          >
            {buscando ? 'Buscando...' : 'Buscar'}
          </button>
        </div>

        {/* RESULTADO DA BUSCA - COM MAIS DETALHES */}
        {usuarioEncontrado && (
          <div className="mt-4 p-4 border border-green-200 bg-green-50 rounded">
            <h3 className="font-semibold text-green-800 mb-3">👤 Usuário encontrado:</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
              <div>
                <p><strong>Nome:</strong> {usuarioEncontrado.nome_completo}</p>
                <p><strong>Email:</strong> {usuarioEncontrado.email}</p>
                {usuarioEncontrado.telefone && (
                  <p><strong>Telefone:</strong> {usuarioEncontrado.telefone}</p>
                )}
              </div>
              
              {usuarioEncontrado.foto && (
                <div className="flex justify-center">
                  <img 
                    src={usuarioEncontrado.foto} 
                    alt="Foto do usuário"
                    className="w-16 h-16 rounded-full"
                  />
                </div>
              )}
            </div>

            <div className="mt-3">
              <strong>🏪 Lojas Associadas:</strong>
              {usuarioEncontrado.lojasAssociadas.length > 0 ? (
                <div className="ml-4 mt-2 space-y-2">
                  {usuarioEncontrado.lojasAssociadas.map((loja, index) => (
                    <div key={index} className="p-2 bg-white rounded border">
                      <p><strong>Loja:</strong> {loja.loja_nome} ({loja.id_loja})</p>
                      <p><strong>Função:</strong> 
                        <span className={`ml-1 ${
                          loja.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                        }`}>
                          {loja.funcao}
                        </span>
                      </p>
                      <p><strong>Status:</strong> 
                        <span className={`ml-1 ${
                          loja.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {loja.status_vinculacao}
                        </span>
                      </p>
                      {loja.veiculo && <p><strong>🚗 Veículo:</strong> {formatarValor(loja.veiculo)}</p>}
                      {loja.carga_maxima > 0 && <p><strong>📦 Carga Máxima:</strong> {loja.carga_maxima} kg</p>}
                      {loja.perimetro_entrega && <p><strong>📍 Perímetro:</strong> {formatarValor(loja.perimetro_entrega)}</p>}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-600 ml-4">Nenhuma loja associada</p>
              )}
            </div>

            <button
              onClick={() => vincularComoEntregador(usuarioEncontrado)}
              className="mt-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
            >
              ➕ Vincular como Entregador
            </button>
          </div>
        )}
      </div>

      {/* LISTA DE PESSOAS DA LOJA - COM MAIS DETALHES */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4">
          {userRole === 'gerente' ? '👥 Pessoas da Minha Loja' : '👥 Pessoas do Sistema'}
        </h2>
        
        {loading ? (
          <p className="text-gray-500">Carregando...</p>
        ) : entregadores.length === 0 ? (
          <p className="text-gray-500">Nenhuma pessoa encontrada</p>
        ) : (
          <div className="grid gap-4">
            {entregadores.map((pessoa) => (
              <div key={pessoa.id} className="border p-4 rounded-lg bg-gray-50">
                <h3 className="font-semibold text-lg text-purple-800">
                  {pessoa.funcao === 'gerente' ? '👑 ' : '🚚 '}
                  {pessoa.nome_completo}
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-2">
                  <div>
                    <p><strong>📧 Email:</strong> {pessoa.email_usuario}</p>
                    <p><strong>🎯 Função:</strong> 
                      <span className={`ml-1 ${
                        pessoa.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                      }`}>
                        {pessoa.funcao}
                      </span>
                    </p>
                    <p><strong>📊 Status:</strong> 
                      <span className={`ml-1 ${
                        pessoa.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {pessoa.status_vinculacao}
                      </span>
                    </p>
                  </div>
                  
                  <div>
                    <p><strong>🏪 Loja:</strong> {pessoa.loja_nome} ({pessoa.id_loja})</p>
                    <p><strong>🚗 Veículo:</strong> {formatarValor(pessoa.veiculo)}</p>
                    {pessoa.carga_maxima > 0 && (
                      <p><strong>📦 Carga Máx:</strong> {pessoa.carga_maxima} kg</p>
                    )}
                    {pessoa.perimetro_entrega && (
                      <p><strong>📍 Perímetro:</strong> {formatarValor(pessoa.perimetro_entrega)}</p>
                    )}
                  </div>
                </div>
                
                {pessoa.data_desligamento && (
                  <p className="text-red-600 text-sm mt-2">
                    <strong>🗓️ Data desligamento:</strong> {new Date(pessoa.data_desligamento).toLocaleDateString('pt-BR')}
                  </p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


// =========================================
// 7. pages\index.js
// =========================================

// Importação de dependências necessárias do Next.js e React
import Head from 'next/head';
import Link from 'next/link';
import { useEffect } from 'react';

// Componente principal da página inicial
export default function HomePage() {
  // Hook useEffect para configurar a navegação suave
  useEffect(() => {
    // Seleção de todos os links internos que começam com '#'
    const anchors = document.querySelectorAll('a[href^="#"]');

    // Função para lidar com o clique em links internos
    const handleAnchorClick = (e) => {
      e.preventDefault();
      const targetId = e.currentTarget.getAttribute('href');

      // Verifica se o link não é apenas '#'
      if (targetId === '#') return;

      // Encontra o elemento alvo pelo ID
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        // Realiza a rolagem suave com offset para compensar o cabeçalho
        window.scrollTo({
          top: targetElement.offsetTop - 80, // Ajuste de 80px para o cabeçalho
          behavior: 'smooth'
        });
      }
    };

    // Adiciona event listeners para todos os links internos
    anchors.forEach(anchor => {
      anchor.addEventListener('click', handleAnchorClick);
    });

    // Cleanup: remove os event listeners quando o componente é desmontado
    return () => {
      anchors.forEach(anchor => {
        anchor.removeEventListener('click', handleAnchorClick);
      });
    };
  }, []);

  return (
    <>
      {/* Configuração do cabeçalho HTML com título e importação de Font Awesome */}
      <Head>
        <title>VendasWoo + EntregasWoo - Sistema Completo para E-commerce e Entregas</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
      </Head>

      {/* Cabeçalho da página com apenas o título */}
      <header>
        <div className="container">
          <div className="header-content">
            <div className="logo">
              <h1>VendasWoo <span>+ EntregasWoo</span></h1>
            </div>
          </div>
        </div>
      </header>

      {/* Seção Hero com chamada principal */}
      <section className="hero">
        <div className="container">
          <h2>Sistema Completo para E-commerce e Entregas</h2>
          <p>Conectamos lojas a entregadores locais para simplificar e agilizar as entregas na sua região.</p>
          <div className="hero-buttons">
            <Link href="#para-lojas" className="btn">Sou Lojista</Link>
            <Link href="#para-entregadores" className="btn btn-accent">Sou Entregador</Link>
            <a href="https://wa.me/552132727548" className="btn btn-outline" target="_blank" rel="noopener noreferrer">Fale no WhatsApp</a>
          </div>
        </div>
      </section>

      {/* Seção Como Funciona com passos para entregadores e lojas */}
      <section className="how-it-works" id="como-funciona">
        <div className="container">
          <div className="section-title">
            <h2>Como Funciona</h2>
            <p>Dois sistemas integrados para atender lojas e entregadores</p>
          </div>
          
          <div className="dual-steps">
            <div className="steps-container">
              <h3 className="steps-title">Para Entregadores</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Cadastro Simplificado</h4>
                  <p>Faça seu cadastro como motorista autônomo MEI com documentação em ordem.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Defina sua Área de Atuação</h4>
                  <p>Informe seu veículo, capacidade de carga e o perímetro onde quer trabalhar.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Conexão com Lojas</h4>
                  <p>Conectamos você às empresas que precisam de entregas na sua região.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Combine Preços e Área</h4>
                  <p>Negocie diretamente com as lojas os valores e detalhes do serviço.</p>
                </div>
              </div>
            </div>
            
            <div className="steps-container">
              <h3 className="steps-title">Para Lojas</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Plataforma Completa</h4>
                  <p>Tenha seu e-commerce com catálogo de produtos, atualização de preços fácil e múltiplas formas de pagamento.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Integração Total</h4>
                  <p>Receba pedidos pelo app, computador e WhatsApp integrados em um único sistema.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Gestão Completa</h4>
                  <p>Controle de estoque, relatórios, emissão de recibos e muito mais.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Entregas Terceirizadas</h4>
                  <p>Use o EntregasWoo para conectar-se a entregadores de bairro e terceirizar suas entregas.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Seção Para Lojas com benefícios */}
      <section id="para-lojas" className="benefits">
        <div className="container">
          <div className="section-title">
            <h2>Para Lojas e Empresas</h2>
            <p>Sistema completo para vendas online e gestão de entregas</p>
          </div>
          <ul className="benefits-list">
            <li>Plataforma online para apresentar seus produtos de forma profissional</li>
            <li>Atualização de preços fácil e intuitiva</li>
            <li>Múltiplas formas de pagamento integradas (PIX, cartão, etc)</li>
            <li>Recebimento de pedidos por app, computador e WhatsApp</li>
            <li>Controle de estoque em tempo real</li>
            <li>Relatórios detalhados de vendas e desempenho</li>
            <li>Emissão de recibos e comprovantes</li>
            <li>App EntregasWoo para terceirizar entregas para motoristas de bairro</li>
            <li>Gestão integrada de pedidos e entregas em um único sistema</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de saber mais sobre o sistema para lojas" className="btn">Quero saber mais</a>
          </div>
        </div>
      </section>

      {/* Seção Para Entregadores com benefícios */}
      <section id="para-entregadores" className="benefits" style={{backgroundColor: 'var(--light-gray)'}}>
        <div className="container">
          <div className="section-title">
            <h2>Para Entregadores</h2>
            <p>Conecte-se com lojas da sua região e aumente sua renda</p>
          </div>
          <ul className="benefits-list">
            <li>Cadastro gratuito para motoristas MEI com documentação regular</li>
            <li>Defina o tipo de veículo, capacidade de carga e área de atuação</li>
            <li>Escolha o perímetro onde quer trabalhar (bairros, regiões)</li>
            <li>Conexão direta com empresas que precisam de entregas na sua área</li>
            <li>Negociação direta de preços e condições de serviço</li>
            <li>Flexibilidade de horários - trabalhe quando quiser</li>
            <li>App simples para gerenciar corridas e ganhos</li>
            <li>Pagamentos rápidos e transparentes</li>
            <li>Construa sua reputação com avaliações das lojas</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de me cadastrar como entregador" className="btn btn-accent">Quero me cadastrar</a>
          </div>
        </div>
      </section>

      {/* Seção de Chamada para Ação (CTA) */}
      <section className="cta">
        <div className="container">
          <h2>Pronto para transformar seu negócio ou aumentar sua renda?</h2>
          <p>Entre em contato e faça um teste grátis dos nossos sistemas</p>
          <a href="https://wa.me/552132727548" className="btn" target="_blank" rel="noopener noreferrer">Fale conosco no WhatsApp</a>
        </div>
      </section>

      {/* Rodapé com links rápidos e informações de contato */}
      <footer id="contato">
        <div className="container">
          <div className="footer-content">
            <div className="footer-column">
              <h3>VendasWoo + EntregasWoo</h3>
              <p>Sistema integrado de e-commerce e gestão de entregas</p>
            </div>
            <div className="footer-column">
              <h3>Links Rápidos</h3>
              <ul>
                <li><Link href="#como-funciona">Como Funciona</Link></li>
                <li><Link href="#para-lojas">Para Lojas</Link></li>
                <li><Link href="#para-entregadores">Para Entregadores</Link></li>
                <li><a href="https://pedidossimples.com.br/vendaswoo/" target="_blank" rel="noopener noreferrer">VendasWoo</a></li>
              </ul>
            </div>
            <div className="footer-column">
              <h3>Contato</h3>
              <ul>
                <li>Email: comercial@abistec.com.br</li>
                <li>WhatsApp: (21) 3272-7548</li>
                <li>Site: <a href="https://pedidossimples.com.br">pedidossimples.com.br</a></li>
              </ul>
            </div>
          </div>
          <div className="copyright">
            <p>&copy; 2023 VendasWoo + EntregasWoo - Abistec Serviços Tecnológicos Ltda</p>
          </div>
        </div>
      </footer>

      {/* Estilos globais usando styled-jsx */}
      <style jsx global>{`
        :root {
          --primary: #3b7b2b;
          --secondary: #5c3b27;
          --accent: #f39c12;
          --light: #fdfaf6;
          --dark: #333;
          --gray: #777;
          --light-gray: #f5f5f5;
        }
        
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
          background-color: var(--light);
          color: var(--dark);
          line-height: 1.6;
        }
        
        .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0 20px;
        }
        
        /* Estilos do Cabeçalho */
        header {
          background-color: white;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          /* Removido o comportamento sticky para fluir com a rolagem */
        }
        
        .header-content {
          display: flex;
          justify-content: center;
          align-items: center;
          padding: 15px 0;
        }
        
        .logo {
          display: flex;
          align-items: center;
        }
        
        .logo h1 {
          color: var(--primary);
          font-size: 1.8rem;
          font-weight: bold;
        }
        
        .logo span {
          color: var(--secondary);
        }
        
        nav ul {
          display: flex;
          list-style: none;
        }
        
        nav li {
          margin-left: 25px;
        }
        
        nav a {
          text-decoration: none;
          color: var(--dark);
          font-weight: 500;
          transition: color 0.3s;
        }
        
        nav a:hover {
          color: var(--primary);
        }
        
        .btn {
          display: inline-block;
          padding: 12px 25px;
          background-color: var(--primary);
          color: white;
          border-radius: 5px;
          text-decoration: none;
          font-weight: 600;
          transition: all 0.3s;
          border: none;
          cursor: pointer;
        }
        
        .btn:hover {
          background-color: #2c5e20;
          transform: translateY(-2px);
        }
        
        .btn-outline {
          background-color: transparent;
          border: 2px solid var(--primary);
          color: var(--primary);
        }
        
        .btn-outline:hover {
          background-color: var(--primary);
          color: white;
        }
        
        .btn-accent {
          background-color: var(--accent);
        }
        
        .btn-accent:hover {
          background-color: #e67e22;
        }
        
        /* Estilos da Seção Hero */
        .hero {
          padding: 80px 0;
          background: linear-gradient(135deg, rgba(59,123,43,0.1) 0%, rgba(92,59,39,0.1) 100%);
          text-align: center;
        }
        
        .hero h2 {
          font-size: 2.5rem;
          margin-bottom: 20px;
          color: var(--secondary);
        }
        
        .hero p {
          font-size: 1.2rem;
          max-width: 800px;
          margin: 0 auto 30px;
          color: var(--gray);
        }
        
        .hero-buttons {
          display: flex;
          justify-content: center;
          gap: 15px;
          margin-top: 30px;
          flex-wrap: wrap;
        }
        
        /* Estilos da Seção Como Funciona */
        .how-it-works {
          padding: 80px 0;
          background-color: var(--light-gray);
        }
        
        .section-title {
          text-align: center;
          margin-bottom: 50px;
        }
        
        .section-title h2 {
          font-size: 2rem;
          color: var(--secondary);
          margin-bottom: 15px;
        }
        
        .section-title p {
          color: var(--gray);
          max-width: 700px;
          margin: 0 auto;
        }
        
        .dual-steps {
          display: flex;
          justify-content: space-between;
          flex-wrap: wrap;
          gap: 40px;
        }
        
        .steps-container {
          flex: 1;
          min-width: 300px;
          background: white;
          border-radius: 10px;
          padding: 30px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        .steps-title {
          text-align: center;
          margin-bottom: 30px;
          color: var(--primary);
          font-size: 1.5rem;
        }
        
        .step {
          display: flex;
          margin-bottom: 25px;
          align-items: flex-start;
        }
        
        .step-number {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background-color: var(--primary);
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          margin-right: 15px;
          flex-shrink: 0;
        }
        
        .step-content {
          flex: 1;
        }
        
        /* Estilos da Seção Benefícios */
        .benefits {
          padding: 80px 0;
          background-color: white;
        }
        
        .benefits-list {
          list-style: none;
          max-width: 800px;
          margin: 0 auto;
        }
        
        .benefits-list li {
          padding: 15px 0;
          border-bottom: 1px solid #eee;
          display: flex;
          align-items: center;
        }
        
        .benefits-list li:before {
          content: "✓";
          color: var(--primary);
          font-weight: bold;
          margin-right: 10px;
          font-size: 1.2rem;
        }
        
        /* Estilos da Seção CTA */
        .cta {
          padding: 80px 0;
          background: linear-gradient(135deg, var(--primary) 0%, #2c5e20 100%);
          color: white;
          text-align: center;
        }
        
        .cta h2 {
          font-size: 2.2rem;
          margin-bottom: 20px;
        }
        
        .cta p {
          max-width: 700px;
          margin: 0 auto 30px;
          font-size: 1.1rem;
        }
        
        .cta .btn {
          background-color: white;
          color: var(--primary);
        }
        
        .cta .btn:hover {
          background-color: #f0f0f0;
        }
        
        /* Estilos do Rodapé */
        footer {
          background-color: var(--secondary);
          color: white;
          padding: 50px 0 20px;
        }
        
        .footer-content {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 30px;
          margin-bottom: 30px;
        }
        
        .footer-column h3 {
          margin-bottom: 20px;
          font-size: 1.2rem;
        }
        
        .footer-column ul {
          list-style: none;
        }
        
        .footer-column li {
          margin-bottom: 10px;
        }
        
        .footer-column a {
          color: #ddd;
          text-decoration: none;
          transition: color 0.3s;
        }
        
        .footer-column a:hover {
          color: white;
        }
        
        .copyright {
          text-align: center;
          padding-top: 20px;
          border-top: 1px solid rgba(255,255,255,0.1);
          font-size: 0.9rem;
          color: #ddd;
        }
        
        /* Estilos Responsivos */
        @media (max-width: 768px) {
          .header-content {
            flex-direction: column;
          }
          
          .hero h2 {
            font-size: 2rem;
          }
          
          .hero-buttons {
            flex-direction: column;
            align-items: center;
          }
          
          .dual-steps {
            flex-direction: column;
          }
        }
      `}</style>
    </>
  );
}


// =========================================
// 8. pages\login.js
// =========================================

// pages/login.js
import { useState, useEffect } from 'react'; // Adicionado useEffect
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE LOGIN
// ==============================================================================
/**
 * Página de login com suporte a autenticação via Google OAuth e email/senha.
 * Inclui modal controlado, redirecionamento baseado em perfil (admin, gerente, entregador)
 * e links para cadastro e recuperação de senha.
 * Aprimoramentos: Validação de formulário, acessibilidade e feedback visual.
 */
export default function Login() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  /**
   * Gerencia dados do formulário, estado de carregamento, erros e visibilidade.
   * Adicionado estado para validação de formulário.
   */
  const [email, setEmail] = useState('');              // Email do usuário
  const [password, setPassword] = useState('');        // Senha do usuário
  const [loading, setLoading] = useState(false);       // Estado de carregamento
  const [error, setError] = useState('');              // Mensagens de erro
  const [showPassword, setShowPassword] = useState(false); // Visibilidade da senha
  const [isModalOpen, setIsModalOpen] = useState(false);  // Controle do modal
  const [formValid, setFormValid] = useState(false);    // Validação do formulário
  const router = useRouter();

  // ============================================================================
  // 2. FUNÇÃO: VALIDAR FORMULÁRIO
  // ============================================================================
  /**
   * Valida email e senha em tempo real, atualizando o estado de validade.
   * Requisitos: Email válido e senha com no mínimo 6 caracteres.
   */
  const validateForm = () => {
    const emailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    const passwordValid = password.length >= 6;
    setFormValid(emailValid && passwordValid);
  };

  useEffect(() => {
    validateForm();
  }, [email, password]);

  // ============================================================================
  // 3. FUNÇÃO: LOGIN COM EMAIL/SENHA
  // ============================================================================
  /**
   * Autentica o usuário com email/senha e redireciona com base no perfil.
   * Inclui validação prévia e tratamento de erros detalhado.
   */
  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    if (!formValid) {
      setError('Por favor, insira um email válido e uma senha com pelo menos 6 caracteres.');
      setLoading(false);
      return;
    }

    try {
      // 3.1. AUTENTICAÇÃO COM SUPABASE
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (authError) throw authError;

      // 3.2. VERIFICAÇÃO DE PERFIL E REDIRECIONAMENTO
      const { data: usuario, error: userError } = await supabase
        .from('usuarios')
        .select('is_admin')
        .eq('uid', authData.user.id)
        .single();
      if (userError) throw userError;

      if (usuario.is_admin) {
        router.push('/admin');
        return;
      }

      const { data: associacoes, error: assocError } = await supabase
        .from('loja_associada')
        .select('funcao')
        .eq('uid_usuario', authData.user.id)
        .eq('status_vinculacao', 'ativo');
      if (assocError) throw new Error('Erro ao verificar permissões: ' + assocError.message);

      if (!associacoes || associacoes.length === 0) {
        alert('Você não possui acesso ativo. Contate o administrador.');
        throw new Error('Usuário sem acesso ativo. Contate o administrador.');
      }

      const primeiraAssociacao = associacoes[0];
      switch (primeiraAssociacao.funcao) {
        case 'gerente':
          router.push('/todos-pedidos');
          break;
        case 'entregador':
          router.push('/pedidos-pendentes');
          break;
        default:
          throw new Error('Função não reconhecida.');
      }
    } catch (error) {
      // 3.3. TRATAMENTO DE ERROS
      setError(error.message.includes('Invalid login credentials')
        ? 'Email ou senha inválidos.'
        : error.message);
      console.error('Erro no login:', error);
    } finally {
      // 3.4. FINALIZAÇÃO
      setLoading(false);
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: LOGIN COM GOOGLE
  // ============================================================================
  /**
   * Inicia o fluxo de login com Google OAuth, redirecionando para completar perfil.
   * Inclui tratamento de erros e feedback visual.
   */
  const handleGoogleLogin = async () => {
    try {
      setLoading(true);
      setError('');
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/perfil`,
        },
      });
      if (error) throw error;
    } catch (error) {
      setError('Erro ao fazer login com Google: ' + error.message);
      console.error('Erro no login Google:', error);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 5.1. SEÇÃO VISUAL: LOGO E TÍTULO */}
        <div className="text-center mb-8">
          <div
            className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center"
            role="img"
            aria-label="Ícone de entrega"
          >
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h1 className="text-3xl font-bold text-white">EntregasWoo</h1>
          <p className="text-purple-200 mt-2">Sistema de Gestão de Entregas</p>
        </div>

        {/* 5.2. CARD PRINCIPAL: CONTAINER DE LOGIN */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h2 className="text-2xl font-bold text-gray-800 text-center mb-6" id="login-title">
            Acessar Sistema
          </h2>

          {/* 5.2.1. EXIBIÇÃO DE ERRO */}
          {error && (
            <div
              className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4"
              role="alert"
            >
              {error}
            </div>
          )}

          {/* 5.2.2. BOTÃO DE LOGIN GOOGLE */}
          <button
            onClick={handleGoogleLogin}
            disabled={loading}
            className="w-full flex items-center justify-center py-3 px-4 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Login com Google"
          >
            {loading ? (
              <span className="flex items-center">
                <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Carregando...
              </span>
            ) : (
              <>
                <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Entrar com Google
              </>
            )}
          </button>

          {/* 5.2.3. ABRE MODAL PARA LOGIN EMAIL/SENHA */}
          <div className="mt-4 text-center">
            <button
              onClick={() => setIsModalOpen(true)}
              className="text-purple-600 hover:text-purple-800 font-medium"
              aria-controls="email-login-modal"
            >
              Ou entre com email e senha
            </button>
          </div>

          {/* 5.2.4. MODAL DE LOGIN EMAIL/SENHA */}
          {isModalOpen && (
            <div
              className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
              role="dialog"
              aria-labelledby="email-login-modal-title"
              aria-modal="true"
            >
              <div className="bg-white rounded-2xl shadow-2xl p-6 w-96">
                <h3
                  id="email-login-modal-title"
                  className="text-xl font-bold text-gray-800 mb-4"
                >
                  Login com Email
                </h3>
                {error && (
                  <div
                    className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4"
                    role="alert"
                  >
                    {error}
                  </div>
                )}
                <form onSubmit={handleLogin} className="space-y-4">
                  <div>
                    <label
                      htmlFor="email-input"
                      className="block text-sm font-medium text-gray-700"
                    >
                      Email
                    </label>
                    <input
                      id="email-input"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
                      required
                      disabled={loading}
                      aria-required="true"
                    />
                  </div>
                  <div className="relative">
                    <label
                      htmlFor="password-input"
                      className="block text-sm font-medium text-gray-700"
                    >
                      Senha
                    </label>
                    <input
                      id="password-input"
                      type={showPassword ? "text" : "password"}
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
                      required
                      disabled={loading}
                      aria-required="true"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                      disabled={loading}
                      aria-label={showPassword ? "Ocultar senha" : "Mostrar senha"}
                    >
                      {showPassword ? (
                        <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                        </svg>
                      ) : (
                        <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                        </svg>
                      )}
                    </button>
                  </div>
                  <button
                    type="submit"
                    disabled={loading || !formValid}
                    className="w-full bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
                    aria-label="Enviar login"
                  >
                    {loading ? (
                      <span className="flex items-center justify-center">
                        <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Entrando...
                      </span>
                    ) : (
                      'Entrar'
                    )}
                  </button>
                </form>
                <button
                  onClick={() => setIsModalOpen(false)}
                  className="mt-4 w-full text-gray-500 hover:text-gray-700"
                  aria-label="Fechar modal"
                >
                  Fechar
                </button>
              </div>
            </div>
          )}

          {/* 5.2.5. LINKS EXTRAS */}
          <div className="mt-6 text-center space-y-3">
            <Link
              href="/cadastro"
              className="text-purple-600 hover:text-purple-800 text-sm font-medium"
              aria-label="Criar nova conta"
            >
              Criar nova conta
            </Link>
            <Link
              href="/recuperar-senha"
              className="text-gray-500 hover:text-gray-700 text-sm"
              aria-label="Recuperar senha"
            >
              Esqueceu sua senha?
            </Link>
          </div>
        </div>

        {/* 5.3. SEÇÃO DE RODAPÉ */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm" aria-label="Copyright 2025">
            © 2025 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 9. pages\orders.js
// =========================================

import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const { data, error } = await supabase.from('pedidos').select('*');
        if (error) throw error;
        setOrders(data || []);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

  if (loading) return <p>Carregando pedidos...</p>;
  if (error) return <p>Erro: {error}</p>;

  return (
    <div>
      <h1>Lista de Pedidos</h1>
      {orders.length === 0 ? (
        <p>Nenhum pedido encontrado.</p>
      ) : (
        <ul>
          {orders.map((order) => (
            <li key={order.id} style={{ marginBottom: '10px' }}>
              <strong>Pedido #{order.id_woo}</strong> - Cliente: {order.nome_cliente} - 
              Total: R${order.total} - Status: {order.status_transporte || 'Pendente'}
              <button
                onClick={() => handleAcceptOrder(order.id)}
                style={{ marginLeft: '10px', padding: '5px 10px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '3px' }}
                disabled={order.status_transporte === 'Entregue'}
              >
                Aceitar
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );

  async function handleAcceptOrder(orderId) {
    const { error } = await supabase
      .from('pedidos')
      .update({ status_transporte: 'Aceito' })
      .eq('id', orderId);
    if (error) {
      setError(`Erro ao aceitar pedido: ${error.message}`);
    } else {
      setOrders(orders.map(order =>
        order.id === orderId ? { ...order, status_transporte: 'Aceito' } : order
      ));
    }
  }
}


// =========================================
// 10. pages\pedidos-aceitos.js
// =========================================

// pages/pedidos-aceitos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { filterPedidosPorUsuario } from '../utils/filterPedidos';
import { OrderModal, WithCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS ACEITOS
// ==============================================================================
export default function PedidosAceitos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]); // Todos os pedidos do banco
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [loadingAcoes, setLoadingAcoes] = useState(false); // Loading para ações
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null); // Pedido para modal
  const [modalAberto, setModalAberto] = useState(false); // Controle do modal
  
  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getPedidosAceitos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS ACEITOS/EM ROTA
  // ============================================================================
  const getPedidosAceitos = async () => {
    try {
      setLoading(true);
      
      // Busca TODOS os pedidos com status aceito ou em rota
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aceito', 'em rota'])
        .order('data', { ascending: false });

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. FILTRAR PEDIDOS POR USUÁRIO
  // ============================================================================
  const pedidosFiltrados = filterPedidosPorUsuario(
    todosPedidos,
    userRole, 
    userLojas
  );

  // ============================================================================
  // 6. FUNÇÕES DE AÇÃO: SAIR PARA ENTREGA / ENTREGAR / CANCELAR
  // ============================================================================
  const handleSairEntrega = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'em rota' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Atualiza lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, status_transporte: 'em rota' } : p
      ));
      
    } catch (error) {
      console.error('Erro ao atualizar status:', error);
      alert('Erro ao sair para entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleEntregar = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'entregue' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista (pedido entregue vai para outra página)
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Pedido marcado como entregue com sucesso!');
      
    } catch (error) {
      console.error('Erro ao entregar pedido:', error);
      alert('Erro ao marcar como entregue.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleCancelar = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja cancelar esta entrega?')) return;
    
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'cancelado' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Entrega cancelada com sucesso.');
      
    } catch (error) {
      console.error('Erro ao cancelar pedido:', error);
      alert('Erro ao cancelar entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  // ============================================================================
  // 7. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 8. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Carregando perfil...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">✅ Pedidos Aceitos</h1>

      {/* ESTADO DE CARREGAMENTO */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        /* LISTA DE PEDIDOS */
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido aceito encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>
                    <p className="text-sm">
                      <span className="font-medium">Status:</span> 
                      <span className={pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-green-600'}>
                        {pedido.status_transporte === 'em rota' ? ' 🚚 Em Rota' : ' ✅ Aceito'}
                      </span>
                    </p>
                  </div>

                  {/* BOTÕES DE AÇÃO */}
                  <div className="flex flex-col gap-2 ml-4">
                    {pedido.status_transporte === 'aceito' && (
                      <button 
                        onClick={() => handleSairEntrega(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-orange-500 text-white px-4 py-2 rounded text-sm hover:bg-orange-600 transition-colors"
                      >
                        🚚 Sair para Entrega
                      </button>
                    )}
                    
                    {pedido.status_transporte === 'em rota' && (
                      <button 
                        onClick={() => handleEntregar(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-green-500 text-white px-4 py-2 rounded text-sm hover:bg-green-600 transition-colors"
                      >
                        ✅ Entregar
                      </button>
                    )}
                    
                    <button 
                      onClick={() => handleCancelar(pedido.id)}
                      disabled={loadingAcoes}
                      className="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600 transition-colors"
                    >
                      ❌ Cancelar
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 11. pages\pedidos-entregues.js
// =========================================

// pages/pedidos-entregues.js
import PedidosEntregues from '../components/PedidosEntregues';

/**
 * Página principal de Pedidos Entregues
 * Delega a renderização para o componente PedidosEntregues
 * que decide qual versão mostrar (Admin, Gerente ou Entregador)
 */
export default function PedidosEntreguesPage() {
  return <PedidosEntregues />;
}


// =========================================
// 12. pages\pedidos-pendentes.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { OrderModal, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS PENDENTES
// ==============================================================================
export default function PedidosPendentes() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [pedidos, setPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [loadingAceitar, setLoadingAceitar] = useState(false);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    checkAuthAndGetPedidos();
  }, []);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }
      await getPedidosPendentes();
    } catch (error) {
      console.error('Erro na autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS PENDENTES
  // ============================================================================
  const getPedidosPendentes = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aguardando', 'revertido'])
        .order('data', { ascending: false });

      if (error) throw error;
      setPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos.');
    } finally {
      setLoading(false);
    }
  };

// ============================================================================
// 5. FUNÇÃO: ACEITAR PEDIDO (CORRIGIDA - ESTRUTURA CORRETA)
// ============================================================================
const handleAceitarPedido = async (pedidoId) => {
  try {
    setLoadingAceitar(true);
    
    // 1. Verificar se usuário está autenticado
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      alert('Sessão expirada. Faça login novamente.');
      router.push('/login');
      return;
    }

    // 2. ✅ BUSCAR TELEFONE DO USUÁRIO na tabela usuarios
    const { data: usuarioData, error: usuarioError } = await supabase
      .from('usuarios')
      .select('telefone, nome_completo')
      .eq('uid', user.id)
      .single();

    if (usuarioError) {
      console.warn('Erro ao buscar telefone do usuário:', usuarioError);
      // Não impede a continuação - usamos valores padrão
    }

    // 3. ✅ BUSCAR DADOS DA LOJA ASSOCIADA
    const { data: entregadorData, error: entregadorError } = await supabase
      .from('loja_associada')
      .select('nome_completo, loja_telefone, loja_nome')
      .eq('uid_usuario', user.id)
      .limit(1);

    if (entregadorError) {
      console.warn('Erro ao buscar dados da loja:', entregadorError);
      // Não impede a continuação
    }

    const entregador = entregadorData?.[0];
    const usuario = usuarioData;

    // 4. ✅ ATUALIZAR PEDIDO COM DADOS CORRETOS
    const { error: updateError } = await supabase
      .from('pedidos')
      .update({
        status_transporte: 'aceito',
        aceito_por_uid: user.id,
        aceito_por_nome: entregador?.nome_completo || usuario?.nome_completo || user.email,
        aceito_por_email: user.email,
        aceito_por_telefone: usuario?.telefone || entregador?.loja_telefone || 'Não informado',
        ultimo_status: new Date().toISOString()
      })
      .eq('id', pedidoId);

    if (updateError) {
      throw new Error('Erro ao atualizar pedido: ' + updateError.message);
    }

    // 5. Atualizar lista localmente
    setPedidos(pedidos.filter(pedido => pedido.id !== pedidoId));
    alert('✅ Pedido aceito com sucesso!');

  } catch (error) {
    console.error('Erro ao aceitar pedido:', error);
    alert(`❌ ${error.message}`);
  } finally {
    setLoadingAceitar(false);
  }
};

  // ============================================================================
  // 6. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 7. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📋 Pedidos Pendentes</h1>
      
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidos.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido pendente encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>
                    {pedido.frete_oferecido && (
                      <p className="text-sm text-green-600 font-medium mt-1">
                        💰 Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
                      </p>
                    )}
                  </div>

                  <button 
                    onClick={() => handleAceitarPedido(pedido.id)}
                    disabled={loadingAceitar}
                    className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 
                             transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed
                             ml-4 min-w-[80px]"
                  >
                    {loadingAceitar ? '⏳' : '✅'} Aceitar
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithoutCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 13. pages\perfil.js
// =========================================

// pages/perfil.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import EditUsuarioModal from '../components/EditUsuarioModal';
import EditLojaModal from '../components/EditLojaModal';

// ==============================================================================
// PÁGINA: PERFIL DO USUÁRIO
// ==============================================================================
export default function Perfil() {
  const router = useRouter();
  const { userProfile, userRole, userLojas, loading, error } = useUserProfile();
  const [modalUsuarioOpen, setModalUsuarioOpen] = useState(false);
  const [modalLojaOpen, setModalLojaOpen] = useState(false);
  const [lojaSelecionada, setLojaSelecionada] = useState(null);
  const [lojasAtualizadas, setLojasAtualizadas] = useState([]);

  // ============================================================================
  // 1. MAPEAMENTO DOS NOMES CORRETOS DAS LOJAS
  // ============================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ============================================================================
  // 2. ATUALIZAR OS NOMES DAS LOJAS COM OS VALORES CORRETOS
  // ============================================================================
  useEffect(() => {
    if (userLojas && userLojas.length > 0) {
      const lojasCorrigidas = userLojas.map(loja => ({
        ...loja,
        // Usa o nome correto do mapeamento, mantendo o original como fallback
        loja_nome: mapeamentoLojas[loja.id_loja] || loja.loja_nome
      }));
      setLojasAtualizadas(lojasCorrigidas);
    }
  }, [userLojas]);

  // ============================================================================
  // 3. REDIRECIONAR SE NÃO ESTIVER LOGADO
  // ============================================================================
  if (!loading && !userProfile) {
    router.push('/login');
    return null;
  }

  // ============================================================================
  // 4. ABRIR MODAL DE EDIÇÃO DA LOJA
  // ============================================================================
  const abrirModalLoja = (loja) => {
    setLojaSelecionada(loja);
    setModalLojaOpen(true);
  };

  // ============================================================================
  // 5. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      
      {/* CABEÇALHO */}
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-purple-800 mb-2">👤 Meu Perfil</h1>
        <p className="text-gray-600">Gerencie suas informações pessoais e de entrega</p>
      </div>

      {loading ? (
        <div className="text-center">
          <p className="text-purple-600">Carregando...</p>
        </div>
      ) : error ? (
        <div className="bg-red-100 border border-red-400 text-red-700 p-4 rounded">
          <p>Erro: {error}</p>
        </div>
      ) : (
        <div className="grid md:grid-cols-2 gap-8">
          
          {/* ================================================================== */}
          {/* CARD: DADOS DO USUÁRIO */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">📋 Dados Pessoais</h2>
            
            <div className="space-y-3 mb-4">
              {userProfile.foto && (
                <div className="text-center">
                  <img
                    src={userProfile.foto}
                    alt="Foto do perfil"
                    className="w-20 h-20 rounded-full mx-auto border-2 border-purple-600"
                  />
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome Completo</label>
                <p className="text-gray-800 font-medium">{userProfile.nome_completo || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome de Usuário</label>
                <p className="text-gray-800">{userProfile.nome_usuario || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Email</label>
                <p className="text-gray-800">{userProfile.email}</p>
              </div>
              
              {userProfile.telefone && (
                <div>
                  <label className="block text-sm font-medium text-gray-600">Telefone</label>
                  <p className="text-gray-800">{userProfile.telefone}</p>
                </div>
              )}
            </div>

            <button
              onClick={() => setModalUsuarioOpen(true)}
              className="w-full bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700 transition-colors"
            >
              ✏️ Editar Dados Pessoais
            </button>
          </div>

          {/* ================================================================== */}
          {/* CARD: LOJAS ASSOCIADAS */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">🏪 Lojas Associadas</h2>
            
            {lojasAtualizadas.length === 0 ? (
              <p className="text-gray-600 text-center py-4">Nenhuma loja associada</p>
            ) : (
              <div className="space-y-3">
                {lojasAtualizadas.map((loja) => (
                  <div key={loja.id} className="border rounded-lg p-3 hover:bg-gray-50">
                    <h3 className="font-semibold text-gray-800">{loja.loja_nome}</h3>
                    <p className="text-sm text-gray-600">ID: {loja.id_loja}</p>
                    <p className="text-sm text-purple-600">Função: {loja.funcao}</p>
                    
                    <div className="mt-2 text-sm text-gray-700">
                      <p>🚗 Veículo: {loja.veiculo || 'Não informado'}</p>
                      <p>📦 Carga máxima: {loja.carga_maxima || '0'} kg</p>
                      <p>📍 Perímetro: {loja.perimetro_entrega || 'Não definido'}</p>
                    </div>

                    <button
                      onClick={() => abrirModalLoja(loja)}
                      className="mt-2 w-full bg-blue-600 text-white py-1 px-3 rounded text-sm hover:bg-blue-700 transition-colors"
                    >
                      ✏️ Editar Esta Loja
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* ====================================================================== */}
      {/* MODAIS */}
      {/* ====================================================================== */}
      <EditUsuarioModal
        isOpen={modalUsuarioOpen}
        onClose={() => setModalUsuarioOpen(false)}
        userProfile={userProfile}
      />
      
      {lojaSelecionada && (
        <EditLojaModal
          isOpen={modalLojaOpen}
          onClose={() => setModalLojaOpen(false)}
          loja={lojaSelecionada}
        />
      )}
    </div>
  );
}


// =========================================
// 14. pages\recuperar-senha.js
// =========================================

import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';

export default function RecuperarSenha() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/atualizar-senha`,
      });

      if (error) throw error;

      setSuccess('Email de recuperação enviado! Verifique sua caixa de entrada.');

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Recuperar Senha</p>
        </div>

        {/* Card de Recuperação */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Recuperar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Enviando...' : 'Enviar Email de Recuperação'}
            </button>
          </form>

          {/* Links */}
          <div className="mt-6 text-center space-y-3">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Voltar para o login
            </Link>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2024 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
RecuperarSenha.noLayout = true;


// =========================================
// 15. pages\relatorios.js
// =========================================

// pages/relatorios.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE RELATÓRIOS
// ============================================================================
export default function Relatorios() {
  // ==========================================================================
  // 1. ESTADOS E HOOKS
  // ==========================================================================
  const { userRole, userLojas, userProfile, loading: userLoading } = useUserProfile();
  const [loading, setLoading] = useState(true);
  const [dadosRelatorios, setDadosRelatorios] = useState(null);
  const [periodo, setPeriodo] = useState('mes'); // dia, semana, mes, ano
  const [dadosTempoReal, setDadosTempoReal] = useState([]); // Dados do dia atual

  // ==========================================================================
  // 2. MAPEAMENTO DOS NOMES DAS LOJAS
  // ==========================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ==========================================================================
  // 3. FUNÇÃO PARA CORRIGIR NOME DA LOJA
  // ==========================================================================
  const corrigirNomeLoja = (idLoja, nomeOriginal) => {
    return mapeamentoLojas[idLoja] || nomeOriginal;
  };

  // ==========================================================================
  // 4. EFFECT PRINCIPAL - CARREGAR DADOS
  // ==========================================================================
  useEffect(() => {
    if (!userLoading) {
      carregarRelatorios();
      carregarDadosTempoReal(); // Dados do dia atual em tempo real
    }
  }, [userLoading, periodo]);

// ==========================================================================
// 5. CARREGAR DADOS EM TEMPO REAL (HOJE) - CORRIGIDO
// ==========================================================================
const carregarDadosTempoReal = async () => {
  try {
    // Data de hoje no formato YYYY-MM-DD
    const hoje = new Date().toISOString().split('T')[0];
    
    let query = supabase
      .from('pedidos')
      .select('*')
      .eq('status_transporte', 'entregue')
      .gte('ultimo_status', `${hoje}T00:00:00`)  // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
      .lte('ultimo_status', `${hoje}T23:59:59`); // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
    
    // Aplicar filtros por perfil
    if (userRole === 'gerente' && userLojas.length > 0) {
      query = query.eq('id_loja', userLojas[0].id_loja);
    } else if (userRole === 'entregador') {
      query = query.eq('aceito_por_uid', userProfile?.uid); // ✅ CORRIGIDO: aceito_por_uid em vez de aceito_por
    }
    
    const { data, error } = await query;
    
    if (error) throw error;
    
    // Processar dados para exibição
    const processados = data.map(pedido => ({
      id: pedido.id,
      pedido: pedido.id_loja_woo,
      cliente: pedido.nome_cliente,
      loja: corrigirNomeLoja(pedido.id_loja, pedido.loja_nome),
      entregador: pedido.aceito_por_nome,
      valor: pedido.frete_pago || 0,
      data: pedido.ultimo_status // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
    }));
    
    setDadosTempoReal(processados);
  } catch (error) {
    console.error('Erro ao carregar dados em tempo real:', error);
  }
};

  // ==========================================================================
  // 6. CARREGAR RELATÓRIOS PRINCIPAIS (CUMULATIVOS)
  // ==========================================================================
  const carregarRelatorios = async () => {
    try {
      setLoading(true);
      
      let dados = null;

      // LÓGICA POR TIPO DE USUÁRIO
      if (userRole === 'admin') {
        dados = await carregarRelatoriosAdmin();
      } else if (userRole === 'gerente') {
        dados = await carregarRelatoriosGerente();
      } else if (userRole === 'entregador') {
        dados = await carregarRelatoriosEntregador();
      }

      setDadosRelatorios(dados);
      
    } catch (error) {
      console.error('Erro ao carregar relatórios:', error);
    } finally {
      setLoading(false);
    }
  };

  // ==========================================================================
  // 7. RELATÓRIOS PARA ADMIN - TODAS AS LOJAS
  // ==========================================================================
  const carregarRelatoriosAdmin = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado,
        usuarios:uid_usuario(nome_completo, email)
      `)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador');

    if (error) throw error;

    // Aplicar correção dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const totalEntregadores = new Set(lojasCorrigidas.map(item => item.uid_usuario)).size;
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'admin',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      totalEntregadores,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // ==========================================================================
  // 8. RELATÓRIOS PARA GERENTE - APENAS SUA LOJA
  // ==========================================================================
  const carregarRelatoriosGerente = async () => {
    if (!userLojas || userLojas.length === 0) return null;

    const idLoja = userLojas[0].id_loja;
    const nomeLojaCorrigido = corrigirNomeLoja(idLoja, userLojas[0].loja_nome);

    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        nome_completo,
        email_usuario,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado,
        veiculo
      `)
      .eq('id_loja', idLoja)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador')
      .order('mes_entregue', { ascending: false });

    if (error) throw error;

    const totalEntregas = data.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = data.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'gerente',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      totalEntregadores: data.length,
      entregadores: data,
      loja: nomeLojaCorrigido,
      periodo
    };
  };

  // ==========================================================================
  // 9. RELATÓRIOS PARA ENTREGADOR - SEUS DADOS
  // ==========================================================================
  const carregarRelatoriosEntregador = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado
      `)
      .eq('uid_usuario', userProfile?.uid)
      .eq('status_vinculacao', 'ativo');

    if (error) throw error;

    // Aplicar correção dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'entregador',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // ==========================================================================
  // 10. CALCULAR TOTAL DE FRETE DOS DADOS EM TEMPO REAL
  // ==========================================================================
  const calcularTotalFreteHoje = () => {
    return dadosTempoReal.reduce((total, pedido) => total + (pedido.valor || 0), 0);
  };

  // ==========================================================================
  // 11. COMPONENTE DE CARREGAMENTO
  // ==========================================================================
  if (userLoading || loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        <span className="ml-3">Carregando relatórios...</span>
      </div>
    );
  }

  // ==========================================================================
  // 12. RENDERIZAÇÃO PRINCIPAL
  // ==========================================================================
  return (
    <RouteGuard requiredRole="entregador">
      <div className="container mx-auto px-4 py-8">
        {/* CABEÇALHO E FILTROS */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
          <h1 className="text-3xl font-bold text-purple-800 mb-4 md:mb-0">
            📊 Relatórios - {userRole?.toUpperCase()}
          </h1>
          
          <select
            value={periodo}
            onChange={(e) => setPeriodo(e.target.value)}
            className="bg-white border border-gray-300 rounded-lg px-4 py-2"
          >
            <option value="dia">Hoje</option>
            <option value="semana">Esta Semana</option>
            <option value="mes">Este Mês</option>
            <option value="ano">Este Ano</option>
          </select>
        </div>

        {/* SEÇÃO DE DADOS EM TEMPO REAL (HOJE) */}
        <div className="bg-blue-50 p-6 rounded-lg shadow-md mb-8">
          <h2 className="text-xl font-semibold mb-4 text-blue-800">
            🕒 Entregas de Hoje (Tempo Real)
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-blue-600 mb-1">
                {dadosTempoReal.length}
              </div>
              <div className="text-sm text-gray-600">Entregas Hoje</div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-green-600 mb-1">
                R$ {calcularTotalFreteHoje().toFixed(2)}
              </div>
              <div className="text-sm text-gray-600">Total em Fretes</div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-purple-600 mb-1">
                {new Date().toLocaleDateString('pt-BR')}
              </div>
              <div className="text-sm text-gray-600">Data</div>
            </div>
          </div>
          
          {/* LISTA DE ENTREGAS DO DIA */}
          {dadosTempoReal.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white rounded-lg">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Pedido</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Cliente</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Loja</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Valor</th>
                  </tr>
                </thead>
                <tbody>
                  {dadosTempoReal.map((pedido, index) => (
                    <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                      <td className="p-3 text-sm">{pedido.pedido}</td>
                      <td className="p-3 text-sm">{pedido.cliente}</td>
                      <td className="p-3 text-sm">{pedido.loja}</td>
                      <td className="p-3 text-sm font-medium">R$ {pedido.valor.toFixed(2)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p className="text-gray-500 text-center py-4">Nenhuma entrega registrada hoje</p>
          )}
        </div>

        {/* ESTATÍSTICAS CUMULATIVAS */}
        <div className="bg-white p-6 rounded-lg shadow-md mb-8">
          <h2 className="text-xl font-semibold mb-4">
            {periodo === 'dia' ? 'Estatísticas de Hoje' : 
             periodo === 'semana' ? 'Estatísticas da Semana' :
             periodo === 'mes' ? 'Estatísticas do Mês' : 'Estatísticas do Ano'}
          </h2>

          {/* CARDS DE ESTATÍSTICAS */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-green-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">
                {dadosRelatorios?.totalEntregas || 0}
              </div>
              <div className="text-gray-600">Total de Entregas</div>
            </div>
            
            <div className="bg-red-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-red-600 mb-2">
                {dadosRelatorios?.totalCancelamentos || 0}
              </div>
              <div className="text-gray-600">Cancelamentos</div>
            </div>
            
            <div className="bg-blue-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-blue-600 mb-2">
                {dadosRelatorios?.taxaSucesso || 0}%
              </div>
              <div className="text-gray-600">Taxa de Sucesso</div>
            </div>
            
            {userRole !== 'entregador' && (
              <div className="bg-purple-50 p-6 rounded-lg shadow-sm text-center">
                <div className="text-3xl font-bold text-purple-600 mb-2">
                  {dadosRelatorios?.totalEntregadores || 0}
                </div>
                <div className="text-gray-600">Entregadores</div>
              </div>
            )}
          </div>

          {/* DETALHES ESPECÍFICOS POR TIPO DE USUÁRIO */}
          <h3 className="text-lg font-medium mb-4">
            {userRole === 'admin' && '🏢 Desempenho por Loja'}
            {userRole === 'gerente' && `👥 Desempenho por Entregador - ${dadosRelatorios?.loja}`}
            {userRole === 'entregador' && '🏪 Meu Desempenho por Loja'}
          </h3>

          {userRole === 'admin' && dadosRelatorios?.lojas && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {dadosRelatorios.lojas.map((loja, index) => {
                const entregas = loja[`${periodo}_entregue`] || 0;
                const cancelamentos = loja[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{loja.loja_nome}</h4>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                      <div>
                        <span className="font-semibold">Entregadores:</span> {loja.usuarios ? 1 : 0}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {userRole === 'gerente' && dadosRelatorios?.entregadores && (
            <div className="space-y-4">
              {dadosRelatorios.entregadores.map((entregador, index) => {
                const entregas = entregador[`${periodo}_entregue`] || 0;
                const cancelamentos = entregador[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{entregador.nome_completo}</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                      <div>
                        <span className="font-semibold">Veículo:</span> {entregador.veiculo}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {userRole === 'entregador' && dadosRelatorios?.lojas && (
            <div className="space-y-4">
              {dadosRelatorios.lojas.map((loja, index) => {
                const entregas = loja[`${periodo}_entregue`] || 0;
                const cancelamentos = loja[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{loja.loja_nome}</h4>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}


// =========================================
// 16. pages\todos-pedidos.js
// =========================================

// pages/todos-pedidos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { OrderModal, WithCourier, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - TODOS OS PEDIDOS
// ==============================================================================
export default function TodosPedidos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  
  // Estados para filtros
  const [filtroStatus, setFiltroStatus] = useState('');
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [editandoFrete, setEditandoFrete] = useState(null);
  const [valorFrete, setValorFrete] = useState('');

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 4. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getTodosPedidos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: BUSCAR TODOS OS PEDIDOS
  // ============================================================================
  const getTodosPedidos = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('pedidos')
        .select('*')
        .order('data', { ascending: false });

      // Se for gerente, filtrar apenas pela sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: FILTRAR PEDIDOS
  // ============================================================================
  const pedidosFiltrados = todosPedidos.filter(pedido => {
    // Filtro por status
    if (filtroStatus && pedido.status_transporte !== filtroStatus) {
      return false;
    }
    
    // Filtro por entregador
    if (filtroEntregador && pedido.aceito_por_nome !== filtroEntregador) {
      return false;
    }
    
    // Filtro por loja (apenas para admin)
    if (userRole === 'admin' && filtroLoja && pedido.id_loja !== filtroLoja) {
      return false;
    }
    
    return true;
  });

  // ============================================================================
  // 7. FUNÇÃO: REVERTER PEDIDO (BOTÃO GERENTE/ADMIN)
  // ============================================================================
  const handleReverterPedido = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja reverter este pedido?')) return;
    
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { 
          ...p, 
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null
        } : p
      ));
      
      alert('✅ Pedido revertido com sucesso!');
    } catch (error) {
      console.error('Erro ao reverter pedido:', error);
      alert('❌ Erro ao reverter pedido.');
    }
  };

  // ============================================================================
  // 8. FUNÇÃO: EDITAR FRETE OFERECIDO
  // ============================================================================
  const handleEditarFrete = (pedido, valor) => {
    setEditandoFrete(pedido.id);
    setValorFrete(valor || '');
  };

  const handleSalvarFrete = async (pedidoId) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ 
          frete_oferecido: parseFloat(valorFrete) || null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, frete_oferecido: parseFloat(valorFrete) || null } : p
      ));
      
      setEditandoFrete(null);
      alert('✅ Frete atualizado com sucesso!');
    } catch (error) {
      console.error('Erro ao atualizar frete:', error);
      alert('❌ Erro ao atualizar frete.');
    }
  };

  // ============================================================================
  // 9. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 10. DADOS PARA FILTROS
  // ============================================================================
  const statusUnicos = [...new Set(todosPedidos.map(p => p.status_transporte))].filter(Boolean);
  const entregadoresUnicos = [...new Set(todosPedidos.map(p => p.aceito_por_nome))].filter(Boolean);
  const lojasUnicas = [...new Set(todosPedidos.map(p => p.id_loja))].filter(Boolean);

  // ============================================================================
  // 11. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📊 Todos os Pedidos</h1>

      {/* FILTROS */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Filtros</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Filtro Status */}
          <div>
            <label className="block text-sm font-medium mb-1">Status</label>
            <select
              value={filtroStatus}
              onChange={(e) => setFiltroStatus(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os status</option>
              {statusUnicos.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>

          {/* Filtro Entregador */}
          <div>
            <label className="block text-sm font-medium mb-1">Entregador</label>
            <select
              value={filtroEntregador}
              onChange={(e) => setFiltroEntregador(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os entregadores</option>
              {entregadoresUnicos.map(entregador => (
                <option key={entregador} value={entregador}>{entregador}</option>
              ))}
            </select>
          </div>

          {/* Filtro Loja (apenas admin) */}
          {userRole === 'admin' && (
            <div>
              <label className="block text-sm font-medium mb-1">Loja</label>
              <select
                value={filtroLoja}
                onChange={(e) => setFiltroLoja(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded"
              >
                <option value="">Todas as lojas</option>
                {lojasUnicas.map(loja => (
                  <option key={loja} value={loja}>{loja}</option>
                ))}
              </select>
            </div>
          )}
        </div>
      </div>

      {/* LISTA DE PEDIDOS */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-start justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Status:</span> 
                      <span className={`ml-1 ${
                        pedido.status_transporte === 'entregue' ? 'text-green-600' :
                        pedido.status_transporte === 'cancelado' ? 'text-red-600' :
                        pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-blue-600'
                      }`}>
                        {pedido.status_transporte}
                      </span>
                    </p>
                    
                    {pedido.aceito_por_nome && (
                      <p className="text-sm"><span className="font-medium">Entregador:</span> {pedido.aceito_por_nome}</p>
                    )}

                    {/* EDIÇÃO DE FRETE */}
                    <div className="mt-2">
                      <span className="text-sm font-medium">Frete oferecido: </span>
                      {editandoFrete === pedido.id ? (
                        <div className="flex items-center gap-2 mt-1">
                          <input
                            type="number"
                            step="0.01"
                            value={valorFrete}
                            onChange={(e) => setValorFrete(e.target.value)}
                            className="w-20 p-1 border border-gray-300 rounded"
                            placeholder="0.00"
                          />
                          <button
                            onClick={() => handleSalvarFrete(pedido.id)}
                            className="bg-green-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ✅
                          </button>
                          <button
                            onClick={() => setEditandoFrete(null)}
                            className="bg-gray-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ❌
                          </button>
                        </div>
                      ) : (
                        <span className="text-green-600">
                          R$ {pedido.frete_oferecido?.toFixed(2) || '0.00'} 
                          <button
                            onClick={() => handleEditarFrete(pedido, pedido.frete_oferecido)}
                            className="ml-2 text-blue-600 text-sm"
                          >
                            ✏️
                          </button>
                        </span>
                      )}
                    </div>
                  </div>

                  {/* BOTÕES DE AÇÃO (GERENTE/ADMIN) */}
                  <div className="flex flex-col gap-2 ml-4">
                    {/* BOTÃO REVERTER (para pedidos aceitos/em rota) */}
                    {['aceito', 'em rota'].includes(pedido.status_transporte) && (
                      <button 
                        onClick={() => handleReverterPedido(pedido.id)}
                        className="bg-yellow-500 text-white px-4 py-2 rounded text-sm hover:bg-yellow-600"
                      >
                        ↩️ Reverter
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        {pedidoSelecionado?.aceito_por_nome ? (
          <WithCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        ) : (
          <WithoutCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        )}
      </OrderModal>
    </div>
  );
}


// =========================================
// 1. public\favicon.ico
// =========================================

 



// =========================================
// 2. public\manifest.json
// =========================================

 {
  "name": "EntregasWoo - Sistema de Gestão",
  "short_name": "EntregasWoo",
  "description": "Sistema de gestão de entregas para WooCommerce",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#000000",
  "icons": [
    {
      "src": "/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}



// =========================================
// 1. styles\globals.css
// =========================================

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Estilos globais para WooCommerce */
:root {
  --woo-purple: #7f54b3;
  --woo-purple-dark: #6b3fa0;
  --woo-purple-light: #f0e6ff;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  margin: 0;
  padding: 0;
}

/* Cabeçalho fixo */
.sticky-header {
  position: sticky;
  top: 0;
  z-index: 50;
  background: white;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  border-bottom: 2px solid #e9d5ff;
}


// =========================================
// 1. utils\filterPedidos.js
// =========================================

// utils/filterPedidos.js
export const filterPedidosPorUsuario = (pedidos, userRole, userLojas) => {
  if (userRole === 'admin') {
    // Admin vê TUDO
    return pedidos;
  }

  if (userRole === 'gerente' && userLojas.length === 1) {
    // Gerente vê apenas sua loja
    return pedidos.filter(pedido => pedido.id_loja === userLojas[0].id_loja);
  }

  if (userRole === 'entregador' && userLojas.length > 0) {
    // Entregador vê pedidos de todas as suas lojas
    const lojasIds = userLojas.map(loja => loja.id_loja);
    return pedidos.filter(pedido => lojasIds.includes(pedido.id_loja));
  }

  // Visitante ou erro não vê nada
  return [];
};


// =========================================
// 2. utils\formatters.js
// =========================================

 



// =========================================
// 3. utils\pdfUtils.js
// =========================================

// utils/pdfUtils.js
import { jsPDF } from 'jspdf';

// ==============================================================================
// FUNÇÕES UTILITÁRIAS PARA GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
export const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
export const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};


// =========================================
// 1. serviceWorker.js
// =========================================

 




// =========================================
// ÁRVORE DE DIRETÓRIOS
// =========================================
📦src/
📦components/
  📦components/Filters/
    1 📜components\Filters\CourierFilter.js
    2 📜components\Filters\StatusFilter.js
  📦components/OrderModal/
    1 📜components\OrderModal\index.js
    2 📜components\OrderModal\OrderModal.js
    3 📜components\OrderModal\WithCourier.js
    4 📜components\OrderModal\WithoutCourier.js
  1 📜components\DeliveryStatus.js
  2 📜components\EditLojaModal.js
  3 📜components\EditProfileModal.js
  4 📜components\EditUsuarioModal.js
  5 📜components\Header.js
  6 📜components\Layout.js
  7 📜components\MobileMenu.js
  8 📜components\Notification.js
  9 📜components\OrderCard.js
  10 📜components\Pagination.js
  11 📜components\PedidosEntregues.js
  12 📜components\PedidosEntreguesAdmin.js
  13 📜components\PedidosEntreguesEntregador.js
  14 📜components\PedidosEntreguesGerente.js
  15 📜components\RouteGuard.js
  16 📜components\Sidebar.js
  17 📜components\UserProfile.js
📦hooks/
  1 📜hooks\useOrders.js
  2 📜hooks\useRealtimePedidos.js
  3 📜hooks\useUserProfile.js
📦lib/
  1 📜lib\firebase.js
  2 📜lib\supabase.js
  3 📜lib\wooCommerce.js
📦pages/
  1 📜pages\_app.js
  2 📜pages\_document.js
  3 📜pages\admin.js
  4 📜pages\atualizar-senha.js
  5 📜pages\cadastro.js
  6 📜pages\gestao-entregadores.js
  7 📜pages\index.js
  8 📜pages\login.js
  9 📜pages\orders.js
  10 📜pages\pedidos-aceitos.js
  11 📜pages\pedidos-entregues.js
  12 📜pages\pedidos-pendentes.js
  13 📜pages\perfil.js
  14 📜pages\recuperar-senha.js
  15 📜pages\relatorios.js
  16 📜pages\todos-pedidos.js
📦public/
  1 📜public\favicon.ico
  2 📜public\manifest.json
📦styles/
  1 📜styles\globals.css
📦utils/
  1 📜utils\filterPedidos.js
  2 📜utils\formatters.js
  3 📜utils\pdfUtils.js
1 📜serviceWorker.js



// =========================================
// 6. EntregasWoo210920250009.txt
// =========================================

// =========================================
// 1. components\Filters\CourierFilter.js
// =========================================



// =========================================
// 2. components\Filters\StatusFilter.js
// =========================================



// =========================================
// 1. components\OrderModal\index.js
// =========================================

// components/OrderModal/index.js
import OrderModal from './OrderModal';
import WithCourier from './WithCourier';
import WithoutCourier from './WithoutCourier';

export { OrderModal, WithCourier, WithoutCourier };


// =========================================
// 2. components\OrderModal\OrderModal.js
// =========================================

// components/OrderModal/OrderModal.js
import React from 'react';

const OrderModal = ({ 
  pedido, 
  isOpen, 
  onClose, 
  children 
}) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Conteúdo específico (será injetado via children) */}
          {children}
        </div>
      </div>
    </div>
  );
};

export default OrderModal;


// =========================================
// 3. components\OrderModal\WithCourier.js
// =========================================

// components/OrderModal/WithCourier.js
import React from 'react';

const WithCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Entregador */}
      <div className="mb-6 p-4 bg-purple-50 rounded">
        <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
        <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithCourier;


// =========================================
// 4. components\OrderModal\WithoutCourier.js
// =========================================

// components/OrderModal/WithoutCourier.js
import React from 'react';

const WithoutCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithoutCourier;


// =========================================
// 1. components\DeliveryStatus.js
// =========================================

 



// =========================================
// 2. components\EditLojaModal.js
// =========================================

// components/EditLojaModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function EditLojaModal({ isOpen, onClose, loja }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  useEffect(() => {
    if (isOpen && loja) {
      setFormData({
        veiculo: loja.veiculo || '',
        carga_maxima: loja.carga_maxima || '',
        perimetro_entrega: loja.perimetro_entrega || ''
      });
    }
  }, [isOpen, loja]);

  const handleSave = async () => {
    try {
      setLoading(true);
      
      const { error } = await supabase
        .from('loja_associada')
        .update({
          veiculo: formData.veiculo,
          carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
          perimetro_entrega: formData.perimetro_entrega
        })
        .eq('id', loja.id);

      if (error) throw error;

      alert('Dados da loja atualizados com sucesso!');
      onClose();
      window.location.reload();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      alert('Erro ao atualizar dados da loja');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">🏪 Editar Loja: {loja.loja_nome}</h2>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm font-medium text-gray-700">Veículo</label>
            <select
              value={formData.veiculo}
              onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            >
              <option value="">Selecione o veículo</option>
              <option value="carro">Carro</option>
              <option value="moto">Moto</option>
              <option value="bicicleta">Bicicleta</option>
              <option value="caminhao">Caminhão</option>
              <option value="van">Van</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Carga Máxima (kg)</label>
            <input
              type="number"
              value={formData.carga_maxima}
              onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Perímetro de Entrega</label>
            <input
              type="text"
              value={formData.perimetro_entrega}
              onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 rounded"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-blue-600 text-white py-2 rounded disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 3. components\EditProfileModal.js
// =========================================

// components/EditProfileModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDIÇÃO DE PERFIL
// ==============================================================================
export default function EditProfileModal({ isOpen, onClose, userProfile, userRole, userLojas }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: '',
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  // ============================================================================
  // 1. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setFormData({
        nome_completo: userProfile.nome_completo || '',
        nome_usuario: userProfile.nome_usuario || '',
        telefone: userProfile.telefone || '',
        foto: userProfile.foto || '',
        veiculo: userLojas[0]?.veiculo || '',
        carga_maxima: userLojas[0]?.carga_maxima || '',
        perimetro_entrega: userLojas[0]?.perimetro_entrega || ''
      });
    }
  }, [isOpen, userProfile, userLojas]);

  // ============================================================================
  // 2. FUNÇÃO: SALVAR ALTERAÇÕES
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);

      const { error: userError } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (userError) throw userError;

      if (userRole === 'entregador' && userLojas.length > 0) {
        const { error: lojaError } = await supabase
          .from('loja_associada')
          .update({
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          })
          .eq('uid_usuario', userProfile.uid)
          .eq('id_loja', userLojas[0].id_loja);

        if (lojaError) throw lojaError;
      }

      alert('Perfil atualizado com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      alert('Erro ao atualizar perfil');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw max-h-95vh overflow-y-auto">
        
        {/* CABEÇALHO */}
        <h2 className="text-xl font-bold mb-4 text-gray-800">✏️ Editar Perfil</h2>
        
        {/* CAMPOS DO FORMULÁRIO */}
        <div className="space-y-4">
          {/* NOME COMPLETO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome Completo
            </label>
            <input
              type="text"
              value={formData.nome_completo}
              onChange={(e) => setFormData({...formData, nome_completo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome completo"
            />
          </div>

          {/* NOME DE USUÁRIO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome de Usuário
            </label>
            <input
              type="text"
              value={formData.nome_usuario}
              onChange={(e) => setFormData({...formData, nome_usuario: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome de usuário"
            />
          </div>

          {/* TELEFONE */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone
            </label>
            <input
              type="tel"
              value={formData.telefone}
              onChange={(e) => setFormData({...formData, telefone: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="(11) 99999-9999"
            />
          </div>

          {/* FOTO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL da Foto
            </label>
            <input
              type="url"
              value={formData.foto}
              onChange={(e) => setFormData({...formData, foto: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="https://exemplo.com/foto.jpg"
            />
          </div>

          {/* CAMPOS ESPECÍFICOS PARA ENTREGADORES */}
          {userRole === 'entregador' && (
            <>
              {/* VEÍCULO */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Veículo
                </label>
                <select
                  value={formData.veiculo}
                  onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                >
                  <option value="">Selecione o veículo</option>
                  <option value="carro">Carro</option>
                  <option value="moto">Moto</option>
                  <option value="bicicleta">Bicicleta</option>
                  <option value="caminhao">Caminhão</option>
                  <option value="van">Van</option>
                </select>
              </div>

              {/* CARGA MÁXIMA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Carga Máxima (kg)
                </label>
                <input
                  type="number"
                  value={formData.carga_maxima}
                  onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: 50"
                />
              </div>

              {/* PERÍMETRO DE ENTREGA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Perímetro de Entrega
                </label>
                <input
                  type="text"
                  value={formData.perimetro_entrega}
                  onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: Zona Norte, até 10km"
                />
              </div>
            </>
          )}
        </div>

        {/* BOTÕES DE AÇÃO */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded font-medium hover:bg-gray-400 transition-colors"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-purple-600 text-white py-2 px-4 rounded font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 4. components\EditUsuarioModal.js
// =========================================

// components/EditUsuarioModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDIÇÃO SIMPLIFICADA: APENAS TELEFONE E FOTO
// ==============================================================================
export default function EditUsuarioModal({ isOpen, onClose, userProfile }) {
  // ============================================================================
  // 1. DEFINIÇÃO DE ESTADOS
  // ============================================================================
  const [loading, setLoading] = useState(false);
  const [telefone, setTelefone] = useState('');
  const [foto, setFoto] = useState('');
  const [selectedFile, setSelectedFile] = useState(null);
  const [error, setError] = useState('');
  const [showRemovePhoto, setShowRemovePhoto] = useState(false);

  // ============================================================================
  // 2. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setTelefone(userProfile.telefone || '');
      setFoto(userProfile.foto || '');
    }
  }, [isOpen, userProfile]);

  // ============================================================================
  // 3. FUNÇÃO: NORMALIZAR NOME DO ARQUIVO
  // ============================================================================
  const normalizeFileName = (fileName) => {
    return fileName
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^a-zA-Z0-9.-]/g, '_');
  };

  // ============================================================================
  // 4. FUNÇÃO: ATUALIZAR ARQUIVO DE FOTO
  // ============================================================================
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        setError('Por favor, selecione um arquivo de imagem.');
        setSelectedFile(null);
        return;
      }
      if (file.size > 5 * 1024 * 1024) {
        setError('O arquivo excede o limite de 5MB.');
        setSelectedFile(null);
        return;
      }
      setSelectedFile(file);
      setError('');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: SALVAR ALTERAÇÕES (APENAS TELEFONE E FOTO)
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);
      setError('');

      let photoUrl = foto;
      let oldFileFullPath = null;

      // Identifica foto antiga para possível exclusão
      if (foto) {
        const url = new URL(foto);
        const pathParts = url.pathname.split('/');
        oldFileFullPath = pathParts.slice(4).join('/');
      }

      // Upload da nova foto (se houver)
      if (selectedFile) {
        const baseName = normalizeFileName(selectedFile.name);
        const fileName = `${userProfile.uid}-${Date.now()}-${baseName}`;
        const fullPath = `fotos/${fileName}`;
        
        const { error: uploadError } = await supabase.storage
          .from('box')
          .upload(fullPath, selectedFile, {
            cacheControl: '3600',
            upsert: false,
          });

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('box')
          .getPublicUrl(fullPath);
        photoUrl = urlData.publicUrl;
      }

      // Atualiza APENAS telefone e foto no banco
      const { error: updateError } = await supabase
        .from('usuarios')
        .update({
          telefone: telefone,
          foto: photoUrl
        })
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      // Remove foto antiga se foi feita substituição
      if (oldFileFullPath && selectedFile) {
        try {
          await supabase.storage
            .from('box')
            .remove([oldFileFullPath]);
        } catch (deleteError) {
          console.warn('Aviso: Foto antiga não pôde ser removida:', deleteError);
        }
      }

      alert('Dados atualizados com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      setError(error.message || 'Erro ao atualizar dados. Tente novamente.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: REMOVER FOTO
  // ============================================================================
  const handleRemovePhoto = async () => {
    if (!foto) return;
    
    try {
      const url = new URL(foto);
      const pathParts = url.pathname.split('/');
      const fullPath = pathParts.slice(4).join('/');
      
      const { error: removeError } = await supabase.storage
        .from('box')
        .remove([fullPath]);
      
      if (removeError) throw removeError;
      
      // Atualiza estado local e banco
      setFoto('');
      const { error: updateError } = await supabase
        .from('usuarios')
        .update({ foto: '' })
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      setShowRemovePhoto(false);
      setSelectedFile(null);
      setError('');
      
      alert('Foto removida com sucesso!');
      
    } catch (error) {
      console.error('Erro ao remover foto:', error);
      setError('Erro ao remover foto. Tente novamente.');
    }
  };

  // ============================================================================
  // 7. RENDERIZAÇÃO DO MODAL SIMPLIFICADO
  // ============================================================================
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">
          ✏️ Editar Telefone e Foto
        </h2>
        
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-600 p-2 mb-4 rounded">
            {error}
          </div>
        )}

        <div className="space-y-4">
          {/* Campo Telefone */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone *
            </label>
            <input
              type="tel"
              value={telefone}
              onChange={(e) => setTelefone(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 focus:ring-2 focus:ring-purple-500"
              required
              disabled={loading}
            />
          </div>

          {/* Seção de Foto de Perfil */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Foto de Perfil
            </label>
            
            {/* Preview da foto atual */}
            {foto && (
              <div className="relative inline-block mb-3">
                <img
                  src={foto}
                  alt="Foto atual do perfil"
                  className="h-20 w-20 object-cover rounded-full border-2 border-gray-200"
                />
                <button
                  type="button"
                  onClick={() => setShowRemovePhoto(true)}
                  className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold hover:bg-red-600"
                  disabled={loading}
                >
                  ×
                </button>
              </div>
            )}

            {/* Input para nova foto */}
            <input
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-purple-600 file:text-white hover:file:bg-purple-700"
              disabled={loading}
            />
            <p className="text-xs text-gray-500 mt-2">
              Escolha uma imagem (máx. 5MB). Formatos: JPG, PNG, GIF.
            </p>
          </div>
        </div>

        {/* Botões de Ação */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-200 text-gray-700 py-2 rounded font-medium hover:bg-gray-300"
            disabled={loading}
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading || !telefone.trim()}
            className="flex-1 bg-purple-600 text-white py-2 rounded font-medium hover:bg-purple-700 disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar Alterações'}
          </button>
        </div>
      </div>

      {/* Modal de Confirmação para Remover Foto */}
      {showRemovePhoto && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-60">
          <div className="bg-white p-6 rounded-lg w-80 shadow-xl">
            <h3 className="text-lg font-bold text-gray-800 mb-3">Remover Foto</h3>
            <p className="text-gray-600 mb-5">
              Tem certeza que deseja remover sua foto de perfil?
            </p>
            <div className="flex gap-3">
              <button
                onClick={() => setShowRemovePhoto(false)}
                className="flex-1 bg-gray-200 text-gray-700 py-2 rounded font-medium hover:bg-gray-300"
              >
                Manter Foto
              </button>
              <button
                onClick={handleRemovePhoto}
                className="flex-1 bg-red-600 text-white py-2 rounded font-medium hover:bg-red-700"
              >
                Remover
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


// =========================================
// 5. components\Header.js
// =========================================

// components/Header.js
export default function Header({ toggleSidebar, showMenuButton = true, title }) {
  return (
    <header className="bg-white shadow-sm border-b border-gray-200">
      <div className="flex items-center justify-between px-4 py-3">
        
        {/* ================================================================== */}
        {/* BOTÃO HAMBURGUER (CONDICIONAL) */}
        {/* ================================================================== */}
        <div className="flex items-center">
          {showMenuButton && (
            <button
              onClick={toggleSidebar}
              className="lg:hidden p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100"
              aria-label="Abrir menu"
            >
              {/* Ícone do hamburger */}
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          )}
          
          {/* Espaço para alinhamento quando não há botão */}
          {!showMenuButton && <div className="w-10 h-10"></div>}
        </div>

        {/* ================================================================== */}
        {/* TÍTULO (CUSTOMIZÁVEL PARA PÁGINAS SEM SIDEBAR) */}
        {/* ================================================================== */}
        <div className="flex-1 text-center lg:text-left">
          <h1 className="text-xl font-semibold text-gray-900">
            {title || 'EntregasWoo'} {/* Usa título customizado ou padrão */}
          </h1>
        </div>

        {/* ================================================================== */}
        {/* ESPAÇO PARA ELEMENTOS À DIREITA (BOTÃO DE PERFIL, ETC) */}
        {/* ================================================================== */}
        <div className="w-10 h-10"></div>
      </div>
    </header>
  );
}


// =========================================
// 6. components\Layout.js
// =========================================

// components/Layout.js
import { useState, useEffect } from 'react';
import Header from './Header';
import Sidebar from './Sidebar';

// ==============================================================================
// COMPONENTE LAYOUT PRINCIPAL
// ==============================================================================
/**
 * Layout é o componente que define a estrutura básica de todas as páginas
 * Ele gerencia: Sidebar, Header e Conteúdo principal
 * 
 * @param {Object} props - Propriedades do componente
 * @param {ReactNode} props.children - Conteúdo da página
 * @param {boolean} [props.hideSidebar=false] - Oculta a sidebar (para páginas como Admin)
 */
const Layout = ({ children, hideSidebar = false }) => {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  // ============================================================================
  // 2. EFFECT: DETECTAR TAMANHO DA TELA
  // ============================================================================
  useEffect(() => {
    const checkIsMobile = () => setIsMobile(window.innerWidth < 1024);
    
    // Verificar inicialmente
    checkIsMobile();
    
    // Adicionar listener para redimensionamento
    window.addEventListener('resize', checkIsMobile);
    
    // Cleanup
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);

  // ============================================================================
  // 3. FUNÇÕES: CONTROLE DA SIDEBAR
  // ============================================================================
  /**
   * Alterna o estado da sidebar (aberto/fechado)
   */
  const toggleSidebar = () => {
    setSidebarOpen(prev => !prev);
  };

  /**
   * Fecha a sidebar (útil para links mobile)
   */
  const closeSidebar = () => {
    if (isMobile) {
      setSidebarOpen(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO LAYOUT
  // ============================================================================
  return (
    <div className="flex h-screen bg-gray-50">
      
      {/* ====================================================================== */}
      {/* SIDEBAR - MENU LATERAL (CONDICIONAL) */}
      {/* ====================================================================== */}
      {/**
       * A sidebar é opcional (pode ser ocultada com hideSidebar=true)
       * Mas o Header SEMPRE deve aparecer, mesmo sem sidebar
       */}
      {!hideSidebar && (
        <Sidebar 
          isOpen={sidebarOpen} 
          toggleSidebar={toggleSidebar}
          onItemClick={closeSidebar}
        />
      )}
      
      {/* ====================================================================== */}
      {/* CONTEÚDO PRINCIPAL */}
      {/* ====================================================================== */}
      <div className="flex-1 flex flex-col overflow-hidden">
        
        {/* ================================================================== */}
        {/* HEADER - CABEÇALHO (SEMPRE VISÍVEL, INDEPENDENTE DA SIDEBAR) */}
        {/* ================================================================== */}
        {/**
         * ✅ CORREÇÃO: Header SEMPRE visível, mas o botão hamburger é condicional
         * showMenuButton=false quando hideSidebar=true
         */}
        <Header 
          toggleSidebar={toggleSidebar} 
          showMenuButton={!hideSidebar} // Botão só aparece se sidebar existir
          title={hideSidebar ? "Painel Administrativo" : undefined} // Título customizado para Admin
        />
        
        {/* ================================================================== */}
        {/* CONTEÚDO DA PÁGINA */}
        {/* ================================================================== */}
        <main 
          className="flex-1 overflow-y-auto p-4 lg:p-6"
          id="main-content"
          tabIndex={-1}
        >
          {children}
        </main>
      </div>

      {/* ====================================================================== */}
      {/* OVERLAY - SOMENTE MOBILE E QUANDO SIDEBAR NÃO ESTÁ OCULTA */}
      {/* ====================================================================== */}
      {!hideSidebar && sidebarOpen && isMobile && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
          onClick={closeSidebar}
          aria-hidden="true"
          role="button"
          aria-label="Fechar menu"
        />
      )}
    </div>
  );
};

export default Layout;


// =========================================
// 7. components\MobileMenu.js
// =========================================



// =========================================
// 8. components\Notification.js
// =========================================

 



// =========================================
// 9. components\OrderCard.js
// =========================================

 



// =========================================
// 10. components\Pagination.js
// =========================================

// components/Pagination.js
// ==============================================================================
// COMPONENTE PAGINATION (SEM DEPENDÊNCIAS EXTERNAS)
// ==============================================================================
export default function Pagination({ currentPage, totalPages, onPageChange }) {
  // ============================================================================
  // 1. FUNÇÃO: GERAR BOTÕES DE PÁGINA
  // ============================================================================
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 5; // Máximo de páginas visíveis
    
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    // Ajustar se estiver no início
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  };

  // ============================================================================
  // 2. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (totalPages <= 1) return null; // Não mostrar paginação se só tiver uma página

  return (
    <div className="flex items-center justify-between border-t border-gray-200 px-4 py-3 sm:px-6">
      
      {/* ✅ PAGINAÇÃO MOBILE */}
      <div className="flex flex-1 justify-between sm:hidden">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          ← Anterior
        </button>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Próxima →
        </button>
      </div>
      
      {/* ✅ PAGINAÇÃO DESKTOP */}
      <div className="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        
        {/* ✅ CONTADOR DE PÁGINAS */}
        <div>
          <p className="text-sm text-gray-700">
            Página <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        
        {/* ✅ NAVEGAÇÃO */}
        <div>
          <nav className="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
            
            {/* ✅ BOTÃO ANTERIOR */}
            <button
              onClick={() => onPageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Anterior</span>
              ← {/* Emoji seta esquerda */}
            </button>
            
            {/* ✅ BOTÕES DE PÁGINA */}
            {getPageNumbers().map((page) => (
              <button
                key={page}
                onClick={() => onPageChange(page)}
                className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                  currentPage === page
                    ? 'bg-purple-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600'
                    : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                }`}
              >
                {page}
              </button>
            ))}
            
            {/* ✅ BOTÃO PRÓXIMA */}
            <button
              onClick={() => onPageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Próxima</span>
              → {/* Emoji seta direita */}
            </button>
          </nav>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 11. components\PedidosEntregues.js
// =========================================

// components/PedidosEntregues.js
// ============================================================================
// 1. IMPORTAÇÕES
// ============================================================================
import { useEffect } from "react";
import { useUserProfile } from "../hooks/useUserProfile";

// Importa as versões da página, cada uma para um tipo de usuário
import PedidosEntreguesAdmin from "./PedidosEntreguesAdmin";
import PedidosEntreguesGerente from "./PedidosEntreguesGerente";
import PedidosEntreguesEntregador from "./PedidosEntreguesEntregador";

// ============================================================================
// 2. COMPONENTE PRINCIPAL
// ============================================================================
export default function PedidosEntregues() {
  // Hook que carrega dados do usuário
  const { userProfile, userRole, userLojas, loading } = useUserProfile();

    // ==========================================================================
  // 3. ESTADOS DE CARREGAMENTO E AUTENTICAÇÃO
  // ==========================================================================
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-purple-600 text-lg">Carregando...</div>
      </div>
    );
  }

  if (!userProfile) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-red-600 text-lg">Usuário não autenticado</div>
        <p className="text-gray-600 text-sm mt-2">
          Faça login para acessar esta página.
        </p>
      </div>
    );
  }



    // ==========================================================================
  // 4. ROTEAMENTO BASEADO NO TIPO DE USUÁRIO
  // ==========================================================================
  switch (userRole?.toLowerCase()) {
    // ------------------------------------------------------------------------
    // CASO 1: ADMINISTRADOR
    // ------------------------------------------------------------------------
    case "admin":
    case "administrador":
    case "administrator":
      return <PedidosEntreguesAdmin userProfile={userProfile} />;

    // ------------------------------------------------------------------------
    // CASO 2: GERENTE
    // ------------------------------------------------------------------------
    case "gerente":
    case "manager":
    case "gestor":
      return (
        <PedidosEntreguesGerente
          userProfile={userProfile}
          userLojas={userLojas}
        />
      );

    // ------------------------------------------------------------------------
    // CASO 3: ENTREGADOR
    // ------------------------------------------------------------------------
    case "entregador":
    case "delivery":
    case "courier":
    case "motoboy":
      return (
        <PedidosEntreguesEntregador
          userProfile={userProfile}
          userLojas={userLojas}
        />
      );

    // ------------------------------------------------------------------------
    // CASO PADRÃO: ACESSO NEGADO
    // ------------------------------------------------------------------------
    default:
      return (
        <div className="flex flex-col items-center justify-center min-h-screen p-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 max-w-md text-center">
            <h2 className="text-red-800 text-xl font-bold mb-2">
              ⚠️ Acesso Não Autorizado
            </h2>

            <p className="text-gray-700 mb-3">
              Seu tipo de usuário não tem permissão para acessar esta página.
            </p>

            <div className="bg-gray-100 p-3 rounded text-sm mb-4">
              <p>
                <strong>Tipo de usuário:</strong>{" "}
                {userRole || "Não definido"}
              </p>
              <p>
                <strong>Usuário:</strong>{" "}
                {userProfile.nome_completo || userProfile.email}
              </p>
            </div>

            <p className="text-sm text-gray-600">
              Contate o administrador do sistema para solicitar acesso.
            </p>

            <button
              onClick={() => window.history.back()}
              className="mt-4 bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 transition-colors"
            >
              Voltar
            </button>
          </div>
        </div>
      );
  }
}




// =========================================
// 12. components\PedidosEntreguesAdmin.js
// =========================================

import React, { useState, useEffect, useCallback } from 'react';
import { createClient } from '@supabase/supabase-js';
import { jsPDF } from 'jspdf';

// ==============================================================================
// 1. CONFIGURAÇÃO DO SUPABASE
// ==============================================================================
const supabaseUrl = 'https://czzidhzzpqegfvvmdgno.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6emlkaHp6cHFlZ2Z2dm1kZ25vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5NTIwMDMsImV4cCI6MjA2ODUyODAwM30.zK2iFp-b4e5vghpHgWGuOk0LooujlyU7kVm4sbM85m0';
const supabase = createClient(supabaseUrl, supabaseKey);

// ==============================================================================
// 2. FUNÇÕES AUXILIARES
// ==============================================================================

/**
 * Formata data para o padrão do Supabase (YYYY-MM-DD)
 */
const formatarDataParaSupabase = (dataString) => {
  if (!dataString) return '';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) return dataString;
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) {
    const [dia, mes, ano] = dataString.split('/');
    return `${ano}-${mes}-${dia}`;
  }
  return dataString;
};

/**
 * Formata data para exibição (DD/MM/YYYY)
 */
const formatarDataParaExibicao = (dataString) => {
  if (!dataString) return '-';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) {
    const [ano, mes, dia] = dataString.split('-');
    return `${dia}/${mes}/${ano}`;
  }
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) return dataString;
  try {
    const data = new Date(dataString);
    if (!isNaN(data.getTime())) return data.toLocaleDateString('pt-BR');
  } catch (e) {
    console.error('Erro ao formatar data:', e);
  }
  return dataString;
};

// ==============================================================================
// 3. COMPONENTE MODAL DE DETALHES
// ==============================================================================
const ModalDetalhesPedido = ({ pedido, isOpen, onClose }) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Informações da Loja */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p><strong>ID:</strong> {pedido.id}</p>
                <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
                <p><strong>Data:</strong> {pedido.data ? new Date(pedido.data).toLocaleString('pt-BR') : 'N/A'}</p>
              </div>
              <div>
                <p><strong>Telefone da Loja:</strong> {pedido.loja_telefone || 'N/A'}</p>
                <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
              </div>
            </div>
          </div>

          {/* Informações do Cliente */}
          <div className="mb-6 p-4 bg-gray-50 rounded">
            <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
            <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
            <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
          </div>

          {/* Produtos */}
          <div className="mb-6">
            <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
            <div className="bg-white border rounded p-3">
              {pedido.produto ? (
                <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
              ) : (
                <p>Nenhum produto informado</p>
              )}
            </div>
          </div>

          {/* Informações de Pagamento e Total */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div>
              <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
              <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p><strong>Frete Pago:</strong> R$ {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            </div>
            <div>
              <p><strong>Status Pagamento:</strong> {pedido.status_pagamento ? 'Pago' : 'Pendente'}</p>
              <p><strong>Data Pagamento:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
            </div>
          </div>

          {/* Observações */}
          {pedido.observacao_pedido && (
            <div className="mb-6">
              <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
              <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
            </div>
          )}

          {/* Entregador */}
          <div className="mb-6 p-4 bg-purple-50 rounded">
            <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
            <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
          </div>

          {/* Botão Fechar */}
          <div className="flex justify-end">
            <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition-colors">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// ==============================================================================
// 4. FUNÇÕES DE CARREGAMENTO DE IMAGEM E GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};

// ==============================================================================
// 5. COMPONENTE PRINCIPAL
// ==============================================================================
export default function PedidosEntregues() {
  // Estados do componente
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);

  // ============================================================================
  // 5.1 FUNÇÕES DE CÁLCULO E CARREGAMENTO
  // ============================================================================

  /**
   * Calcula o total dos pedidos selecionados
   */
  const calcularTotais = useCallback((pedidosList, selecionados) => {
    const total = Array.from(selecionados).reduce((sum, id) => {
      const pedido = pedidosList.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, []);

  /**
   * Carrega pedidos do Supabase com filtros aplicados
   */
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      let query = supabase.from('pedidos').select('*, loja_logo').eq('status_transporte', 'entregue');
      
      if (filtroEntregador) query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      if (filtroLoja) query = query.eq('id_loja', filtroLoja);
      if (filtroStatus) query = query.eq('status_pagamento', filtroStatus === 'true');
      
      const { data, error } = await query;
      if (error) throw error;
      
      setPedidos(data || []);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Atualiza pedidos selecionados no Supabase
   */
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }
    
    const dataFormatada = formatarDataParaSupabase(dataPagamento);
    
    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;
        
        const { error } = await supabase
          .from('pedidos')
          .update({
            frete_pago: fretePago,
            status_pagamento: fretePago > 0,
            data_pagamento: dataFormatada,
          })
          .eq('id', id);
        
        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pedidos atualizados com sucesso!');
      
      // Atualizar estado local
      setPedidos(prevPedidos => 
        prevPedidos.map(pedido => 
          pedidosSelecionados.has(pedido.id) 
            ? { 
                ...pedido, 
                data_pagamento: dataFormatada,
                status_pagamento: parseFloat(pedido.frete_pago || 0) > 0
              } 
            : pedido
        )
      );
      
      setPedidosSelecionados(new Set());
      
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ============================================================================
  // 5.2 HANDLERS DE INTERAÇÃO
  // ============================================================================

  /**
   * Manipula seleção/deseleção de pedidos
   */
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) {
      newSet.add(pedidoId);
    } else {
      newSet.delete(pedidoId);
    }
    setPedidosSelecionados(newSet);
  };

  /**
   * Atualiza valor do frete de um pedido
   */
  const handleAtualizarFrete = (pedidoId, novoValor) => {
    const newPedidos = pedidos.map(p => 
      p.id === pedidoId ? { ...p, frete_pago: novoValor } : p
    );
    setPedidos(newPedidos);
  };

  /**
   * Abre modal com detalhes do pedido
   */
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  /**
   * Fecha modal de detalhes
   */
  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 5.3 USE EFFECTS
  // ============================================================================

  // Carrega pedidos quando os filtros mudam
  useEffect(() => {
    carregarPedidos();
  }, [filtroEntregador, filtroLoja, filtroStatus]);

  // Calcula totais quando a seleção ou pedidos mudam
  useEffect(() => {
    calcularTotais(pedidos, pedidosSelecionados);
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ============================================================================
  // 5.4 DADOS DERIVADOS
  // ============================================================================

  // Lista de lojas únicas para o filtro
  const lojasUnicas = [...new Set(pedidos.map(p => p.id_loja))].map(id => {
    const nome = pedidos.find(p => p.id_loja === id)?.loja_nome;
    return { id, nome: nome || id };
  });

  // ============================================================================
  // 5.5 RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================

  return (
    <div className="bg-gray-50 min-h-screen mobile-optimized">
      {/* Modal de Detalhes */}
      <ModalDetalhesPedido
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={fecharModal}
      />

      {/* Cabeçalho Otimizado para Mobile */}
      <div className="bg-white shadow-md rounded-lg p-3 mb-3 sticky top-2 z-10 mobile-header">
        <div className="flex justify-between items-center mb-3">
          <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">{pedidosSelecionados.size}</span>
            <div className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </div>
          </div>
        </div>

        {/* Filtros sem rótulos */}
        <div className="grid grid-cols-1 gap-2 mb-3">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Entregadores</option>
            {[...new Set(pedidos.map(p => p.aceito_por_nome).filter(Boolean))].map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todas Lojas</option>
            {lojasUnicas.map(loja => (
              <option key={loja.id} value={loja.id}>{loja.nome}</option>
            ))}
          </select>
          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data e Botões na mesma linha */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded mobile-field"
          />
          <button 
            onClick={atualizarPedidos} 
            className="bg-purple-600 text-white p-2 rounded hover:bg-purple-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Atualizar
          </button>
          <button 
            onClick={async () => await gerarRecibosPDF(pedidosSelecionados, pedidos)}
            className="bg-green-600 text-white p-2 rounded hover:bg-green-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Recibo
          </button>
        </div>
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        <div className="grid grid-cols-1 gap-3">
          {isLoading ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Carregando...</p>
            </div>
          ) : pedidos.length === 0 ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow card-pedido p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="mobile-checkbox h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800 mobile-text-small">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 mobile-text-small">
                  <p><span className="font-semibold">Entregador:</span> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><span className="font-semibold">Pago em:</span> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p className="flex items-center">
                    <span className="font-semibold mr-1">Pagamento:</span> 
                    {pedido.status_pagamento ? (
                      <span className="text-green-600 mr-1">✔</span>
                    ) : (
                      <span className="text-red-600 mr-1">✘</span>
                    )} 
                    {pedido.status_pagamento ? 'Pago' : 'Pendente'}
                  </p>
                  <p className="flex items-center">
                    <span className="font-semibold">Frete Pago: R$</span>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0.0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500 focus:border-transparent mobile-text-small"
                    />
                  </p>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

{/* Estilos inline para mobile */}
<style jsx>{`
  @media (max-width: 768px) {
    .mobile-optimized :global(*) {
      font-size: 14px !important;
    }
    .mobile-header :global(*) {
      padding: 0px 10px !important;
    }
    .mobile-field :global(*) {
      padding: 10px !important;
      font-size: 14px !important;
    }
    .mobile-button :global(*) {
      padding: 10px 12px !important;
      font-size: 14px !important;
    }
    .mobile-text-small :global(*) {
      font-size: 13px !important;
    }
    .mobile-checkbox :global(*) {
      width: 18px !important;
      height: 18px !important;
    }
  }

  /* Estilos para tablet/PC (acima de 768px) - mantém o padrão */
  @media (min-width: 769px) {
    .mobile-header :global(*) {
      padding: 12px 10px !important; /* Valor original para tablet/PC */
    }
  }
`}</style>
    </div>
  );
}


// =========================================
// 13. components\PedidosEntreguesEntregador.js
// =========================================

// ============================================================================
// IMPORTAÇÕES
// ============================================================================
import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { OrderModal, WithCourier } from './OrderModal';

// ============================================================================
// COMPONENTE: PEDIDOS ENTREGUES - ENTREGADOR
// ============================================================================
/**
 * Versão exclusiva para ENTREGADORES:
 * - Só pode visualizar seus próprios pedidos entregues.
 * - Pode filtrar por loja e status de pagamento.
 * - Não pode editar valores, nem atualizar, nem gerar recibos.
 */
export default function PedidosEntreguesEntregador({ userProfile }) {
  // ==========================================================================
  // 1. ESTADOS DO COMPONENTE
  // ==========================================================================
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const [lojas, setLojas] = useState([]);
  const [error, setError] = useState(null); // Estado para erros

  // ==========================================================================
  // 2. CARREGAR LOJAS ASSOCIADAS AO ENTREGADOR
  // ==========================================================================
  useEffect(() => {
    const carregarLojas = async () => {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      try {
        console.log('🔍 Carregando lojas para UID:', userProfile.uid); // Log para depuração
        const { data, error } = await supabase
          .from('loja_associada')
          .select('id_loja, loja_nome')
          .eq('uid_usuario', userProfile.uid); // ✅ Corrigido: 'uid_usuario'

        if (error) throw error;
        console.log('✅ Lojas carregadas:', data); // Log para depuração
        
        // Processar para uniques por id_loja
        const uniqueLojas = [...new Map(data.map(item => [item.id_loja, item])).values()];
        setLojas(uniqueLojas);
      } catch (err) {
        console.error('Erro ao carregar lojas do entregador:', err.message);
        setError('Falha ao carregar lojas associadas. Verifique o schema da tabela loja_associada.');
      }
    };

    carregarLojas();
  }, [userProfile]);

  // ==========================================================================
  // 3. CARREGAR PEDIDOS DO ENTREGADOR LOGADO
  // ==========================================================================
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      console.log('🔍 Carregando pedidos para UID:', userProfile.uid); // Log para depuração
      let query = supabase
        .from('pedidos')
        .select('*')
        .eq('status_transporte', 'entregue')
        .eq('aceito_por_uid', userProfile.uid); // ✅ Corrigido: 'aceito_por_uid'

      if (filtroLoja) {
        query = query.eq('id_loja', filtroLoja);
      }
      if (filtroStatus) {
        query = query.eq('status_pagamento', filtroStatus === 'true');
      }

      const { data, error } = await query;
      if (error) throw error;

      console.log('✅ Pedidos carregados:', data); // Log para depuração
      setPedidos(data || []);
      setError(null);
    } catch (err) {
      console.error('Erro ao carregar pedidos do entregador:', err.message);
      setError('Falha ao carregar pedidos. Verifique o schema da tabela pedidos.');
    } finally {
      setIsLoading(false);
    }
  };

  // ==========================================================================
  // 4. ABRIR MODAL DE DETALHES
  // ==========================================================================
  const abrirModalDetalhes = (pedido) => {
    if (pedido) {
      setPedidoSelecionado(pedido);
      setModalAberto(true);
    }
  };

  // ==========================================================================
  // 5. USEEFFECT PARA CARREGAR PEDIDOS
  // ==========================================================================
  useEffect(() => {
    if (userProfile?.uid) carregarPedidos();
  }, [userProfile, filtroLoja, filtroStatus]);

  // ==========================================================================
  // 6. RENDERIZAÇÃO
  // ==========================================================================
  return (
    <div className="bg-gray-50 min-h-screen p-4">
      {/* Cabeçalho do entregador */}
      <div className="bg-white shadow-md rounded-lg p-4 mb-4 sticky top-4 z-10">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-xl font-bold text-purple-800">Meus Pedidos Entregues</h1>
            <p className="text-sm text-gray-600">
              Entregador: {userProfile.nome_completo || 'Não informado'}
            </p>
          </div>
        </div>

        {/* Filtros → Loja + Status */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todas Lojas</option>
            {lojas.map((loja) => (
              <option key={loja.id_loja} value={loja.id_loja}>
                {loja.loja_nome || `Loja ${loja.id_loja}`} {/* Fallback e desambiguação */}
              </option>
            ))}
          </select>

          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>
        {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
      </div>

      {/* Lista de pedidos (apenas visualização) */}
      <div className="container mx-auto px-2">
        {isLoading ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Carregando seus pedidos...</p>
          </div>
        ) : pedidos.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Nenhum pedido entregue encontrado.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {pedidos.map((pedido) => (
              <div key={pedido.id} className="bg-white rounded-lg shadow p-3">
                <button
                  onClick={() => abrirModalDetalhes(pedido)}
                  className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline w-full text-left"
                >
                  Pedido #{pedido.id_loja_woo}
                </button>
                <p className="text-sm font-semibold text-blue-800">{pedido.loja_nome}</p>
                <div className="mt-2 text-sm">
  <p>
    <strong>Data Entrega:</strong>{' '}
    {pedido.data ? new Date(pedido.data).toLocaleDateString('pt-BR') : '-'}
  </p>
  <p>
    <strong>Status Pagamento:</strong>{' '}
    {pedido.status_pagamento ? '✅ Pago' : '❌ Pendente'}
  </p>
  
  {/* FRETE OFERECIDO - ADICIONADO */}
  {pedido.frete_oferecido && (
    <p>
      <strong>Frete Oferecido:</strong> R${' '}
      {parseFloat(pedido.frete_oferecido).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
    </p>
  )}
  
  <p>
    <strong>Frete:</strong> R${' '}
    {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
  </p>
</div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modal de detalhes */}
      <OrderModal
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={() => setModalAberto(false)}
      >
        <WithCourier
          pedido={pedidoSelecionado}
          onClose={() => setModalAberto(false)}
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 14. components\PedidosEntreguesGerente.js
// =========================================

// ============================================================================
// IMPORTAÇÕES
// ============================================================================
import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '../lib/supabase';
import { OrderModal, WithCourier } from './OrderModal';
import { gerarRecibosPDF } from '../utils/pdfUtils';

// ============================================================================
// COMPONENTE: PEDIDOS ENTREGUES - GERENTE
// ============================================================================
/**
 * Versão exclusiva para GERENTES:
 * - Filtra pedidos apenas da loja do gerente.
 * - Pode visualizar, filtrar (entregador/status), atualizar pagamentos e gerar recibos.
 * - Não vê pedidos de outras lojas.
 */
export default function PedidosEntreguesGerente({ userProfile }) {
  // ==========================================================================
  // 1. ESTADOS DO COMPONENTE
  // ==========================================================================
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const [entregadores, setEntregadores] = useState([]);
  const [lojaInfo, setLojaInfo] = useState({ id_loja: null, loja_nome: null });
  const [error, setError] = useState(null); // Novo estado para erros

  // ==========================================================================
  // 2. CARREGAR LOJA DO GERENTE
  // ==========================================================================
  useEffect(() => {
    const carregarLojaGerente = async () => {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      try {
        const { data, error } = await supabase
          .from('loja_associada')
          .select('id_loja, loja_nome')
          .eq('uid_usuario', userProfile.uid)
          .eq('funcao', 'gerente')
          .single(); // Gerente tem apenas uma loja

        if (error) throw error;
        if (!data) {
          setError('Usuário sem loja associada como gerente.');
          return;
        }

        setLojaInfo({ id_loja: data.id_loja, loja_nome: data.loja_nome });
      } catch (err) {
        console.error('Erro ao carregar loja do gerente:', err.message);
        setError('Falha ao carregar loja associada.');
      }
    };

    carregarLojaGerente();
  }, [userProfile]);

  // ==========================================================================
  // 3. CARREGAR ENTREGADORES DA LOJA DO GERENTE
  // ==========================================================================
  useEffect(() => {
    const carregarEntregadores = async () => {
      if (!lojaInfo.id_loja) return;

      try {
        const { data, error } = await supabase
          .from('loja_associada')
          .select('nome_completo, uid_usuario')
          .eq('funcao', 'entregador')
          .eq('id_loja', lojaInfo.id_loja)
          .order('nome_completo');

        if (error) throw error;
        setEntregadores(data.map(u => u.nome_completo).filter(Boolean) || []);
      } catch (error) {
        console.error('Erro ao carregar entregadores:', error.message);
        setError('Falha ao carregar entregadores.');
      }
    };

    carregarEntregadores();
  }, [lojaInfo]);

  // ==========================================================================
  // 4. CARREGAR PEDIDOS DA LOJA DO GERENTE
  // ==========================================================================
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      if (!lojaInfo.id_loja) {
        setError('Usuário sem loja associada.');
        return;
      }

      let query = supabase
        .from('pedidos')
        .select('*')
        .eq('status_transporte', 'entregue')
        .eq('id_loja', lojaInfo.id_loja); // Filtro essencial

      if (filtroEntregador) {
        query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      }
      if (filtroStatus) {
        query = query.eq('status_pagamento', filtroStatus === 'true');
      }

      const { data, error } = await query;
      if (error) throw error;

      setPedidos(data || []);
      setError(null);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
      setError('Falha ao carregar pedidos.');
    } finally {
      setIsLoading(false);
    }
  };

  // ==========================================================================
  // 5. CALCULAR TOTAIS DOS PEDIDOS SELECIONADOS
  // ==========================================================================
  const calcularTotais = useCallback(() => {
    const total = Array.from(pedidosSelecionados).reduce((sum, id) => {
      const pedido = pedidos.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, [pedidosSelecionados, pedidos]);

  // ==========================================================================
  // 6. ATUALIZAR PAGAMENTOS DOS PEDIDOS SELECIONADOS
  // ==========================================================================
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }

    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;

        const { error } = await supabase
          .from('pedidos')
          .update({
            status_pagamento: fretePago > 0,
            data_pagamento: dataPagamento,
            frete_pago: fretePago, // Persistir frete atualizado
          })
          .eq('id', id);

        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pagamentos atualizados com sucesso!');
      carregarPedidos(); // Recarregar para refletir mudanças
      setPedidosSelecionados(new Set());
      setDataPagamento('');
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ==========================================================================
  // 7. MANIPULAR SELEÇÃO DE PEDIDOS
  // ==========================================================================
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) newSet.add(pedidoId);
    else newSet.delete(pedidoId);
    setPedidosSelecionados(newSet);
  };

  // ==========================================================================
  // 8. ATUALIZAR VALOR DO FRETE (LOCAL E BANCO)
  // ==========================================================================
  const handleAtualizarFrete = async (pedidoId, novoValor) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ frete_pago: novoValor })
        .eq('id', pedidoId);
      if (error) throw error;

      setPedidos(prevPedidos =>
        prevPedidos.map(p => p.id === pedidoId ? { ...p, frete_pago: novoValor } : p)
      );
    } catch (err) {
      console.error('Erro ao atualizar frete:', err.message);
      setError('Falha ao atualizar frete.');
    }
  };

  // ==========================================================================
  // 9. ABRIR MODAL DE DETALHES
  // ==========================================================================
  const abrirModalDetalhes = (pedido) => {
    if (pedido) {
      setPedidoSelecionado(pedido);
      setModalAberto(true);
    }
  };

  // ==========================================================================
  // 10. USEEFFECTS → carregar pedidos e recalcular totais
  // ==========================================================================
  useEffect(() => {
    if (lojaInfo.id_loja) carregarPedidos();
  }, [lojaInfo, filtroEntregador, filtroStatus]);

  useEffect(() => {
    calcularTotais();
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ==========================================================================
  // 11. FORMATAR DATA PARA EXIBIÇÃO
  // ==========================================================================
  const formatarDataParaExibicao = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return 'Data inválida';
    }
  };

  // ==========================================================================
  // 12. RENDERIZAÇÃO
  // ==========================================================================
  return (
    <div className="bg-gray-50 min-h-screen p-4">
      {/* Modal de Detalhes */}
      <OrderModal
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={() => setModalAberto(false)}
      >
        <WithCourier
          pedido={pedidoSelecionado}
          onClose={() => setModalAberto(false)}
        />
      </OrderModal>

      {/* Cabeçalho com nome da loja */}
      <div className="bg-white shadow-md rounded-lg p-4 mb-4 sticky top-4 z-10">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
            <p className="text-sm text-gray-600">
              Loja: {lojaInfo.loja_nome || lojaInfo.id_loja || 'Não definida'}
            </p>
          </div>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">
              {pedidosSelecionados.size} selecionados
            </span>
            <span className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
            </span>
          </div>
        </div>

        {/* Filtros: entregador e status */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Entregadores</option>
            {entregadores.map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>

          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data + botões de ação */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded"
          />
          <button
            onClick={atualizarPedidos}
            className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700"
            disabled={isLoading}
          >
            Atualizar
          </button>
          <button
            onClick={() => gerarRecibosPDF(pedidosSelecionados, pedidos, lojaInfo.id_loja)} // Passar id_loja para filtrar
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
            disabled={isLoading || pedidosSelecionados.size === 0}
          >
            Recibo
          </button>
        </div>
        {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        {isLoading ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Carregando pedidos...</p>
          </div>
        ) : pedidos.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Nenhum pedido encontrado para esta loja.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="h-4 w-4 text-purple-600 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 text-sm">
                  <p><strong>Entregador:</strong> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><strong>Pago em:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p>
                    <strong>Pagamento:</strong>{' '}
                    {pedido.status_pagamento ? '✅ Pago' : '❌ Pendente'}
                  </p>
                  <p className="flex items-center">
                    <strong>Frete Pago: R$</strong>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500"
                      disabled={isLoading}
                    />
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


// =========================================
// 15. components\RouteGuard.js
// =========================================

// components/RouteGuard.js
import { useUserProfile } from '../hooks/useUserProfile';
import { useRouter } from 'next/router';
import { useEffect } from 'react';

const RouteGuard = ({ children, requiredRole }) => {
  const { userRole, loading } = useUserProfile();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      // Definir hierarquia de permissões
      const rolesHierarchy = {
        'visitante': 0,
        'entregador': 1,
        'gerente': 2,
        'admin': 3
      };

      // Verificar se usuário tem permissão
      const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];
      
      if (!hasPermission) {
        // Redirecionar para página não autorizada ou home
        router.push('/');
      }
    }
  }, [userRole, loading, requiredRole, router]);

  // Mostrar loading enquanto verifica permissões
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Verificação final (caso o useEffect não tenha redirecionado ainda)
  const rolesHierarchy = {
    'visitante': 0,
    'entregador': 1,
    'gerente': 2,
    'admin': 3
  };
  
  const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];

  if (!hasPermission) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600">Acesso Não Autorizado</h1>
          <p className="text-gray-600 mt-2">Você não tem permissão para acessar esta página.</p>
        </div>
      </div>
    );
  }

  return children;
};

export default RouteGuard;


// =========================================
// 16. components\Sidebar.js
// =========================================

// components/Sidebar.js
import { useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import UserProfile from './UserProfile';

// ==============================================================================
// COMPONENTE SIDEBAR - MENU LATERAL
// ==============================================================================
/**
 * Sidebar é o menu de navegação lateral do sistema.
 * Contém: Logo, Menu de navegação, Perfil do usuário e Botão de login/logout.
 * Responsivo: Mobile (overlay) e Desktop (fixo).
 * Integra com useUserProfile para gerenciar autenticação e visibilidade de menus.
 */
const Sidebar = ({ isOpen, toggleSidebar }) => {
  const router = useRouter();
  const { user, userRole, userLojas, loading: loadingUser } = useUserProfile();
  
  // ============================================================================
  // 1. DEFINIÇÃO DOS ITENS DO MENU (INDIVIDUAIS)
  // ============================================================================
  /**
   * Definimos cada item separadamente para facilitar a montagem condicional.
   * Cada item tem: path (rota), icon (emoji), label (texto).
   */
  const homeItem = { path: '/', icon: '🏠', label: 'Home' };
  const perfilItem = { path: '/perfil', icon: '👤', label: 'Meu Perfil' };
  const pendentesItem = { path: '/pedidos-pendentes', icon: '📋', label: 'Pedidos Pendentes' };
  const aceitosItem = { path: '/pedidos-aceitos', icon: '✅', label: 'Pedidos Aceitos' };
  const entreguesItem = { path: '/pedidos-entregues', icon: '🚚', label: 'Pedidos Entregues' };
  const gestaoItem = { path: '/gestao-entregadores', icon: '👥', label: 'Gestão de Entregadores' };
  const todosItem = { path: '/todos-pedidos', icon: '📊', label: 'Todos os Pedidos' };
  const relatoriosItem = { path: '/relatorios', icon: '📈', label: 'Relatórios' };
  const adminItem = { path: '/admin', icon: '⚙️', label: 'Administração' };

  // ============================================================================
  // 2. MONTAGEM CONDICIONAL DOS ITENS DO MENU (CORRIGIDA)
  // ============================================================================
  /**
   * Constrói a lista de menuItems dinamicamente com base no user e userRole.
   * - Sempre inclui 'Home'.
   * - Para logados: Adiciona 'Meu Perfil'.
   * - Para 'entregador': Adiciona menus de pedidos pendentes e aceitos.
   * - Para 'entregador', 'gerente' e 'admin': Adiciona pedidos entregues.
   * - Para associados à loja (userLojas.length > 0) ou admin: Adiciona 'Relatórios'.
   * - Para 'gerente' ou 'admin': Adiciona gestão e todos os pedidos.
   * - Para 'admin': Adiciona administração.
   * 
   * ✅ CORREÇÃO: Pedidos Pendentes e Aceitos são APENAS para entregadores.
   */
  let menuItems = [homeItem]; // Sempre visível (até para não logados)

  if (user) { // Apenas para usuários logados
    menuItems.push(perfilItem);

    // --------------------------------------------------------------------------
    // BLOCO A: ITENS DE PEDIDOS PENDENTES E ACEITOS (APENAS ENTREGADORES)
    // --------------------------------------------------------------------------
    if (userRole === 'entregador') {
      menuItems.push(pendentesItem, aceitosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO B: ITENS DE PEDIDOS ENTREGUES (ENTREGADORES, GERENTES E ADMIN)
    // --------------------------------------------------------------------------
    if (['entregador', 'gerente', 'admin'].includes(userRole)) {
      menuItems.push(entreguesItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO C: RELATÓRIOS (para quem está vinculado a loja ou admin)
    // --------------------------------------------------------------------------
    if (userLojas.length > 0 || userRole === 'admin') {
      menuItems.push(relatoriosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO D: GESTÃO E TODOS OS PEDIDOS (GERENTE E ADMIN)
    // --------------------------------------------------------------------------
    if (['gerente', 'admin'].includes(userRole)) {
      menuItems.push(gestaoItem, todosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO E: ADMINISTRAÇÃO (APENAS ADMIN)
    // --------------------------------------------------------------------------
    if (userRole === 'admin') {
      menuItems.push(adminItem);
    }
  }

  // ============================================================================
  // 3. FUNÇÃO: LOGOUT DO USUÁRIO
  // ============================================================================
  /**
   * Realiza o logout do usuário via Supabase.
   * O useUserProfile lida com a atualização dos estados e redirecionamento.
   */
  const handleLogout = async () => {
    try {
      // Fechar sidebar no mobile antes do logout
      if (window.innerWidth < 1024) {
        toggleSidebar();
      }
      
      // Realizar logout
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      console.log('Logout realizado com sucesso');
    } catch (error) {
      console.error('Erro ao fazer logout:', error);
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: REDIRECIONAR PARA LOGIN
  // ============================================================================
  /**
   * Redireciona para a página de login quando o usuário não está autenticado.
   */
  const handleLoginRedirect = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
    router.push('/login');
  };

  // ============================================================================
  // 5. FUNÇÃO: FECHAR SIDEBAR AO CLICAR EM ITEM (MOBILE)
  // ============================================================================
  /**
   * Fecha o sidebar no mobile quando um item de menu é clicado.
   */
  const handleMenuItemClick = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <>
      {/* Overlay para mobile */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={toggleSidebar}
        />
      )}
      
      {/* Sidebar principal */}
      <div className={`
        fixed lg:static inset-y-0 left-0 z-50
        w-64 bg-purple-800 text-white
        transform transition-transform duration-300 ease-in-out
        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}
        flex flex-col h-full
      `}>
        {/* Logo / Marca do sistema */}
        <div className="p-6 border-b border-purple-700">
          <Link href="/" passHref onClick={handleMenuItemClick}>
            <div className="cursor-pointer">
              <h1 className="text-2xl font-bold">EntregasWoo</h1>
              <p className="text-purple-300 text-sm">Sistema de Gestão</p>
            </div>
          </Link>
        </div>

        {/* Menu de navegação */}
        <nav className="flex-1 p-4 overflow-y-auto">
          {menuItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`flex items-center py-3 px-4 rounded-lg mb-2 transition-colors
                ${router.pathname === item.path
                  ? 'bg-purple-900 text-white shadow-md'
                  : 'hover:bg-purple-700 text-purple-200'
                }`}
              onClick={handleMenuItemClick}
            >
              <span className="text-xl mr-3">{item.icon}</span>
              <span className="font-medium">{item.label}</span>
            </Link>
          ))}
        </nav>

        {/* Perfil do usuário (condicional) */}
        {user && (
          <div className="p-4 border-t border-purple-700 bg-purple-900">
            <UserProfile />
          </div>
        )}

        {/* Botão dinâmico: Entrar/Sair */}
        <div className="p-4 border-t border-purple-700">
          {user ? (
            <button
              onClick={handleLogout}
              className="w-full flex items-center justify-center py-2 px-4 bg-purple-700 hover:bg-purple-600 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              Sair
            </button>
          ) : (
            <button
              onClick={handleLoginRedirect}
              className="w-full flex items-center justify-center py-2 px-4 bg-green-600 hover:bg-green-500 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l-4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
              </svg>
              Entrar
            </button>
          )}
        </div>
      </div>
    </>
  );
};

export default Sidebar;


// =========================================
// 17. components\UserProfile.js
// =========================================

// components/UserProfile.js (VERSÃO SIMPLIFICADA)
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// COMPONENTE: PERFIL DO USUÁRIO (VERSÃO SIMPLIFICADA)
// ==============================================================================
/**
 * Componente de perfil simplificado para sidebar, exibindo informações básicas
 * (foto, nome, email, função e status) sem opções de edição.
 * Utiliza hook useUserProfile para dados e suporta modo mobile.
 * Aprimoramentos: Acessibilidade, feedback de erro e design responsivo.
 */
const UserProfile = ({ isMobile = false }) => {
  // ============================================================================
  // 1. OBTENÇÃO DE DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Usa o hook useUserProfile para obter perfil, função e estado de carregamento.
   * Desestruturação para acessar os valores retornados.
   */
  const { userProfile, userRole, loading, error } = useUserProfile();

  // ============================================================================
  // 2. ESTADO DE CARREGAMENTO
  // ============================================================================
  /**
   * Exibe um placeholder animado durante o carregamento dos dados.
   * Design aprimorado com múltiplos elementos para simular conteúdo.
   */
  if (loading) {
    return (
      <div
        className="p-4 border-t"
        role="status"
        aria-label="Carregando perfil do usuário"
      >
        <div className="animate-pulse space-y-2">
          <div className="h-4 bg-purple-700 rounded w-3/4 mb-2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/3 mt-2"></div>
        </div>
      </div>
    );
  }

  // ============================================================================
  // 3. TRATAMENTO DE ERRO
  // ============================================================================
  /**
   * Exibe uma mensagem de erro se a busca de perfil falhar.
   * Permite ao usuário tentar novamente ou entrar em contato com suporte.
   */
  if (error) {
    return (
      <div
        className="p-4 border-t"
        role="alert"
        aria-label="Erro ao carregar perfil"
      >
        <p className="text-sm text-red-300">Erro ao carregar perfil.</p>
        <p className="text-xs text-red-400">Tente novamente ou contate o suporte.</p>
      </div>
    );
  }

  // ============================================================================
  // 4. USUÁRIO NÃO AUTENTICADO
  // ============================================================================
  /**
   * Exibe mensagem para visitantes não autenticados, incentivando login.
   */
  if (!userProfile) {
    return (
      <div
        className="p-4 border-t"
        role="region"
        aria-label="Status de visitante"
      >
        <p className="text-sm text-purple-300">Visitante</p>
        <p className="text-xs text-purple-400">Faça login para acessar</p>
      </div>
    );
  }

  // ============================================================================
  // 5. RENDERIZAÇÃO SIMPLIFICADA
  // ============================================================================
  /**
   * Exibe informações do usuário autenticado com foto, nome, email, função e status.
   * Ajustes para responsividade em modo mobile e acessibilidade.
   */
  return (
    <div
      className={`p-4 border-t ${isMobile ? 'text-sm' : 'text-base'}`}
      role="region"
      aria-label="Perfil do usuário"
    >
      {/* INFORMAÇÕES BÁSICAS DO USUÁRIO */}
      <div className="space-y-2">
        {/* NOME E EMAIL */}
        <div className="flex items-center">
          {userProfile.foto && (
            <img
              src={userProfile.foto}
              alt={`${userProfile.nome_completo || userProfile.nome_usuario} foto de perfil`}
              className="w-8 h-8 rounded-full mr-3 border-2 border-purple-600"
              loading="lazy" // Otimização de carregamento
            />
          )}
          <div className="flex-1 min-w-0">
            <p
              className="text-sm font-semibold text-white truncate"
              title={userProfile.nome_completo || userProfile.nome_usuario}
            >
              {userProfile.nome_completo || userProfile.nome_usuario}
            </p>
            <p
              className="text-xs text-purple-300 truncate"
              title={userProfile.email}
            >
              {userProfile.email}
            </p>
          </div>
        </div>

        {/* FUNÇÃO/ROLE (APENAS TEXTO) */}
        <div className="bg-purple-700 rounded p-1">
          <p
            className="text-xs text-center text-white"
            role="status"
            aria-label={`Função: ${userRole}`}
          >
            {userRole === 'admin' && '👑 Admin'}
            {userRole === 'gerente' && '💼 Gerente'}
            {userRole === 'entregador' && '🚚 Entregador'}
            {userRole === 'visitante' && '👤 Visitante'}
          </p>
        </div>

        {/* STATUS DE CONEXÃO (SIMPLES) */}
        <div
          className="flex items-center justify-between text-xs text-purple-400"
          role="status"
          aria-label="Status de conexão"
        >
          <span>🟢 Conectado</span>
        </div>
      </div>
    </div>
  );
};

export default UserProfile;


// =========================================
// 1. hooks\useOrders.js
// =========================================

 



// =========================================
// 2. hooks\useRealtimePedidos.js
// =========================================

// hooks/useRealtimePedidos.js
import { useEffect } from 'react';
import { supabase } from '../lib/supabase';

export const useRealtimePedidos = (callback) => {
  useEffect(() => {
    const subscription = supabase
      .channel('pedidos-realtime')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'pedidos' 
        }, 
        (payload) => {
          callback(payload);
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, [callback]);
};

// Como usar em uma página:
const [pedidos, setPedidos] = useState([]);

useRealtimePedidos((payload) => {
  // Atualizar a lista de pedidos em tempo real
  if (payload.eventType === 'INSERT') {
    setPedidos(prev => [payload.new, ...prev]);
  } else if (payload.eventType === 'UPDATE') {
    setPedidos(prev => prev.map(p => 
      p.id === payload.new.id ? payload.new : p
    ));
  } else if (payload.eventType === 'DELETE') {
    setPedidos(prev => prev.filter(p => p.id !== payload.old.id));
  }
});


// =========================================
// 3. hooks\useUserProfile.js
// =========================================

// src/hooks/useUserProfile.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// 1. HOOK PERSONALIZADO: useUserProfile
// ==============================================================================
/**
 * Hook para gerenciar dados do usuário autenticado com sistema de permissões baseado em:
 * 1. ✅ Tabela 'usuarios': Campo 'is_admin' (boolean) - Define administradores do sistema
 * 2. ✅ Tabela 'loja_associada': Campo 'funcao' (string) - Define gerentes e entregadores
 * 
 * Fluxo de decisão de permissões:
 * 1. Se is_admin = true → Administrador (acesso completo)
 * 2. Se tem registro em loja_associada com funcao = 'gerente' → Gerente (acesso à loja)
 * 3. Se tem registro em loja_associada com funcao = 'entregador' → Entregador (acesso limitado)
 * 4. Se não atende nenhum critério → Visitante (acesso mínimo)
 */
export const useUserProfile = () => {
  // ============================================================================
  // 2. ESTADOS DO HOOK
  // ============================================================================
  const [user, setUser] = useState(null); // Dados do Supabase Auth
  const [userProfile, setUserProfile] = useState(null); // Dados da tabela 'usuarios'
  const [userRole, setUserRole] = useState('visitante'); // Função: 'admin', 'gerente', 'entregador', 'visitante'
  const [userLojas, setUserLojas] = useState([]); // Lojas associadas da tabela 'loja_associada'
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [error, setError] = useState(null); // Mensagens de erro
  const [updating, setUpdating] = useState(false); // Estado de atualização
  const [isInitialized, setIsInitialized] = useState(false); // Novo estado para verificar inicialização do Supabase

  // ============================================================================
  // 3. FUNÇÃO AUXILIAR: ESPERAR INICIALIZAÇÃO DO SUPABASE
  // ============================================================================
  /**
   * Aguarda até que o Supabase esteja inicializado e a sessão esteja carregada
   */
  const waitForSupabase = async () => {
    try {
      console.log('⏳ Aguardando inicialização do Supabase...');
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        console.log('⚠️ Nenhuma sessão encontrada na inicialização');
        return null;
      }
      console.log('✅ Sessão inicial carregada');
      return session.user;
    } catch (error) {
      console.error('❌ Erro ao verificar sessão inicial:', error);
      return null;
    }
  };

  // ============================================================================
  // 4. FUNÇÃO PRINCIPAL: CARREGAR DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Carrega todos os dados do usuário de forma sequencial e determinística
   * Segue a hierarquia de permissões do sistema
   */
  const loadUserData = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('🔄 Iniciando carregamento de dados do usuário...');

      // 4.1. VERIFICAR INICIALIZAÇÃO DO SUPABASE
      if (!isInitialized) {
        console.log('⏳ Supabase ainda não inicializado, aguardando...');
        const initialUser = await waitForSupabase();
        if (!initialUser) {
          console.log('👤 Nenhum usuário autenticado na inicialização');
          resetToVisitor();
          return;
        }
        setUser(initialUser);
        setIsInitialized(true);
      }

      // 4.2. OBTER USUÁRIO AUTENTICADO
      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        console.error('❌ Erro de autenticação:', authError);
        setError('Falha na autenticação: ' + authError.message);
        resetToVisitor();
        return;
      }

      if (!authUser) {
        console.log('👤 Nenhum usuário autenticado');
        resetToVisitor();
        return;
      }

      setUser(authUser);
      console.log('✅ Usuário autenticado:', authUser.email);

      // 4.3. BUSCAR PERFIL NA TABELA 'usuarios'
      const { data: usuarioData, error: usuarioError } = await supabase
        .from('usuarios')
        .select('*')
        .eq('uid', authUser.id)
        .single();

      if (usuarioError) {
        console.error('❌ Erro ao buscar perfil:', usuarioError);
        setError('Perfil não encontrado: ' + usuarioError.message);
        resetToVisitor();
        return;
      }

      setUserProfile(usuarioData);
      console.log('✅ Perfil carregado:', usuarioData.nome_completo);

      // 4.4. VERIFICAÇÃO CRÍTICA: É ADMINISTRADOR?
      if (usuarioData.is_admin === true) {
        console.log('🎯 Usuário é ADMINISTRADOR (is_admin = true)');
        setUserRole('admin');
        setUserLojas([]); // Admin não precisa de lojas associadas
        setLoading(false);
        return;
      }

      // 4.5. BUSCAR LOJAS ASSOCIADAS NA TABELA 'loja_associada'
      const { data: lojasData, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', authUser.id)
        .eq('status_vinculacao', 'ativo');

      if (lojasError) {
        console.warn('⚠️ Erro ao buscar lojas associadas:', lojasError);
        setUserLojas([]);
        setUserRole('visitante');
        setLoading(false);
        return;
      }

      setUserLojas(lojasData || []);
      console.log('📊 Lojas associadas encontradas:', lojasData?.length || 0);

      // 4.6. DETERMINAR FUNÇÃO BASEADA NAS LOJAS ASSOCIADAS
      if (!lojasData || lojasData.length === 0) {
        console.log('👤 Usuário é VISITANTE (sem lojas associadas)');
        setUserRole('visitante');
      } else {
        const lojasComoGerente = lojasData.filter(loja => loja.funcao === 'gerente');
        
        if (lojasComoGerente.length > 0) {
          if (lojasComoGerente.length > 1) {
            console.error('❌ CONFLITO: Usuário é gerente em múltiplas lojas');
            setError('Configuração inválida: Gerente em múltiplas lojas');
            setUserRole('erro');
          } else {
            console.log('💼 Usuário é GERENTE da loja:', lojasComoGerente[0].id_loja);
            setUserRole('gerente');
          }
        } else {
          console.log('🚚 Usuário é ENTREGADOR em', lojasData.length, 'loja(s)');
          setUserRole('entregador');
        }
      }

    } catch (error) {
      console.error('💥 Erro inesperado no carregamento:', error);
      setError('Erro inesperado: ' + error.message);
      resetToVisitor();
    } finally {
      setLoading(false);
      console.log('✅ Carregamento finalizado. Função:', userRole);
    }
  };

  // ============================================================================
  // 5. FUNÇÃO AUXILIAR: RESETAR PARA VISITANTE
  // ============================================================================
  /**
   * Reinicia todos os estados para usuário visitante (não autenticado)
   * Usado em casos de erro ou logout
   */
  const resetToVisitor = () => {
    setUser(null);
    setUserProfile(null);
    setUserRole('visitante');
    setUserLojas([]);
    setLoading(false);
  };

  // ============================================================================
  // 6. EFFECT: INICIALIZAÇÃO E OBSERVADOR DE AUTENTICAÇÃO
  // ============================================================================
  /**
   * Executa o carregamento inicial e fica observando mudanças de autenticação
   * Atualiza automaticamente quando usuário faz login/logout
   */
  useEffect(() => {
    // Carregamento inicial com verificação de sessão
    const initialize = async () => {
      const initialUser = await waitForSupabase();
      if (initialUser) {
        setUser(initialUser);
        setIsInitialized(true);
        await loadUserData();
      } else {
        resetToVisitor();
        setIsInitialized(true);
      }
    };

    initialize();

    // Observar mudanças de estado de autenticação
    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('🔐 Evento de autenticação:', event);
        
        if (event === 'SIGNED_IN' && session?.user) {
          console.log('✅ Usuário logado:', session.user.email);
          setUser(session.user);
          await loadUserData();
        } else if (event === 'SIGNED_OUT') {
          console.log('👋 Usuário desconectado');
          resetToVisitor();
        }
      }
    );

    // Cleanup: Remover observador quando componente desmontar
    return () => {
      if (authListener?.subscription) {
        authListener.subscription.unsubscribe();
        console.log('🧹 Observador de autenticação removido');
      }
    };
  }, []);

  // ============================================================================
  // 7. FUNÇÃO: ATUALIZAR PERFIL DO USUÁRIO
  // ============================================================================
  /**
   * Atualiza dados do perfil na tabela 'usuarios'
   * ⚠️ Não permite alterar 'is_admin' via interface comum
   */
  const updateUserProfile = async (formData) => {
    try {
      setUpdating(true);
      setError(null);

      if (!userProfile?.uid) throw new Error('Perfil não carregado');
      if (!formData.nome_completo || !formData.telefone) {
        throw new Error('Nome completo e telefone são obrigatórios');
      }

      const updateData = {
        nome_completo: formData.nome_completo,
        nome_usuario: formData.nome_usuario || userProfile.nome_usuario,
        telefone: formData.telefone,
        foto: formData.foto || userProfile.foto
      };

      const { error: updateError } = await supabase
        .from('usuarios')
        .update(updateData)
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      setUserProfile(prev => ({ ...prev, ...updateData }));

      return { success: true, message: 'Perfil atualizado com sucesso!' };

    } catch (error) {
      const errorMsg = 'Erro ao atualizar: ' + error.message;
      setError(errorMsg);
      return { success: false, message: errorMsg };
    } finally {
      setUpdating(false);
    }
  };

  // ============================================================================
  // 8. FUNÇÃO: RECARREGAR DADOS
  // ============================================================================
  /**
   * Força recarregamento completo dos dados do usuário
   * Útil após atualizações externas ou para sincronização
   */
  const reloadUserData = async () => {
    console.log('🔄 Recarregando dados do usuário...');
    await loadUserData();
  };

  // ============================================================================
  // 9. RETORNO DO HOOK
  // ============================================================================
  /**
   * Expõe estados e funções para componentes consumidores
   */
  return {
    user,
    userProfile,
    userRole,
    userLojas,
    loading,
    error,
    updating,
    updateUserProfile,
    reloadUserData
  };
};


// =========================================
// 1. lib\firebase.js
// =========================================

 



// =========================================
// 2. lib\supabase.js
// =========================================

 import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase URL or Anon Key. Check .env.local');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);



// =========================================
// 3. lib\wooCommerce.js
// =========================================

 



// =========================================
// 1. pages\_app.js
// =========================================

// pages/_app.js
import '../styles/globals.css';
import Layout from '../components/Layout';

// ==============================================================================
// COMPONENTE MyApp - PONTO DE ENTRADA DA APLICAÇÃO
// ==============================================================================
/**
 * MyApp é o componente raiz que envolve todas as páginas
 * Aqui definimos layouts globais, providers e configurações comuns
 * 
 * @param {Object} props - Propriedades do Next.js
 * @param {React.Component} props.Component - Componente da página atual
 * @param {Object} props.pageProps - Props específicas da página
 */
function MyApp({ Component, pageProps }) {
  
  // ============================================================================
  // 1. DECISÃO DE LAYOUT POR PÁGINA
  // ============================================================================
  /**
   * Estratégia: Cada página pode definir se quer ou não o layout padrão
   * através da propriedade estática `noLayout`
   * 
   * Páginas que devem SEM layout:
   * - Login, Cadastro, Erros, Admin (porque tem layout próprio)
   */
  
  // Verificar se a página atual deve usar layout
  const shouldUseLayout = !Component.noLayout;

  // ============================================================================
  // 2. RENDERIZAÇÃO CONDICIONAL
  // ============================================================================
  return (
    <>
      {shouldUseLayout ? (
        // PÁGINAS COM LAYOUT PADRÃO (com sidebar e header)
        <Layout>
          <Component {...pageProps} />
        </Layout>
      ) : (
        // PÁGINAS SEM LAYOUT PADRÃO (renderizar apenas o conteúdo)
        <Component {...pageProps} />
      )}
    </>
  );
}

export default MyApp;


// =========================================
// 2. pages\_document.js
// =========================================

 import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link rel="manifest" href="/manifest.json" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;



// =========================================
// 3. pages\admin.js
// =========================================

// pages/admin.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ==============================================================================
// PÁGINA DE ADMINISTRAÇÃO
// ==============================================================================
/**
 * Painel administrativo para gerenciamento do sistema
 * Acessível apenas para usuários com role 'admin'
 * 
 * IMPORTANTE: Esta página NÃO usa o Layout padrão (já é aplicado pelo _app.js)
 * Por isso NÃO devemos envolver com <Layout> aqui
 */
export default function Admin() {
  // ============================================================================
  // 1. ESTADOS E HOOKS
  // ============================================================================
  const { userRole, loading: userLoading } = useUserProfile();
  const [activeTab, setActiveTab] = useState('lojas');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  // Estados para dados das abas
  const [lojas, setLojas] = useState([]);
  const [usuariosPendentes, setUsuariosPendentes] = useState([]);
  const [associacoes, setAssociacoes] = useState([]);

  // ============================================================================
  // 2. EFFECT: CARREGAR DADOS COM BASE NA ABA ATIVA
  // ============================================================================
  useEffect(() => {
    if (activeTab === 'lojas') {
      loadLojas();
    } else if (activeTab === 'usuarios') {
      loadUsuariosPendentes();
    } else if (activeTab === 'associacoes') {
      loadAssociacoes();
    }
  }, [activeTab]);

// ============================================================================
// 3. FUNÇÕES: CARREGAMENTO DE DADOS
// ============================================================================
/**
 * Carrega lista de lojas cadastradas
 */
const loadLojas = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('lojas')
      .select('*')
      .order('loja_nome');
    
    if (error) throw error;
    setLojas(data || []);
  } catch (err) {
    setError('Erro ao carregar lojas: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Carrega usuários não vinculados a lojas (pendentes)
 */
const loadUsuariosPendentes = async () => {
  try {
    setLoading(true);
    // ✅ CORREÇÃO: Consulta mais simples para evitar erro de UUID
    const { data: usuariosAssociados, error: errorAssociados } = await supabase
      .from('loja_associada')
      .select('uid_usuario')
      .eq('status_vinculacao', 'ativo');

    if (errorAssociados) {
      throw new Error('Erro ao buscar usuários associados: ' + errorAssociados.message);
    }

    // Extrair apenas os UIDs
    const uidsAssociados = usuariosAssociados?.map(ua => ua.uid_usuario) || [];

    // Buscar usuários NÃO presentes na lista de associados
    let query = supabase
      .from('usuarios')
      .select('*');

    // Aplicar filtro apenas se houver usuários associados
    if (uidsAssociados.length > 0) {
      query = query.not('uid', 'in', `(${uidsAssociados.map(uid => `"${uid}"`).join(',')})`);
    }

    const { data, error } = await query;

    if (error) {
      throw new Error('Erro ao buscar usuários pendentes: ' + error.message);
    }

    setUsuariosPendentes(data || []);

  } catch (err) {
    setError('Erro ao carregar usuários: ' + err.message);
    console.error('Erro detalhado:', err);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// ✅ CORREÇÃO: FUNÇÃO loadAssociacoes ADICIONADA
// ============================================================================
/**
 * Carrega associações ativas entre usuários e lojas
 */
const loadAssociacoes = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        *,
        usuarios:uid_usuario(nome_completo, email),
        lojas:id_loja(loja_nome)
      `)
      .order('ultimo_status_vinculacao', { ascending: false });
    
    if (error) throw error;
    setAssociacoes(data || []);
  } catch (err) {
    setError('Erro ao carregar associações: ' + err.message);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// 4. FUNÇÕES: AÇÕES DO ADMIN
// ============================================================================
/**
 * Cria uma nova loja no sistema
 */
const handleCriarLoja = async (dadosLoja) => {
  try {
    setLoading(true);
    setError(null);
    
    const { error } = await supabase
      .from('lojas')
      .insert([{
        id_loja: dadosLoja.id_loja,
        loja_nome: dadosLoja.loja_nome,
        loja_endereco: dadosLoja.loja_endereco,
        loja_telefone: dadosLoja.loja_telefone,
        loja_perimetro_entrega: dadosLoja.loja_perimetro_entrega,
        cnpj: dadosLoja.cnpj,
        ativa: true
      }]);
    
    if (error) throw error;
    
    setSuccess('Loja criada com sucesso!');
    await loadLojas();
  } catch (err) {
    setError('Erro ao criar loja: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Associa um usuário como gerente de uma loja
 */
const handleAssociarGerente = async (usuarioId, lojaId) => {
  try {
    setLoading(true);
    setError(null);
    
    // Buscar dados do usuário e loja em paralelo
    const [{ data: usuario }, { data: loja }] = await Promise.all([
      supabase.from('usuarios').select('*').eq('uid', usuarioId).single(),
      supabase.from('lojas').select('*').eq('id_loja', lojaId).single()
    ]);
    
    if (!usuario || !loja) throw new Error('Usuário ou loja não encontrados');
    
    // Criar associação
    const { error } = await supabase
      .from('loja_associada')
      .insert([{
        uid_usuario: usuarioId,
        nome_completo: usuario.nome_completo,
        id_loja: lojaId,
        loja_nome: loja.loja_nome,
        loja_endereco: loja.loja_endereco,
        loja_telefone: loja.loja_telefone,
        funcao: 'gerente',
        status_vinculacao: 'ativo',
        ultimo_status_vinculacao: new Date().toISOString()
      }]);
    
    if (error) throw error;
    
    setSuccess('Gerente associado com sucesso!');
    await loadAssociacoes(); // ✅ Agora esta função existe
    await loadUsuariosPendentes();
  } catch (err) {
    setError('Erro ao associar gerente: ' + err.message);
  } finally {
    setLoading(false);
  }
};
  // ============================================================================
  // 5. VERIFICAÇÕES DE ACESSO E LOADING
  // ============================================================================
  if (userLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // ============================================================================
  // 6. RENDERIZAÇÃO PRINCIPAL
  // ============================================================================
  return (
    <RouteGuard requiredRole="admin">
      {/* ✅ REMOVIDO: <Layout> wrapper (já é aplicado pelo _app.js) */}
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Painel Administrativo</h1>
        
        {/* Mensagens de status */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            {success}
          </div>
        )}

        {/* Navegação por abas */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="flex space-x-8">
            {['lojas', 'usuarios', 'associacoes'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                {tab === 'lojas' && 'Lojas'}
                {tab === 'usuarios' && 'Usuários Pendentes'}
                {tab === 'associacoes' && 'Associações'}
              </button>
            ))}
          </nav>
        </div>

        {/* Conteúdo das abas */}
        <div className="mt-6">
          {/* Aba: Lojas */}
          {activeTab === 'lojas' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Gerenciar Lojas</h2>
              
              {/* Formulário de criação */}
              <div className="bg-white p-4 rounded-lg shadow-md mb-4">
                <h3 className="text-lg font-medium mb-3">Criar Nova Loja</h3>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target);
                  handleCriarLoja({
                    id_loja: formData.get('id_loja'),
                    loja_nome: formData.get('loja_nome'),
                    loja_endereco: formData.get('loja_endereco'),
                    loja_telefone: formData.get('loja_telefone'),
                    loja_perimetro_entrega: formData.get('loja_perimetro_entrega'),
                    cnpj: formData.get('cnpj')
                  });
                }}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                    <input name="id_loja" placeholder="ID da Loja (ex: L1)" required />
                    <input name="loja_nome" placeholder="Nome da Loja" required />
                    <input name="loja_endereco" placeholder="Endereço" />
                    <input name="loja_telefone" placeholder="Telefone" />
                    <input name="loja_perimetro_entrega" placeholder="Perímetro de Entrega" />
                    <input name="cnpj" placeholder="CNPJ" />
                  </div>
                  <button type="submit" disabled={loading}>
                    {loading ? 'Criando...' : 'Criar Loja'}
                  </button>
                </form>
              </div>

              {/* Listagem de lojas */}
              <div>
                <h3 className="text-lg font-medium mb-3">Lojas Cadastradas</h3>
                {loading ? (
                  <div className="text-center py-4">Carregando...</div>
                ) : (
                  <div className="grid gap-4">
                    {lojas.map(loja => (
                      <div key={loja.id} className="bg-white p-4 rounded-lg shadow-md">
                        <h4 className="font-semibold">{loja.loja_nome} ({loja.id_loja})</h4>
                        <p className="text-gray-600">{loja.loja_endereco}</p>
                        <p className="text-gray-600">{loja.loja_telefone}</p>
                        <p className="text-gray-600">Perímetro: {loja.loja_perimetro_entrega}</p>
                        <span className={`inline-block px-2 py-1 rounded text-xs ${
                          loja.ativa ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {loja.ativa ? 'Ativa' : 'Inativa'}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Aba: Usuários Pendentes */}
          {activeTab === 'usuarios' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Usuários Pendentes</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {usuariosPendentes.map(usuario => (
                    <div key={usuario.uid} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{usuario.nome_completo}</h4>
                      <p className="text-gray-600">{usuario.email}</p>
                      <p className="text-gray-600">{usuario.telefone}</p>
                      <button
                        onClick={() => {
                          const lojaId = prompt('Digite o ID da loja para associar (ex: L1):');
                          if (lojaId) handleAssociarGerente(usuario.uid, lojaId);
                        }}
                        className="bg-green-500 text-white px-3 py-1 rounded text-sm mt-2"
                      >
                        Associar como Gerente
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Aba: Associações */}
          {activeTab === 'associacoes' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Associações Ativas</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {associacoes.map(associacao => (
                    <div key={associacao.id} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{associacao.nome_completo}</h4>
                      <p className="text-gray-600">Função: {associacao.funcao}</p>
                      <p className="text-gray-600">Loja: {associacao.loja_nome}</p>
                      <p className="text-gray-600">Status: {associacao.status_vinculacao}</p>
                      <p className="text-gray-600 text-sm">
                        Última atualização: {new Date(associacao.ultimo_status_vinculacao).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}

// ==============================================================================
// MARCAÇÃO: ESTA PÁGINA NÃO USA LAYOUT PADRÃO (já é aplicado pelo _app.js)
// ==============================================================================



// =========================================
// 4. pages\atualizar-senha.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import Link from 'next/link';

export default function AtualizarSenha() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [session, setSession] = useState(null);
  const router = useRouter();

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
    });

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    return () => subscription.unsubscribe();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    if (password !== confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }

    if (password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) throw error;

      setSuccess('Senha atualizada com sucesso!');
      
      setTimeout(() => {
        router.push('/login');
      }, 2000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  if (!session) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 flex items-center justify-center">
        <div className="bg-white p-8 rounded-2xl shadow-2xl text-center">
          <p className="text-red-600 mb-4">Link inválido ou expirado</p>
          <Link href="/recuperar-senha" className="text-purple-600 hover:text-purple-800">
            Solicitar novo link
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">Nova Senha</h2>
          <p className="text-purple-200 mt-2">Digite sua nova senha</p>
        </div>

        {/* Card de Atualização */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Atualizar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Campo Nova Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                Nova Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Mínimo 6 caracteres"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            {/* Campo Confirmar Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                Confirmar Nova Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Digite novamente a senha"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Atualizando...' : 'Atualizar Senha'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
AtualizarSenha.noLayout = true;


// =========================================
// 5. pages\cadastro.js
// =========================================

// pages/cadastro.js
import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE CADASTRO COM NOME E TELEFONE
// ==============================================================================
/**
 * Inclui campos para nome completo e telefone, essenciais para credenciamento de motoristas.
 * Exibe mensagem sobre confirmação de email após cadastro.
 * Redireciona para /login após sucesso para tentativa de login.
 * Aprendizado: Integre mensagens de suporte ao fluxo de autenticação do Supabase.
 */
export default function Cadastro() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE (BLOCO DE ESTADOS)
  // ============================================================================
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    nome_completo: '',
    telefone: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. FUNÇÃO: ATUALIZAÇÃO DOS CAMPOS (BLOCO DE FUNÇÃO)
  // ============================================================================
  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  // ============================================================================
  // 3. FUNÇÃO: SUBMISSÃO DO CADASTRO (BLOCO DE FUNÇÃO ASSÍNCRONA)
  // ============================================================================
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    // 3.1. VALIDAÇÕES
    if (formData.password !== formData.confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }
    if (formData.password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }
    if (!formData.nome_completo.trim()) {
      setError('O nome completo é obrigatório');
      setLoading(false);
      return;
    }
    if (!formData.telefone.trim()) {
      setError('O telefone é obrigatório');
      setLoading(false);
      return;
    }

    try {
      // 3.2. CRIAÇÃO NO AUTH
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
        options: {
          data: {
            nome_completo: formData.nome_completo,
            telefone: formData.telefone
          }
        }
      });

      if (authError) throw authError;

      // 3.3. INSERÇÃO NA TABELA USUÁRIOS
      const { error: userError } = await supabase
        .from('usuarios')
        .insert({
          uid: authData.user.id,
          email: formData.email,
          nome_usuario: formData.email,
          nome_completo: formData.nome_completo,
          telefone: formData.telefone,
          foto: '',
          is_admin: false
        });

      if (userError) throw userError;

      // 3.4. SUCESSO E REDIRECIONAMENTO
      setSuccess('Cadastro realizado! Verifique seu email e clique no link de confirmação para fazer login.');
      setTimeout(() => {
        router.push('/login');
      }, 2000);
    } catch (error) {
      console.error('Erro detalhado:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO COMPONENTE (BLOCO DE JSX)
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 4.1. SEÇÃO VISUAL: LOGO E TÍTULO */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Criar Nova Conta</p>
        </div>

        {/* 4.2. CARD PRINCIPAL: CONTAINER DE CADASTRO */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Cadastro
          </h3>

          {/* 4.2.1. EXIBIÇÃO DE ERRO OU SUCESSO */}
          {error && <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">{error}</div>}
          {success && <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">{success}</div>}

          {/* 4.2.2. FORMULÁRIO COM NOME E TELEFONE */}
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="nome_completo" className="block text-sm font-medium text-gray-700">
                Nome Completo
              </label>
              <input
                id="nome_completo"
                name="nome_completo"
                type="text"
                value={formData.nome_completo}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="Seu nome completo"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="telefone" className="block text-sm font-medium text-gray-700">
                Telefone
              </label>
              <input
                id="telefone"
                name="telefone"
                type="tel"
                value={formData.telefone}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="(11) 99999-9999"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
                disabled={loading}
              />
            </div>

            <div className="relative">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  value={formData.password}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Mínimo 6 caracteres"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={loading}
                >
                  {showPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <div className="relative">
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirmar Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Digite novamente sua senha"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  disabled={loading}
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Criando conta...' : 'Criar Conta'}
            </button>
          </form>

          {/* 4.2.3. LINK PARA LOGIN */}
          <div className="mt-6 text-center">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Já tem uma conta? Faça login
            </Link>
          </div>
        </div>

        {/* 4.3. SEÇÃO DE RODAPÉ */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2025 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
Cadastro.noLayout = true;


// =========================================
// 6. pages\gestao-entregadores.js
// =========================================

// pages/gestao-entregadores.js (VERSÃO MELHORADA)
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// PÁGINA: GESTÃO DE ENTREGADORES
// ==============================================================================
export default function GestaoEntregadores() {
  const [entregadores, setEntregadores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [buscaEmail, setBuscaEmail] = useState('');
  const [usuarioEncontrado, setUsuarioEncontrado] = useState(null);
  const [buscando, setBuscando] = useState(false);

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 1. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 2. CARREGAR ENTREGADORES DA LOJA (COM MAIS CAMPOS)
  // ============================================================================
  useEffect(() => {
    if (userRole === 'gerente' || userRole === 'admin') {
      carregarEntregadores();
    }
  }, [userRole]);

  const carregarEntregadores = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('loja_associada')
        .select('*');

      // Gerente só vê pessoas da sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      // Filtrar apenas entregadores e gerentes
      const pessoasLoja = data.filter(pessoa => 
        pessoa.funcao === 'entregador' || pessoa.funcao === 'gerente'
      );
      
      setEntregadores(pessoasLoja || []);
    } catch (error) {
      console.error('Erro ao carregar pessoas da loja:', error);
      alert('Erro ao carregar lista de pessoas');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 3. BUSCAR USUÁRIO POR EMAIL NO SISTEMA (COM MAIS DETALHES)
  // ============================================================================
  const buscarUsuarioPorEmail = async () => {
    if (!buscaEmail.trim()) {
      alert('Por favor, digite um email para buscar');
      return;
    }
    
    try {
      setBuscando(true);
      
      // Buscar usuário na tabela usuarios pelo email
      const { data: usuario, error: usuarioError } = await supabase
        .from('usuarios')
        .select('uid, email, nome_completo, telefone, foto')
        .eq('email', buscaEmail.trim())
        .single();

      if (usuarioError) {
        if (usuarioError.code === 'PGRST116') {
          setUsuarioEncontrado(null);
          alert('Usuário não encontrado no sistema');
        } else {
          throw usuarioError;
        }
        return;
      }

      // Buscar TODOS os detalhes das lojas associadas a este usuário
      const { data: lojasAssociadas, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', usuario.uid);

      if (lojasError) throw lojasError;

      // Combinar dados do usuário com suas lojas
      setUsuarioEncontrado({
        ...usuario,
        lojasAssociadas: lojasAssociadas || []
      });

    } catch (error) {
      console.error('Erro ao buscar usuário:', error);
      alert('Erro ao buscar usuário. Verifique o console.');
      setUsuarioEncontrado(null);
    } finally {
      setBuscando(false);
    }
  };

  // ============================================================================
  // 4. VINCULAR USUÁRIO COMO ENTREGADOR
  // ============================================================================
  const vincularComoEntregador = async (usuario) => {
    if (!confirm(`Vincular ${usuario.nome_completo} como entregador nesta loja?`)) return;
    
    try {
      if (userRole === 'gerente' && (!userLojas || userLojas.length === 0)) {
        alert('Erro: Gerente não está vinculado a nenhuma loja');
        return;
      }

      const lojaId = userRole === 'gerente' ? userLojas[0].id_loja : prompt('Digite o ID da loja (admin):');
      const lojaNome = userRole === 'gerente' ? userLojas[0].loja_nome : prompt('Digite o nome da loja (admin):');

      if (!lojaId || !lojaNome) return;

      // Verificar se usuário já está vinculado a esta loja
      const { data: vinculoExistente } = await supabase
        .from('loja_associada')
        .select('id')
        .eq('uid_usuario', usuario.uid)
        .eq('id_loja', lojaId)
        .single();

      if (vinculoExistente) {
        alert('Este usuário já está vinculado a esta loja');
        return;
      }

      // Vincular usuário como entregador
      const { error } = await supabase
        .from('loja_associada')
        .insert({
          uid_usuario: usuario.uid,
          nome_completo: usuario.nome_completo,
          email_usuario: usuario.email, // ✅ NOVO CAMPO
          funcao: 'entregador',
          id_loja: lojaId,
          loja_nome: lojaNome,
          status_vinculacao: 'ativo',
          veiculo: 'Não informado',
          carga_maxima: 0,
          perimetro_entrega: 'Não definido',
          ultimo_status_vinculacao: new Date().toISOString()
        });

      if (error) throw error;

      alert('✅ Entregador vinculado com sucesso!');
      setBuscaEmail('');
      setUsuarioEncontrado(null);
      carregarEntregadores();
    } catch (error) {
      console.error('Erro ao vincular entregador:', error);
      alert('❌ Erro ao vincular entregador');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: FORMATAR VALOR NULO
  // ============================================================================
  const formatarValor = (valor) => {
    return valor || 'Não informado';
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  if (userRole !== 'admin' && userRole !== 'gerente') {
    return <div className="min-h-screen flex items-center justify-center">Acesso não autorizado</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">👥 Gestão de Entregadores</h1>

      {/* BUSCA POR EMAIL */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Buscar Usuário no Sistema</h2>
        <div className="flex gap-2 mb-4">
          <input
            type="email"
            placeholder="Digite o email do usuário"
            value={buscaEmail}
            onChange={(e) => setBuscaEmail(e.target.value)}
            className="flex-1 p-2 border border-gray-300 rounded"
            onKeyPress={(e) => e.key === 'Enter' && buscarUsuarioPorEmail()}
          />
          <button
            onClick={buscarUsuarioPorEmail}
            disabled={buscando}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
          >
            {buscando ? 'Buscando...' : 'Buscar'}
          </button>
        </div>

        {/* RESULTADO DA BUSCA - COM MAIS DETALHES */}
        {usuarioEncontrado && (
          <div className="mt-4 p-4 border border-green-200 bg-green-50 rounded">
            <h3 className="font-semibold text-green-800 mb-3">👤 Usuário encontrado:</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
              <div>
                <p><strong>Nome:</strong> {usuarioEncontrado.nome_completo}</p>
                <p><strong>Email:</strong> {usuarioEncontrado.email}</p>
                {usuarioEncontrado.telefone && (
                  <p><strong>Telefone:</strong> {usuarioEncontrado.telefone}</p>
                )}
              </div>
              
              {usuarioEncontrado.foto && (
                <div className="flex justify-center">
                  <img 
                    src={usuarioEncontrado.foto} 
                    alt="Foto do usuário"
                    className="w-16 h-16 rounded-full"
                  />
                </div>
              )}
            </div>

            <div className="mt-3">
              <strong>🏪 Lojas Associadas:</strong>
              {usuarioEncontrado.lojasAssociadas.length > 0 ? (
                <div className="ml-4 mt-2 space-y-2">
                  {usuarioEncontrado.lojasAssociadas.map((loja, index) => (
                    <div key={index} className="p-2 bg-white rounded border">
                      <p><strong>Loja:</strong> {loja.loja_nome} ({loja.id_loja})</p>
                      <p><strong>Função:</strong> 
                        <span className={`ml-1 ${
                          loja.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                        }`}>
                          {loja.funcao}
                        </span>
                      </p>
                      <p><strong>Status:</strong> 
                        <span className={`ml-1 ${
                          loja.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {loja.status_vinculacao}
                        </span>
                      </p>
                      {loja.veiculo && <p><strong>🚗 Veículo:</strong> {formatarValor(loja.veiculo)}</p>}
                      {loja.carga_maxima > 0 && <p><strong>📦 Carga Máxima:</strong> {loja.carga_maxima} kg</p>}
                      {loja.perimetro_entrega && <p><strong>📍 Perímetro:</strong> {formatarValor(loja.perimetro_entrega)}</p>}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-600 ml-4">Nenhuma loja associada</p>
              )}
            </div>

            <button
              onClick={() => vincularComoEntregador(usuarioEncontrado)}
              className="mt-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
            >
              ➕ Vincular como Entregador
            </button>
          </div>
        )}
      </div>

      {/* LISTA DE PESSOAS DA LOJA - COM MAIS DETALHES */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4">
          {userRole === 'gerente' ? '👥 Pessoas da Minha Loja' : '👥 Pessoas do Sistema'}
        </h2>
        
        {loading ? (
          <p className="text-gray-500">Carregando...</p>
        ) : entregadores.length === 0 ? (
          <p className="text-gray-500">Nenhuma pessoa encontrada</p>
        ) : (
          <div className="grid gap-4">
            {entregadores.map((pessoa) => (
              <div key={pessoa.id} className="border p-4 rounded-lg bg-gray-50">
                <h3 className="font-semibold text-lg text-purple-800">
                  {pessoa.funcao === 'gerente' ? '👑 ' : '🚚 '}
                  {pessoa.nome_completo}
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-2">
                  <div>
                    <p><strong>📧 Email:</strong> {pessoa.email_usuario}</p>
                    <p><strong>🎯 Função:</strong> 
                      <span className={`ml-1 ${
                        pessoa.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                      }`}>
                        {pessoa.funcao}
                      </span>
                    </p>
                    <p><strong>📊 Status:</strong> 
                      <span className={`ml-1 ${
                        pessoa.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {pessoa.status_vinculacao}
                      </span>
                    </p>
                  </div>
                  
<div>
  <p><strong>🏪 Loja:</strong> {pessoa.loja_nome} ({pessoa.id_loja})</p>
  
  {/* MOSTRAR CAMPOS DE ENTREGA APENAS PARA ENTREGADORES */}
  {pessoa.funcao === 'entregador' && (
    <>
      <p><strong>🚗 Veículo:</strong> {formatarValor(pessoa.veiculo)}</p>
      {pessoa.carga_maxima > 0 && (
        <p><strong>📦 Carga Máx:</strong> {pessoa.carga_maxima} kg</p>
      )}
      {pessoa.perimetro_entrega && (
        <p><strong>📍 Perímetro:</strong> {formatarValor(pessoa.perimetro_entrega)}</p>
      )}
    </>
  )}

  {/* MOSTRAR MENSAGEM ESPECIAL PARA GERENTES */}
  {pessoa.funcao === 'gerente' && (
    <p className="text-green-600 text-sm mt-1">
      👑 Gerente da loja
    </p>
  )}
</div>
                </div>
                
                {pessoa.data_desligamento && (
                  <p className="text-red-600 text-sm mt-2">
                    <strong>🗓️ Data desligamento:</strong> {new Date(pessoa.data_desligamento).toLocaleDateString('pt-BR')}
                  </p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


// =========================================
// 7. pages\index.js
// =========================================

// Importação de dependências necessárias do Next.js e React
import Head from 'next/head';
import Link from 'next/link';
import { useEffect } from 'react';

// Componente principal da página inicial
export default function HomePage() {
  // Hook useEffect para configurar a navegação suave
  useEffect(() => {
    // Seleção de todos os links internos que começam com '#'
    const anchors = document.querySelectorAll('a[href^="#"]');

    // Função para lidar com o clique em links internos
    const handleAnchorClick = (e) => {
      e.preventDefault();
      const targetId = e.currentTarget.getAttribute('href');

      // Verifica se o link não é apenas '#'
      if (targetId === '#') return;

      // Encontra o elemento alvo pelo ID
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        // Realiza a rolagem suave com offset para compensar o cabeçalho
        window.scrollTo({
          top: targetElement.offsetTop - 80, // Ajuste de 80px para o cabeçalho
          behavior: 'smooth'
        });
      }
    };

    // Adiciona event listeners para todos os links internos
    anchors.forEach(anchor => {
      anchor.addEventListener('click', handleAnchorClick);
    });

    // Cleanup: remove os event listeners quando o componente é desmontado
    return () => {
      anchors.forEach(anchor => {
        anchor.removeEventListener('click', handleAnchorClick);
      });
    };
  }, []);

  return (
    <>
      {/* Configuração do cabeçalho HTML com título e importação de Font Awesome */}
      <Head>
        <title>VendasWoo + EntregasWoo - Sistema Completo para E-commerce e Entregas</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
      </Head>

      {/* Cabeçalho da página com apenas o título */}
      <header>
        <div className="container">
          <div className="header-content">
            <div className="logo">
              <h1>VendasWoo <span>+ EntregasWoo</span></h1>
            </div>
          </div>
        </div>
      </header>

      {/* Seção Hero com chamada principal */}
      <section className="hero">
        <div className="container">
          <h2>Sistema Completo para E-commerce e Entregas</h2>
          <p>Conectamos lojas a entregadores locais para simplificar e agilizar as entregas na sua região.</p>
          <div className="hero-buttons">
            <Link href="#para-lojas" className="btn">Sou Lojista</Link>
            <Link href="#para-entregadores" className="btn btn-accent">Sou Entregador</Link>
            <a href="https://wa.me/552132727548" className="btn btn-outline" target="_blank" rel="noopener noreferrer">Fale no WhatsApp</a>
          </div>
        </div>
      </section>

      {/* Seção Como Funciona com passos para entregadores e lojas */}
      <section className="how-it-works" id="como-funciona">
        <div className="container">
          <div className="section-title">
            <h2>Como Funciona</h2>
            <p>Dois sistemas integrados para atender lojas e entregadores</p>
          </div>
          
          <div className="dual-steps">
            <div className="steps-container">
              <h3 className="steps-title">Para Entregadores</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Cadastro Simplificado</h4>
                  <p>Faça seu cadastro como motorista autônomo MEI com documentação em ordem.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Defina sua Área de Atuação</h4>
                  <p>Informe seu veículo, capacidade de carga e o perímetro onde quer trabalhar.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Conexão com Lojas</h4>
                  <p>Conectamos você às empresas que precisam de entregas na sua região.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Combine Preços e Área</h4>
                  <p>Negocie diretamente com as lojas os valores e detalhes do serviço.</p>
                </div>
              </div>
            </div>
            
            <div className="steps-container">
              <h3 className="steps-title">Para Lojas</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Plataforma Completa</h4>
                  <p>Tenha seu e-commerce com catálogo de produtos, atualização de preços fácil e múltiplas formas de pagamento.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Integração Total</h4>
                  <p>Receba pedidos pelo app, computador e WhatsApp integrados em um único sistema.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Gestão Completa</h4>
                  <p>Controle de estoque, relatórios, emissão de recibos e muito mais.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Entregas Terceirizadas</h4>
                  <p>Use o EntregasWoo para conectar-se a entregadores de bairro e terceirizar suas entregas.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Seção Para Lojas com benefícios */}
      <section id="para-lojas" className="benefits">
        <div className="container">
          <div className="section-title">
            <h2>Para Lojas e Empresas</h2>
            <p>Sistema completo para vendas online e gestão de entregas</p>
          </div>
          <ul className="benefits-list">
            <li>Plataforma online para apresentar seus produtos de forma profissional</li>
            <li>Atualização de preços fácil e intuitiva</li>
            <li>Múltiplas formas de pagamento integradas (PIX, cartão, etc)</li>
            <li>Recebimento de pedidos por app, computador e WhatsApp</li>
            <li>Controle de estoque em tempo real</li>
            <li>Relatórios detalhados de vendas e desempenho</li>
            <li>Emissão de recibos e comprovantes</li>
            <li>App EntregasWoo para terceirizar entregas para motoristas de bairro</li>
            <li>Gestão integrada de pedidos e entregas em um único sistema</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de saber mais sobre o sistema para lojas" className="btn">Quero saber mais</a>
          </div>
        </div>
      </section>

      {/* Seção Para Entregadores com benefícios */}
      <section id="para-entregadores" className="benefits" style={{backgroundColor: 'var(--light-gray)'}}>
        <div className="container">
          <div className="section-title">
            <h2>Para Entregadores</h2>
            <p>Conecte-se com lojas da sua região e aumente sua renda</p>
          </div>
          <ul className="benefits-list">
            <li>Cadastro gratuito para motoristas MEI com documentação regular</li>
            <li>Defina o tipo de veículo, capacidade de carga e área de atuação</li>
            <li>Escolha o perímetro onde quer trabalhar (bairros, regiões)</li>
            <li>Conexão direta com empresas que precisam de entregas na sua área</li>
            <li>Negociação direta de preços e condições de serviço</li>
            <li>Flexibilidade de horários - trabalhe quando quiser</li>
            <li>App simples para gerenciar corridas e ganhos</li>
            <li>Pagamentos rápidos e transparentes</li>
            <li>Construa sua reputação com avaliações das lojas</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de me cadastrar como entregador" className="btn btn-accent">Quero me cadastrar</a>
          </div>
        </div>
      </section>

      {/* Seção de Chamada para Ação (CTA) */}
      <section className="cta">
        <div className="container">
          <h2>Pronto para transformar seu negócio ou aumentar sua renda?</h2>
          <p>Entre em contato e faça um teste grátis dos nossos sistemas</p>
          <a href="https://wa.me/552132727548" className="btn" target="_blank" rel="noopener noreferrer">Fale conosco no WhatsApp</a>
        </div>
      </section>

      {/* Rodapé com links rápidos e informações de contato */}
      <footer id="contato">
        <div className="container">
          <div className="footer-content">
            <div className="footer-column">
              <h3>VendasWoo + EntregasWoo</h3>
              <p>Sistema integrado de e-commerce e gestão de entregas</p>
            </div>
            <div className="footer-column">
              <h3>Links Rápidos</h3>
              <ul>
                <li><Link href="#como-funciona">Como Funciona</Link></li>
                <li><Link href="#para-lojas">Para Lojas</Link></li>
                <li><Link href="#para-entregadores">Para Entregadores</Link></li>
                <li><a href="https://pedidossimples.com.br/vendaswoo/" target="_blank" rel="noopener noreferrer">VendasWoo</a></li>
              </ul>
            </div>
            <div className="footer-column">
              <h3>Contato</h3>
              <ul>
                <li>Email: comercial@abistec.com.br</li>
                <li>WhatsApp: (21) 3272-7548</li>
                <li>Site: <a href="https://pedidossimples.com.br">pedidossimples.com.br</a></li>
              </ul>
            </div>
          </div>
          <div className="copyright">
            <p>&copy; 2023 VendasWoo + EntregasWoo - Abistec Serviços Tecnológicos Ltda</p>
          </div>
        </div>
      </footer>

      {/* Estilos globais usando styled-jsx */}
      <style jsx global>{`
        :root {
          --primary: #3b7b2b;
          --secondary: #5c3b27;
          --accent: #f39c12;
          --light: #fdfaf6;
          --dark: #333;
          --gray: #777;
          --light-gray: #f5f5f5;
        }
        
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
          background-color: var(--light);
          color: var(--dark);
          line-height: 1.6;
        }
        
        .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0 20px;
        }
        
        /* Estilos do Cabeçalho */
        header {
          background-color: white;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          /* Removido o comportamento sticky para fluir com a rolagem */
        }
        
        .header-content {
          display: flex;
          justify-content: center;
          align-items: center;
          padding: 15px 0;
        }
        
        .logo {
          display: flex;
          align-items: center;
        }
        
        .logo h1 {
          color: var(--primary);
          font-size: 1.8rem;
          font-weight: bold;
        }
        
        .logo span {
          color: var(--secondary);
        }
        
        nav ul {
          display: flex;
          list-style: none;
        }
        
        nav li {
          margin-left: 25px;
        }
        
        nav a {
          text-decoration: none;
          color: var(--dark);
          font-weight: 500;
          transition: color 0.3s;
        }
        
        nav a:hover {
          color: var(--primary);
        }
        
        .btn {
          display: inline-block;
          padding: 12px 25px;
          background-color: var(--primary);
          color: white;
          border-radius: 5px;
          text-decoration: none;
          font-weight: 600;
          transition: all 0.3s;
          border: none;
          cursor: pointer;
        }
        
        .btn:hover {
          background-color: #2c5e20;
          transform: translateY(-2px);
        }
        
        .btn-outline {
          background-color: transparent;
          border: 2px solid var(--primary);
          color: var(--primary);
        }
        
        .btn-outline:hover {
          background-color: var(--primary);
          color: white;
        }
        
        .btn-accent {
          background-color: var(--accent);
        }
        
        .btn-accent:hover {
          background-color: #e67e22;
        }
        
        /* Estilos da Seção Hero */
        .hero {
          padding: 80px 0;
          background: linear-gradient(135deg, rgba(59,123,43,0.1) 0%, rgba(92,59,39,0.1) 100%);
          text-align: center;
        }
        
        .hero h2 {
          font-size: 2.5rem;
          margin-bottom: 20px;
          color: var(--secondary);
        }
        
        .hero p {
          font-size: 1.2rem;
          max-width: 800px;
          margin: 0 auto 30px;
          color: var(--gray);
        }
        
        .hero-buttons {
          display: flex;
          justify-content: center;
          gap: 15px;
          margin-top: 30px;
          flex-wrap: wrap;
        }
        
        /* Estilos da Seção Como Funciona */
        .how-it-works {
          padding: 80px 0;
          background-color: var(--light-gray);
        }
        
        .section-title {
          text-align: center;
          margin-bottom: 50px;
        }
        
        .section-title h2 {
          font-size: 2rem;
          color: var(--secondary);
          margin-bottom: 15px;
        }
        
        .section-title p {
          color: var(--gray);
          max-width: 700px;
          margin: 0 auto;
        }
        
        .dual-steps {
          display: flex;
          justify-content: space-between;
          flex-wrap: wrap;
          gap: 40px;
        }
        
        .steps-container {
          flex: 1;
          min-width: 300px;
          background: white;
          border-radius: 10px;
          padding: 30px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        .steps-title {
          text-align: center;
          margin-bottom: 30px;
          color: var(--primary);
          font-size: 1.5rem;
        }
        
        .step {
          display: flex;
          margin-bottom: 25px;
          align-items: flex-start;
        }
        
        .step-number {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background-color: var(--primary);
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          margin-right: 15px;
          flex-shrink: 0;
        }
        
        .step-content {
          flex: 1;
        }
        
        /* Estilos da Seção Benefícios */
        .benefits {
          padding: 80px 0;
          background-color: white;
        }
        
        .benefits-list {
          list-style: none;
          max-width: 800px;
          margin: 0 auto;
        }
        
        .benefits-list li {
          padding: 15px 0;
          border-bottom: 1px solid #eee;
          display: flex;
          align-items: center;
        }
        
        .benefits-list li:before {
          content: "✓";
          color: var(--primary);
          font-weight: bold;
          margin-right: 10px;
          font-size: 1.2rem;
        }
        
        /* Estilos da Seção CTA */
        .cta {
          padding: 80px 0;
          background: linear-gradient(135deg, var(--primary) 0%, #2c5e20 100%);
          color: white;
          text-align: center;
        }
        
        .cta h2 {
          font-size: 2.2rem;
          margin-bottom: 20px;
        }
        
        .cta p {
          max-width: 700px;
          margin: 0 auto 30px;
          font-size: 1.1rem;
        }
        
        .cta .btn {
          background-color: white;
          color: var(--primary);
        }
        
        .cta .btn:hover {
          background-color: #f0f0f0;
        }
        
        /* Estilos do Rodapé */
        footer {
          background-color: var(--secondary);
          color: white;
          padding: 50px 0 20px;
        }
        
        .footer-content {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 30px;
          margin-bottom: 30px;
        }
        
        .footer-column h3 {
          margin-bottom: 20px;
          font-size: 1.2rem;
        }
        
        .footer-column ul {
          list-style: none;
        }
        
        .footer-column li {
          margin-bottom: 10px;
        }
        
        .footer-column a {
          color: #ddd;
          text-decoration: none;
          transition: color 0.3s;
        }
        
        .footer-column a:hover {
          color: white;
        }
        
        .copyright {
          text-align: center;
          padding-top: 20px;
          border-top: 1px solid rgba(255,255,255,0.1);
          font-size: 0.9rem;
          color: #ddd;
        }
        
        /* Estilos Responsivos */
        @media (max-width: 768px) {
          .header-content {
            flex-direction: column;
          }
          
          .hero h2 {
            font-size: 2rem;
          }
          
          .hero-buttons {
            flex-direction: column;
            align-items: center;
          }
          
          .dual-steps {
            flex-direction: column;
          }
        }
      `}</style>
    </>
  );
}


// =========================================
// 8. pages\login.js
// =========================================

// pages/login.js
import { useState, useEffect } from 'react'; // Adicionado useEffect
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE LOGIN
// ==============================================================================
/**
 * Página de login com suporte a autenticação via Google OAuth e email/senha.
 * Inclui modal controlado, redirecionamento baseado em perfil (admin, gerente, entregador)
 * e links para cadastro e recuperação de senha.
 * Aprimoramentos: Validação de formulário, acessibilidade e feedback visual.
 */
export default function Login() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  /**
   * Gerencia dados do formulário, estado de carregamento, erros e visibilidade.
   * Adicionado estado para validação de formulário.
   */
  const [email, setEmail] = useState('');              // Email do usuário
  const [password, setPassword] = useState('');        // Senha do usuário
  const [loading, setLoading] = useState(false);       // Estado de carregamento
  const [error, setError] = useState('');              // Mensagens de erro
  const [showPassword, setShowPassword] = useState(false); // Visibilidade da senha
  const [isModalOpen, setIsModalOpen] = useState(false);  // Controle do modal
  const [formValid, setFormValid] = useState(false);    // Validação do formulário
  const router = useRouter();

  // ============================================================================
  // 2. FUNÇÃO: VALIDAR FORMULÁRIO
  // ============================================================================
  /**
   * Valida email e senha em tempo real, atualizando o estado de validade.
   * Requisitos: Email válido e senha com no mínimo 6 caracteres.
   */
  const validateForm = () => {
    const emailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    const passwordValid = password.length >= 6;
    setFormValid(emailValid && passwordValid);
  };

  useEffect(() => {
    validateForm();
  }, [email, password]);

  // ============================================================================
  // 3. FUNÇÃO: LOGIN COM EMAIL/SENHA
  // ============================================================================
  /**
   * Autentica o usuário com email/senha e redireciona com base no perfil.
   * Inclui validação prévia e tratamento de erros detalhado.
   */
  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    if (!formValid) {
      setError('Por favor, insira um email válido e uma senha com pelo menos 6 caracteres.');
      setLoading(false);
      return;
    }

    try {
      // 3.1. AUTENTICAÇÃO COM SUPABASE
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (authError) throw authError;

      // 3.2. VERIFICAÇÃO DE PERFIL E REDIRECIONAMENTO
      const { data: usuario, error: userError } = await supabase
        .from('usuarios')
        .select('is_admin')
        .eq('uid', authData.user.id)
        .single();
      if (userError) throw userError;

      if (usuario.is_admin) {
        router.push('/admin');
        return;
      }

      const { data: associacoes, error: assocError } = await supabase
        .from('loja_associada')
        .select('funcao')
        .eq('uid_usuario', authData.user.id)
        .eq('status_vinculacao', 'ativo');
      if (assocError) throw new Error('Erro ao verificar permissões: ' + assocError.message);

      if (!associacoes || associacoes.length === 0) {
        alert('Você não possui acesso ativo. Contate o administrador.');
        throw new Error('Usuário sem acesso ativo. Contate o administrador.');
      }

      const primeiraAssociacao = associacoes[0];
      switch (primeiraAssociacao.funcao) {
        case 'gerente':
          router.push('/todos-pedidos');
          break;
        case 'entregador':
          router.push('/pedidos-pendentes');
          break;
        default:
          throw new Error('Função não reconhecida.');
      }
    } catch (error) {
      // 3.3. TRATAMENTO DE ERROS
      setError(error.message.includes('Invalid login credentials')
        ? 'Email ou senha inválidos.'
        : error.message);
      console.error('Erro no login:', error);
    } finally {
      // 3.4. FINALIZAÇÃO
      setLoading(false);
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: LOGIN COM GOOGLE
  // ============================================================================
  /**
   * Inicia o fluxo de login com Google OAuth, redirecionando para completar perfil.
   * Inclui tratamento de erros e feedback visual.
   */
  const handleGoogleLogin = async () => {
    try {
      setLoading(true);
      setError('');
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/perfil`,
        },
      });
      if (error) throw error;
    } catch (error) {
      setError('Erro ao fazer login com Google: ' + error.message);
      console.error('Erro no login Google:', error);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 5.1. SEÇÃO VISUAL: LOGO E TÍTULO */}
        <div className="text-center mb-8">
          <div
            className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center"
            role="img"
            aria-label="Ícone de entrega"
          >
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h1 className="text-3xl font-bold text-white">EntregasWoo</h1>
          <p className="text-purple-200 mt-2">Sistema de Gestão de Entregas</p>
        </div>

        {/* 5.2. CARD PRINCIPAL: CONTAINER DE LOGIN */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h2 className="text-2xl font-bold text-gray-800 text-center mb-6" id="login-title">
            Acessar Sistema
          </h2>

          {/* 5.2.1. EXIBIÇÃO DE ERRO */}
          {error && (
            <div
              className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4"
              role="alert"
            >
              {error}
            </div>
          )}

          {/* 5.2.2. BOTÃO DE LOGIN GOOGLE */}
          <button
            onClick={handleGoogleLogin}
            disabled={loading}
            className="w-full flex items-center justify-center py-3 px-4 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Login com Google"
          >
            {loading ? (
              <span className="flex items-center">
                <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Carregando...
              </span>
            ) : (
              <>
                <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Entrar com Google
              </>
            )}
          </button>

          {/* 5.2.3. ABRE MODAL PARA LOGIN EMAIL/SENHA */}
          <div className="mt-4 text-center">
            <button
              onClick={() => setIsModalOpen(true)}
              className="text-purple-600 hover:text-purple-800 font-medium"
              aria-controls="email-login-modal"
            >
              Ou entre com email e senha
            </button>
          </div>

          {/* 5.2.4. MODAL DE LOGIN EMAIL/SENHA */}
          {isModalOpen && (
            <div
              className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
              role="dialog"
              aria-labelledby="email-login-modal-title"
              aria-modal="true"
            >
              <div className="bg-white rounded-2xl shadow-2xl p-6 w-96">
                <h3
                  id="email-login-modal-title"
                  className="text-xl font-bold text-gray-800 mb-4"
                >
                  Login com Email
                </h3>
                {error && (
                  <div
                    className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4"
                    role="alert"
                  >
                    {error}
                  </div>
                )}
                <form onSubmit={handleLogin} className="space-y-4">
                  <div>
                    <label
                      htmlFor="email-input"
                      className="block text-sm font-medium text-gray-700"
                    >
                      Email
                    </label>
                    <input
                      id="email-input"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
                      required
                      disabled={loading}
                      aria-required="true"
                    />
                  </div>
                  <div className="relative">
                    <label
                      htmlFor="password-input"
                      className="block text-sm font-medium text-gray-700"
                    >
                      Senha
                    </label>
                    <input
                      id="password-input"
                      type={showPassword ? "text" : "password"}
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
                      required
                      disabled={loading}
                      aria-required="true"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                      disabled={loading}
                      aria-label={showPassword ? "Ocultar senha" : "Mostrar senha"}
                    >
                      {showPassword ? (
                        <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                        </svg>
                      ) : (
                        <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                        </svg>
                      )}
                    </button>
                  </div>
                  <button
                    type="submit"
                    disabled={loading || !formValid}
                    className="w-full bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
                    aria-label="Enviar login"
                  >
                    {loading ? (
                      <span className="flex items-center justify-center">
                        <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Entrando...
                      </span>
                    ) : (
                      'Entrar'
                    )}
                  </button>
                </form>
                <button
                  onClick={() => setIsModalOpen(false)}
                  className="mt-4 w-full text-gray-500 hover:text-gray-700"
                  aria-label="Fechar modal"
                >
                  Fechar
                </button>
              </div>
            </div>
          )}

          {/* 5.2.5. LINKS EXTRAS */}
          <div className="mt-6 text-center space-y-3">
            <Link
              href="/cadastro"
              className="text-purple-600 hover:text-purple-800 text-sm font-medium"
              aria-label="Criar nova conta"
            >
              Criar nova conta
            </Link>
            <Link
              href="/recuperar-senha"
              className="text-gray-500 hover:text-gray-700 text-sm"
              aria-label="Recuperar senha"
            >
              Esqueceu sua senha?
            </Link>
          </div>
        </div>

        {/* 5.3. SEÇÃO DE RODAPÉ */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm" aria-label="Copyright 2025">
            © 2025 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 9. pages\orders.js
// =========================================

import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const { data, error } = await supabase.from('pedidos').select('*');
        if (error) throw error;
        setOrders(data || []);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

  if (loading) return <p>Carregando pedidos...</p>;
  if (error) return <p>Erro: {error}</p>;

  return (
    <div>
      <h1>Lista de Pedidos</h1>
      {orders.length === 0 ? (
        <p>Nenhum pedido encontrado.</p>
      ) : (
        <ul>
          {orders.map((order) => (
            <li key={order.id} style={{ marginBottom: '10px' }}>
              <strong>Pedido #{order.id_woo}</strong> - Cliente: {order.nome_cliente} - 
              Total: R${order.total} - Status: {order.status_transporte || 'Pendente'}
              <button
                onClick={() => handleAcceptOrder(order.id)}
                style={{ marginLeft: '10px', padding: '5px 10px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '3px' }}
                disabled={order.status_transporte === 'Entregue'}
              >
                Aceitar
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );

  async function handleAcceptOrder(orderId) {
    const { error } = await supabase
      .from('pedidos')
      .update({ status_transporte: 'Aceito' })
      .eq('id', orderId);
    if (error) {
      setError(`Erro ao aceitar pedido: ${error.message}`);
    } else {
      setOrders(orders.map(order =>
        order.id === orderId ? { ...order, status_transporte: 'Aceito' } : order
      ));
    }
  }
}


// =========================================
// 10. pages\pedidos-aceitos.js
// =========================================

// pages/pedidos-aceitos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { filterPedidosPorUsuario } from '../utils/filterPedidos';
import { OrderModal, WithCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS ACEITOS
// ==============================================================================
export default function PedidosAceitos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]); // Todos os pedidos do banco
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [loadingAcoes, setLoadingAcoes] = useState(false); // Loading para ações
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null); // Pedido para modal
  const [modalAberto, setModalAberto] = useState(false); // Controle do modal
  
  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getPedidosAceitos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS ACEITOS/EM ROTA
  // ============================================================================
  const getPedidosAceitos = async () => {
    try {
      setLoading(true);
      
      // Busca TODOS os pedidos com status aceito ou em rota
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aceito', 'em rota'])
        .order('data', { ascending: false });

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. FILTRAR PEDIDOS POR USUÁRIO
  // ============================================================================
  const pedidosFiltrados = filterPedidosPorUsuario(
    todosPedidos,
    userRole, 
    userLojas
  );

  // ============================================================================
  // 6. FUNÇÕES DE AÇÃO: SAIR PARA ENTREGA / ENTREGAR / CANCELAR
  // ============================================================================
  const handleSairEntrega = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'em rota' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Atualiza lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, status_transporte: 'em rota' } : p
      ));
      
    } catch (error) {
      console.error('Erro ao atualizar status:', error);
      alert('Erro ao sair para entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleEntregar = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'entregue' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista (pedido entregue vai para outra página)
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Pedido marcado como entregue com sucesso!');
      
    } catch (error) {
      console.error('Erro ao entregar pedido:', error);
      alert('Erro ao marcar como entregue.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleCancelar = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja cancelar esta entrega?')) return;
    
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'cancelado' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Entrega cancelada com sucesso.');
      
    } catch (error) {
      console.error('Erro ao cancelar pedido:', error);
      alert('Erro ao cancelar entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  // ============================================================================
  // 7. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 8. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Carregando perfil...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">✅ Pedidos Aceitos</h1>

      {/* ESTADO DE CARREGAMENTO */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        /* LISTA DE PEDIDOS */
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido aceito encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>

{/* FRETE OFERECIDO - ADICIONADO */}
{pedido.frete_oferecido && (
  <p className="text-sm text-green-600 font-medium mt-1">
    💰 Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
  </p>
)}

<p className="text-sm">
  <span className="font-medium">Status:</span> 
  <span className={pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-green-600'}>
    {pedido.status_transporte === 'em rota' ? ' 🚚 Em Rota' : ' ✅ Aceito'}
  </span>
</p>
                  </div>

                  {/* BOTÕES DE AÇÃO */}
                  <div className="flex flex-col gap-2 ml-4">
                    {pedido.status_transporte === 'aceito' && (
                      <button 
                        onClick={() => handleSairEntrega(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-orange-500 text-white px-4 py-2 rounded text-sm hover:bg-orange-600 transition-colors"
                      >
                        🚚 Sair para Entrega
                      </button>
                    )}
                    
                    {pedido.status_transporte === 'em rota' && (
                      <button 
                        onClick={() => handleEntregar(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-green-500 text-white px-4 py-2 rounded text-sm hover:bg-green-600 transition-colors"
                      >
                        ✅ Entregar
                      </button>
                    )}
                    
                    <button 
                      onClick={() => handleCancelar(pedido.id)}
                      disabled={loadingAcoes}
                      className="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600 transition-colors"
                    >
                      ❌ Cancelar
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 11. pages\pedidos-entregues.js
// =========================================

// pages/pedidos-entregues.js
import PedidosEntregues from '../components/PedidosEntregues';

/**
 * Página principal de Pedidos Entregues
 * Delega a renderização para o componente PedidosEntregues
 * que decide qual versão mostrar (Admin, Gerente ou Entregador)
 */
export default function PedidosEntreguesPage() {
  return <PedidosEntregues />;
}


// =========================================
// 12. pages\pedidos-pendentes.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { OrderModal, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS PENDENTES
// ==============================================================================
export default function PedidosPendentes() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [pedidos, setPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [loadingAceitar, setLoadingAceitar] = useState(false);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    checkAuthAndGetPedidos();
  }, []);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }
      await getPedidosPendentes();
    } catch (error) {
      console.error('Erro na autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS PENDENTES
  // ============================================================================
  const getPedidosPendentes = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aguardando', 'revertido'])
        .order('data', { ascending: false });

      if (error) throw error;
      setPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos.');
    } finally {
      setLoading(false);
    }
  };

// ============================================================================
// 5. FUNÇÃO: ACEITAR PEDIDO (CORRIGIDA - ESTRUTURA CORRETA)
// ============================================================================
const handleAceitarPedido = async (pedidoId) => {
  try {
    setLoadingAceitar(true);
    
    // 1. Verificar se usuário está autenticado
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      alert('Sessão expirada. Faça login novamente.');
      router.push('/login');
      return;
    }

    // 2. ✅ BUSCAR TELEFONE DO USUÁRIO na tabela usuarios
    const { data: usuarioData, error: usuarioError } = await supabase
      .from('usuarios')
      .select('telefone, nome_completo')
      .eq('uid', user.id)
      .single();

    if (usuarioError) {
      console.warn('Erro ao buscar telefone do usuário:', usuarioError);
      // Não impede a continuação - usamos valores padrão
    }

    // 3. ✅ BUSCAR DADOS DA LOJA ASSOCIADA
    const { data: entregadorData, error: entregadorError } = await supabase
      .from('loja_associada')
      .select('nome_completo, loja_telefone, loja_nome')
      .eq('uid_usuario', user.id)
      .limit(1);

    if (entregadorError) {
      console.warn('Erro ao buscar dados da loja:', entregadorError);
      // Não impede a continuação
    }

    const entregador = entregadorData?.[0];
    const usuario = usuarioData;

    // 4. ✅ ATUALIZAR PEDIDO COM DADOS CORRETOS
    const { error: updateError } = await supabase
      .from('pedidos')
      .update({
        status_transporte: 'aceito',
        aceito_por_uid: user.id,
        aceito_por_nome: entregador?.nome_completo || usuario?.nome_completo || user.email,
        aceito_por_email: user.email,
        aceito_por_telefone: usuario?.telefone || entregador?.loja_telefone || 'Não informado',
        ultimo_status: new Date().toISOString()
      })
      .eq('id', pedidoId);

    if (updateError) {
      throw new Error('Erro ao atualizar pedido: ' + updateError.message);
    }

    // 5. Atualizar lista localmente
    setPedidos(pedidos.filter(pedido => pedido.id !== pedidoId));
    alert('✅ Pedido aceito com sucesso!');

  } catch (error) {
    console.error('Erro ao aceitar pedido:', error);
    alert(`❌ ${error.message}`);
  } finally {
    setLoadingAceitar(false);
  }
};

  // ============================================================================
  // 6. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 7. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📋 Pedidos Pendentes</h1>
      
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidos.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido pendente encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>
                    {pedido.frete_oferecido && (
                      <p className="text-sm text-green-600 font-medium mt-1">
                        💰 Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
                      </p>
                    )}
                  </div>

                  <button 
                    onClick={() => handleAceitarPedido(pedido.id)}
                    disabled={loadingAceitar}
                    className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 
                             transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed
                             ml-4 min-w-[80px]"
                  >
                    {loadingAceitar ? '⏳' : '✅'} Aceitar
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithoutCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 13. pages\perfil.js
// =========================================

// pages/perfil.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import EditUsuarioModal from '../components/EditUsuarioModal';
import EditLojaModal from '../components/EditLojaModal';

// ==============================================================================
// PÁGINA: PERFIL DO USUÁRIO
// ==============================================================================
export default function Perfil() {
  const router = useRouter();
  const { userProfile, userRole, userLojas, loading, error } = useUserProfile();
  const [modalUsuarioOpen, setModalUsuarioOpen] = useState(false);
  const [modalLojaOpen, setModalLojaOpen] = useState(false);
  const [lojaSelecionada, setLojaSelecionada] = useState(null);
  const [lojasAtualizadas, setLojasAtualizadas] = useState([]);

  // ============================================================================
  // 1. MAPEAMENTO DOS NOMES CORRETOS DAS LOJAS
  // ============================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ============================================================================
  // 2. ATUALIZAR OS NOMES DAS LOJAS COM OS VALORES CORRETOS
  // ============================================================================
  useEffect(() => {
    if (userLojas && userLojas.length > 0) {
      const lojasCorrigidas = userLojas.map(loja => ({
        ...loja,
        // Usa o nome correto do mapeamento, mantendo o original como fallback
        loja_nome: mapeamentoLojas[loja.id_loja] || loja.loja_nome
      }));
      setLojasAtualizadas(lojasCorrigidas);
    }
  }, [userLojas]);

  // ============================================================================
  // 3. REDIRECIONAR SE NÃO ESTIVER LOGADO
  // ============================================================================
  if (!loading && !userProfile) {
    router.push('/login');
    return null;
  }

  // ============================================================================
  // 4. ABRIR MODAL DE EDIÇÃO DA LOJA
  // ============================================================================
  const abrirModalLoja = (loja) => {
    setLojaSelecionada(loja);
    setModalLojaOpen(true);
  };

  // ============================================================================
  // 5. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      
      {/* CABEÇALHO */}
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-purple-800 mb-2">👤 Meu Perfil</h1>
        <p className="text-gray-600">Gerencie suas informações pessoais e de entrega</p>
      </div>

      {loading ? (
        <div className="text-center">
          <p className="text-purple-600">Carregando...</p>
        </div>
      ) : error ? (
        <div className="bg-red-100 border border-red-400 text-red-700 p-4 rounded">
          <p>Erro: {error}</p>
        </div>
      ) : (
        <div className="grid md:grid-cols-2 gap-8">
          
          {/* ================================================================== */}
          {/* CARD: DADOS DO USUÁRIO */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">📋 Dados Pessoais</h2>
            
            <div className="space-y-3 mb-4">
              {userProfile.foto && (
                <div className="text-center">
                  <img
                    src={userProfile.foto}
                    alt="Foto do perfil"
                    className="w-20 h-20 rounded-full mx-auto border-2 border-purple-600"
                  />
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome Completo</label>
                <p className="text-gray-800 font-medium">{userProfile.nome_completo || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome de Usuário</label>
                <p className="text-gray-800">{userProfile.nome_usuario || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Email</label>
                <p className="text-gray-800">{userProfile.email}</p>
              </div>
              
              {userProfile.telefone && (
                <div>
                  <label className="block text-sm font-medium text-gray-600">Telefone</label>
                  <p className="text-gray-800">{userProfile.telefone}</p>
                </div>
              )}
            </div>

            <button
              onClick={() => setModalUsuarioOpen(true)}
              className="w-full bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700 transition-colors"
            >
              ✏️ Editar Dados Pessoais
            </button>
          </div>

          {/* ================================================================== */}
          {/* CARD: LOJAS ASSOCIADAS */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            {/* Título dinâmico baseado na função */}
            <h2 className="text-xl font-semibold text-purple-800 mb-4">
              {userRole === 'entregador' ? '🏪 Lojas Associadas' : '👑 Sua Gerência'}
            </h2>
            
            {lojasAtualizadas.length === 0 ? (
              <p className="text-gray-600 text-center py-4">Nenhuma loja associada</p>
            ) : (
              <div className="space-y-3">
                {lojasAtualizadas.map((loja) => (
                  <div key={loja.id} className="border rounded-lg p-3 hover:bg-gray-50">
                    <h3 className="font-semibold text-gray-800">{loja.loja_nome}</h3>
                    <p className="text-sm text-gray-600">ID: {loja.id_loja}</p>
                    <p className="text-sm text-purple-600">Função: {loja.funcao}</p>
                    
                    {/* BLOCO: Mostrar campos de ENTREGADOR apenas se a função na LOJA for 'entregador' */}
                    {loja.funcao === 'entregador' && (
                      <div className="mt-2 text-sm text-gray-700">
                        <p>🚗 Veículo: {loja.veiculo || 'Não informado'}</p>
                        <p>📦 Carga máxima: {loja.carga_maxima || '0'} kg</p>
                        <p>📍 Perímetro: {loja.perimetro_entrega || 'Não definido'}</p>
                      </div>
                    )}

                    {/* BLOCO: Mostrar mensagem especial para GERENTES */}
                    {loja.funcao === 'gerente' && (
                      <div className="mt-2">
                        <p className="text-sm text-green-600 font-medium">👑 Você é o gerente desta loja.</p>
                        <p className="text-xs text-gray-500">Para editar dados da loja, contate um administrador.</p>
                      </div>
                    )}

                    {/* BOTÃO: Mostrar botão de edição APENAS para lojas onde o usuário é ENTREGADOR */}
                    {loja.funcao === 'entregador' && (
                      <button
                        onClick={() => abrirModalLoja(loja)}
                        className="mt-2 w-full bg-blue-600 text-white py-1 px-3 rounded text-sm hover:bg-blue-700 transition-colors"
                      >
                        ✏️ Editar Dados de Entrega
                      </button>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* ====================================================================== */}
      {/* MODAIS */}
      {/* ====================================================================== */}
      <EditUsuarioModal
        isOpen={modalUsuarioOpen}
        onClose={() => setModalUsuarioOpen(false)}
        userProfile={userProfile}
      />
      
      {lojaSelecionada && (
        <EditLojaModal
          isOpen={modalLojaOpen}
          onClose={() => setModalLojaOpen(false)}
          loja={lojaSelecionada}
        />
      )}
    </div>
  );
}


// =========================================
// 14. pages\recuperar-senha.js
// =========================================

import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';

export default function RecuperarSenha() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/atualizar-senha`,
      });

      if (error) throw error;

      setSuccess('Email de recuperação enviado! Verifique sua caixa de entrada.');

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Recuperar Senha</p>
        </div>

        {/* Card de Recuperação */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Recuperar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Enviando...' : 'Enviar Email de Recuperação'}
            </button>
          </form>

          {/* Links */}
          <div className="mt-6 text-center space-y-3">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Voltar para o login
            </Link>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2024 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
RecuperarSenha.noLayout = true;


// =========================================
// 15. pages\relatorios.js
// =========================================

// pages/relatorios.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE RELATÓRIOS
// ============================================================================
export default function Relatorios() {
  // ==========================================================================
  // 1. ESTADOS E HOOKS
  // ==========================================================================
  const { userRole, userLojas, userProfile, loading: userLoading } = useUserProfile();
  const [loading, setLoading] = useState(true);
  const [dadosRelatorios, setDadosRelatorios] = useState(null);
  const [periodo, setPeriodo] = useState('mes'); // dia, semana, mes, ano
  const [dadosTempoReal, setDadosTempoReal] = useState([]); // Dados do dia atual

  // ==========================================================================
  // 2. MAPEAMENTO DOS NOMES DAS LOJAS
  // ==========================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ==========================================================================
  // 3. FUNÇÃO PARA CORRIGIR NOME DA LOJA
  // ==========================================================================
  const corrigirNomeLoja = (idLoja, nomeOriginal) => {
    return mapeamentoLojas[idLoja] || nomeOriginal;
  };

  // ==========================================================================
  // 4. EFFECT PRINCIPAL - CARREGAR DADOS
  // ==========================================================================
  useEffect(() => {
    if (!userLoading) {
      carregarRelatorios();
      carregarDadosTempoReal(); // Dados do dia atual em tempo real
    }
  }, [userLoading, periodo]);

// ==========================================================================
// 5. CARREGAR DADOS EM TEMPO REAL (HOJE) - CORRIGIDO
// ==========================================================================
const carregarDadosTempoReal = async () => {
  try {
    // Data de hoje no formato YYYY-MM-DD
    const hoje = new Date().toISOString().split('T')[0];
    
    let query = supabase
      .from('pedidos')
      .select('*')
      .eq('status_transporte', 'entregue')
      .gte('ultimo_status', `${hoje}T00:00:00`)  // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
      .lte('ultimo_status', `${hoje}T23:59:59`); // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
    
    // Aplicar filtros por perfil
    if (userRole === 'gerente' && userLojas.length > 0) {
      query = query.eq('id_loja', userLojas[0].id_loja);
    } else if (userRole === 'entregador') {
      query = query.eq('aceito_por_uid', userProfile?.uid); // ✅ CORRIGIDO: aceito_por_uid em vez de aceito_por
    }
    
    const { data, error } = await query;
    
    if (error) throw error;
    
    // Processar dados para exibição
    const processados = data.map(pedido => ({
      id: pedido.id,
      pedido: pedido.id_loja_woo,
      cliente: pedido.nome_cliente,
      loja: corrigirNomeLoja(pedido.id_loja, pedido.loja_nome),
      entregador: pedido.aceito_por_nome,
      valor: pedido.frete_pago || 0,
      data: pedido.ultimo_status // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
    }));
    
    setDadosTempoReal(processados);
  } catch (error) {
    console.error('Erro ao carregar dados em tempo real:', error);
  }
};

  // ==========================================================================
  // 6. CARREGAR RELATÓRIOS PRINCIPAIS (CUMULATIVOS)
  // ==========================================================================
  const carregarRelatorios = async () => {
    try {
      setLoading(true);
      
      let dados = null;

      // LÓGICA POR TIPO DE USUÁRIO
      if (userRole === 'admin') {
        dados = await carregarRelatoriosAdmin();
      } else if (userRole === 'gerente') {
        dados = await carregarRelatoriosGerente();
      } else if (userRole === 'entregador') {
        dados = await carregarRelatoriosEntregador();
      }

      setDadosRelatorios(dados);
      
    } catch (error) {
      console.error('Erro ao carregar relatórios:', error);
    } finally {
      setLoading(false);
    }
  };

  // ==========================================================================
  // 7. RELATÓRIOS PARA ADMIN - TODAS AS LOJAS
  // ==========================================================================
  const carregarRelatoriosAdmin = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado,
        usuarios:uid_usuario(nome_completo, email)
      `)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador');

    if (error) throw error;

    // Aplicar correção dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const totalEntregadores = new Set(lojasCorrigidas.map(item => item.uid_usuario)).size;
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'admin',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      totalEntregadores,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // ==========================================================================
  // 8. RELATÓRIOS PARA GERENTE - APENAS SUA LOJA
  // ==========================================================================
  const carregarRelatoriosGerente = async () => {
    if (!userLojas || userLojas.length === 0) return null;

    const idLoja = userLojas[0].id_loja;
    const nomeLojaCorrigido = corrigirNomeLoja(idLoja, userLojas[0].loja_nome);

    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        nome_completo,
        email_usuario,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado,
        veiculo
      `)
      .eq('id_loja', idLoja)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador')
      .order('mes_entregue', { ascending: false });

    if (error) throw error;

    const totalEntregas = data.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = data.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'gerente',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      totalEntregadores: data.length,
      entregadores: data,
      loja: nomeLojaCorrigido,
      periodo
    };
  };

  // ==========================================================================
  // 9. RELATÓRIOS PARA ENTREGADOR - SEUS DADOS
  // ==========================================================================
  const carregarRelatoriosEntregador = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado
      `)
      .eq('uid_usuario', userProfile?.uid)
      .eq('status_vinculacao', 'ativo');

    if (error) throw error;

    // Aplicar correção dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'entregador',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // ==========================================================================
  // 10. CALCULAR TOTAL DE FRETE DOS DADOS EM TEMPO REAL
  // ==========================================================================
  const calcularTotalFreteHoje = () => {
    return dadosTempoReal.reduce((total, pedido) => total + (pedido.valor || 0), 0);
  };

  // ==========================================================================
  // 11. COMPONENTE DE CARREGAMENTO
  // ==========================================================================
  if (userLoading || loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        <span className="ml-3">Carregando relatórios...</span>
      </div>
    );
  }

  // ==========================================================================
  // 12. RENDERIZAÇÃO PRINCIPAL
  // ==========================================================================
  return (
    <RouteGuard requiredRole="entregador">
      <div className="container mx-auto px-4 py-8">
        {/* CABEÇALHO E FILTROS */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
          <h1 className="text-3xl font-bold text-purple-800 mb-4 md:mb-0">
            📊 Relatórios - {userRole?.toUpperCase()}
          </h1>
          
          <select
            value={periodo}
            onChange={(e) => setPeriodo(e.target.value)}
            className="bg-white border border-gray-300 rounded-lg px-4 py-2"
          >
            <option value="dia">Hoje</option>
            <option value="semana">Esta Semana</option>
            <option value="mes">Este Mês</option>
            <option value="ano">Este Ano</option>
          </select>
        </div>

        {/* SEÇÃO DE DADOS EM TEMPO REAL (HOJE) */}
        <div className="bg-blue-50 p-6 rounded-lg shadow-md mb-8">
          <h2 className="text-xl font-semibold mb-4 text-blue-800">
            🕒 Entregas de Hoje (Tempo Real)
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-blue-600 mb-1">
                {dadosTempoReal.length}
              </div>
              <div className="text-sm text-gray-600">Entregas Hoje</div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-green-600 mb-1">
                R$ {calcularTotalFreteHoje().toFixed(2)}
              </div>
              <div className="text-sm text-gray-600">Total em Fretes</div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-purple-600 mb-1">
                {new Date().toLocaleDateString('pt-BR')}
              </div>
              <div className="text-sm text-gray-600">Data</div>
            </div>
          </div>
          
          {/* LISTA DE ENTREGAS DO DIA */}
          {dadosTempoReal.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white rounded-lg">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Pedido</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Cliente</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Loja</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Valor</th>
                  </tr>
                </thead>
                <tbody>
                  {dadosTempoReal.map((pedido, index) => (
                    <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                      <td className="p-3 text-sm">{pedido.pedido}</td>
                      <td className="p-3 text-sm">{pedido.cliente}</td>
                      <td className="p-3 text-sm">{pedido.loja}</td>
                      <td className="p-3 text-sm font-medium">R$ {pedido.valor.toFixed(2)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p className="text-gray-500 text-center py-4">Nenhuma entrega registrada hoje</p>
          )}
        </div>

        {/* ESTATÍSTICAS CUMULATIVAS */}
        <div className="bg-white p-6 rounded-lg shadow-md mb-8">
          <h2 className="text-xl font-semibold mb-4">
            {periodo === 'dia' ? 'Estatísticas de Hoje' : 
             periodo === 'semana' ? 'Estatísticas da Semana' :
             periodo === 'mes' ? 'Estatísticas do Mês' : 'Estatísticas do Ano'}
          </h2>

          {/* CARDS DE ESTATÍSTICAS */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-green-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">
                {dadosRelatorios?.totalEntregas || 0}
              </div>
              <div className="text-gray-600">Total de Entregas</div>
            </div>
            
            <div className="bg-red-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-red-600 mb-2">
                {dadosRelatorios?.totalCancelamentos || 0}
              </div>
              <div className="text-gray-600">Cancelamentos</div>
            </div>
            
            <div className="bg-blue-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-blue-600 mb-2">
                {dadosRelatorios?.taxaSucesso || 0}%
              </div>
              <div className="text-gray-600">Taxa de Sucesso</div>
            </div>
            
            {userRole !== 'entregador' && (
              <div className="bg-purple-50 p-6 rounded-lg shadow-sm text-center">
                <div className="text-3xl font-bold text-purple-600 mb-2">
                  {dadosRelatorios?.totalEntregadores || 0}
                </div>
                <div className="text-gray-600">Entregadores</div>
              </div>
            )}
          </div>

          {/* DETALHES ESPECÍFICOS POR TIPO DE USUÁRIO */}
          <h3 className="text-lg font-medium mb-4">
            {userRole === 'admin' && '🏢 Desempenho por Loja'}
            {userRole === 'gerente' && `👥 Desempenho por Entregador - ${dadosRelatorios?.loja}`}
            {userRole === 'entregador' && '🏪 Meu Desempenho por Loja'}
          </h3>

          {userRole === 'admin' && dadosRelatorios?.lojas && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {dadosRelatorios.lojas.map((loja, index) => {
                const entregas = loja[`${periodo}_entregue`] || 0;
                const cancelamentos = loja[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{loja.loja_nome}</h4>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                      <div>
                        <span className="font-semibold">Entregadores:</span> {loja.usuarios ? 1 : 0}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {userRole === 'gerente' && dadosRelatorios?.entregadores && (
            <div className="space-y-4">
              {dadosRelatorios.entregadores.map((entregador, index) => {
                const entregas = entregador[`${periodo}_entregue`] || 0;
                const cancelamentos = entregador[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{entregador.nome_completo}</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                      <div>
                        <span className="font-semibold">Veículo:</span> {entregador.veiculo}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {userRole === 'entregador' && dadosRelatorios?.lojas && (
            <div className="space-y-4">
              {dadosRelatorios.lojas.map((loja, index) => {
                const entregas = loja[`${periodo}_entregue`] || 0;
                const cancelamentos = loja[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{loja.loja_nome}</h4>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}


// =========================================
// 16. pages\todos-pedidos.js
// =========================================

// pages/todos-pedidos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { OrderModal, WithCourier, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - TODOS OS PEDIDOS
// ==============================================================================
export default function TodosPedidos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  
  // Estados para filtros
  const [filtroStatus, setFiltroStatus] = useState('');
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [editandoFrete, setEditandoFrete] = useState(null);
  const [valorFrete, setValorFrete] = useState('');

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 4. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getTodosPedidos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: BUSCAR TODOS OS PEDIDOS
  // ============================================================================
  const getTodosPedidos = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('pedidos')
        .select('*')
        .order('data', { ascending: false });

      // Se for gerente, filtrar apenas pela sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: FILTRAR PEDIDOS
  // ============================================================================
  const pedidosFiltrados = todosPedidos.filter(pedido => {
    // Filtro por status
    if (filtroStatus && pedido.status_transporte !== filtroStatus) {
      return false;
    }
    
    // Filtro por entregador
    if (filtroEntregador && pedido.aceito_por_nome !== filtroEntregador) {
      return false;
    }
    
    // Filtro por loja (apenas para admin)
    if (userRole === 'admin' && filtroLoja && pedido.id_loja !== filtroLoja) {
      return false;
    }
    
    return true;
  });

  // ============================================================================
  // 7. FUNÇÃO: REVERTER PEDIDO (BOTÃO GERENTE/ADMIN)
  // ============================================================================
  const handleReverterPedido = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja reverter este pedido?')) return;
    
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { 
          ...p, 
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null
        } : p
      ));
      
      alert('✅ Pedido revertido com sucesso!');
    } catch (error) {
      console.error('Erro ao reverter pedido:', error);
      alert('❌ Erro ao reverter pedido.');
    }
  };

  // ============================================================================
  // 8. FUNÇÃO: EDITAR FRETE OFERECIDO
  // ============================================================================
  const handleEditarFrete = (pedido, valor) => {
    setEditandoFrete(pedido.id);
    setValorFrete(valor || '');
  };

  const handleSalvarFrete = async (pedidoId) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ 
          frete_oferecido: parseFloat(valorFrete) || null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, frete_oferecido: parseFloat(valorFrete) || null } : p
      ));
      
      setEditandoFrete(null);
      alert('✅ Frete atualizado com sucesso!');
    } catch (error) {
      console.error('Erro ao atualizar frete:', error);
      alert('❌ Erro ao atualizar frete.');
    }
  };

  // ============================================================================
  // 9. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 10. DADOS PARA FILTROS
  // ============================================================================
  const statusUnicos = [...new Set(todosPedidos.map(p => p.status_transporte))].filter(Boolean);
  const entregadoresUnicos = [...new Set(todosPedidos.map(p => p.aceito_por_nome))].filter(Boolean);
  const lojasUnicas = [...new Set(todosPedidos.map(p => p.id_loja))].filter(Boolean);

  // ============================================================================
  // 11. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📊 Todos os Pedidos</h1>

      {/* FILTROS */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Filtros</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Filtro Status */}
          <div>
            <label className="block text-sm font-medium mb-1">Status</label>
            <select
              value={filtroStatus}
              onChange={(e) => setFiltroStatus(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os status</option>
              {statusUnicos.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>

          {/* Filtro Entregador */}
          <div>
            <label className="block text-sm font-medium mb-1">Entregador</label>
            <select
              value={filtroEntregador}
              onChange={(e) => setFiltroEntregador(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os entregadores</option>
              {entregadoresUnicos.map(entregador => (
                <option key={entregador} value={entregador}>{entregador}</option>
              ))}
            </select>
          </div>

          {/* Filtro Loja (apenas admin) */}
          {userRole === 'admin' && (
            <div>
              <label className="block text-sm font-medium mb-1">Loja</label>
              <select
                value={filtroLoja}
                onChange={(e) => setFiltroLoja(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded"
              >
                <option value="">Todas as lojas</option>
                {lojasUnicas.map(loja => (
                  <option key={loja} value={loja}>{loja}</option>
                ))}
              </select>
            </div>
          )}
        </div>
      </div>

      {/* LISTA DE PEDIDOS */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-start justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Status:</span> 
                      <span className={`ml-1 ${
                        pedido.status_transporte === 'entregue' ? 'text-green-600' :
                        pedido.status_transporte === 'cancelado' ? 'text-red-600' :
                        pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-blue-600'
                      }`}>
                        {pedido.status_transporte}
                      </span>
                    </p>
                    
                    {pedido.aceito_por_nome && (
                      <p className="text-sm"><span className="font-medium">Entregador:</span> {pedido.aceito_por_nome}</p>
                    )}

                    {/* EDIÇÃO DE FRETE */}
                    <div className="mt-2">
                      <span className="text-sm font-medium">Frete oferecido: </span>
                      {editandoFrete === pedido.id ? (
                        <div className="flex items-center gap-2 mt-1">
                          <input
                            type="number"
                            step="0.01"
                            value={valorFrete}
                            onChange={(e) => setValorFrete(e.target.value)}
                            className="w-20 p-1 border border-gray-300 rounded"
                            placeholder="0.00"
                          />
                          <button
                            onClick={() => handleSalvarFrete(pedido.id)}
                            className="bg-green-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ✅
                          </button>
                          <button
                            onClick={() => setEditandoFrete(null)}
                            className="bg-gray-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ❌
                          </button>
                        </div>
                      ) : (
                        <span className="text-green-600">
                          R$ {pedido.frete_oferecido?.toFixed(2) || '0.00'} 
                          <button
                            onClick={() => handleEditarFrete(pedido, pedido.frete_oferecido)}
                            className="ml-2 text-blue-600 text-sm"
                          >
                            ✏️
                          </button>
                        </span>
                      )}
                    </div>
                  </div>

                  {/* BOTÕES DE AÇÃO (GERENTE/ADMIN) */}
                  <div className="flex flex-col gap-2 ml-4">
                    {/* BOTÃO REVERTER (para pedidos aceitos/em rota) */}
                    {['aceito', 'em rota'].includes(pedido.status_transporte) && (
                      <button 
                        onClick={() => handleReverterPedido(pedido.id)}
                        className="bg-yellow-500 text-white px-4 py-2 rounded text-sm hover:bg-yellow-600"
                      >
                        ↩️ Reverter
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        {pedidoSelecionado?.aceito_por_nome ? (
          <WithCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        ) : (
          <WithoutCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        )}
      </OrderModal>
    </div>
  );
}


// =========================================
// 1. public\favicon.ico
// =========================================

 



// =========================================
// 2. public\manifest.json
// =========================================

 {
  "name": "EntregasWoo - Sistema de Gestão",
  "short_name": "EntregasWoo",
  "description": "Sistema de gestão de entregas para WooCommerce",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#000000",
  "icons": [
    {
      "src": "/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}



// =========================================
// 1. styles\globals.css
// =========================================

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Estilos globais para WooCommerce */
:root {
  --woo-purple: #7f54b3;
  --woo-purple-dark: #6b3fa0;
  --woo-purple-light: #f0e6ff;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  margin: 0;
  padding: 0;
}

/* Cabeçalho fixo */
.sticky-header {
  position: sticky;
  top: 0;
  z-index: 50;
  background: white;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  border-bottom: 2px solid #e9d5ff;
}


// =========================================
// 1. utils\filterPedidos.js
// =========================================

// utils/filterPedidos.js
export const filterPedidosPorUsuario = (pedidos, userRole, userLojas) => {
  if (userRole === 'admin') {
    // Admin vê TUDO
    return pedidos;
  }

  if (userRole === 'gerente' && userLojas.length === 1) {
    // Gerente vê apenas sua loja
    return pedidos.filter(pedido => pedido.id_loja === userLojas[0].id_loja);
  }

  if (userRole === 'entregador' && userLojas.length > 0) {
    // Entregador vê pedidos de todas as suas lojas
    const lojasIds = userLojas.map(loja => loja.id_loja);
    return pedidos.filter(pedido => lojasIds.includes(pedido.id_loja));
  }

  // Visitante ou erro não vê nada
  return [];
};


// =========================================
// 2. utils\formatters.js
// =========================================

 



// =========================================
// 3. utils\pdfUtils.js
// =========================================

// utils/pdfUtils.js
import { jsPDF } from 'jspdf';

// ==============================================================================
// FUNÇÕES UTILITÁRIAS PARA GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
export const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
export const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};


// =========================================
// 1. serviceWorker.js
// =========================================

 




// =========================================
// ÁRVORE DE DIRETÓRIOS
// =========================================
📦src/
📦components/
  📦components/Filters/
    1 📜components\Filters\CourierFilter.js
    2 📜components\Filters\StatusFilter.js
  📦components/OrderModal/
    1 📜components\OrderModal\index.js
    2 📜components\OrderModal\OrderModal.js
    3 📜components\OrderModal\WithCourier.js
    4 📜components\OrderModal\WithoutCourier.js
  1 📜components\DeliveryStatus.js
  2 📜components\EditLojaModal.js
  3 📜components\EditProfileModal.js
  4 📜components\EditUsuarioModal.js
  5 📜components\Header.js
  6 📜components\Layout.js
  7 📜components\MobileMenu.js
  8 📜components\Notification.js
  9 📜components\OrderCard.js
  10 📜components\Pagination.js
  11 📜components\PedidosEntregues.js
  12 📜components\PedidosEntreguesAdmin.js
  13 📜components\PedidosEntreguesEntregador.js
  14 📜components\PedidosEntreguesGerente.js
  15 📜components\RouteGuard.js
  16 📜components\Sidebar.js
  17 📜components\UserProfile.js
📦hooks/
  1 📜hooks\useOrders.js
  2 📜hooks\useRealtimePedidos.js
  3 📜hooks\useUserProfile.js
📦lib/
  1 📜lib\firebase.js
  2 📜lib\supabase.js
  3 📜lib\wooCommerce.js
📦pages/
  1 📜pages\_app.js
  2 📜pages\_document.js
  3 📜pages\admin.js
  4 📜pages\atualizar-senha.js
  5 📜pages\cadastro.js
  6 📜pages\gestao-entregadores.js
  7 📜pages\index.js
  8 📜pages\login.js
  9 📜pages\orders.js
  10 📜pages\pedidos-aceitos.js
  11 📜pages\pedidos-entregues.js
  12 📜pages\pedidos-pendentes.js
  13 📜pages\perfil.js
  14 📜pages\recuperar-senha.js
  15 📜pages\relatorios.js
  16 📜pages\todos-pedidos.js
📦public/
  1 📜public\favicon.ico
  2 📜public\manifest.json
📦styles/
  1 📜styles\globals.css
📦utils/
  1 📜utils\filterPedidos.js
  2 📜utils\formatters.js
  3 📜utils\pdfUtils.js
1 📜serviceWorker.js



// =========================================
// 7. hooks.txt
// =========================================

===== useRealtimePedidos.js =====
// hooks/useRealtimePedidos.js
import { useEffect } from 'react';
import { supabase } from '../lib/supabase';

export const useRealtimePedidos = (callback) => {
  useEffect(() => {
    const subscription = supabase
      .channel('pedidos-realtime')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'pedidos' 
        }, 
        (payload) => {
          callback(payload);
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, [callback]);
};

// Como usar em uma página:
const [pedidos, setPedidos] = useState([]);

useRealtimePedidos((payload) => {
  // Atualizar a lista de pedidos em tempo real
  if (payload.eventType === 'INSERT') {
    setPedidos(prev => [payload.new, ...prev]);
  } else if (payload.eventType === 'UPDATE') {
    setPedidos(prev => prev.map(p => 
      p.id === payload.new.id ? payload.new : p
    ));
  } else if (payload.eventType === 'DELETE') {
    setPedidos(prev => prev.filter(p => p.id !== payload.old.id));
  }
});


===== useUserProfile.js =====
// hooks/useUserProfile.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// HOOK PERSONALIZADO: useUserProfile
// ==============================================================================
/**
 * Hook para gerenciar dados do usuário autenticado, incluindo perfil, função (role) e lojas associadas.
 * Escuta mudanças de autenticação em tempo real e atualiza estados automaticamente.
 * Retorna estados e funções para uso em outros componentes.
 */
export const useUserProfile = () => {
  // ============================================================================
  // 1. DEFINIÇÃO DOS ESTADOS
  // ============================================================================
  /**
   * Estados para armazenar:
   * - user: Dados do usuário autenticado (via supabase.auth)
   * - userProfile: Dados do perfil do usuário (tabela 'usuarios')
   * - userRole: Papel do usuário ('admin', 'gerente', 'entregador', 'visitante')
   * - userLojas: Lojas associadas ao usuário (tabela 'loja_associada')
   * - loading: Indicador de carregamento
   * - error: Mensagens de erro
   * - updating: Indicador de atualização do perfil
   */
  const [user, setUser] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [userRole, setUserRole] = useState('visitante');
  const [userLojas, setUserLojas] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [updating, setUpdating] = useState(false);

  // ============================================================================
  // 2. FUNÇÃO: CARREGAR DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Carrega dados do usuário autenticado, perfil e lojas associadas.
   * Usada no carregamento inicial e para recarregar dados após mudanças.
   */
  const loadUserData = async () => {
    try {
      // Iniciar carregamento e limpar erros
      setLoading(true);
      setError(null);

      // 2.1. Verificar autenticação do usuário
      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        setError('Erro de autenticação: ' + authError.message);
        setUser(null);
        setUserProfile(null);
        setUserRole('visitante');
        setUserLojas([]);
        return;
      }

      // 2.2. Se não houver usuário autenticado, limpar estados
      if (!authUser) {
        setUser(null);
        setUserProfile(null);
        setUserRole('visitante');
        setUserLojas([]);
        return;
      }

      // 2.3. Atualizar estado do usuário autenticado
      setUser(authUser);

      // 2.4. Buscar dados do perfil e lojas em paralelo
      const [usuarioResponse, lojaResponse] = await Promise.all([
        supabase
          .from('usuarios')
          .select('*')
          .eq('uid', authUser.id)
          .single(),
        supabase
          .from('loja_associada')
          .select('*')
          .eq('uid_usuario', authUser.id)
          .eq('status_vinculacao', 'ativo')
      ]);

      // 2.5. Verificar erros na busca do perfil
      if (usuarioResponse.error) {
        setError('Erro ao buscar perfil: ' + usuarioResponse.error.message);
        setUserProfile(null);
        setUserRole('visitante');
        setUserLojas([]);
        return;
      }

      const usuarioData = usuarioResponse.data;
      setUserProfile(usuarioData);

      // 2.6. Verificar se o usuário é admin
      if (usuarioData?.is_admin) {
        setUserRole('admin');
        setUserLojas([]);
        return;
      }

      // 2.7. Verificar erros na busca de lojas
      if (lojaResponse.error) {
        setError('Erro ao buscar lojas: ' + lojaResponse.error.message);
        setUserLojas([]);
        setUserRole('visitante');
        return;
      }

      const lojaData = lojaResponse.data || [];

      // 2.8. Se não houver lojas, definir como visitante
      if (lojaData.length === 0) {
        setUserRole('visitante');
        setUserLojas([]);
        return;
      }

      // 2.9. Atualizar lojas e determinar papel (gerente ou entregador)
      setUserLojas(lojaData);
      const gerente = lojaData.find(loja => loja.funcao === 'gerente');
      
      if (gerente) {
        const lojasGerente = lojaData.filter(loja => loja.funcao === 'gerente');
        if (lojasGerente.length > 1) {
          setError('ERRO: Usuário não pode ser gerente em múltiplas lojas');
          setUserRole('erro');
        } else {
          setUserRole('gerente');
        }
      } else {
        setUserRole('entregador');
      }

    } catch (error) {
      // 2.10. Tratar erros inesperados
      setError('Erro inesperado: ' + error.message);
      console.error('Erro no loadUserData:', error);
    } finally {
      // 2.11. Finalizar carregamento
      setLoading(false);
    }
  };

  // ============================================================================
  // 3. EFFECT: CARREGAMENTO INICIAL E ESCUTA DE AUTENTICAÇÃO
  // ============================================================================
  /**
   * Executa o carregamento inicial dos dados e escuta mudanças de autenticação
   * em tempo real usando supabase.auth.onAuthStateChange.
   */
  useEffect(() => {
    // 3.1. Carregar dados iniciais
    loadUserData();

    // 3.2. Escutar mudanças de autenticação (login/logout)
    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === 'SIGNED_IN') {
          // 3.3. Após login, carregar dados do usuário
          await loadUserData();
        } else if (event === 'SIGNED_OUT') {
          // 3.4. Após logout, limpar estados imediatamente
          setUser(null);
          setUserProfile(null);
          setUserRole('visitante');
          setUserLojas([]);
          setLoading(false);
        }
      }
    );

    // 3.5. Cleanup: Cancelar inscrição do listener ao desmontar
    return () => {
      if (authListener?.subscription) {
        authListener.subscription.unsubscribe();
      }
    };
  }, []);

  // ============================================================================
  // 4. FUNÇÃO: ATUALIZAR PERFIL DO USUÁRIO
  // ============================================================================
  /**
   * Atualiza os dados do perfil do usuário na tabela 'usuarios' e, se aplicável,
   * na tabela 'loja_associada' (para entregadores).
   */
  const updateUserProfile = async (formData) => {
    try {
      // 4.1. Iniciar atualização e limpar erros
      setUpdating(true);
      setError(null);

      // 4.2. Verificar se há usuário autenticado
      if (!userProfile || !userProfile.uid) {
        throw new Error('Usuário não autenticado');
      }

      // 4.3. Atualizar tabela 'usuarios'
      const { error: userError } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (userError) throw userError;

      // 4.4. Atualizar tabela 'loja_associada' (apenas para entregadores)
      if (userRole === 'entregador' && userLojas.length > 0) {
        const { error: lojaError } = await supabase
          .from('loja_associada')
          .update({
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          })
          .eq('uid_usuario', userProfile.uid)
          .eq('id_loja', userLojas[0].id_loja);

        if (lojaError) throw lojaError;
      }

      // 4.5. Atualizar estados locais
      setUserProfile(prev => ({
        ...prev,
        nome_completo: formData.nome_completo,
        nome_usuario: formData.nome_usuario,
        telefone: formData.telefone,
        foto: formData.foto
      }));

      if (userRole === 'entregador' && userLojas.length > 0) {
        setUserLojas(prev => prev.map(loja => 
          loja.id_loja === userLojas[0].id_loja ? {
            ...loja,
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          } : loja
        ));
      }

      // 4.6. Retornar sucesso
      return { success: true, message: 'Perfil atualizado com sucesso!' };

    } catch (error) {
      // 4.7. Tratar erros
      const errorMsg = 'Erro ao atualizar perfil: ' + error.message;
      setError(errorMsg);
      console.error('Erro no updateUserProfile:', error);
      return { success: false, message: errorMsg };
    } finally {
      // 4.8. Finalizar atualização
      setUpdating(false);
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: RECARREGAR DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Recarrega os dados do usuário, reutilizando a função loadUserData.
   * Usada por outros componentes para forçar a atualização dos dados.
   */
  const reloadUserData = async () => {
    await loadUserData();
  };

  // ============================================================================
  // 6. RETORNO DO HOOK
  // ============================================================================
  /**
   * Retorna todos os estados e funções para uso nos componentes.
   */
  return { 
    user,
    userProfile, 
    userRole, 
    userLojas, 
    loading, 
    error,
    updating,
    updateUserProfile,
    reloadUserData
  };
};




// =========================================
// 8. middleware.js
// =========================================

// middleware.js (versão aprimorada)
import { NextResponse } from 'next/server';
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';

export async function middleware(req) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });
  
  // 1. Verifica autenticação
  const { data: { user } } = await supabase.auth.getUser();

  // 2. Rotas que requerem autenticação
  const requiresAuth = [
    '/pedidos-pendentes',
    '/pedidos-aceitos', 
    '/pedidos-entregues',
    '/todos-pedidos',
    '/admin',
    '/gestao-entregadores'
  ];

  // 3. Se não está logado e tenta acessar rota protegida
  if (requiresAuth.includes(req.nextUrl.pathname) && !user) {
    return NextResponse.redirect(new URL('/login', req.url));
  }

  // 4. Se está logado e tenta acessar login
  if (req.nextUrl.pathname === '/login' && user) {
    return NextResponse.redirect(new URL('/pedidos-pendentes', req.url));
  }

  // 5. VERIFICAÇÃO DE PERMISSÕES ESPECÍFICAS
  if (user) {
    // Verificar se é admin
    const { data: usuario } = await supabase
      .from('usuarios')
      .select('is_admin')
      .eq('uid', user.id)
      .single();

    // Bloquear entregador de acessar /todos-pedidos
    if (req.nextUrl.pathname === '/todos-pedidos' && !usuario?.is_admin) {
      const { data: lojaData } = await supabase
        .from('loja_associada')
        .select('funcao')
        .eq('uid_usuario', user.id)
        .eq('status_vinculacao', 'ativo')
        .single();

      if (lojaData?.funcao === 'entregador') {
        return NextResponse.redirect(new URL('/pedidos-pendentes', req.url));
      }
    }
  }

  return res;
}

export const config = {
  matcher: [
    '/pedidos-pendentes',
    '/pedidos-aceitos',
    '/pedidos-entregues', 
    '/todos-pedidos',
    '/admin',
    '/gestao-entregadores',
    '/login'
  ],
};


// =========================================
// 9. next.config.js
// =========================================

// next.config.js
// ✅ Importar path para resolver caminhos
const path = require('path');
// ✅ Configurar PWA com next-pwa
const withPWA = require('next-pwa')({
dest: 'public',
register: true,
skipWaiting: true,
disable: process.env.NODE_ENV === 'development', // ✅ Desativa PWA em desenvolvimento
});
module.exports = withPWA({
// ==========================================================================
// CONFIGURAÇÕES PARA RESOLVER AVISOS DE MÚLTIPLOS LOCKFILES
// ==========================================================================
outputFileTracingRoot: path.join(__dirname, '../'), // ✅ Define raiz correta
// ==========================================================================
// CONFIGURAÇÕES DO NEXT.JS
// ==========================================================================
reactStrictMode: true,
// ==========================================================================
// CONFIGURAÇÕES PARA MELHORAR PERFORMANCE EM MONOREPO
// ==========================================================================
transpilePackages: [
// Adicione aqui os pacotes do seu monorepo que precisam ser transpilados
// Exemplo: '@meu-projeto/shared', '@meu-projeto/utils'
],
// ==========================================================================
// CONFIGURAÇÕES DE WEBPACK (OPCIONAL - para otimização)
// ==========================================================================
webpack: (config, { isServer }) => {
// ✅ Adicionar suporte para arquivos .js da pasta src/lib
config.module.rules.push({
test: /.(js|jsx)$/,
include: [path.resolve(__dirname, 'src/lib')],
use: 'babel-loader',
});
// ✅ Desativar módulos do Node.js que não são necessários no cliente
if (!isServer) {
config.resolve.fallback = {
fs: false,
path: false,
};
}
return config;
},
// ==========================================================================
// CONFIGURAÇÕES DE HEADERS (para manifest.json)
// ==========================================================================
async headers() {
return [
{
source: '/manifest.json',
headers: [
{
key: 'Content-Type',
value: 'application/json',
},
],
},
// ✅ Adicionar header para servir arquivos JavaScript da pasta lib
{
source: '/lib/:file*',
headers: [
{
key: 'Content-Type',
value: 'application/javascript',
},
],
},
];
},
});


// =========================================
// 10. OrderModal.txt
// =========================================

===== index.js =====
// components/OrderModal/index.js
import OrderModal from './OrderModal';
import WithCourier from './WithCourier';
import WithoutCourier from './WithoutCourier';

export { OrderModal, WithCourier, WithoutCourier };


===== OrderModal.js =====
// components/OrderModal/OrderModal.js
import React from 'react';

const OrderModal = ({ 
  pedido, 
  isOpen, 
  onClose, 
  children 
}) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Conteúdo específico (será injetado via children) */}
          {children}
        </div>
      </div>
    </div>
  );
};

export default OrderModal;


===== WithCourier.js =====
// components/OrderModal/WithCourier.js
import React from 'react';

const WithCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Entregador */}
      <div className="mb-6 p-4 bg-purple-50 rounded">
        <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
        <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithCourier;


===== WithoutCourier.js =====
// components/OrderModal/WithoutCourier.js
import React from 'react';

const WithoutCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithoutCourier;





// =========================================
// 11. package-lock.json
// =========================================

{
  "name": "app-entregas-woocommerce-frontend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "app-entregas-woocommerce-frontend",
      "version": "1.0.0",
      "dependencies": {
        "@supabase/auth-helpers-react": "^0.5.0",
        "@supabase/ssr": "^0.4.1",
        "@supabase/supabase-js": "^2.57.4",
        "axios": "^1.12.1",
        "date-fns": "^4.1.0",
        "firebase": "^10.14.1",
        "jspdf": "^3.0.3",
        "next": "^15.0.0",
        "next-pwa": "^5.6.0",
        "react": "^18.2.0",
        "react-datepicker": "^8.7.0",
        "react-dom": "^18.2.0",
        "react-modal": "^3.16.3"
      },
      "devDependencies": {
        "@testing-library/jest-dom": "^6.5.0",
        "@testing-library/react": "^16.0.1",
        "autoprefixer": "^10.4.0",
        "eslint": "^8.57.0",
        "eslint-config-next": "^15.0.0",
        "jest": "^29.7.0",
        "postcss": "^8.4.0",
        "tailwindcss": "^3.4.0"
      }
    },
    "node_modules/@adobe/css-tools": {
      "version": "4.4.4",
      "resolved": "https://registry.npmjs.org/@adobe/css-tools/-/css-tools-4.4.4.tgz",
      "integrity": "sha512-Elp+iwUx5rN5+Y8xLt5/GRoG20WGoDCQ/1Fb+1LiGtvwbDavuSk0jhD/eZdckHAuzcDzccnkv+rEjyWfRx18gg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@alloc/quick-lru": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.4.tgz",
      "integrity": "sha512-YsmSKC29MJwf0gF8Rjjrg5LQCmyh+j/nD8/eP7f+BeoQTKYqs9RoWbjGOdy0+1Ekr68RJZMUOPVQaQisnIo4Rw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.4.tgz",
      "integrity": "sha512-2BCOP7TN8M+gVDj7/ht3hsaO/B/n5oDbiAyyvnRlNOs+u1o+JWNYTQrmpuNp1/Wq2gcFrI01JAW+paEKDMx/CA==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.28.3",
        "@babel/helpers": "^7.28.4",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.4",
        "@babel/types": "^7.28.4",
        "@jridgewell/remapping": "^2.3.5",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.3.tgz",
      "integrity": "sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.3",
        "@babel/types": "^7.28.2",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-annotate-as-pure": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.27.3.tgz",
      "integrity": "sha512-fXSwMQqitTGeHLBC08Eq5yXz2m37E4pJX1qAU1+2cNedz/ifv/bVXft90VeSav5nFO61EcNgwr0aJxbyPaWBPg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.28.3.tgz",
      "integrity": "sha512-V9f6ZFIYSLNEbuGA/92uOvYsGCJNsuA8ESZ4ldc09bWk/j8H8TKiPw8Mk1eG6olpnO0ALHJmYfZvF4MEE4gajg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.3",
        "@babel/helper-member-expression-to-functions": "^7.27.1",
        "@babel/helper-optimise-call-expression": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
        "@babel/traverse": "^7.28.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-create-regexp-features-plugin": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.27.1.tgz",
      "integrity": "sha512-uVDC72XVf8UbrH5qQTc18Agb8emwjTiZrQE11Nv3CuBEZmVvTwwE9CBUEvHku06gQCAyYf8Nv6ja1IN+6LMbxQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "regexpu-core": "^6.2.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-create-regexp-features-plugin/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-define-polyfill-provider": {
      "version": "0.6.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.6.5.tgz",
      "integrity": "sha512-uJnGFcPsWQK8fvjgGP5LZUZZsYGIoPeRjSF5PGwrelYgq7Q15/Ft9NGFp1zglwgIv//W0uG4BevRuSJRyylZPg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-plugin-utils": "^7.27.1",
        "debug": "^4.4.1",
        "lodash.debounce": "^4.0.8",
        "resolve": "^1.22.10"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-member-expression-to-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.27.1.tgz",
      "integrity": "sha512-E5chM8eWjTp/aNoVpcbfM7mLxu9XGLWYise2eBKGQomAk/Mb4XoxyqXTZbuTohbsl8EKqdlMhnDI2CCLfcs9wA==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz",
      "integrity": "sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-optimise-call-expression": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.27.1.tgz",
      "integrity": "sha512-URMGH08NzYFhubNSGJrpUEphGKQwMQYBySzat5cAByY1/YgIRkULnIy3tAMeszlL/so2HbeilYloUmSpd7GdVw==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-remap-async-to-generator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.27.1.tgz",
      "integrity": "sha512-7fiA521aVw8lSPeI4ZOD3vRFkoqkJcS+z4hFo82bFSH/2tNd6eJ5qCVMS5OzDmZh/kaHQeBaeyxK6wljcPtveA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-wrap-function": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-replace-supers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.27.1.tgz",
      "integrity": "sha512-7EHz6qDZc8RYS5ElPoShMheWvEgERonFCs7IAonWLLUTXW59DP14bCZt89/GKyreYn8g3S83m21FelHKbeDCKA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-member-expression-to-functions": "^7.27.1",
        "@babel/helper-optimise-call-expression": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-skip-transparent-expression-wrappers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.27.1.tgz",
      "integrity": "sha512-Tub4ZKEXqbPjXgWLl2+3JpQAYBJ8+ikpQ2Ocj/q/r0LwE3UhENh7EUabyHjz2kCEsrRY83ew2DQdHluuiDQFzg==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-wrap-function": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-wrap-function/-/helper-wrap-function-7.28.3.tgz",
      "integrity": "sha512-zdf983tNfLZFletc0RRXYrHrucBEg95NIFMkn6K9dbeMYnsgHaSBGcQqdsCSStG2PYwRre0Qc2NNSCXbG+xc6g==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.3",
        "@babel/types": "^7.28.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.4.tgz",
      "integrity": "sha512-HFN59MmQXGHVyYadKLVumYsA9dBFun/ldYxipEjzA4196jpLZd8UjEEBLkbEkvfYreDqJhZxYAWFPtrfhNpj4w==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.4.tgz",
      "integrity": "sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.4"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-firefox-class-in-computed-class-key": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-firefox-class-in-computed-class-key/-/plugin-bugfix-firefox-class-in-computed-class-key-7.27.1.tgz",
      "integrity": "sha512-QPG3C9cCVRQLxAVwmefEmwdTanECuUBMQZ/ym5kiw3XKCGA7qkuQLcjWWHcrD/GKbn/WmJwaezfuuAOcyKlRPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-class-field-initializer-scope": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-class-field-initializer-scope/-/plugin-bugfix-safari-class-field-initializer-scope-7.27.1.tgz",
      "integrity": "sha512-qNeq3bCKnGgLkEXUuFry6dPlGfCdQNZbn7yUAPCInwAJHMU7THJfrBSozkcWq5sNM6RcF3S8XyQL2A52KNR9IA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.27.1.tgz",
      "integrity": "sha512-g4L7OYun04N1WyqMNjldFwlfPCLVkgB54A/YCXICZYBsvJJE3kByKv9c9+R/nAfmIfjl2rKYLNyMHboYbZaWaA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.27.1.tgz",
      "integrity": "sha512-oO02gcONcD5O1iTLi/6frMJBIwWEHceWGSGqrpCmEL8nogiS6J9PBlE48CaK20/Jx1LuRml9aDftLgdjXT8+Cw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
        "@babel/plugin-transform-optional-chaining": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.13.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly/-/plugin-bugfix-v8-static-class-fields-redefine-readonly-7.28.3.tgz",
      "integrity": "sha512-b6YTX108evsvE4YgWyQ921ZAFFQm3Bn+CA3+ZXlNVnPhx+UfsVURoPjfGAPCjBgrqo30yX/C2nZGX96DxvR9Iw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-proposal-private-property-in-object": {
      "version": "7.21.0-placeholder-for-preset-env.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz",
      "integrity": "sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-static-block": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-assertions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.27.1.tgz",
      "integrity": "sha512-UT/Jrhw57xg4ILHLFnzFpPDlMbcdEicaAtjPQpbj9wa8T4r5KVWCimHcL/460g8Ht0DMxDyjsLgiWSkVjnwPFg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-attributes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.27.1.tgz",
      "integrity": "sha512-oFT0FrKHgF53f4vOsZGi2Hh3I35PfSmVs4IBFLFj4dnafP+hIWDLg3VyKmUHfLoLHlyxY4C7DGtmHuJgn+IGww==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.27.1.tgz",
      "integrity": "sha512-y8YTNIeKoyhGd9O0Jiyzyyqk8gdjnumGTQPsz0xOZOQ2RmkVJeZ1vmmfIvFEKqucBG6axJGBZDE/7iI5suUI/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-private-property-in-object": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.27.1.tgz",
      "integrity": "sha512-xfYCBMxveHrRMnAWl1ZlPXOZjzkN82THFvLhQhFXFt81Z5HnN+EtUkZhv/zcKpmT3fzmWZB0ywiBrbC3vogbwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-unicode-sets-regex": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-unicode-sets-regex/-/plugin-syntax-unicode-sets-regex-7.18.6.tgz",
      "integrity": "sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-arrow-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.27.1.tgz",
      "integrity": "sha512-8Z4TGic6xW70FKThA5HYEKKyBpOOsucTOD1DjU3fZxDg+K3zBJcXMFnt/4yQiZnf5+MiOMSXQ9PaEK/Ilh1DeA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-generator-functions": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.28.0.tgz",
      "integrity": "sha512-BEOdvX4+M765icNPZeidyADIvQ1m1gmunXufXxvRESy/jNNyfovIqUyE7MVgGBjWktCoJlzvFA1To2O4ymIO3Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-remap-async-to-generator": "^7.27.1",
        "@babel/traverse": "^7.28.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-to-generator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.27.1.tgz",
      "integrity": "sha512-NREkZsZVJS4xmTr8qzE5y8AfIPqsdQfRuUiLRTEzb7Qii8iFWCyDKaUV2c0rCuh4ljDZ98ALHP/PetiBV2nddA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-remap-async-to-generator": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoped-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.27.1.tgz",
      "integrity": "sha512-cnqkuOtZLapWYZUYM5rVIdv1nXYuFVIltZ6ZJ7nIj585QsjKM5dhL2Fu/lICXZ1OyIAFc7Qy+bvDAtTXqGrlhg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoping": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.28.4.tgz",
      "integrity": "sha512-1yxmvN0MJHOhPVmAsmoW5liWwoILobu/d/ShymZmj867bAdxGbehIrew1DuLpw2Ukv+qDSSPQdYW1dLNE7t11A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-properties/-/plugin-transform-class-properties-7.27.1.tgz",
      "integrity": "sha512-D0VcalChDMtuRvJIu3U/fwWjf8ZMykz5iZsg77Nuj821vCKI3zCyRLwRdWbsuJ/uRwZhZ002QtCqIkwC/ZkvbA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-static-block": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-static-block/-/plugin-transform-class-static-block-7.28.3.tgz",
      "integrity": "sha512-LtPXlBbRoc4Njl/oh1CeD/3jC+atytbnf/UqLoqTDcEYGUPj022+rvfkbDYieUrSj3CaV4yHDByPE+T2HwfsJg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.28.3",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.12.0"
      }
    },
    "node_modules/@babel/plugin-transform-classes": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-classes/-/plugin-transform-classes-7.28.4.tgz",
      "integrity": "sha512-cFOlhIYPBv/iBoc+KS3M6et2XPtbT2HiCRfBXWtfpc9OAyostldxIf9YAYB6ypURBBbx+Qv6nyrLzASfJe+hBA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-globals": "^7.28.0",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1",
        "@babel/traverse": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-computed-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.27.1.tgz",
      "integrity": "sha512-lj9PGWvMTVksbWiDT2tW68zGS/cyo4AkZ/QTp0sQT0mjPopCmrSkzxeXkznjqBxzDI6TclZhOJbBmbBLjuOZUw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/template": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-destructuring": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.28.0.tgz",
      "integrity": "sha512-v1nrSMBiKcodhsyJ4Gf+Z0U/yawmJDBOTpEB3mcQY52r9RIyPneGyAS/yM6seP/8I+mWI3elOMtT5dB8GJVs+A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.28.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-dotall-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.27.1.tgz",
      "integrity": "sha512-gEbkDVGRvjj7+T1ivxrfgygpT7GUd4vmODtYpbs0gZATdkX8/iSnOtZSxiZnsgm1YjTgjI6VKBGSJJevkrclzw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-keys": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.27.1.tgz",
      "integrity": "sha512-MTyJk98sHvSs+cvZ4nOauwTTG1JeonDjSGvGGUNHreGQns+Mpt6WX/dVzWBHgg+dYZhkC4X+zTDfkTU+Vy9y7Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-named-capturing-groups-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-named-capturing-groups-regex/-/plugin-transform-duplicate-named-capturing-groups-regex-7.27.1.tgz",
      "integrity": "sha512-hkGcueTEzuhB30B3eJCbCYeCaaEQOmQR0AdvzpD4LoN0GXMWzzGSuRrxR2xTnCrvNbVwK9N6/jQ92GSLfiZWoQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-dynamic-import": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dynamic-import/-/plugin-transform-dynamic-import-7.27.1.tgz",
      "integrity": "sha512-MHzkWQcEmjzzVW9j2q8LGjwGWpG2mjwaaB0BNQwst3FIjqsg8Ct/mIZlvSPJvfi9y2AC8mi/ktxbFVL9pZ1I4A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-explicit-resource-management": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-explicit-resource-management/-/plugin-transform-explicit-resource-management-7.28.0.tgz",
      "integrity": "sha512-K8nhUcn3f6iB+P3gwCv/no7OdzOZQcKchW6N389V6PD8NUWKZHzndOd9sPDVbMoBsbmjMqlB4L9fm+fEFNVlwQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-transform-destructuring": "^7.28.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-exponentiation-operator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.27.1.tgz",
      "integrity": "sha512-uspvXnhHvGKf2r4VVtBpeFnuDWsJLQ6MF6lGJLC89jBR1uoVeqM416AZtTuhTezOfgHicpJQmoD5YUakO/YmXQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-export-namespace-from": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-export-namespace-from/-/plugin-transform-export-namespace-from-7.27.1.tgz",
      "integrity": "sha512-tQvHWSZ3/jH2xuq/vZDy0jNn+ZdXJeM8gHvX4lnJmsc3+50yPlWdZXIc5ay+umX+2/tJIqHqiEqcJvxlmIvRvQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-for-of": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.27.1.tgz",
      "integrity": "sha512-BfbWFFEJFQzLCQ5N8VocnCtA8J1CLkNTe2Ms2wocj75dd6VpiqS5Z5quTYcUoo4Yq+DN0rtikODccuv7RU81sw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-function-name": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.27.1.tgz",
      "integrity": "sha512-1bQeydJF9Nr1eBCMMbC+hdwmRlsv5XYOMu03YSWFwNs0HsAmtSxxF1fyuYPqemVldVyFmlCU7w8UE14LupUSZQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-json-strings": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-json-strings/-/plugin-transform-json-strings-7.27.1.tgz",
      "integrity": "sha512-6WVLVJiTjqcQauBhn1LkICsR2H+zm62I3h9faTDKt1qP4jn2o72tSvqMwtGFKGTpojce0gJs+76eZ2uCHRZh0Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-literals/-/plugin-transform-literals-7.27.1.tgz",
      "integrity": "sha512-0HCFSepIpLTkLcsi86GG3mTUzxV5jpmbv97hTETW3yzrAij8aqlD36toB1D0daVFJM8NK6GvKO0gslVQmm+zZA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-logical-assignment-operators": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-logical-assignment-operators/-/plugin-transform-logical-assignment-operators-7.27.1.tgz",
      "integrity": "sha512-SJvDs5dXxiae4FbSL1aBJlG4wvl594N6YEVVn9e3JGulwioy6z3oPjx/sQBO3Y4NwUu5HNix6KJ3wBZoewcdbw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-member-expression-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.27.1.tgz",
      "integrity": "sha512-hqoBX4dcZ1I33jCSWcXrP+1Ku7kdqXf1oeah7ooKOIiAdKQ+uqftgCFNOSzA5AMS2XIHEYeGFg4cKRCdpxzVOQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-amd": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.27.1.tgz",
      "integrity": "sha512-iCsytMg/N9/oFq6n+gFTvUYDZQOMK5kEdeYxmxt91fcJGycfxVP9CnrxoliM0oumFERba2i8ZtwRUCMhvP1LnA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-commonjs": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.27.1.tgz",
      "integrity": "sha512-OJguuwlTYlN0gBZFRPqwOGNWssZjfIUdS7HMYtN8c1KmwpwHFBwTeFZrg9XZa+DFTitWOW5iTAG7tyCUPsCCyw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-systemjs": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.27.1.tgz",
      "integrity": "sha512-w5N1XzsRbc0PQStASMksmUeqECuzKuTJer7kFagK8AXgpCMkeDMO5S+aaFb7A51ZYDF7XI34qsTX+fkHiIm5yA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-umd": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.27.1.tgz",
      "integrity": "sha512-iQBE/xC5BV1OxJbp6WG7jq9IWiD+xxlZhLrdwpPkTX3ydmXdvoCpyfJN7acaIBZaOqTfr76pgzqBJflNbeRK+w==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-named-capturing-groups-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.27.1.tgz",
      "integrity": "sha512-SstR5JYy8ddZvD6MhV0tM/j16Qds4mIpJTOd1Yu9J9pJjH93bxHECF7pgtc28XvkzTD6Pxcm/0Z73Hvk7kb3Ng==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-new-target": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.27.1.tgz",
      "integrity": "sha512-f6PiYeqXQ05lYq3TIfIDu/MtliKUbNwkGApPUvyo6+tc7uaR4cPjPe7DFPr15Uyycg2lZU6btZ575CuQoYh7MQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-nullish-coalescing-operator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-nullish-coalescing-operator/-/plugin-transform-nullish-coalescing-operator-7.27.1.tgz",
      "integrity": "sha512-aGZh6xMo6q9vq1JGcw58lZ1Z0+i0xB2x0XaauNIUXd6O1xXc3RwoWEBlsTQrY4KQ9Jf0s5rgD6SiNkaUdJegTA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-numeric-separator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-numeric-separator/-/plugin-transform-numeric-separator-7.27.1.tgz",
      "integrity": "sha512-fdPKAcujuvEChxDBJ5c+0BTaS6revLV7CJL08e4m3de8qJfNIuCc2nc7XJYOjBoTMJeqSmwXJ0ypE14RCjLwaw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-rest-spread": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.28.4.tgz",
      "integrity": "sha512-373KA2HQzKhQCYiRVIRr+3MjpCObqzDlyrM6u4I201wL8Mp2wHf7uB8GhDwis03k2ti8Zr65Zyyqs1xOxUF/Ew==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-transform-destructuring": "^7.28.0",
        "@babel/plugin-transform-parameters": "^7.27.7",
        "@babel/traverse": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-super": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.27.1.tgz",
      "integrity": "sha512-SFy8S9plRPbIcxlJ8A6mT/CxFdJx/c04JEctz4jf8YZaVS2px34j7NXRrlGlHkN/M2gnpL37ZpGRGVFLd3l8Ng==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-catch-binding": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-catch-binding/-/plugin-transform-optional-catch-binding-7.27.1.tgz",
      "integrity": "sha512-txEAEKzYrHEX4xSZN4kJ+OfKXFVSWKB2ZxM9dpcE3wT7smwkNmXo5ORRlVzMVdJbD+Q8ILTgSD7959uj+3Dm3Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-chaining": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-chaining/-/plugin-transform-optional-chaining-7.27.1.tgz",
      "integrity": "sha512-BQmKPPIuc8EkZgNKsv0X4bPmOoayeu4F1YCwx2/CfmDSXDbp7GnzlUH+/ul5VGfRg1AoFPsrIThlEBj2xb4CAg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-parameters": {
      "version": "7.27.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.27.7.tgz",
      "integrity": "sha512-qBkYTYCb76RRxUM6CcZA5KRu8K4SM8ajzVeUgVdMVO9NN9uI/GaVmBg/WKJJGnNokV9SY8FxNOVWGXzqzUidBg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-methods": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-methods/-/plugin-transform-private-methods-7.27.1.tgz",
      "integrity": "sha512-10FVt+X55AjRAYI9BrdISN9/AQWHqldOeZDUoLyif1Kn05a56xVBXb8ZouL8pZ9jem8QpXaOt8TS7RHUIS+GPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-property-in-object": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-property-in-object/-/plugin-transform-private-property-in-object-7.27.1.tgz",
      "integrity": "sha512-5J+IhqTi1XPa0DXF83jYOaARrX+41gOewWbkPyjMNRDqgOCqdffGh8L3f/Ek5utaEBZExjSAzcyjmV9SSAWObQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-property-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.27.1.tgz",
      "integrity": "sha512-oThy3BCuCha8kDZ8ZkgOg2exvPYUlprMukKQXI1r1pJ47NCvxfkEy8vK+r/hT9nF0Aa4H1WUPZZjHTFtAhGfmQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-regenerator": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.28.4.tgz",
      "integrity": "sha512-+ZEdQlBoRg9m2NnzvEeLgtvBMO4tkFBw5SQIUgLICgTrumLoU7lr+Oghi6km2PFj+dbUt2u1oby2w3BDO9YQnA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-regexp-modifiers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-regexp-modifiers/-/plugin-transform-regexp-modifiers-7.27.1.tgz",
      "integrity": "sha512-TtEciroaiODtXvLZv4rmfMhkCv8jx3wgKpL68PuiPh2M4fvz5jhsA7697N1gMvkvr/JTF13DrFYyEbY9U7cVPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-reserved-words": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.27.1.tgz",
      "integrity": "sha512-V2ABPHIJX4kC7HegLkYoDpfg9PVmuWy/i6vUM5eGK22bx4YVFD3M5F0QQnWQoDs6AGsUWTVOopBiMFQgHaSkVw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-shorthand-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.27.1.tgz",
      "integrity": "sha512-N/wH1vcn4oYawbJ13Y/FxcQrWk63jhfNa7jef0ih7PHSIHX2LB7GWE1rkPrOnka9kwMxb6hMl19p7lidA+EHmQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-spread": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-spread/-/plugin-transform-spread-7.27.1.tgz",
      "integrity": "sha512-kpb3HUqaILBJcRFVhFUs6Trdd4mkrzcGXss+6/mxUd273PfbWqSDHRzMT2234gIg2QYfAjvXLSquP1xECSg09Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-sticky-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.27.1.tgz",
      "integrity": "sha512-lhInBO5bi/Kowe2/aLdBAawijx+q1pQzicSgnkB6dUPc1+RC8QmJHKf2OjvU+NZWitguJHEaEmbV6VWEouT58g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-template-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.27.1.tgz",
      "integrity": "sha512-fBJKiV7F2DxZUkg5EtHKXQdbsbURW3DZKQUWphDum0uRP6eHGGa/He9mc0mypL680pb+e/lDIthRohlv8NCHkg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typeof-symbol": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.27.1.tgz",
      "integrity": "sha512-RiSILC+nRJM7FY5srIyc4/fGIwUhyDuuBSdWn4y6yT6gm652DpCHZjIipgn6B7MQ1ITOUnAKWixEUjQRIBIcLw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-escapes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-escapes/-/plugin-transform-unicode-escapes-7.27.1.tgz",
      "integrity": "sha512-Ysg4v6AmF26k9vpfFuTZg8HRfVWzsh1kVfowA23y9j/Gu6dOuahdUVhkLqpObp3JIv27MLSii6noRnuKN8H0Mg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-property-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-property-regex/-/plugin-transform-unicode-property-regex-7.27.1.tgz",
      "integrity": "sha512-uW20S39PnaTImxp39O5qFlHLS9LJEmANjMG7SxIhap8rCHqu0Ik+tLEPX5DKmHn6CsWQ7j3lix2tFOa5YtL12Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.27.1.tgz",
      "integrity": "sha512-xvINq24TRojDuyt6JGtHmkVkrfVV3FPT16uytxImLeBZqW3/H52yN+kM1MGuyPkIQxrzKwPHs5U/MP3qKyzkGw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-sets-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-sets-regex/-/plugin-transform-unicode-sets-regex-7.27.1.tgz",
      "integrity": "sha512-EtkOujbc4cgvb0mlpQefi4NTPBzhSIevblFevACNLUspmrALgmEBdL/XfnyyITfd8fKBZrZys92zOWcik7j9Tw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/preset-env": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.28.3.tgz",
      "integrity": "sha512-ROiDcM+GbYVPYBOeCR6uBXKkQpBExLl8k9HO1ygXEyds39j+vCCsjmj7S8GOniZQlEs81QlkdJZe76IpLSiqpg==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-option": "^7.27.1",
        "@babel/plugin-bugfix-firefox-class-in-computed-class-key": "^7.27.1",
        "@babel/plugin-bugfix-safari-class-field-initializer-scope": "^7.27.1",
        "@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": "^7.27.1",
        "@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": "^7.27.1",
        "@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": "^7.28.3",
        "@babel/plugin-proposal-private-property-in-object": "7.21.0-placeholder-for-preset-env.2",
        "@babel/plugin-syntax-import-assertions": "^7.27.1",
        "@babel/plugin-syntax-import-attributes": "^7.27.1",
        "@babel/plugin-syntax-unicode-sets-regex": "^7.18.6",
        "@babel/plugin-transform-arrow-functions": "^7.27.1",
        "@babel/plugin-transform-async-generator-functions": "^7.28.0",
        "@babel/plugin-transform-async-to-generator": "^7.27.1",
        "@babel/plugin-transform-block-scoped-functions": "^7.27.1",
        "@babel/plugin-transform-block-scoping": "^7.28.0",
        "@babel/plugin-transform-class-properties": "^7.27.1",
        "@babel/plugin-transform-class-static-block": "^7.28.3",
        "@babel/plugin-transform-classes": "^7.28.3",
        "@babel/plugin-transform-computed-properties": "^7.27.1",
        "@babel/plugin-transform-destructuring": "^7.28.0",
        "@babel/plugin-transform-dotall-regex": "^7.27.1",
        "@babel/plugin-transform-duplicate-keys": "^7.27.1",
        "@babel/plugin-transform-duplicate-named-capturing-groups-regex": "^7.27.1",
        "@babel/plugin-transform-dynamic-import": "^7.27.1",
        "@babel/plugin-transform-explicit-resource-management": "^7.28.0",
        "@babel/plugin-transform-exponentiation-operator": "^7.27.1",
        "@babel/plugin-transform-export-namespace-from": "^7.27.1",
        "@babel/plugin-transform-for-of": "^7.27.1",
        "@babel/plugin-transform-function-name": "^7.27.1",
        "@babel/plugin-transform-json-strings": "^7.27.1",
        "@babel/plugin-transform-literals": "^7.27.1",
        "@babel/plugin-transform-logical-assignment-operators": "^7.27.1",
        "@babel/plugin-transform-member-expression-literals": "^7.27.1",
        "@babel/plugin-transform-modules-amd": "^7.27.1",
        "@babel/plugin-transform-modules-commonjs": "^7.27.1",
        "@babel/plugin-transform-modules-systemjs": "^7.27.1",
        "@babel/plugin-transform-modules-umd": "^7.27.1",
        "@babel/plugin-transform-named-capturing-groups-regex": "^7.27.1",
        "@babel/plugin-transform-new-target": "^7.27.1",
        "@babel/plugin-transform-nullish-coalescing-operator": "^7.27.1",
        "@babel/plugin-transform-numeric-separator": "^7.27.1",
        "@babel/plugin-transform-object-rest-spread": "^7.28.0",
        "@babel/plugin-transform-object-super": "^7.27.1",
        "@babel/plugin-transform-optional-catch-binding": "^7.27.1",
        "@babel/plugin-transform-optional-chaining": "^7.27.1",
        "@babel/plugin-transform-parameters": "^7.27.7",
        "@babel/plugin-transform-private-methods": "^7.27.1",
        "@babel/plugin-transform-private-property-in-object": "^7.27.1",
        "@babel/plugin-transform-property-literals": "^7.27.1",
        "@babel/plugin-transform-regenerator": "^7.28.3",
        "@babel/plugin-transform-regexp-modifiers": "^7.27.1",
        "@babel/plugin-transform-reserved-words": "^7.27.1",
        "@babel/plugin-transform-shorthand-properties": "^7.27.1",
        "@babel/plugin-transform-spread": "^7.27.1",
        "@babel/plugin-transform-sticky-regex": "^7.27.1",
        "@babel/plugin-transform-template-literals": "^7.27.1",
        "@babel/plugin-transform-typeof-symbol": "^7.27.1",
        "@babel/plugin-transform-unicode-escapes": "^7.27.1",
        "@babel/plugin-transform-unicode-property-regex": "^7.27.1",
        "@babel/plugin-transform-unicode-regex": "^7.27.1",
        "@babel/plugin-transform-unicode-sets-regex": "^7.27.1",
        "@babel/preset-modules": "0.1.6-no-external-plugins",
        "babel-plugin-polyfill-corejs2": "^0.4.14",
        "babel-plugin-polyfill-corejs3": "^0.13.0",
        "babel-plugin-polyfill-regenerator": "^0.6.5",
        "core-js-compat": "^3.43.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-env/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/preset-modules": {
      "version": "0.1.6-no-external-plugins",
      "resolved": "https://registry.npmjs.org/@babel/preset-modules/-/preset-modules-0.1.6-no-external-plugins.tgz",
      "integrity": "sha512-HrcgcIESLm9aIR842yhJ5RWan/gebQUJ6E/E5+rf0y9o6oj7w0Br+sWuL6kEQ/o/AdfvR1Je9jG18/gnpwjEyA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@babel/types": "^7.4.4",
        "esutils": "^2.0.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.4.tgz",
      "integrity": "sha512-Q/N6JNWvIvPnLDvjlE1OUBLPQHH6l3CltCEsHIujp45zQUSSh8K+gHnaEX45yAT1nyngnINhvWtzN+Nb9D8RAQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.4.tgz",
      "integrity": "sha512-YEzuboP2qvQavAcjgQNVgsvHIDv6ZpwXvcvjmyySP2DIMuByS/6ioU5G9pYrWHM6T2YDfc7xga9iNzYOs12CFQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.4.tgz",
      "integrity": "sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@emnapi/core": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@emnapi/core/-/core-1.5.0.tgz",
      "integrity": "sha512-sbP8GzB1WDzacS8fgNPpHlp6C9VZe+SJP3F90W9rLemaQj2PzIuTEl1qDOYQf58YIpyjViI24y9aPWCjEzY2cg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@emnapi/wasi-threads": "1.1.0",
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@emnapi/runtime": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.5.0.tgz",
      "integrity": "sha512-97/BJ3iXHww3djw6hYIfErCZFee7qCtrneuLa20UXFCOTCfBM2cvQHjWJ2EG0s0MtdNwInarqCTz35i4wWXHsQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@emnapi/wasi-threads": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@emnapi/wasi-threads/-/wasi-threads-1.1.0.tgz",
      "integrity": "sha512-WI0DdZ8xFSbgMjR1sFsKABJ/C5OnRrjT06JXbZKexJGrDuPTzZdDYfFlsgcCXCyf+suG5QU2e/y1Wo2V/OapLQ==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
      "integrity": "sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.6.0",
        "globals": "^13.19.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/js": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",
      "integrity": "sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/@firebase/analytics": {
      "version": "0.10.8",
      "resolved": "https://registry.npmjs.org/@firebase/analytics/-/analytics-0.10.8.tgz",
      "integrity": "sha512-CVnHcS4iRJPqtIDc411+UmFldk0ShSK3OB+D0bKD8Ck5Vro6dbK5+APZpkuWpbfdL359DIQUnAaMLE+zs/PVyA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/installations": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/analytics-compat": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/@firebase/analytics-compat/-/analytics-compat-0.2.14.tgz",
      "integrity": "sha512-unRVY6SvRqfNFIAA/kwl4vK+lvQAL2HVcgu9zTrUtTyYDmtIt/lOuHJynBMYEgLnKm39YKBDhtqdapP2e++ASw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/analytics": "0.10.8",
        "@firebase/analytics-types": "0.8.2",
        "@firebase/component": "0.6.9",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/analytics-types": {
      "version": "0.8.2",
      "resolved": "https://registry.npmjs.org/@firebase/analytics-types/-/analytics-types-0.8.2.tgz",
      "integrity": "sha512-EnzNNLh+9/sJsimsA/FGqzakmrAUKLeJvjRHlg8df1f97NLUlFidk9600y0ZgWOp3CAxn6Hjtk+08tixlUOWyw==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app": {
      "version": "0.10.13",
      "resolved": "https://registry.npmjs.org/@firebase/app/-/app-0.10.13.tgz",
      "integrity": "sha512-OZiDAEK/lDB6xy/XzYAyJJkaDqmQ+BCtOEPLqFvxWKUz5JbBmej7IiiRHdtiIOD/twW7O5AxVsfaaGA/V1bNsA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "idb": "7.1.1",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/app-check": {
      "version": "0.8.8",
      "resolved": "https://registry.npmjs.org/@firebase/app-check/-/app-check-0.8.8.tgz",
      "integrity": "sha512-O49RGF1xj7k6BuhxGpHmqOW5hqBIAEbt2q6POW0lIywx7emYtzPDeQI+ryQpC4zbKX646SoVZ711TN1DBLNSOQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/app-check-compat": {
      "version": "0.3.15",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-compat/-/app-check-compat-0.3.15.tgz",
      "integrity": "sha512-zFIvIFFNqDXpOT2huorz9cwf56VT3oJYRFjSFYdSbGYEJYEaXjLJbfC79lx/zjx4Fh+yuN8pry3TtvwaevrGbg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check": "0.8.8",
        "@firebase/app-check-types": "0.5.2",
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/app-check-interop-types": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-interop-types/-/app-check-interop-types-0.3.2.tgz",
      "integrity": "sha512-LMs47Vinv2HBMZi49C09dJxp0QT5LwDzFaVGf/+ITHe3BlIhUiLNttkATSXplc89A2lAaeTqjgqVkiRfUGyQiQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app-check-types": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-types/-/app-check-types-0.5.2.tgz",
      "integrity": "sha512-FSOEzTzL5bLUbD2co3Zut46iyPWML6xc4x+78TeaXMSuJap5QObfb+rVvZJtla3asN4RwU7elaQaduP+HFizDA==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app-compat": {
      "version": "0.2.43",
      "resolved": "https://registry.npmjs.org/@firebase/app-compat/-/app-compat-0.2.43.tgz",
      "integrity": "sha512-HM96ZyIblXjAC7TzE8wIk2QhHlSvksYkQ4Ukh1GmEenzkucSNUmUX4QvoKrqeWsLEQ8hdcojABeCV8ybVyZmeg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app": "0.10.13",
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/app-types": {
      "version": "0.9.2",
      "resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.9.2.tgz",
      "integrity": "sha512-oMEZ1TDlBz479lmABwWsWjzHwheQKiAgnuKxE0pz0IXCVx7/rtlkx1fQ6GfgK24WCrxDKMplZrT50Kh04iMbXQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/auth-compat": {
      "version": "0.5.14",
      "resolved": "https://registry.npmjs.org/@firebase/auth-compat/-/auth-compat-0.5.14.tgz",
      "integrity": "sha512-2eczCSqBl1KUPJacZlFpQayvpilg3dxXLy9cSMTKtQMTQSmondUtPI47P3ikH3bQAXhzKLOE+qVxJ3/IRtu9pw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/auth": "1.7.9",
        "@firebase/auth-types": "0.12.2",
        "@firebase/component": "0.6.9",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0",
        "undici": "6.19.7"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/auth-compat/node_modules/@firebase/auth": {
      "version": "1.7.9",
      "resolved": "https://registry.npmjs.org/@firebase/auth/-/auth-1.7.9.tgz",
      "integrity": "sha512-yLD5095kVgDw965jepMyUrIgDklD6qH/BZNHeKOgvu7pchOKNjVM+zQoOVYJIKWMWOWBq8IRNVU6NXzBbozaJg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0",
        "undici": "6.19.7"
      },
      "peerDependencies": {
        "@firebase/app": "0.x",
        "@react-native-async-storage/async-storage": "^1.18.1"
      },
      "peerDependenciesMeta": {
        "@react-native-async-storage/async-storage": {
          "optional": true
        }
      }
    },
    "node_modules/@firebase/auth-interop-types": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@firebase/auth-interop-types/-/auth-interop-types-0.2.3.tgz",
      "integrity": "sha512-Fc9wuJGgxoxQeavybiuwgyi+0rssr76b+nHpj+eGhXFYAdudMWyfBHvFL/I5fEHniUM/UQdFzi9VXJK2iZF7FQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/auth-types": {
      "version": "0.12.2",
      "resolved": "https://registry.npmjs.org/@firebase/auth-types/-/auth-types-0.12.2.tgz",
      "integrity": "sha512-qsEBaRMoGvHO10unlDJhaKSuPn4pyoTtlQuP1ghZfzB6rNQPuhp/N/DcFZxm9i4v0SogjCbf9reWupwIvfmH6w==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x",
        "@firebase/util": "1.x"
      }
    },
    "node_modules/@firebase/component": {
      "version": "0.6.9",
      "resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.6.9.tgz",
      "integrity": "sha512-gm8EUEJE/fEac86AvHn8Z/QW8BvR56TBw3hMW0O838J/1mThYQXAIQBgUv75EqlCZfdawpWLrKt1uXvp9ciK3Q==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/data-connect": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/@firebase/data-connect/-/data-connect-0.1.0.tgz",
      "integrity": "sha512-vSe5s8dY13ilhLnfY0eYRmQsdTbH7PUFZtBbqU6JVX/j8Qp9A6G5gG6//ulbX9/1JFOF1IWNOne9c8S/DOCJaQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/auth-interop-types": "0.2.3",
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/database": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@firebase/database/-/database-1.0.8.tgz",
      "integrity": "sha512-dzXALZeBI1U5TXt6619cv0+tgEhJiwlUtQ55WNZY7vGAjv7Q1QioV969iYwt1AQQ0ovHnEW0YW9TiBfefLvErg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check-interop-types": "0.3.2",
        "@firebase/auth-interop-types": "0.2.3",
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "faye-websocket": "0.11.4",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database-compat": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-1.0.8.tgz",
      "integrity": "sha512-OpeWZoPE3sGIRPBKYnW9wLad25RaWbGyk7fFQe4xnJQKRzlynWeFBSRRAoLE2Old01WXwskUiucNqUUVlFsceg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/database": "1.0.8",
        "@firebase/database-types": "1.0.5",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database-types": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-1.0.5.tgz",
      "integrity": "sha512-fTlqCNwFYyq/C6W7AJ5OCuq5CeZuBEsEwptnVxlNPkWCo5cTTyukzAHRSO/jaQcItz33FfYrrFk1SJofcu2AaQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-types": "0.9.2",
        "@firebase/util": "1.10.0"
      }
    },
    "node_modules/@firebase/firestore": {
      "version": "4.7.3",
      "resolved": "https://registry.npmjs.org/@firebase/firestore/-/firestore-4.7.3.tgz",
      "integrity": "sha512-NwVU+JPZ/3bhvNSJMCSzfcBZZg8SUGyzZ2T0EW3/bkUeefCyzMISSt/TTIfEHc8cdyXGlMqfGe3/62u9s74UEg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "@firebase/webchannel-wrapper": "1.0.1",
        "@grpc/grpc-js": "~1.9.0",
        "@grpc/proto-loader": "^0.7.8",
        "tslib": "^2.1.0",
        "undici": "6.19.7"
      },
      "engines": {
        "node": ">=10.10.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/firestore-compat": {
      "version": "0.3.38",
      "resolved": "https://registry.npmjs.org/@firebase/firestore-compat/-/firestore-compat-0.3.38.tgz",
      "integrity": "sha512-GoS0bIMMkjpLni6StSwRJarpu2+S5m346Na7gr9YZ/BZ/W3/8iHGNr9PxC+f0rNZXqS4fGRn88pICjrZEgbkqQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/firestore": "4.7.3",
        "@firebase/firestore-types": "3.0.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/firestore-types": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@firebase/firestore-types/-/firestore-types-3.0.2.tgz",
      "integrity": "sha512-wp1A+t5rI2Qc/2q7r2ZpjUXkRVPtGMd6zCLsiWurjsQpqPgFin3AhNibKcIzoF2rnToNa/XYtyWXuifjOOwDgg==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x",
        "@firebase/util": "1.x"
      }
    },
    "node_modules/@firebase/functions": {
      "version": "0.11.8",
      "resolved": "https://registry.npmjs.org/@firebase/functions/-/functions-0.11.8.tgz",
      "integrity": "sha512-Lo2rTPDn96naFIlSZKVd1yvRRqqqwiJk7cf9TZhUerwnPKgBzXy+aHE22ry+6EjCaQusUoNai6mU6p+G8QZT1g==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check-interop-types": "0.3.2",
        "@firebase/auth-interop-types": "0.2.3",
        "@firebase/component": "0.6.9",
        "@firebase/messaging-interop-types": "0.2.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0",
        "undici": "6.19.7"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/functions-compat": {
      "version": "0.3.14",
      "resolved": "https://registry.npmjs.org/@firebase/functions-compat/-/functions-compat-0.3.14.tgz",
      "integrity": "sha512-dZ0PKOKQFnOlMfcim39XzaXonSuPPAVuzpqA4ONTIdyaJK/OnBaIEVs/+BH4faa1a2tLeR+Jy15PKqDRQoNIJw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/functions": "0.11.8",
        "@firebase/functions-types": "0.6.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/functions-types": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/@firebase/functions-types/-/functions-types-0.6.2.tgz",
      "integrity": "sha512-0KiJ9lZ28nS2iJJvimpY4nNccV21rkQyor5Iheu/nq8aKXJqtJdeSlZDspjPSBBiHRzo7/GMUttegnsEITqR+w==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/installations": {
      "version": "0.6.9",
      "resolved": "https://registry.npmjs.org/@firebase/installations/-/installations-0.6.9.tgz",
      "integrity": "sha512-hlT7AwCiKghOX3XizLxXOsTFiFCQnp/oj86zp1UxwDGmyzsyoxtX+UIZyVyH/oBF5+XtblFG9KZzZQ/h+dpy+Q==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/util": "1.10.0",
        "idb": "7.1.1",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/installations-compat": {
      "version": "0.2.9",
      "resolved": "https://registry.npmjs.org/@firebase/installations-compat/-/installations-compat-0.2.9.tgz",
      "integrity": "sha512-2lfdc6kPXR7WaL4FCQSQUhXcPbI7ol3wF+vkgtU25r77OxPf8F/VmswQ7sgIkBBWtymn5ZF20TIKtnOj9rjb6w==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/installations": "0.6.9",
        "@firebase/installations-types": "0.5.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/installations-types": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/@firebase/installations-types/-/installations-types-0.5.2.tgz",
      "integrity": "sha512-que84TqGRZJpJKHBlF2pkvc1YcXrtEDOVGiDjovP/a3s6W4nlbohGXEsBJo0JCeeg/UG9A+DEZVDUV9GpklUzA==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x"
      }
    },
    "node_modules/@firebase/logger": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/@firebase/logger/-/logger-0.4.2.tgz",
      "integrity": "sha512-Q1VuA5M1Gjqrwom6I6NUU4lQXdo9IAQieXlujeHZWvRt1b7qQ0KwBaNAjgxG27jgF9/mUwsNmO8ptBCGVYhB0A==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/messaging": {
      "version": "0.12.12",
      "resolved": "https://registry.npmjs.org/@firebase/messaging/-/messaging-0.12.12.tgz",
      "integrity": "sha512-6q0pbzYBJhZEtUoQx7hnPhZvAbuMNuBXKQXOx2YlWhSrlv9N1m0ZzlNpBbu/ItTzrwNKTibdYzUyaaxdWLg+4w==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/installations": "0.6.9",
        "@firebase/messaging-interop-types": "0.2.2",
        "@firebase/util": "1.10.0",
        "idb": "7.1.1",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/messaging-compat": {
      "version": "0.2.12",
      "resolved": "https://registry.npmjs.org/@firebase/messaging-compat/-/messaging-compat-0.2.12.tgz",
      "integrity": "sha512-pKsiUVZrbmRgdImYqhBNZlkKJbqjlPkVdQRZGRbkTyX4OSGKR0F/oJeCt1a8jEg5UnBp4fdVwSWSp4DuCovvEQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/messaging": "0.12.12",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/messaging-interop-types": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/@firebase/messaging-interop-types/-/messaging-interop-types-0.2.2.tgz",
      "integrity": "sha512-l68HXbuD2PPzDUOFb3aG+nZj5KA3INcPwlocwLZOzPp9rFM9yeuI9YLl6DQfguTX5eAGxO0doTR+rDLDvQb5tA==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/performance": {
      "version": "0.6.9",
      "resolved": "https://registry.npmjs.org/@firebase/performance/-/performance-0.6.9.tgz",
      "integrity": "sha512-PnVaak5sqfz5ivhua+HserxTJHtCar/7zM0flCX6NkzBNzJzyzlH4Hs94h2Il0LQB99roBqoE5QT1JqWqcLJHQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/installations": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/performance-compat": {
      "version": "0.2.9",
      "resolved": "https://registry.npmjs.org/@firebase/performance-compat/-/performance-compat-0.2.9.tgz",
      "integrity": "sha512-dNl95IUnpsu3fAfYBZDCVhXNkASE0uo4HYaEPd2/PKscfTvsgqFAOxfAXzBEDOnynDWiaGUnb5M1O00JQ+3FXA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/performance": "0.6.9",
        "@firebase/performance-types": "0.2.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/performance-types": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/@firebase/performance-types/-/performance-types-0.2.2.tgz",
      "integrity": "sha512-gVq0/lAClVH5STrIdKnHnCo2UcPLjJlDUoEB/tB4KM+hAeHUxWKnpT0nemUPvxZ5nbdY/pybeyMe8Cs29gEcHA==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/remote-config": {
      "version": "0.4.9",
      "resolved": "https://registry.npmjs.org/@firebase/remote-config/-/remote-config-0.4.9.tgz",
      "integrity": "sha512-EO1NLCWSPMHdDSRGwZ73kxEEcTopAxX1naqLJFNApp4hO8WfKfmEpmjxmP5TrrnypjIf2tUkYaKsfbEA7+AMmA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/installations": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/remote-config-compat": {
      "version": "0.2.9",
      "resolved": "https://registry.npmjs.org/@firebase/remote-config-compat/-/remote-config-compat-0.2.9.tgz",
      "integrity": "sha512-AxzGpWfWFYejH2twxfdOJt5Cfh/ATHONegTd/a0p5flEzsD5JsxXgfkFToop+mypEL3gNwawxrxlZddmDoNxyA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/remote-config": "0.4.9",
        "@firebase/remote-config-types": "0.3.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/remote-config-types": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@firebase/remote-config-types/-/remote-config-types-0.3.2.tgz",
      "integrity": "sha512-0BC4+Ud7y2aPTyhXJTMTFfrGGLqdYXrUB9sJVAB8NiqJswDTc4/2qrE/yfUbnQJhbSi6ZaTTBKyG3n1nplssaA==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/storage": {
      "version": "0.13.2",
      "resolved": "https://registry.npmjs.org/@firebase/storage/-/storage-0.13.2.tgz",
      "integrity": "sha512-fxuJnHshbhVwuJ4FuISLu+/76Aby2sh+44ztjF2ppoe0TELIDxPW6/r1KGlWYt//AD0IodDYYA8ZTN89q8YqUw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0",
        "undici": "6.19.7"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/storage-compat": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@firebase/storage-compat/-/storage-compat-0.3.12.tgz",
      "integrity": "sha512-hA4VWKyGU5bWOll+uwzzhEMMYGu9PlKQc1w4DWxB3aIErWYzonrZjF0icqNQZbwKNIdh8SHjZlFeB2w6OSsjfg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/storage": "0.13.2",
        "@firebase/storage-types": "0.8.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/storage-types": {
      "version": "0.8.2",
      "resolved": "https://registry.npmjs.org/@firebase/storage-types/-/storage-types-0.8.2.tgz",
      "integrity": "sha512-0vWu99rdey0g53lA7IShoA2Lol1jfnPovzLDUBuon65K7uKG9G+L5uO05brD9pMw+l4HRFw23ah3GwTGpEav6g==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x",
        "@firebase/util": "1.x"
      }
    },
    "node_modules/@firebase/util": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.10.0.tgz",
      "integrity": "sha512-xKtx4A668icQqoANRxyDLBLz51TAbDP9KRfpbKGxiCAW346d0BeJe5vN6/hKxxmWwnZ0mautyv39JxviwwQMOQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/vertexai-preview": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@firebase/vertexai-preview/-/vertexai-preview-0.0.4.tgz",
      "integrity": "sha512-EBSqyu9eg8frQlVU9/HjKtHN7odqbh9MtAcVz3WwHj4gLCLOoN9F/o+oxlq3CxvFrd3CNTZwu6d2mZtVlEInng==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check-interop-types": "0.3.2",
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x",
        "@firebase/app-types": "0.x"
      }
    },
    "node_modules/@firebase/webchannel-wrapper": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@firebase/webchannel-wrapper/-/webchannel-wrapper-1.0.1.tgz",
      "integrity": "sha512-jmEnr/pk0yVkA7mIlHNnxCi+wWzOFUg0WyIotgkKAb2u1J7fAeDBcVNSTjTihbAYNusCLQdW5s9IJ5qwnEufcQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@floating-ui/core": {
      "version": "1.7.3",
      "resolved": "https://registry.npmjs.org/@floating-ui/core/-/core-1.7.3.tgz",
      "integrity": "sha512-sGnvb5dmrJaKEZ+LDIpguvdX3bDlEllmv4/ClQ9awcmCZrlx5jQyyMWFM5kBI+EyNOCDDiKk8il0zeuX3Zlg/w==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/utils": "^0.2.10"
      }
    },
    "node_modules/@floating-ui/dom": {
      "version": "1.7.4",
      "resolved": "https://registry.npmjs.org/@floating-ui/dom/-/dom-1.7.4.tgz",
      "integrity": "sha512-OOchDgh4F2CchOX94cRVqhvy7b3AFb+/rQXyswmzmGakRfkMgoWVjfnLWkRirfLEfuD4ysVW16eXzwt3jHIzKA==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/core": "^1.7.3",
        "@floating-ui/utils": "^0.2.10"
      }
    },
    "node_modules/@floating-ui/react": {
      "version": "0.27.16",
      "resolved": "https://registry.npmjs.org/@floating-ui/react/-/react-0.27.16.tgz",
      "integrity": "sha512-9O8N4SeG2z++TSM8QA/KTeKFBVCNEz/AGS7gWPJf6KFRzmRWixFRnCnkPHRDwSVZW6QPDO6uT0P2SpWNKCc9/g==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/react-dom": "^2.1.6",
        "@floating-ui/utils": "^0.2.10",
        "tabbable": "^6.0.0"
      },
      "peerDependencies": {
        "react": ">=17.0.0",
        "react-dom": ">=17.0.0"
      }
    },
    "node_modules/@floating-ui/react-dom": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@floating-ui/react-dom/-/react-dom-2.1.6.tgz",
      "integrity": "sha512-4JX6rEatQEvlmgU80wZyq9RT96HZJa88q8hp0pBd+LrczeDI4o6uA2M+uvxngVHo4Ihr8uibXxH6+70zhAFrVw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/dom": "^1.7.4"
      },
      "peerDependencies": {
        "react": ">=16.8.0",
        "react-dom": ">=16.8.0"
      }
    },
    "node_modules/@floating-ui/utils": {
      "version": "0.2.10",
      "resolved": "https://registry.npmjs.org/@floating-ui/utils/-/utils-0.2.10.tgz",
      "integrity": "sha512-aGTxbpbg8/b5JfU1HXSrbH3wXZuLPJcNEcZQFMxLs3oSzgtVu6nFPkbbGGUvBcUjKV2YyB9Wxxabo+HEH9tcRQ==",
      "license": "MIT"
    },
    "node_modules/@grpc/grpc-js": {
      "version": "1.9.15",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.9.15.tgz",
      "integrity": "sha512-nqE7Hc0AzI+euzUwDAy0aY5hCp10r734gMGRdU+qOPX0XSceI2ULrcXB5U2xSc5VkWwalCj4M7GzCAygZl2KoQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@grpc/proto-loader": "^0.7.8",
        "@types/node": ">=12.12.47"
      },
      "engines": {
        "node": "^8.13.0 || >=10.10.0"
      }
    },
    "node_modules/@grpc/proto-loader": {
      "version": "0.7.15",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.7.15.tgz",
      "integrity": "sha512-tMXdRCfYVixjuFK+Hk0Q1s38gV9zDiDJfWL3h1rv4Qc39oILCu1TRTDt7+fGUI8K4G1Fj125Hx/ru3azECWTyQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "lodash.camelcase": "^4.3.0",
        "long": "^5.0.0",
        "protobufjs": "^7.2.5",
        "yargs": "^17.7.2"
      },
      "bin": {
        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
      "integrity": "sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==",
      "deprecated": "Use @eslint/config-array instead",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanwhocodes/object-schema": "^2.0.3",
        "debug": "^4.3.1",
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
      "deprecated": "Use @eslint/object-schema instead",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/@img/sharp-darwin-arm64": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.3.tgz",
      "integrity": "sha512-ryFMfvxxpQRsgZJqBd4wsttYQbCxsJksrv9Lw/v798JcQ8+w84mBWuXwl+TT0WJ/WrYOLaYpwQXi3sA9nTIaIg==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-darwin-arm64": "1.2.0"
      }
    },
    "node_modules/@img/sharp-darwin-x64": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.3.tgz",
      "integrity": "sha512-yHpJYynROAj12TA6qil58hmPmAwxKKC7reUqtGLzsOHfP7/rniNGTL8tjWX6L3CTV4+5P4ypcS7Pp+7OB+8ihA==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-darwin-x64": "1.2.0"
      }
    },
    "node_modules/@img/sharp-libvips-darwin-arm64": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.2.0.tgz",
      "integrity": "sha512-sBZmpwmxqwlqG9ueWFXtockhsxefaV6O84BMOrhtg/YqbTaRdqDE7hxraVE3y6gVM4eExmfzW4a8el9ArLeEiQ==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "darwin"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-darwin-x64": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.2.0.tgz",
      "integrity": "sha512-M64XVuL94OgiNHa5/m2YvEQI5q2cl9d/wk0qFTDVXcYzi43lxuiFTftMR1tOnFQovVXNZJ5TURSDK2pNe9Yzqg==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "darwin"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-arm": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.2.0.tgz",
      "integrity": "sha512-mWd2uWvDtL/nvIzThLq3fr2nnGfyr/XMXlq8ZJ9WMR6PXijHlC3ksp0IpuhK6bougvQrchUAfzRLnbsen0Cqvw==",
      "cpu": [
        "arm"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-arm64": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.2.0.tgz",
      "integrity": "sha512-RXwd0CgG+uPRX5YYrkzKyalt2OJYRiJQ8ED/fi1tq9WQW2jsQIn0tqrlR5l5dr/rjqq6AHAxURhj2DVjyQWSOA==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-ppc64": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-ppc64/-/sharp-libvips-linux-ppc64-1.2.0.tgz",
      "integrity": "sha512-Xod/7KaDDHkYu2phxxfeEPXfVXFKx70EAFZ0qyUdOjCcxbjqyJOEUpDe6RIyaunGxT34Anf9ue/wuWOqBW2WcQ==",
      "cpu": [
        "ppc64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-s390x": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.2.0.tgz",
      "integrity": "sha512-eMKfzDxLGT8mnmPJTNMcjfO33fLiTDsrMlUVcp6b96ETbnJmd4uvZxVJSKPQfS+odwfVaGifhsB07J1LynFehw==",
      "cpu": [
        "s390x"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-x64": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.2.0.tgz",
      "integrity": "sha512-ZW3FPWIc7K1sH9E3nxIGB3y3dZkpJlMnkk7z5tu1nSkBoCgw2nSRTFHI5pB/3CQaJM0pdzMF3paf9ckKMSE9Tg==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linuxmusl-arm64": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.2.0.tgz",
      "integrity": "sha512-UG+LqQJbf5VJ8NWJ5Z3tdIe/HXjuIdo4JeVNADXBFuG7z9zjoegpzzGIyV5zQKi4zaJjnAd2+g2nna8TZvuW9Q==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linuxmusl-x64": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.2.0.tgz",
      "integrity": "sha512-SRYOLR7CXPgNze8akZwjoGBoN1ThNZoqpOgfnOxmWsklTGVfJiGJoC/Lod7aNMGA1jSsKWM1+HRX43OP6p9+6Q==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-linux-arm": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.34.3.tgz",
      "integrity": "sha512-oBK9l+h6KBN0i3dC8rYntLiVfW8D8wH+NPNT3O/WBHeW0OQWCjfWksLUaPidsrDKpJgXp3G3/hkmhptAW0I3+A==",
      "cpu": [
        "arm"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-arm": "1.2.0"
      }
    },
    "node_modules/@img/sharp-linux-arm64": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.34.3.tgz",
      "integrity": "sha512-QdrKe3EvQrqwkDrtuTIjI0bu6YEJHTgEeqdzI3uWJOH6G1O8Nl1iEeVYRGdj1h5I21CqxSvQp1Yv7xeU3ZewbA==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-arm64": "1.2.0"
      }
    },
    "node_modules/@img/sharp-linux-ppc64": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-ppc64/-/sharp-linux-ppc64-0.34.3.tgz",
      "integrity": "sha512-GLtbLQMCNC5nxuImPR2+RgrviwKwVql28FWZIW1zWruy6zLgA5/x2ZXk3mxj58X/tszVF69KK0Is83V8YgWhLA==",
      "cpu": [
        "ppc64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-ppc64": "1.2.0"
      }
    },
    "node_modules/@img/sharp-linux-s390x": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.34.3.tgz",
      "integrity": "sha512-3gahT+A6c4cdc2edhsLHmIOXMb17ltffJlxR0aC2VPZfwKoTGZec6u5GrFgdR7ciJSsHT27BD3TIuGcuRT0KmQ==",
      "cpu": [
        "s390x"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-s390x": "1.2.0"
      }
    },
    "node_modules/@img/sharp-linux-x64": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.3.tgz",
      "integrity": "sha512-8kYso8d806ypnSq3/Ly0QEw90V5ZoHh10yH0HnrzOCr6DKAPI6QVHvwleqMkVQ0m+fc7EH8ah0BB0QPuWY6zJQ==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-x64": "1.2.0"
      }
    },
    "node_modules/@img/sharp-linuxmusl-arm64": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.34.3.tgz",
      "integrity": "sha512-vAjbHDlr4izEiXM1OTggpCcPg9tn4YriK5vAjowJsHwdBIdx0fYRsURkxLG2RLm9gyBq66gwtWI8Gx0/ov+JKQ==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linuxmusl-arm64": "1.2.0"
      }
    },
    "node_modules/@img/sharp-linuxmusl-x64": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.3.tgz",
      "integrity": "sha512-gCWUn9547K5bwvOn9l5XGAEjVTTRji4aPTqLzGXHvIr6bIDZKNTA34seMPgM0WmSf+RYBH411VavCejp3PkOeQ==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linuxmusl-x64": "1.2.0"
      }
    },
    "node_modules/@img/sharp-wasm32": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.34.3.tgz",
      "integrity": "sha512-+CyRcpagHMGteySaWos8IbnXcHgfDn7pO2fiC2slJxvNq9gDipYBN42/RagzctVRKgxATmfqOSulgZv5e1RdMg==",
      "cpu": [
        "wasm32"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
      "optional": true,
      "dependencies": {
        "@emnapi/runtime": "^1.4.4"
      },
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-arm64": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-arm64/-/sharp-win32-arm64-0.34.3.tgz",
      "integrity": "sha512-MjnHPnbqMXNC2UgeLJtX4XqoVHHlZNd+nPt1kRPmj63wURegwBhZlApELdtxM2OIZDRv/DFtLcNhVbd1z8GYXQ==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-ia32": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.34.3.tgz",
      "integrity": "sha512-xuCdhH44WxuXgOM714hn4amodJMZl3OEvf0GVTm0BEyMeA2to+8HEdRPShH0SLYptJY1uBw+SCFP9WVQi1Q/cw==",
      "cpu": [
        "ia32"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-x64": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.3.tgz",
      "integrity": "sha512-OWwz05d++TxzLEv4VnsTz5CmZ6mI6S05sfQGEMrNrQcOEERbX46332IvE7pO/EUiw7jUrrS40z/M7kPyjfl04g==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.2.tgz",
      "integrity": "sha512-Bq3SmSpyFHaWjPk8If9yc6svM8c56dB5BAtW4Qbw5jHTwwXXcTLoRMkpDJp6VL0XzlWaCHTXrkFURMYmD0sLqg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-styles": {
      "version": "6.2.3",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.3.tgz",
      "integrity": "sha512-4Dj6M28JB+oAH8kFkTLUo+a2jwOFkuqb3yucU0CANcRRUbxS0cP0nZYCGjcc3BNXwRIsUVmDGgzawme7zvJHvg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.2.tgz",
      "integrity": "sha512-gmBGslpoQJtgnMAvOVqGZpEz9dyoKTCzy2nfz/n8aIFhN/jCE/rCmcxabB6jOOHV+0WNnylOxaxBQPSvcWklhA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.7.0.tgz",
      "integrity": "sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/core": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.7.0.tgz",
      "integrity": "sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/reporters": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.7.0",
        "jest-config": "^29.7.0",
        "jest-haste-map": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-resolve-dependencies": "^29.7.0",
        "jest-runner": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "jest-watcher": "^29.7.0",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/core/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@jest/core/node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/core/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jest/environment": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.7.0.tgz",
      "integrity": "sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/fake-timers": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-mock": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.7.0.tgz",
      "integrity": "sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "expect": "^29.7.0",
        "jest-snapshot": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect-utils": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.7.0.tgz",
      "integrity": "sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jest-get-type": "^29.6.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.7.0.tgz",
      "integrity": "sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.7.0",
        "jest-mock": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.7.0.tgz",
      "integrity": "sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/expect": "^29.7.0",
        "@jest/types": "^29.6.3",
        "jest-mock": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.7.0.tgz",
      "integrity": "sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^6.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-worker": "^29.7.0",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/schemas": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
      "integrity": "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@sinclair/typebox": "^0.27.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.3.tgz",
      "integrity": "sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.7.0.tgz",
      "integrity": "sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.7.0.tgz",
      "integrity": "sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^29.7.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.7.0.tgz",
      "integrity": "sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.3",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-util": "^29.7.0",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.3.tgz",
      "integrity": "sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/remapping": {
      "version": "2.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/remapping/-/remapping-2.3.5.tgz",
      "integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/source-map": {
      "version": "0.3.11",
      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.11.tgz",
      "integrity": "sha512-ZMp1V8ZFcPG5dIWnQLr3NSI1MiCU7UETdS/A0G8V/XWHvJv3ZsFqutJn1Y5RPmAPX6F3BiE397OqveU/9NCuIA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.31",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
      "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@napi-rs/wasm-runtime": {
      "version": "0.2.12",
      "resolved": "https://registry.npmjs.org/@napi-rs/wasm-runtime/-/wasm-runtime-0.2.12.tgz",
      "integrity": "sha512-ZVWUcfwY4E/yPitQJl481FjFo3K22D6qF0DuFH6Y/nbnE11GY5uguDxZMGXPQ8WQ0128MXQD7TnfHyK4oWoIJQ==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@emnapi/core": "^1.4.3",
        "@emnapi/runtime": "^1.4.3",
        "@tybys/wasm-util": "^0.10.0"
      }
    },
    "node_modules/@next/env": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/@next/env/-/env-15.5.3.tgz",
      "integrity": "sha512-RSEDTRqyihYXygx/OJXwvVupfr9m04+0vH8vyy0HfZ7keRto6VX9BbEk0J2PUk0VGy6YhklJUSrgForov5F9pw==",
      "license": "MIT"
    },
    "node_modules/@next/eslint-plugin-next": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/@next/eslint-plugin-next/-/eslint-plugin-next-15.5.3.tgz",
      "integrity": "sha512-SdhaKdko6dpsSr0DldkESItVrnPYB1NS2NpShCSX5lc7SSQmLZt5Mug6t2xbiuVWEVDLZSuIAoQyYVBYp0dR5g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-glob": "3.3.1"
      }
    },
    "node_modules/@next/swc-darwin-arm64": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-15.5.3.tgz",
      "integrity": "sha512-nzbHQo69+au9wJkGKTU9lP7PXv0d1J5ljFpvb+LnEomLtSbJkbZyEs6sbF3plQmiOB2l9OBtN2tNSvCH1nQ9Jg==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-darwin-x64": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-15.5.3.tgz",
      "integrity": "sha512-w83w4SkOOhekJOcA5HBvHyGzgV1W/XvOfpkrxIse4uPWhYTTRwtGEM4v/jiXwNSJvfRvah0H8/uTLBKRXlef8g==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-gnu": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-15.5.3.tgz",
      "integrity": "sha512-+m7pfIs0/yvgVu26ieaKrifV8C8yiLe7jVp9SpcIzg7XmyyNE7toC1fy5IOQozmr6kWl/JONC51osih2RyoXRw==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-musl": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-15.5.3.tgz",
      "integrity": "sha512-u3PEIzuguSenoZviZJahNLgCexGFhso5mxWCrrIMdvpZn6lkME5vc/ADZG8UUk5K1uWRy4hqSFECrON6UKQBbQ==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-gnu": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-15.5.3.tgz",
      "integrity": "sha512-lDtOOScYDZxI2BENN9m0pfVPJDSuUkAD1YXSvlJF0DKwZt0WlA7T7o3wrcEr4Q+iHYGzEaVuZcsIbCps4K27sA==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-musl": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-15.5.3.tgz",
      "integrity": "sha512-9vWVUnsx9PrY2NwdVRJ4dUURAQ8Su0sLRPqcCCxtX5zIQUBES12eRVHq6b70bbfaVaxIDGJN2afHui0eDm+cLg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-arm64-msvc": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-15.5.3.tgz",
      "integrity": "sha512-1CU20FZzY9LFQigRi6jM45oJMU3KziA5/sSG+dXeVaTm661snQP6xu3ykGxxwU5sLG3sh14teO/IOEPVsQMRfA==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-x64-msvc": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-15.5.3.tgz",
      "integrity": "sha512-JMoLAq3n3y5tKXPQwCK5c+6tmwkuFDa2XAxz8Wm4+IVthdBZdZGh+lmiLUHg9f9IDwIQpUjp+ysd6OkYTyZRZw==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nolyfill/is-core-module": {
      "version": "1.0.39",
      "resolved": "https://registry.npmjs.org/@nolyfill/is-core-module/-/is-core-module-1.0.39.tgz",
      "integrity": "sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.4.0"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@protobufjs/aspromise": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
      "integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/base64": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/codegen": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/eventemitter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
      "integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/fetch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
      "integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.1",
        "@protobufjs/inquire": "^1.1.0"
      }
    },
    "node_modules/@protobufjs/float": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
      "integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/inquire": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
      "integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/path": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
      "integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/pool": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
      "integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/utf8": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
      "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@rollup/plugin-babel": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-5.3.1.tgz",
      "integrity": "sha512-WFfdLWU/xVWKeRQnKmIAQULUI7Il0gZnBIH/ZFO069wYIfPu+8zrfp/KMW0atmELoRDq8FbiP3VCss9MhCut7Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.10.4",
        "@rollup/pluginutils": "^3.1.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0",
        "@types/babel__core": "^7.1.9",
        "rollup": "^1.20.0||^2.0.0"
      },
      "peerDependenciesMeta": {
        "@types/babel__core": {
          "optional": true
        }
      }
    },
    "node_modules/@rollup/plugin-node-resolve": {
      "version": "11.2.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-11.2.1.tgz",
      "integrity": "sha512-yc2n43jcqVyGE2sqV5/YCmocy9ArjVAP/BeXyTtADTBBX6V0e5UMqwO8CdQ0kzjb6zu5P1qMzsScCMRvE9OlVg==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.1.0",
        "@types/resolve": "1.17.1",
        "builtin-modules": "^3.1.0",
        "deepmerge": "^4.2.2",
        "is-module": "^1.0.0",
        "resolve": "^1.19.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0"
      }
    },
    "node_modules/@rollup/plugin-replace": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-replace/-/plugin-replace-2.4.2.tgz",
      "integrity": "sha512-IGcu+cydlUMZ5En85jxHH4qj2hta/11BHq95iHEyb2sbgiN0eCdzvUcHw5gt9pBL5lTi4JDYJ1acCoMGpTvEZg==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.1.0",
        "magic-string": "^0.25.7"
      },
      "peerDependencies": {
        "rollup": "^1.20.0 || ^2.0.0"
      }
    },
    "node_modules/@rollup/pluginutils": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-3.1.0.tgz",
      "integrity": "sha512-GksZ6pr6TpIjHm8h9lSQ8pi8BE9VeubNT0OMJ3B5uZJ8pz73NPiqOtCog/x2/QzM1ENChPKxMDhiQuRHsqc+lg==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "0.0.39",
        "estree-walker": "^1.0.1",
        "picomatch": "^2.2.2"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0"
      }
    },
    "node_modules/@rollup/pluginutils/node_modules/@types/estree": {
      "version": "0.0.39",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-0.0.39.tgz",
      "integrity": "sha512-EYNwp3bU+98cpU4lAWYYL7Zz+2gryWH1qbdDTidVd6hkiR6weksdbMadyXKXNPEkQFhXM+hVO9ZygomHXp+AIw==",
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.50.1.tgz",
      "integrity": "sha512-MCgtFB2+SVNuQmmjHf+wfI4CMxy3Tk8XjA5Z//A0AKD7QXUYFMQcns91K6dEHBvZPCnhJSyDWLApk40Iq/H3tA==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rtsao/scc": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@rtsao/scc/-/scc-1.1.0.tgz",
      "integrity": "sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rushstack/eslint-patch": {
      "version": "1.12.0",
      "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.12.0.tgz",
      "integrity": "sha512-5EwMtOqvJMMa3HbmxLlF74e+3/HhwBTMcvt3nqVJgGCozO6hzIPOBlwm8mGVNR9SN2IJpxSnlxczyDjcn7qIyw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@sinonjs/commons": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz",
      "integrity": "sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "node_modules/@supabase/auth-helpers-react": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/@supabase/auth-helpers-react/-/auth-helpers-react-0.5.0.tgz",
      "integrity": "sha512-5QSaV2CGuhDhd7RlQCoviVEAYsP7XnrFMReOcBazDvVmqSIyjKcDwhLhWvnrxMOq5qjOaA44MHo7wXqDiF0puQ==",
      "deprecated": "This package is now deprecated - please use the @supabase/ssr package instead.",
      "license": "MIT",
      "peerDependencies": {
        "@supabase/supabase-js": "^2.39.8"
      }
    },
    "node_modules/@supabase/auth-js": {
      "version": "2.71.1",
      "resolved": "https://registry.npmjs.org/@supabase/auth-js/-/auth-js-2.71.1.tgz",
      "integrity": "sha512-mMIQHBRc+SKpZFRB2qtupuzulaUhFYupNyxqDj5Jp/LyPvcWvjaJzZzObv6URtL/O6lPxkanASnotGtNpS3H2Q==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/functions-js": {
      "version": "2.4.6",
      "resolved": "https://registry.npmjs.org/@supabase/functions-js/-/functions-js-2.4.6.tgz",
      "integrity": "sha512-bhjZ7rmxAibjgmzTmQBxJU6ZIBCCJTc3Uwgvdi4FewueUTAGO5hxZT1Sj6tiD+0dSXf9XI87BDdJrg12z8Uaew==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/node-fetch": {
      "version": "2.6.15",
      "resolved": "https://registry.npmjs.org/@supabase/node-fetch/-/node-fetch-2.6.15.tgz",
      "integrity": "sha512-1ibVeYUacxWYi9i0cf5efil6adJ9WRyZBLivgjs+AUpewx1F3xPi7gLgaASI2SmIQxPoCEjAsLAzKPgMJVgOUQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      }
    },
    "node_modules/@supabase/postgrest-js": {
      "version": "1.21.4",
      "resolved": "https://registry.npmjs.org/@supabase/postgrest-js/-/postgrest-js-1.21.4.tgz",
      "integrity": "sha512-TxZCIjxk6/dP9abAi89VQbWWMBbybpGWyvmIzTd79OeravM13OjR/YEYeyUOPcM1C3QyvXkvPZhUfItvmhY1IQ==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/realtime-js": {
      "version": "2.15.5",
      "resolved": "https://registry.npmjs.org/@supabase/realtime-js/-/realtime-js-2.15.5.tgz",
      "integrity": "sha512-/Rs5Vqu9jejRD8ZeuaWXebdkH+J7V6VySbCZ/zQM93Ta5y3mAmocjioa/nzlB6qvFmyylUgKVS1KpE212t30OA==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.13",
        "@types/phoenix": "^1.6.6",
        "@types/ws": "^8.18.1",
        "ws": "^8.18.2"
      }
    },
    "node_modules/@supabase/ssr": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@supabase/ssr/-/ssr-0.4.1.tgz",
      "integrity": "sha512-000i7y4ITXjXU0T1JytZYU33VbUNklX9YN47hCweaLKsTBAEigJJJCeq3G+/IiwEggBt58Vu0KQ3UGXON7OmDQ==",
      "license": "MIT",
      "dependencies": {
        "cookie": "^0.6.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-linux-x64-gnu": "^4.9.5"
      },
      "peerDependencies": {
        "@supabase/supabase-js": "^2.43.4"
      }
    },
    "node_modules/@supabase/storage-js": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/@supabase/storage-js/-/storage-js-2.12.1.tgz",
      "integrity": "sha512-QWg3HV6Db2J81VQx0PqLq0JDBn4Q8B1FYn1kYcbla8+d5WDmTdwwMr+EJAxNOSs9W4mhKMv+EYCpCrTFlTj4VQ==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/supabase-js": {
      "version": "2.57.4",
      "resolved": "https://registry.npmjs.org/@supabase/supabase-js/-/supabase-js-2.57.4.tgz",
      "integrity": "sha512-LcbTzFhHYdwfQ7TRPfol0z04rLEyHabpGYANME6wkQ/kLtKNmI+Vy+WEM8HxeOZAtByUFxoUTTLwhXmrh+CcVw==",
      "license": "MIT",
      "dependencies": {
        "@supabase/auth-js": "2.71.1",
        "@supabase/functions-js": "2.4.6",
        "@supabase/node-fetch": "2.6.15",
        "@supabase/postgrest-js": "1.21.4",
        "@supabase/realtime-js": "2.15.5",
        "@supabase/storage-js": "2.12.1"
      }
    },
    "node_modules/@surma/rollup-plugin-off-main-thread": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/@surma/rollup-plugin-off-main-thread/-/rollup-plugin-off-main-thread-2.2.3.tgz",
      "integrity": "sha512-lR8q/9W7hZpMWweNiAKU7NQerBnzQQLvi8qnTDU/fxItPhtZVMbPV3lbCwjhIlNBe9Bbr5V+KHshvWmVSG9cxQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "ejs": "^3.1.6",
        "json5": "^2.2.0",
        "magic-string": "^0.25.0",
        "string.prototype.matchall": "^4.0.6"
      }
    },
    "node_modules/@swc/helpers": {
      "version": "0.5.15",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.15.tgz",
      "integrity": "sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.8.0"
      }
    },
    "node_modules/@testing-library/dom": {
      "version": "10.4.1",
      "resolved": "https://registry.npmjs.org/@testing-library/dom/-/dom-10.4.1.tgz",
      "integrity": "sha512-o4PXJQidqJl82ckFaXUeoAW+XysPLauYI43Abki5hABd853iMhitooc6znOnczgbTYmEP6U6/y1ZyKAIsvMKGg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.10.4",
        "@babel/runtime": "^7.12.5",
        "@types/aria-query": "^5.0.1",
        "aria-query": "5.3.0",
        "dom-accessibility-api": "^0.5.9",
        "lz-string": "^1.5.0",
        "picocolors": "1.1.1",
        "pretty-format": "^27.0.2"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@testing-library/jest-dom": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/@testing-library/jest-dom/-/jest-dom-6.8.0.tgz",
      "integrity": "sha512-WgXcWzVM6idy5JaftTVC8Vs83NKRmGJz4Hqs4oyOuO2J4r/y79vvKZsb+CaGyCSEbUPI6OsewfPd0G1A0/TUZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@adobe/css-tools": "^4.4.0",
        "aria-query": "^5.0.0",
        "css.escape": "^1.5.1",
        "dom-accessibility-api": "^0.6.3",
        "picocolors": "^1.1.1",
        "redent": "^3.0.0"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6",
        "yarn": ">=1"
      }
    },
    "node_modules/@testing-library/jest-dom/node_modules/dom-accessibility-api": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/dom-accessibility-api/-/dom-accessibility-api-0.6.3.tgz",
      "integrity": "sha512-7ZgogeTnjuHbo+ct10G9Ffp0mif17idi0IyWNVA/wcwcm7NPOD/WEHVP3n7n3MhXqxoIYm8d6MuZohYWIZ4T3w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@testing-library/react": {
      "version": "16.3.0",
      "resolved": "https://registry.npmjs.org/@testing-library/react/-/react-16.3.0.tgz",
      "integrity": "sha512-kFSyxiEDwv1WLl2fgsq6pPBbw5aWKrsY2/noi1Id0TK0UParSF62oFQFGHXIyaG4pp2tEub/Zlel+fjjZILDsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.12.5"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@testing-library/dom": "^10.0.0",
        "@types/react": "^18.0.0 || ^19.0.0",
        "@types/react-dom": "^18.0.0 || ^19.0.0",
        "react": "^18.0.0 || ^19.0.0",
        "react-dom": "^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@tybys/wasm-util": {
      "version": "0.10.1",
      "resolved": "https://registry.npmjs.org/@tybys/wasm-util/-/wasm-util-0.10.1.tgz",
      "integrity": "sha512-9tTaPJLSiejZKx+Bmog4uSubteqTvFrVrURwkmHixBo0G4seD0zUxp98E1DzUBJxLQ3NPwXrGKDiVjwx/DpPsg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@types/aria-query": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/@types/aria-query/-/aria-query-5.0.4.tgz",
      "integrity": "sha512-rfT93uj5s0PRL7EzccGMs3brplhcrghnDoV26NqKhCAS1hVo+WdNsPvE/yb6ilfr5hi2MEk6d5EWJTKdxg8jVw==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.28.0.tgz",
      "integrity": "sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      }
    },
    "node_modules/@types/eslint": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/@types/eslint/-/eslint-9.6.1.tgz",
      "integrity": "sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/estree": "*",
        "@types/json-schema": "*"
      }
    },
    "node_modules/@types/eslint-scope": {
      "version": "3.7.7",
      "resolved": "https://registry.npmjs.org/@types/eslint-scope/-/eslint-scope-3.7.7.tgz",
      "integrity": "sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/eslint": "*",
        "@types/estree": "*"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/@types/glob": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/@types/glob/-/glob-7.2.0.tgz",
      "integrity": "sha512-ZUxbzKl0IfJILTS6t7ip5fQQM/J3TJYubDm3nMbgubNNYS62eXeUpoLUC8/7fJNiFYHTrGPQn7hspDUzIHX3UA==",
      "license": "MIT",
      "dependencies": {
        "@types/minimatch": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.9",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz",
      "integrity": "sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "license": "MIT"
    },
    "node_modules/@types/json5": {
      "version": "0.0.29",
      "resolved": "https://registry.npmjs.org/@types/json5/-/json5-0.0.29.tgz",
      "integrity": "sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/minimatch": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/@types/minimatch/-/minimatch-5.1.2.tgz",
      "integrity": "sha512-K0VQKziLUWkVKiRVrx4a40iPaxTUefQmjtkQofBkYRcoaaL/8rhwDWww9qWbrgicNOgnpIsMxyNIUM4+n6dUIA==",
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "24.3.3",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.3.3.tgz",
      "integrity": "sha512-GKBNHjoNw3Kra1Qg5UXttsY5kiWMEfoHq2TmXb+b1rcm6N7B3wTrFYIf/oSZ1xNQ+hVVijgLkiDZh7jRRsh+Gw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~7.10.0"
      }
    },
    "node_modules/@types/pako": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/pako/-/pako-2.0.4.tgz",
      "integrity": "sha512-VWDCbrLeVXJM9fihYodcLiIv0ku+AlOa/TQ1SvYOaBuyrSKgEcro95LJyIsJ4vSo6BXIxOKxiJAat04CmST9Fw==",
      "license": "MIT"
    },
    "node_modules/@types/phoenix": {
      "version": "1.6.6",
      "resolved": "https://registry.npmjs.org/@types/phoenix/-/phoenix-1.6.6.tgz",
      "integrity": "sha512-PIzZZlEppgrpoT2QgbnDU+MMzuR6BbCjllj0bM70lWoejMeNJAxCchxnv7J3XFkI8MpygtRpzXrIlmWUBclP5A==",
      "license": "MIT"
    },
    "node_modules/@types/raf": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/@types/raf/-/raf-3.4.3.tgz",
      "integrity": "sha512-c4YAvMedbPZ5tEyxzQdMoOhhJ4RD3rngZIdwC2/qDN3d7JpEhB6fiBRKVY1lg5B7Wk+uPBjn5f39j1/2MY1oOw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/resolve": {
      "version": "1.17.1",
      "resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.17.1.tgz",
      "integrity": "sha512-yy7HuzQhj0dhGpD8RLXSZWEkLsV9ibvxvi6EiJ3bkqLAO1RGo0WbkWQiwpRlSFymTJRz0d3k5LM3kkx8ArDbLw==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/trusted-types": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/@types/trusted-types/-/trusted-types-2.0.7.tgz",
      "integrity": "sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==",
      "license": "MIT"
    },
    "node_modules/@types/ws": {
      "version": "8.18.1",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.18.1.tgz",
      "integrity": "sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/yargs": {
      "version": "17.0.33",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
      "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.3",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.43.0.tgz",
      "integrity": "sha512-8tg+gt7ENL7KewsKMKDHXR1vm8tt9eMxjJBYINf6swonlWgkYn5NwyIgXpbbDxTNU5DgpDFfj95prcTq2clIQQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.43.0",
        "@typescript-eslint/type-utils": "8.43.0",
        "@typescript-eslint/utils": "8.43.0",
        "@typescript-eslint/visitor-keys": "8.43.0",
        "graphemer": "^1.4.0",
        "ignore": "^7.0.0",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.43.0",
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
      "integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.43.0.tgz",
      "integrity": "sha512-B7RIQiTsCBBmY+yW4+ILd6mF5h1FUwJsVvpqkrgpszYifetQ2Ke+Z4u6aZh0CblkUGIdR59iYVyXqqZGkZ3aBw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.43.0",
        "@typescript-eslint/types": "8.43.0",
        "@typescript-eslint/typescript-estree": "8.43.0",
        "@typescript-eslint/visitor-keys": "8.43.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/project-service": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/project-service/-/project-service-8.43.0.tgz",
      "integrity": "sha512-htB/+D/BIGoNTQYffZw4uM4NzzuolCoaA/BusuSIcC8YjmBYQioew5VUZAYdAETPjeed0hqCaW7EHg+Robq8uw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/tsconfig-utils": "^8.43.0",
        "@typescript-eslint/types": "^8.43.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.43.0.tgz",
      "integrity": "sha512-daSWlQ87ZhsjrbMLvpuuMAt3y4ba57AuvadcR7f3nl8eS3BjRc8L9VLxFLk92RL5xdXOg6IQ+qKjjqNEimGuAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.43.0",
        "@typescript-eslint/visitor-keys": "8.43.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/tsconfig-utils": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/tsconfig-utils/-/tsconfig-utils-8.43.0.tgz",
      "integrity": "sha512-ALC2prjZcj2YqqL5X/bwWQmHA2em6/94GcbB/KKu5SX3EBDOsqztmmX1kMkvAJHzxk7TazKzJfFiEIagNV3qEA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.43.0.tgz",
      "integrity": "sha512-qaH1uLBpBuBBuRf8c1mLJ6swOfzCXryhKND04Igr4pckzSEW9JX5Aw9AgW00kwfjWJF0kk0ps9ExKTfvXfw4Qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.43.0",
        "@typescript-eslint/typescript-estree": "8.43.0",
        "@typescript-eslint/utils": "8.43.0",
        "debug": "^4.3.4",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.43.0.tgz",
      "integrity": "sha512-vQ2FZaxJpydjSZJKiSW/LJsabFFvV7KgLC5DiLhkBcykhQj8iK9BOaDmQt74nnKdLvceM5xmhaTF+pLekrxEkw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.43.0.tgz",
      "integrity": "sha512-7Vv6zlAhPb+cvEpP06WXXy/ZByph9iL6BQRBDj4kmBsW98AqEeQHlj/13X+sZOrKSo9/rNKH4Ul4f6EICREFdw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/project-service": "8.43.0",
        "@typescript-eslint/tsconfig-utils": "8.43.0",
        "@typescript-eslint/types": "8.43.0",
        "@typescript-eslint/visitor-keys": "8.43.0",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.43.0.tgz",
      "integrity": "sha512-S1/tEmkUeeswxd0GGcnwuVQPFWo8NzZTOMxCvw8BX7OMxnNae+i8Tm7REQen/SwUIPoPqfKn7EaZ+YLpiB3k9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.7.0",
        "@typescript-eslint/scope-manager": "8.43.0",
        "@typescript-eslint/types": "8.43.0",
        "@typescript-eslint/typescript-estree": "8.43.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.43.0.tgz",
      "integrity": "sha512-T+S1KqRD4sg/bHfLwrpF/K3gQLBM1n7Rp7OjjikjTEssI2YJzQpi5WXoynOaQ93ERIuq3O8RBTOUYDKszUCEHw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.43.0",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys/node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@ungap/structured-clone": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/@unrs/resolver-binding-android-arm-eabi": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-android-arm-eabi/-/resolver-binding-android-arm-eabi-1.11.1.tgz",
      "integrity": "sha512-ppLRUgHVaGRWUx0R0Ut06Mjo9gBaBkg3v/8AxusGLhsIotbBLuRk51rAzqLC8gq6NyyAojEXglNjzf6R948DNw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@unrs/resolver-binding-android-arm64": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-android-arm64/-/resolver-binding-android-arm64-1.11.1.tgz",
      "integrity": "sha512-lCxkVtb4wp1v+EoN+HjIG9cIIzPkX5OtM03pQYkG+U5O/wL53LC4QbIeazgiKqluGeVEeBlZahHalCaBvU1a2g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@unrs/resolver-binding-darwin-arm64": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-darwin-arm64/-/resolver-binding-darwin-arm64-1.11.1.tgz",
      "integrity": "sha512-gPVA1UjRu1Y/IsB/dQEsp2V1pm44Of6+LWvbLc9SDk1c2KhhDRDBUkQCYVWe6f26uJb3fOK8saWMgtX8IrMk3g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@unrs/resolver-binding-darwin-x64": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-darwin-x64/-/resolver-binding-darwin-x64-1.11.1.tgz",
      "integrity": "sha512-cFzP7rWKd3lZaCsDze07QX1SC24lO8mPty9vdP+YVa3MGdVgPmFc59317b2ioXtgCMKGiCLxJ4HQs62oz6GfRQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@unrs/resolver-binding-freebsd-x64": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-freebsd-x64/-/resolver-binding-freebsd-x64-1.11.1.tgz",
      "integrity": "sha512-fqtGgak3zX4DCB6PFpsH5+Kmt/8CIi4Bry4rb1ho6Av2QHTREM+47y282Uqiu3ZRF5IQioJQ5qWRV6jduA+iGw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@unrs/resolver-binding-linux-arm-gnueabihf": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm-gnueabihf/-/resolver-binding-linux-arm-gnueabihf-1.11.1.tgz",
      "integrity": "sha512-u92mvlcYtp9MRKmP+ZvMmtPN34+/3lMHlyMj7wXJDeXxuM0Vgzz0+PPJNsro1m3IZPYChIkn944wW8TYgGKFHw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@unrs/resolver-binding-linux-arm-musleabihf": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm-musleabihf/-/resolver-binding-linux-arm-musleabihf-1.11.1.tgz",
      "integrity": "sha512-cINaoY2z7LVCrfHkIcmvj7osTOtm6VVT16b5oQdS4beibX2SYBwgYLmqhBjA1t51CarSaBuX5YNsWLjsqfW5Cw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@unrs/resolver-binding-linux-arm64-gnu": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm64-gnu/-/resolver-binding-linux-arm64-gnu-1.11.1.tgz",
      "integrity": "sha512-34gw7PjDGB9JgePJEmhEqBhWvCiiWCuXsL9hYphDF7crW7UgI05gyBAi6MF58uGcMOiOqSJ2ybEeCvHcq0BCmQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@unrs/resolver-binding-linux-arm64-musl": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm64-musl/-/resolver-binding-linux-arm64-musl-1.11.1.tgz",
      "integrity": "sha512-RyMIx6Uf53hhOtJDIamSbTskA99sPHS96wxVE/bJtePJJtpdKGXO1wY90oRdXuYOGOTuqjT8ACccMc4K6QmT3w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@unrs/resolver-binding-linux-ppc64-gnu": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-ppc64-gnu/-/resolver-binding-linux-ppc64-gnu-1.11.1.tgz",
      "integrity": "sha512-D8Vae74A4/a+mZH0FbOkFJL9DSK2R6TFPC9M+jCWYia/q2einCubX10pecpDiTmkJVUH+y8K3BZClycD8nCShA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@unrs/resolver-binding-linux-riscv64-gnu": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-riscv64-gnu/-/resolver-binding-linux-riscv64-gnu-1.11.1.tgz",
      "integrity": "sha512-frxL4OrzOWVVsOc96+V3aqTIQl1O2TjgExV4EKgRY09AJ9leZpEg8Ak9phadbuX0BA4k8U5qtvMSQQGGmaJqcQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@unrs/resolver-binding-linux-riscv64-musl": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-riscv64-musl/-/resolver-binding-linux-riscv64-musl-1.11.1.tgz",
      "integrity": "sha512-mJ5vuDaIZ+l/acv01sHoXfpnyrNKOk/3aDoEdLO/Xtn9HuZlDD6jKxHlkN8ZhWyLJsRBxfv9GYM2utQ1SChKew==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@unrs/resolver-binding-linux-s390x-gnu": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-s390x-gnu/-/resolver-binding-linux-s390x-gnu-1.11.1.tgz",
      "integrity": "sha512-kELo8ebBVtb9sA7rMe1Cph4QHreByhaZ2QEADd9NzIQsYNQpt9UkM9iqr2lhGr5afh885d/cB5QeTXSbZHTYPg==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@unrs/resolver-binding-linux-x64-gnu": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-x64-gnu/-/resolver-binding-linux-x64-gnu-1.11.1.tgz",
      "integrity": "sha512-C3ZAHugKgovV5YvAMsxhq0gtXuwESUKc5MhEtjBpLoHPLYM+iuwSj3lflFwK3DPm68660rZ7G8BMcwSro7hD5w==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@unrs/resolver-binding-linux-x64-musl": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-x64-musl/-/resolver-binding-linux-x64-musl-1.11.1.tgz",
      "integrity": "sha512-rV0YSoyhK2nZ4vEswT/QwqzqQXw5I6CjoaYMOX0TqBlWhojUf8P94mvI7nuJTeaCkkds3QE4+zS8Ko+GdXuZtA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@unrs/resolver-binding-wasm32-wasi": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-wasm32-wasi/-/resolver-binding-wasm32-wasi-1.11.1.tgz",
      "integrity": "sha512-5u4RkfxJm+Ng7IWgkzi3qrFOvLvQYnPBmjmZQ8+szTK/b31fQCnleNl1GgEt7nIsZRIf5PLhPwT0WM+q45x/UQ==",
      "cpu": [
        "wasm32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@napi-rs/wasm-runtime": "^0.2.11"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@unrs/resolver-binding-win32-arm64-msvc": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-arm64-msvc/-/resolver-binding-win32-arm64-msvc-1.11.1.tgz",
      "integrity": "sha512-nRcz5Il4ln0kMhfL8S3hLkxI85BXs3o8EYoattsJNdsX4YUU89iOkVn7g0VHSRxFuVMdM4Q1jEpIId1Ihim/Uw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@unrs/resolver-binding-win32-ia32-msvc": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-ia32-msvc/-/resolver-binding-win32-ia32-msvc-1.11.1.tgz",
      "integrity": "sha512-DCEI6t5i1NmAZp6pFonpD5m7i6aFrpofcp4LA2i8IIq60Jyo28hamKBxNrZcyOwVOZkgsRp9O2sXWBWP8MnvIQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@unrs/resolver-binding-win32-x64-msvc": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-x64-msvc/-/resolver-binding-win32-x64-msvc-1.11.1.tgz",
      "integrity": "sha512-lrW200hZdbfRtztbygyaq/6jP6AKE8qQN2KvPcJ+x7wiD038YtnYtZ82IMNJ69GJibV7bwL3y9FgK+5w/pYt6g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@webassemblyjs/ast": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ast/-/ast-1.14.1.tgz",
      "integrity": "sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@webassemblyjs/helper-numbers": "1.13.2",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/floating-point-hex-parser": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.13.2.tgz",
      "integrity": "sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/@webassemblyjs/helper-api-error": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-api-error/-/helper-api-error-1.13.2.tgz",
      "integrity": "sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/@webassemblyjs/helper-buffer": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-buffer/-/helper-buffer-1.14.1.tgz",
      "integrity": "sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/@webassemblyjs/helper-numbers": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-numbers/-/helper-numbers-1.13.2.tgz",
      "integrity": "sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@webassemblyjs/floating-point-hex-parser": "1.13.2",
        "@webassemblyjs/helper-api-error": "1.13.2",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/helper-wasm-bytecode": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.13.2.tgz",
      "integrity": "sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/@webassemblyjs/helper-wasm-section": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.14.1.tgz",
      "integrity": "sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/wasm-gen": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/ieee754": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ieee754/-/ieee754-1.13.2.tgz",
      "integrity": "sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@xtuc/ieee754": "^1.2.0"
      }
    },
    "node_modules/@webassemblyjs/leb128": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/leb128/-/leb128-1.13.2.tgz",
      "integrity": "sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==",
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/utf8": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/utf8/-/utf8-1.13.2.tgz",
      "integrity": "sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/@webassemblyjs/wasm-edit": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.14.1.tgz",
      "integrity": "sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/helper-wasm-section": "1.14.1",
        "@webassemblyjs/wasm-gen": "1.14.1",
        "@webassemblyjs/wasm-opt": "1.14.1",
        "@webassemblyjs/wasm-parser": "1.14.1",
        "@webassemblyjs/wast-printer": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-gen": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-gen/-/wasm-gen-1.14.1.tgz",
      "integrity": "sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/ieee754": "1.13.2",
        "@webassemblyjs/leb128": "1.13.2",
        "@webassemblyjs/utf8": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/wasm-opt": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-opt/-/wasm-opt-1.14.1.tgz",
      "integrity": "sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/wasm-gen": "1.14.1",
        "@webassemblyjs/wasm-parser": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-parser": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-parser/-/wasm-parser-1.14.1.tgz",
      "integrity": "sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-api-error": "1.13.2",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/ieee754": "1.13.2",
        "@webassemblyjs/leb128": "1.13.2",
        "@webassemblyjs/utf8": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/wast-printer": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wast-printer/-/wast-printer-1.14.1.tgz",
      "integrity": "sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@xtuc/ieee754": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz",
      "integrity": "sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==",
      "license": "BSD-3-Clause",
      "peer": true
    },
    "node_modules/@xtuc/long": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/@xtuc/long/-/long-4.2.2.tgz",
      "integrity": "sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==",
      "license": "Apache-2.0",
      "peer": true
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-import-phases": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/acorn-import-phases/-/acorn-import-phases-1.0.4.tgz",
      "integrity": "sha512-wKmbr/DDiIXzEOiWrTTUcDm24kQ2vGfZQvM2fwg2vXqR5uW6aapr7ObPtj1th32b9u90/Pf4AItvdTh42fBmVQ==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=10.13.0"
      },
      "peerDependencies": {
        "acorn": "^8.14.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
      "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
      "license": "MIT",
      "dependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/ajv-formats/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/ajv-keywords": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz",
      "integrity": "sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==",
      "license": "MIT",
      "peerDependencies": {
        "ajv": "^6.9.1"
      }
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-escapes/node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/any-promise": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/aria-query": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.0.tgz",
      "integrity": "sha512-b0P0sZPKtyu8HkeRAfCq0IfURZK+SuwMjY1UXGBU27wpAiTwQAIlq56IbIO+ytk/JjS1fMR14ee5WBBfKi5J6A==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "dequal": "^2.0.3"
      }
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-includes": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.9.tgz",
      "integrity": "sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.24.0",
        "es-object-atoms": "^1.1.1",
        "get-intrinsic": "^1.3.0",
        "is-string": "^1.1.1",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-union": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/array-uniq": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/array-uniq/-/array-uniq-1.0.3.tgz",
      "integrity": "sha512-MNha4BWQ6JbwhFhj03YK552f7cb3AzoE8SzeljgChvL1dl3IcvggXVz1DilzySZkCja+CXuZbdW7yATchWn8/Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/array.prototype.findlast": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz",
      "integrity": "sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlastindex": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.6.tgz",
      "integrity": "sha512-F/TKATkzseUExPlfvmwQKGITM3DGTK+vkAsCZoDc5daVygbJBnjEUCbgkAvVFsgfXfX4YIqZ/27G3k3tdXrTxQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-shim-unscopables": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.3.tgz",
      "integrity": "sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.3.tgz",
      "integrity": "sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.tosorted": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/array.prototype.tosorted/-/array.prototype.tosorted-1.1.4.tgz",
      "integrity": "sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3",
        "es-errors": "^1.3.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/ast-types-flow": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.8.tgz",
      "integrity": "sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
      "license": "MIT"
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/at-least-node": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/at-least-node/-/at-least-node-1.0.0.tgz",
      "integrity": "sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg==",
      "license": "ISC",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/autoprefixer": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.0.tgz",
      "integrity": "sha512-7FdJ1ONtwzV1G43GDD0kpVMn/qbiNqyOPMFTX5nRffI+7vgWoFEc6DcXOxHJxrWNDXrZh18eDsZjvZGUljSRGA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.17.5",
        "caniuse-lite": "^1.0.30001272",
        "fraction.js": "^4.1.1",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.0.0",
        "postcss-value-parser": "^4.1.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/axe-core": {
      "version": "4.10.3",
      "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.10.3.tgz",
      "integrity": "sha512-Xm7bpRXnDSX2YE2YFfBk2FnF0ep6tmG7xPh8iHee8MIcrgq762Nkce856dYtJYLkuIoYZvGfTs/PbZhideTcEg==",
      "dev": true,
      "license": "MPL-2.0",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/axios": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.12.1.tgz",
      "integrity": "sha512-Kn4kbSXpkFHCGE6rBFNwIv0GQs4AvDT80jlveJDKFxjbTYMUeB4QtsdPCv6H8Cm19Je7IU6VFtRl2zWZI0rudQ==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.4",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/axobject-query": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
      "integrity": "sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/babel-jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.7.0.tgz",
      "integrity": "sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/transform": "^29.7.0",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.6.3",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-loader": {
      "version": "8.4.1",
      "resolved": "https://registry.npmjs.org/babel-loader/-/babel-loader-8.4.1.tgz",
      "integrity": "sha512-nXzRChX+Z1GoE6yWavBQg6jDslyFF3SDjl2paADuoQtQW10JqShJt62R6eJQ5m/pjJFDT8xgKIWSP85OY8eXeA==",
      "license": "MIT",
      "dependencies": {
        "find-cache-dir": "^3.3.1",
        "loader-utils": "^2.0.4",
        "make-dir": "^3.1.0",
        "schema-utils": "^2.6.5"
      },
      "engines": {
        "node": ">= 8.9"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0",
        "webpack": ">=2"
      }
    },
    "node_modules/babel-loader/node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/babel-loader/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-istanbul/node_modules/istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-istanbul/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.6.3.tgz",
      "integrity": "sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs2": {
      "version": "0.4.14",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.14.tgz",
      "integrity": "sha512-Co2Y9wX854ts6U8gAAPXfn0GmAyctHuK8n0Yhfjd6t30g7yvKjspvvOo9yG+z52PZRgFErt7Ka2pYnXCjLKEpg==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.7",
        "@babel/helper-define-polyfill-provider": "^0.6.5",
        "semver": "^6.3.1"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs2/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs3": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.13.0.tgz",
      "integrity": "sha512-U+GNwMdSFgzVmfhNm8GJUX88AadB3uo9KpJqS3FaqNIPKgySuvMb+bHPsOmmuWyIcuqZj/pzt1RUIUZns4y2+A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.5",
        "core-js-compat": "^3.43.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-regenerator": {
      "version": "0.6.5",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-regenerator/-/babel-plugin-polyfill-regenerator-0.6.5.tgz",
      "integrity": "sha512-ISqQ2frbiNU9vIJkzg7dlPpznPZ4jOiUQ1uSmB0fEHeowtN3COYRsXr/xexn64NpU13P06jc/L5TgiJXOgrbEg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.5"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.2.0.tgz",
      "integrity": "sha512-E/VlAEzRrsLEb2+dv8yp3bo4scof3l9nR4lrld+Iy5NyVqgVYUJnDAmunkhPMisRI32Qc4iRiz425d8vM++2fg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.12.13",
        "@babel/plugin-syntax-class-static-block": "^7.14.5",
        "@babel/plugin-syntax-import-attributes": "^7.24.7",
        "@babel/plugin-syntax-import-meta": "^7.10.4",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
        "@babel/plugin-syntax-top-level-await": "^7.14.5"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0 || ^8.0.0-0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.6.3.tgz",
      "integrity": "sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "babel-plugin-jest-hoist": "^29.6.3",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT"
    },
    "node_modules/base64-arraybuffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/base64-arraybuffer/-/base64-arraybuffer-1.0.2.tgz",
      "integrity": "sha512-I3yl4r9QB5ZRY3XuJVEPfc2XhZO6YweFPI+UovAzn+8/hb3oJ6lnysaFcjVpkCPfVWFUDvoZ8kmVDP7WyRtYtQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/baseline-browser-mapping": {
      "version": "2.8.2",
      "resolved": "https://registry.npmjs.org/baseline-browser-mapping/-/baseline-browser-mapping-2.8.2.tgz",
      "integrity": "sha512-NvcIedLxrs9llVpX7wI+Jz4Hn9vJQkCPKrTaHIE0sW/Rj1iq6Fzby4NbyTZjQJNoypBXNaG7tEHkTgONZpwgxQ==",
      "license": "Apache-2.0",
      "bin": {
        "baseline-browser-mapping": "dist/cli.js"
      }
    },
    "node_modules/big.js": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/big.js/-/big.js-5.2.2.tgz",
      "integrity": "sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.26.0",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.26.0.tgz",
      "integrity": "sha512-P9go2WrP9FiPwLv3zqRD/Uoxo0RSHjzFCiQz7d4vbmwNqQFo9T9WCeP/Qn5EbcKQY6DBbkxEXNcpJOmncNrb7A==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "baseline-browser-mapping": "^2.8.2",
        "caniuse-lite": "^1.0.30001741",
        "electron-to-chromium": "^1.5.218",
        "node-releases": "^2.0.21",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "license": "MIT"
    },
    "node_modules/builtin-modules": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-3.3.0.tgz",
      "integrity": "sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase-css": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001741",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001741.tgz",
      "integrity": "sha512-QGUGitqsc8ARjLdgAfxETDhRbJ0REsP6O3I96TAth/mVjh2cYzN2u+3AzPP3aVSm2FehEItaJw1xd+IGBXWeSw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/canvg": {
      "version": "3.0.11",
      "resolved": "https://registry.npmjs.org/canvg/-/canvg-3.0.11.tgz",
      "integrity": "sha512-5ON+q7jCTgMp9cjpu4Jo6XbvfYwSB2Ow3kzHKfIyJfaCAOHLbdKPQqGKgfED/R5B+3TFFfe8pegYA+b423SRyA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@babel/runtime": "^7.12.5",
        "@types/raf": "^3.4.0",
        "core-js": "^3.8.3",
        "raf": "^3.4.1",
        "regenerator-runtime": "^0.13.7",
        "rgbcolor": "^1.0.1",
        "stackblur-canvas": "^2.0.0",
        "svg-pathdata": "^6.0.3"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chokidar/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/chrome-trace-event": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.4.tgz",
      "integrity": "sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/ci-info": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz",
      "integrity": "sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.3.tgz",
      "integrity": "sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/clean-webpack-plugin": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/clean-webpack-plugin/-/clean-webpack-plugin-4.0.0.tgz",
      "integrity": "sha512-WuWE1nyTNAyW5T7oNyys2EN0cfP2fdRxhxnIQWiAp0bMabPdHhoGxM8A6YL2GhqwgrPnnaemVE7nv5XJ2Fhh2w==",
      "license": "MIT",
      "dependencies": {
        "del": "^4.1.1"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "webpack": ">=4.0.0 <6.0.0"
      }
    },
    "node_modules/client-only": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz",
      "integrity": "sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==",
      "license": "MIT"
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/color": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
      "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-convert": "^2.0.1",
        "color-string": "^1.9.0"
      },
      "engines": {
        "node": ">=12.5.0"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "license": "MIT"
    },
    "node_modules/common-tags": {
      "version": "1.8.2",
      "resolved": "https://registry.npmjs.org/common-tags/-/common-tags-1.8.2.tgz",
      "integrity": "sha512-gk/Z852D2Wtb//0I+kRFNKKE9dIIVirjoqPoA1wJU+XePVXZfGeBpk45+A1rKO4Q43prqWBNY/MiIeRLbPWUaA==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/commondir": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
      "integrity": "sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==",
      "license": "MIT"
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
      "integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/core-js": {
      "version": "3.45.1",
      "resolved": "https://registry.npmjs.org/core-js/-/core-js-3.45.1.tgz",
      "integrity": "sha512-L4NPsJlCfZsPeXukyzHFlg/i7IIVwHSItR0wg0FLNqYClJ4MQYTYLbC7EkjKYRLZF2iof2MUgN0EGy7MdQFChg==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-js-compat": {
      "version": "3.45.1",
      "resolved": "https://registry.npmjs.org/core-js-compat/-/core-js-compat-3.45.1.tgz",
      "integrity": "sha512-tqTt5T4PzsMIZ430XGviK4vzYSoeNJ6CXODi6c/voxOT6IZqBht5/EKaSNnYiEjjRYxjVz7DQIsOsY0XNi8PIA==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.25.3"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/create-jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/create-jest/-/create-jest-29.7.0.tgz",
      "integrity": "sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-config": "^29.7.0",
        "jest-util": "^29.7.0",
        "prompts": "^2.0.1"
      },
      "bin": {
        "create-jest": "bin/create-jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/css-line-break": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/css-line-break/-/css-line-break-2.1.0.tgz",
      "integrity": "sha512-FHcKFCZcAha3LwfVBhCQbW2nCNbkZXn7KVUJcsT5/P8YmfsVja0FMPJr0B903j/E69HUphKiV9iQArX8SDYA4w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "utrie": "^1.0.2"
      }
    },
    "node_modules/css.escape": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/css.escape/-/css.escape-1.5.1.tgz",
      "integrity": "sha512-YUifsXXuknHlUsmlgyY0PKzgPOr7/FjCePfHNt0jxm83wHZi44VDMQ7/fGNkjY3/jV1MC+1CmZbaHzugyeRtpg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cssesc": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "cssesc": "bin/cssesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/damerau-levenshtein": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/damerau-levenshtein/-/damerau-levenshtein-1.0.8.tgz",
      "integrity": "sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==",
      "dev": true,
      "license": "BSD-2-Clause"
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/date-fns": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/kossnocorp"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/dedent": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.7.0.tgz",
      "integrity": "sha512-HGFtf8yhuhGhqO07SV79tRp+br4MnbdjeVxotpn1QBl30pcLLCQjX5b2295ll0fv8RKDKsmWYrl05usHM9CewQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "babel-plugin-macros": "^3.1.0"
      },
      "peerDependenciesMeta": {
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/del": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/del/-/del-4.1.1.tgz",
      "integrity": "sha512-QwGuEUouP2kVwQenAsOof5Fv8K9t3D8Ca8NxcXKrIpEHjTXK5J2nXLdP+ALI1cgv8wj7KuwBhTwBkOZSJKM5XQ==",
      "license": "MIT",
      "dependencies": {
        "@types/glob": "^7.1.1",
        "globby": "^6.1.0",
        "is-path-cwd": "^2.0.0",
        "is-path-in-cwd": "^2.0.0",
        "p-map": "^2.0.0",
        "pify": "^4.0.1",
        "rimraf": "^2.6.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/del/node_modules/array-union": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-union/-/array-union-1.0.2.tgz",
      "integrity": "sha512-Dxr6QJj/RdU/hCaBjOfxW+q6lyuVE6JFWIrAUpuOOhoJJoQ99cUn3igRaHVB5P9WrgFVN0FfArM3x0cueOU8ng==",
      "license": "MIT",
      "dependencies": {
        "array-uniq": "^1.0.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/del/node_modules/globby": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/globby/-/globby-6.1.0.tgz",
      "integrity": "sha512-KVbFv2TQtbzCoxAnfD6JcHZTYCzyliEaaeM/gH8qQdkKr5s0OP9scEgvdcngyk7AVdY6YVW/TJHd+lQ/Df3Daw==",
      "license": "MIT",
      "dependencies": {
        "array-union": "^1.0.1",
        "glob": "^7.0.3",
        "object-assign": "^4.0.1",
        "pify": "^2.0.0",
        "pinkie-promise": "^2.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/del/node_modules/globby/node_modules/pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/del/node_modules/rimraf": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.7.1.tgz",
      "integrity": "sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/dequal": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/dequal/-/dequal-2.0.3.tgz",
      "integrity": "sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/didyoumean": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
      "dev": true,
      "license": "Apache-2.0"
    },
    "node_modules/diff-sequences": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
      "integrity": "sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/dir-glob": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
      "license": "MIT",
      "dependencies": {
        "path-type": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dlv": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dom-accessibility-api": {
      "version": "0.5.16",
      "resolved": "https://registry.npmjs.org/dom-accessibility-api/-/dom-accessibility-api-0.5.16.tgz",
      "integrity": "sha512-X7BJ2yElsnOJ30pZF4uIIDfBEVgF4XEBxL9Bxhy6dnrm5hkzqmsWHGTiHqRiITNhMyFLyAiWndIJP7Z1NTteDg==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/dompurify": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/dompurify/-/dompurify-3.2.6.tgz",
      "integrity": "sha512-/2GogDQlohXPZe6D6NOgQvXLPSYBqIWMnZ8zzOhn09REE4eyAzb+Hed3jhoM9OkuaJ8P6ZGTTVWQKAi8ieIzfQ==",
      "license": "(MPL-2.0 OR Apache-2.0)",
      "optional": true,
      "optionalDependencies": {
        "@types/trusted-types": "^2.0.7"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/ejs": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/ejs/-/ejs-3.1.10.tgz",
      "integrity": "sha512-UeJmFfOrAQS8OJWPZ4qtgHyWExa088/MtK5UEyoJGFH67cDEXkZSviOiKRCZ4Xij0zxI3JECgYs3oKx+AizQBA==",
      "license": "Apache-2.0",
      "dependencies": {
        "jake": "^10.8.5"
      },
      "bin": {
        "ejs": "bin/cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.218",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.218.tgz",
      "integrity": "sha512-uwwdN0TUHs8u6iRgN8vKeWZMRll4gBkz+QMqdS7DDe49uiK68/UX92lFb61oiFPrpYZNeZIqa4bA7O6Aiasnzg==",
      "license": "ISC"
    },
    "node_modules/emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/emojis-list": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/emojis-list/-/emojis-list-3.0.0.tgz",
      "integrity": "sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/enhanced-resolve": {
      "version": "5.18.3",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.3.tgz",
      "integrity": "sha512-d4lC8xfavMeBjzGr2vECC3fsGXziXZQyJxD868h2M/mBI3PwAuODxAkLkq5HYuvrPYcUtiLzsTo8U3PgX3Ocww==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "graceful-fs": "^4.2.4",
        "tapable": "^2.2.0"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-iterator-helpers": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/es-iterator-helpers/-/es-iterator-helpers-1.2.1.tgz",
      "integrity": "sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-set-tostringtag": "^2.0.3",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.6",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "iterator.prototype": "^1.1.4",
        "safe-array-concat": "^1.1.3"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-module-lexer": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.7.0.tgz",
      "integrity": "sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz",
      "integrity": "sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==",
      "deprecated": "This version is no longer supported. Please see https://eslint.org/version-support for other options.",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.6.1",
        "@eslint/eslintrc": "^2.1.4",
        "@eslint/js": "8.57.1",
        "@humanwhocodes/config-array": "^0.13.0",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@nodelib/fs.walk": "^1.2.8",
        "@ungap/structured-clone": "^1.2.0",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.2.2",
        "eslint-visitor-keys": "^3.4.3",
        "espree": "^9.6.1",
        "esquery": "^1.4.2",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "globals": "^13.19.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "is-path-inside": "^3.0.3",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-config-next": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/eslint-config-next/-/eslint-config-next-15.5.3.tgz",
      "integrity": "sha512-e6j+QhQFOr5pfsc8VJbuTD9xTXJaRvMHYjEeLPA2pFkheNlgPLCkxdvhxhfuM4KGcqSZj2qEnpHisdTVs3BxuQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@next/eslint-plugin-next": "15.5.3",
        "@rushstack/eslint-patch": "^1.10.3",
        "@typescript-eslint/eslint-plugin": "^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0",
        "@typescript-eslint/parser": "^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0",
        "eslint-import-resolver-node": "^0.3.6",
        "eslint-import-resolver-typescript": "^3.5.2",
        "eslint-plugin-import": "^2.31.0",
        "eslint-plugin-jsx-a11y": "^6.10.0",
        "eslint-plugin-react": "^7.37.0",
        "eslint-plugin-react-hooks": "^5.0.0"
      },
      "peerDependencies": {
        "eslint": "^7.23.0 || ^8.0.0 || ^9.0.0",
        "typescript": ">=3.3.1"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-import-resolver-node": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
      "integrity": "sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7",
        "is-core-module": "^2.13.0",
        "resolve": "^1.22.4"
      }
    },
    "node_modules/eslint-import-resolver-node/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-import-resolver-typescript": {
      "version": "3.10.1",
      "resolved": "https://registry.npmjs.org/eslint-import-resolver-typescript/-/eslint-import-resolver-typescript-3.10.1.tgz",
      "integrity": "sha512-A1rHYb06zjMGAxdLSkN2fXPBwuSaQ0iO5M/hdyS0Ajj1VBaRp0sPD3dn1FhME3c/JluGFbwSxyCfqdSbtQLAHQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@nolyfill/is-core-module": "1.0.39",
        "debug": "^4.4.0",
        "get-tsconfig": "^4.10.0",
        "is-bun-module": "^2.0.0",
        "stable-hash": "^0.0.5",
        "tinyglobby": "^0.2.13",
        "unrs-resolver": "^1.6.2"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint-import-resolver-typescript"
      },
      "peerDependencies": {
        "eslint": "*",
        "eslint-plugin-import": "*",
        "eslint-plugin-import-x": "*"
      },
      "peerDependenciesMeta": {
        "eslint-plugin-import": {
          "optional": true
        },
        "eslint-plugin-import-x": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-module-utils": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.12.1.tgz",
      "integrity": "sha512-L8jSWTze7K2mTg0vos/RuLRS5soomksDPoJLXIslC7c8Wmut3bx7CPpJijDcBZtxQ5lrbUdM+s0OlNbz0DCDNw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-module-utils/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-import": {
      "version": "2.32.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.32.0.tgz",
      "integrity": "sha512-whOE1HFo/qJDyX4SnXzP4N6zOWn79WhnCUY/iDR0mPfQZO8wcYE4JClzI2oZrhBnnMUCBCHZhO6VQyoBU95mZA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@rtsao/scc": "^1.1.0",
        "array-includes": "^3.1.9",
        "array.prototype.findlastindex": "^1.2.6",
        "array.prototype.flat": "^1.3.3",
        "array.prototype.flatmap": "^1.3.3",
        "debug": "^3.2.7",
        "doctrine": "^2.1.0",
        "eslint-import-resolver-node": "^0.3.9",
        "eslint-module-utils": "^2.12.1",
        "hasown": "^2.0.2",
        "is-core-module": "^2.16.1",
        "is-glob": "^4.0.3",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.8",
        "object.groupby": "^1.0.3",
        "object.values": "^1.2.1",
        "semver": "^6.3.1",
        "string.prototype.trimend": "^1.0.9",
        "tsconfig-paths": "^3.15.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-plugin-jsx-a11y": {
      "version": "6.10.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-jsx-a11y/-/eslint-plugin-jsx-a11y-6.10.2.tgz",
      "integrity": "sha512-scB3nz4WmG75pV8+3eRUQOHZlNSUhFNq37xnpgRkCCELU3XMvXAxLk1eqWWyE22Ki4Q01Fnsw9BA3cJHDPgn2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "aria-query": "^5.3.2",
        "array-includes": "^3.1.8",
        "array.prototype.flatmap": "^1.3.2",
        "ast-types-flow": "^0.0.8",
        "axe-core": "^4.10.0",
        "axobject-query": "^4.1.0",
        "damerau-levenshtein": "^1.0.8",
        "emoji-regex": "^9.2.2",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^3.3.5",
        "language-tags": "^1.0.9",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.8",
        "safe-regex-test": "^1.0.3",
        "string.prototype.includes": "^2.0.1"
      },
      "engines": {
        "node": ">=4.0"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9"
      }
    },
    "node_modules/eslint-plugin-jsx-a11y/node_modules/aria-query": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.2.tgz",
      "integrity": "sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/eslint-plugin-react": {
      "version": "7.37.5",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.37.5.tgz",
      "integrity": "sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.8",
        "array.prototype.findlast": "^1.2.5",
        "array.prototype.flatmap": "^1.3.3",
        "array.prototype.tosorted": "^1.1.4",
        "doctrine": "^2.1.0",
        "es-iterator-helpers": "^1.2.1",
        "estraverse": "^5.3.0",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
        "minimatch": "^3.1.2",
        "object.entries": "^1.1.9",
        "object.fromentries": "^2.0.8",
        "object.values": "^1.2.1",
        "prop-types": "^15.8.1",
        "resolve": "^2.0.0-next.5",
        "semver": "^6.3.1",
        "string.prototype.matchall": "^4.0.12",
        "string.prototype.repeat": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7"
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/resolve": {
      "version": "2.0.0-next.5",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.5.tgz",
      "integrity": "sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-scope": {
      "version": "7.2.2",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.9.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.4.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "dev": true,
      "license": "BSD-2-Clause",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estree-walker": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-1.0.1.tgz",
      "integrity": "sha512-1fMXF3YP4pZZVozF8j/ZLfvnR8NSIljt56UhbZ5PeeDmmGHpgpdwQt7ITlGvYaQukCvuBRMLEiKiYC+oeIg4cg==",
      "license": "MIT"
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=0.8.x"
      }
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exenv": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/exenv/-/exenv-1.2.2.tgz",
      "integrity": "sha512-Z+ktTxTwv9ILfgKCk32OX3n/doe+OcLTRtqK9pcL+JsP3J1/VW8Uvl4ZjLlKqeW4rzK4oesDOGMEMRIZqtP4Iw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.7.0.tgz",
      "integrity": "sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/expect-utils": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "license": "MIT"
    },
    "node_modules/fast-glob": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.1.tgz",
      "integrity": "sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-png": {
      "version": "6.4.0",
      "resolved": "https://registry.npmjs.org/fast-png/-/fast-png-6.4.0.tgz",
      "integrity": "sha512-kAqZq1TlgBjZcLr5mcN6NP5Rv4V2f22z00c3g8vRrwkcqjerx7BEhPbOnWCPqaHUl2XWQBJQvOT/FQhdMT7X/Q==",
      "license": "MIT",
      "dependencies": {
        "@types/pako": "^2.0.3",
        "iobuffer": "^5.3.2",
        "pako": "^2.1.0"
      }
    },
    "node_modules/fast-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.1.0.tgz",
      "integrity": "sha512-iPeeDKJSWf4IEOasVVrknXpaBV0IApz/gp7S2bb7Z4Lljbl2MGJRqInZiUrQwV16cpzw/D3S5j5Julj/gT52AA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fastify"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fastify"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "license": "Apache-2.0",
      "dependencies": {
        "websocket-driver": ">=0.5.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/fflate": {
      "version": "0.8.2",
      "resolved": "https://registry.npmjs.org/fflate/-/fflate-0.8.2.tgz",
      "integrity": "sha512-cPJU47OaAoCbg0pBvzsgpTPhmhqI5eJjh/JIu8tPj5q+T7iLvW/JAYUqmE7KOB4R1ZyEhzBaIQpQpardBF5z8A==",
      "license": "MIT"
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/filelist": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/filelist/-/filelist-1.0.4.tgz",
      "integrity": "sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q==",
      "license": "Apache-2.0",
      "dependencies": {
        "minimatch": "^5.0.1"
      }
    },
    "node_modules/filelist/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/filelist/node_modules/minimatch": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-cache-dir": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/find-cache-dir/-/find-cache-dir-3.3.2.tgz",
      "integrity": "sha512-wXZV5emFEjrridIgED11OoUKLxiYjAcqot/NJdAkOhlJ+vGzwhOAfcG5OX1jP+S0PcjEn8bdMJv+g2jwQ3Onig==",
      "license": "MIT",
      "dependencies": {
        "commondir": "^1.0.1",
        "make-dir": "^3.0.2",
        "pkg-dir": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/avajs/find-cache-dir?sponsor=1"
      }
    },
    "node_modules/find-cache-dir/node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/find-cache-dir/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/firebase": {
      "version": "10.14.1",
      "resolved": "https://registry.npmjs.org/firebase/-/firebase-10.14.1.tgz",
      "integrity": "sha512-0KZxU+Ela9rUCULqFsUUOYYkjh7OM1EWdIfG6///MtXd0t2/uUIf0iNV5i0KariMhRQ5jve/OY985nrAXFaZeQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/analytics": "0.10.8",
        "@firebase/analytics-compat": "0.2.14",
        "@firebase/app": "0.10.13",
        "@firebase/app-check": "0.8.8",
        "@firebase/app-check-compat": "0.3.15",
        "@firebase/app-compat": "0.2.43",
        "@firebase/app-types": "0.9.2",
        "@firebase/auth": "1.7.9",
        "@firebase/auth-compat": "0.5.14",
        "@firebase/data-connect": "0.1.0",
        "@firebase/database": "1.0.8",
        "@firebase/database-compat": "1.0.8",
        "@firebase/firestore": "4.7.3",
        "@firebase/firestore-compat": "0.3.38",
        "@firebase/functions": "0.11.8",
        "@firebase/functions-compat": "0.3.14",
        "@firebase/installations": "0.6.9",
        "@firebase/installations-compat": "0.2.9",
        "@firebase/messaging": "0.12.12",
        "@firebase/messaging-compat": "0.2.12",
        "@firebase/performance": "0.6.9",
        "@firebase/performance-compat": "0.2.9",
        "@firebase/remote-config": "0.4.9",
        "@firebase/remote-config-compat": "0.2.9",
        "@firebase/storage": "0.13.2",
        "@firebase/storage-compat": "0.3.12",
        "@firebase/util": "1.10.0",
        "@firebase/vertexai-preview": "0.0.4"
      }
    },
    "node_modules/firebase/node_modules/@firebase/auth": {
      "version": "1.7.9",
      "resolved": "https://registry.npmjs.org/@firebase/auth/-/auth-1.7.9.tgz",
      "integrity": "sha512-yLD5095kVgDw965jepMyUrIgDklD6qH/BZNHeKOgvu7pchOKNjVM+zQoOVYJIKWMWOWBq8IRNVU6NXzBbozaJg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.9",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.10.0",
        "tslib": "^2.1.0",
        "undici": "6.19.7"
      },
      "peerDependencies": {
        "@firebase/app": "0.x",
        "@react-native-async-storage/async-storage": "^1.18.1"
      },
      "peerDependenciesMeta": {
        "@react-native-async-storage/async-storage": {
          "optional": true
        }
      }
    },
    "node_modules/flat-cache": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.3",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.11",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
      "integrity": "sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/foreground-child": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "cross-spawn": "^7.0.6",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/foreground-child/node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://github.com/sponsors/rawify"
      }
    },
    "node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "license": "MIT",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-own-enumerable-property-symbols": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/get-own-enumerable-property-symbols/-/get-own-enumerable-property-symbols-3.0.2.tgz",
      "integrity": "sha512-I0UBV/XOz1XkIJHEUDMZAbzCThU/H8DxmSfmdGcKPnVhu2VfFqr34jr9777IyaTYvxjedWhqVIilEDsCdP5G6g==",
      "license": "ISC"
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-tsconfig": {
      "version": "4.10.1",
      "resolved": "https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.10.1.tgz",
      "integrity": "sha512-auHyJ4AgMz7vgS8Hp3N6HXSmlMdUyhSUrfBF16w153rxtLIEOE+HGqaBppczZvnHLqQJfiHotCYpNhl0lUROFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "resolve-pkg-maps": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/privatenumber/get-tsconfig?sponsor=1"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/glob-to-regexp": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz",
      "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
      "license": "BSD-2-Clause",
      "peer": true
    },
    "node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/globby": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
      "license": "MIT",
      "dependencies": {
        "array-union": "^2.1.0",
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.9",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "license": "ISC"
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/html2canvas": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/html2canvas/-/html2canvas-1.4.1.tgz",
      "integrity": "sha512-fPU6BHNpsyIhr8yyMpTLLxAbkaK8ArIBcmZIRiBLiDhjeqvXolaEmDGmELFuX9I4xDcaKKcJl+TKZLqruBbmWA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "css-line-break": "^2.1.0",
        "text-segmentation": "^1.0.3"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/http-parser-js": {
      "version": "0.5.10",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.10.tgz",
      "integrity": "sha512-Pysuw9XpUq5dVc/2SMHpuTY01RFl8fttgcyunjL7eEMhGM3cI4eOmiCycJDVCo/7O7ClfQD3SaI6ftDzqOXYMA==",
      "license": "MIT"
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/idb": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/idb/-/idb-7.1.1.tgz",
      "integrity": "sha512-gchesWBzyvGHRO9W8tzUWFDycow5gwjvFKfyV9FF32Y7F50yZMp7mP+T2mJIWFx49zicqyC4uefHM17o6xKIVQ==",
      "license": "ISC"
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/import-local": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/indent-string": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/iobuffer": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/iobuffer/-/iobuffer-5.4.0.tgz",
      "integrity": "sha512-DRebOWuqDvxunfkNJAlc3IzWIPD5xVxwUNbHr7xKB8E6aLJxIPfNX3CoMJghcFjpv6RWQsrcJbghtEwSPoJqMA==",
      "license": "MIT"
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "license": "MIT",
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bun-module": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-bun-module/-/is-bun-module-2.0.0.tgz",
      "integrity": "sha512-gNCGbnnnnFAUGKeZ9PdbyeGYJqewpmc2aKHUEMO5nQPWU9lOmv7jcmQIv+qHD8fXW6W7qfuCwX4rY9LNRjXrkQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.7.1"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.0",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-module": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-module/-/is-module-1.0.0.tgz",
      "integrity": "sha512-51ypPSPCoTEIN9dy5Oy+h4pShgJmPCygKfyRCISBI+JoWT/2oJvK8QPxmwv7b/p239jXrm9M1mlQbyKJ5A152g==",
      "license": "MIT"
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-obj": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-1.0.1.tgz",
      "integrity": "sha512-l4RyHgRqGN4Y3+9JHVrNqO+tN0rV5My76uW5/nuO4K1b6vw5G8d/cmFjP9tRfEsdhZNt0IFdZuK/c2Vr4Nb+Qg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-path-cwd": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/is-path-cwd/-/is-path-cwd-2.2.0.tgz",
      "integrity": "sha512-w942bTcih8fdJPJmQHFzkS76NEP8Kzzvmw92cXsazb8intwLqPibPPdXf4ANdKV3rYMuuQYGIWtvz9JilB3NFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-path-in-cwd": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-2.1.0.tgz",
      "integrity": "sha512-rNocXHgipO+rvnP6dk3zI20RpOtrAM/kzbB258Uw5BWr3TpXi861yzjo16Dn4hUox07iw5AyeMLHWsujkjzvRQ==",
      "license": "MIT",
      "dependencies": {
        "is-path-inside": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-path-in-cwd/node_modules/is-path-inside": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-2.1.0.tgz",
      "integrity": "sha512-wiyhTzfDWsvwAW53OBWF5zuvaOGlZ6PwYxAbPVDhpm+gM09xKQGjBq/8uYN12aDvMxnAnq3dxTyoSoRNmg5YFg==",
      "license": "MIT",
      "dependencies": {
        "path-is-inside": "^1.0.2"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-regexp": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-regexp/-/is-regexp-1.0.0.tgz",
      "integrity": "sha512-7zjFAPO4/gwyQAAgRRmqeEeyIICSdmCqa3tsVHMdBzaXXRiqopZL4Cyghg/XulGWrtABTpbnYYzzIRffLkP4oA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz",
      "integrity": "sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/core": "^7.23.9",
        "@babel/parser": "^7.23.9",
        "@istanbuljs/schema": "^0.1.3",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-reports": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.2.0.tgz",
      "integrity": "sha512-HGYWWS/ehqTV3xN10i23tkPkpH46MLCIMFNCaaKNavAXTF1RkqxawEPtnjnGZ6XKSInBKkiOA5BKS+aZiY3AvA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/iterator.prototype": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.5.tgz",
      "integrity": "sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "get-proto": "^1.0.0",
        "has-symbols": "^1.1.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/jake": {
      "version": "10.9.4",
      "resolved": "https://registry.npmjs.org/jake/-/jake-10.9.4.tgz",
      "integrity": "sha512-wpHYzhxiVQL+IV05BLE2Xn34zW1S223hvjtqk0+gsPrwd/8JNLXJgZZM/iPFsYc1xyphF+6M6EvdE5E9MBGkDA==",
      "license": "Apache-2.0",
      "dependencies": {
        "async": "^3.2.6",
        "filelist": "^1.0.4",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "jake": "bin/cli.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.7.0.tgz",
      "integrity": "sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^29.7.0",
        "@jest/types": "^29.6.3",
        "import-local": "^3.0.2",
        "jest-cli": "^29.7.0"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.7.0.tgz",
      "integrity": "sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "execa": "^5.0.0",
        "jest-util": "^29.7.0",
        "p-limit": "^3.1.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.7.0.tgz",
      "integrity": "sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/expect": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.7.0",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.7.0",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-circus/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-circus/node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-circus/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-cli": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.7.0.tgz",
      "integrity": "sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "create-jest": "^29.7.0",
        "exit": "^0.1.2",
        "import-local": "^3.0.2",
        "jest-config": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "yargs": "^17.3.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.7.0.tgz",
      "integrity": "sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.7.0",
        "@jest/types": "^29.6.3",
        "babel-jest": "^29.7.0",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.7.0",
        "jest-environment-node": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-runner": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@types/node": "*",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-config/node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-config/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-diff": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz",
      "integrity": "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.6.3",
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-diff/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-diff/node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-diff/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-docblock": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz",
      "integrity": "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz",
      "integrity": "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.6.3",
        "jest-util": "^29.7.0",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-each/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-each/node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-each/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-environment-node": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.7.0.tgz",
      "integrity": "sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/fake-timers": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-mock": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.6.3.tgz",
      "integrity": "sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.7.0.tgz",
      "integrity": "sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.6.3",
        "jest-util": "^29.7.0",
        "jest-worker": "^29.7.0",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.7.0.tgz",
      "integrity": "sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-leak-detector/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-leak-detector/node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-leak-detector/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-matcher-utils": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.7.0.tgz",
      "integrity": "sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-message-util": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.7.0.tgz",
      "integrity": "sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.3",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-message-util/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-message-util/node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-message-util/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-mock": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.7.0.tgz",
      "integrity": "sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.6.3.tgz",
      "integrity": "sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.7.0.tgz",
      "integrity": "sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.7.0.tgz",
      "integrity": "sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jest-regex-util": "^29.6.3",
        "jest-snapshot": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runner": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.7.0.tgz",
      "integrity": "sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/environment": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.7.0",
        "jest-environment-node": "^29.7.0",
        "jest-haste-map": "^29.7.0",
        "jest-leak-detector": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-resolve": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-watcher": "^29.7.0",
        "jest-worker": "^29.7.0",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runtime": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.7.0.tgz",
      "integrity": "sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/fake-timers": "^29.7.0",
        "@jest/globals": "^29.7.0",
        "@jest/source-map": "^29.6.3",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-mock": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz",
      "integrity": "sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.7.0",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.7.0",
        "semver": "^7.5.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-snapshot/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-snapshot/node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-snapshot/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-util": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz",
      "integrity": "sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz",
      "integrity": "sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.6.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-validate/node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-validate/node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-watcher": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz",
      "integrity": "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.7.0",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.7.0.tgz",
      "integrity": "sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "jest-util": "^29.7.0",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/jiti": {
      "version": "1.21.7",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.7.tgz",
      "integrity": "sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jiti": "bin/jiti.js"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "license": "MIT"
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
      "license": "(AFL-2.1 OR BSD-3-Clause)"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/jsonpointer": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/jsonpointer/-/jsonpointer-5.0.1.tgz",
      "integrity": "sha512-p/nXbhSEcu3pZRdkW1OfJhpsVtW1gd4Wa1fnQc9YLiTfAjn0312eMKimbdIQzuZl9aa9xUGaRlP9T/CJE/ditQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/jspdf": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/jspdf/-/jspdf-3.0.3.tgz",
      "integrity": "sha512-eURjAyz5iX1H8BOYAfzvdPfIKK53V7mCpBTe7Kb16PaM8JSXEcUQNBQaiWMI8wY5RvNOPj4GccMjTlfwRBd+oQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.26.9",
        "fast-png": "^6.2.0",
        "fflate": "^0.8.1"
      },
      "optionalDependencies": {
        "canvg": "^3.0.11",
        "core-js": "^3.6.0",
        "dompurify": "^3.2.4",
        "html2canvas": "^1.0.0-rc.5"
      }
    },
    "node_modules/jsx-ast-utils": {
      "version": "3.3.5",
      "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
      "integrity": "sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.6",
        "array.prototype.flat": "^1.3.1",
        "object.assign": "^4.1.4",
        "object.values": "^1.1.6"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/language-subtag-registry": {
      "version": "0.3.23",
      "resolved": "https://registry.npmjs.org/language-subtag-registry/-/language-subtag-registry-0.3.23.tgz",
      "integrity": "sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==",
      "dev": true,
      "license": "CC0-1.0"
    },
    "node_modules/language-tags": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/language-tags/-/language-tags-1.0.9.tgz",
      "integrity": "sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "language-subtag-registry": "^0.3.20"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lilconfig": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.1.0.tgz",
      "integrity": "sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loader-runner": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/loader-runner/-/loader-runner-4.3.0.tgz",
      "integrity": "sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6.11.5"
      }
    },
    "node_modules/loader-utils": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-2.0.4.tgz",
      "integrity": "sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==",
      "license": "MIT",
      "dependencies": {
        "big.js": "^5.2.2",
        "emojis-list": "^3.0.0",
        "json5": "^2.1.2"
      },
      "engines": {
        "node": ">=8.9.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.camelcase": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
      "integrity": "sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==",
      "license": "MIT"
    },
    "node_modules/lodash.debounce": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz",
      "integrity": "sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.sortby": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/lodash.sortby/-/lodash.sortby-4.7.0.tgz",
      "integrity": "sha512-HDWXG8isMntAyRF5vZ7xKuEvOhT4AhlRt/3czTSjvGUxjYCBVRQY48ViDHyfYz9VIoBkW4TMGQNapx+l3RUwdA==",
      "license": "MIT"
    },
    "node_modules/long": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/long/-/long-5.3.2.tgz",
      "integrity": "sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==",
      "license": "Apache-2.0"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/lz-string": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/lz-string/-/lz-string-1.5.0.tgz",
      "integrity": "sha512-h5bgJWpxJNswbU7qCrV0tIKQCaS3blPDrqKWx+QxzuzL1zGUzij9XCWLrSLsJPu5t+eWA/ycetzYAO5IOMcWAQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "bin": {
        "lz-string": "bin/bin.js"
      }
    },
    "node_modules/magic-string": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
      "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
      "license": "MIT",
      "dependencies": {
        "sourcemap-codec": "^1.4.8"
      }
    },
    "node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "license": "MIT"
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/min-indent": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/min-indent/-/min-indent-1.0.1.tgz",
      "integrity": "sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/mz": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "any-promise": "^1.0.0",
        "object-assign": "^4.0.1",
        "thenify-all": "^1.0.0"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/napi-postinstall": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/napi-postinstall/-/napi-postinstall-0.3.3.tgz",
      "integrity": "sha512-uTp172LLXSxuSYHv/kou+f6KW3SMppU9ivthaVTXian9sOt3XM/zHYHpRZiLgQoxeWfYUnslNWQHF1+G71xcow==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "napi-postinstall": "lib/cli.js"
      },
      "engines": {
        "node": "^12.20.0 || ^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/napi-postinstall"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/neo-async": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
      "integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/next": {
      "version": "15.5.3",
      "resolved": "https://registry.npmjs.org/next/-/next-15.5.3.tgz",
      "integrity": "sha512-r/liNAx16SQj4D+XH/oI1dlpv9tdKJ6cONYPwwcCC46f2NjpaRWY+EKCzULfgQYV6YKXjHBchff2IZBSlZmJNw==",
      "license": "MIT",
      "dependencies": {
        "@next/env": "15.5.3",
        "@swc/helpers": "0.5.15",
        "caniuse-lite": "^1.0.30001579",
        "postcss": "8.4.31",
        "styled-jsx": "5.1.6"
      },
      "bin": {
        "next": "dist/bin/next"
      },
      "engines": {
        "node": "^18.18.0 || ^19.8.0 || >= 20.0.0"
      },
      "optionalDependencies": {
        "@next/swc-darwin-arm64": "15.5.3",
        "@next/swc-darwin-x64": "15.5.3",
        "@next/swc-linux-arm64-gnu": "15.5.3",
        "@next/swc-linux-arm64-musl": "15.5.3",
        "@next/swc-linux-x64-gnu": "15.5.3",
        "@next/swc-linux-x64-musl": "15.5.3",
        "@next/swc-win32-arm64-msvc": "15.5.3",
        "@next/swc-win32-x64-msvc": "15.5.3",
        "sharp": "^0.34.3"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.1.0",
        "@playwright/test": "^1.51.1",
        "babel-plugin-react-compiler": "*",
        "react": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
        "react-dom": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
        "sass": "^1.3.0"
      },
      "peerDependenciesMeta": {
        "@opentelemetry/api": {
          "optional": true
        },
        "@playwright/test": {
          "optional": true
        },
        "babel-plugin-react-compiler": {
          "optional": true
        },
        "sass": {
          "optional": true
        }
      }
    },
    "node_modules/next-pwa": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/next-pwa/-/next-pwa-5.6.0.tgz",
      "integrity": "sha512-XV8g8C6B7UmViXU8askMEYhWwQ4qc/XqJGnexbLV68hzKaGHZDMtHsm2TNxFcbR7+ypVuth/wwpiIlMwpRJJ5A==",
      "license": "MIT",
      "dependencies": {
        "babel-loader": "^8.2.5",
        "clean-webpack-plugin": "^4.0.0",
        "globby": "^11.0.4",
        "terser-webpack-plugin": "^5.3.3",
        "workbox-webpack-plugin": "^6.5.4",
        "workbox-window": "^6.5.4"
      },
      "peerDependencies": {
        "next": ">=9.0.0"
      }
    },
    "node_modules/next/node_modules/postcss": {
      "version": "8.4.31",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz",
      "integrity": "sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.6",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.21",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.21.tgz",
      "integrity": "sha512-5b0pgg78U3hwXkCM8Z9b2FJdPZlr9Psr9V2gQPESdGHqbntyFJKFW4r5TeWGFzafGY3hzs1JC62VEQMbl1JFkw==",
      "license": "MIT"
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.entries": {
      "version": "1.1.9",
      "resolved": "https://registry.npmjs.org/object.entries/-/object.entries-1.1.9.tgz",
      "integrity": "sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.groupby": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.3.tgz",
      "integrity": "sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.values": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.1.tgz",
      "integrity": "sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-map": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/p-map/-/p-map-2.1.0.tgz",
      "integrity": "sha512-y3b8Kpd8OAN444hxfBbFfj1FY/RjtTd8tzYwhUqNYXx0fXx2iX4maP4Qr6qhIKbQXI02wTLAda4fYUbDagTUFw==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
      "dev": true,
      "license": "BlueOak-1.0.0"
    },
    "node_modules/pako": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/pako/-/pako-2.1.0.tgz",
      "integrity": "sha512-w+eufiZ1WuJYgPXbV/PO3NCMEc3xqylkKHzp8bxp1uW4qaSNQUkwmLLEc3kKsfz8lpV1F8Ht3U1Cm+9Srog2ug==",
      "license": "(MIT AND Zlib)"
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-is-inside": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/path-is-inside/-/path-is-inside-1.0.2.tgz",
      "integrity": "sha512-DUWJr3+ULp4zXmol/SZkFf3JGsS9/SIv+Y3Rt93/UjPpDpklB5f1er4O3POIbUuUJ3FXgqte2Q7SrU6zAqwk8w==",
      "license": "(WTFPL OR MIT)"
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "license": "MIT"
    },
    "node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-scurry/node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha512-7EAHlyLHI56VEIdK57uwHdHKIaAGbnXPiw0yWbarQZOKaKpvUIgW0jWRVLiatnM+XXlSwsanIBH/hzGMJulMow==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pify": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/pify/-/pify-4.0.1.tgz",
      "integrity": "sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pinkie": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz",
      "integrity": "sha512-MnUuEycAemtSaeFSjXKW/aroV7akBbY+Sv+RkyqFjgAe73F+MR0TBWKBRDkmfWq/HiFmdavfZ1G7h4SPZXaCSg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pinkie-promise": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz",
      "integrity": "sha512-0Gni6D4UcLTbv9c57DfxDGdr41XfgUjqWZu492f0cIGr16zDU06BWP/RAEvOuo7CQ0CNjHaLlM59YJJFm3NWlw==",
      "license": "MIT",
      "dependencies": {
        "pinkie": "^2.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
      "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "license": "MIT",
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "license": "MIT",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pkg-dir/node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.0.tgz",
      "integrity": "sha512-BRMNx3Wy7UI89jN8H4ZVS5lQMPM2OSMkOkvDCSjwXa7PWTs24k7Lm55NXLbMbs070LvraXaxN5l1npSOS6wMVw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.1.30",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      }
    },
    "node_modules/postcss-import": {
      "version": "15.1.0",
      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
      "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.0.0",
        "read-cache": "^1.0.0",
        "resolve": "^1.1.7"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.0.0"
      }
    },
    "node_modules/postcss-nested": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
      "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.1.1"
      },
      "engines": {
        "node": ">=12.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.14"
      }
    },
    "node_modules/postcss-selector-parser": {
      "version": "6.1.2",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/pretty-bytes": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/pretty-bytes/-/pretty-bytes-5.6.0.tgz",
      "integrity": "sha512-FFw039TmrBqFK8ma/7OL3sDz/VytdtJr044/QUJtH0wK9lb9jLq9tJyIxUwtQJHwar2BqtiA4iCWSwo9JLkzFg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pretty-format": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-27.5.1.tgz",
      "integrity": "sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ansi-regex": "^5.0.1",
        "ansi-styles": "^5.0.0",
        "react-is": "^17.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/protobufjs": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.5.4.tgz",
      "integrity": "sha512-CvexbZtbov6jW2eXAvLukXjXUW1TzFaivC46BpWc/3BpcCysb5Vffu+B3XHMm8lVEuy2Mm4XGex8hBSg1yapPg==",
      "hasInstallScript": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.2",
        "@protobufjs/base64": "^1.1.2",
        "@protobufjs/codegen": "^2.0.4",
        "@protobufjs/eventemitter": "^1.1.0",
        "@protobufjs/fetch": "^1.1.0",
        "@protobufjs/float": "^1.0.2",
        "@protobufjs/inquire": "^1.1.0",
        "@protobufjs/path": "^1.1.2",
        "@protobufjs/pool": "^1.1.0",
        "@protobufjs/utf8": "^1.1.0",
        "@types/node": ">=13.7.0",
        "long": "^5.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pure-rand": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.1.0.tgz",
      "integrity": "sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/dubzzz"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fast-check"
        }
      ],
      "license": "MIT"
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/raf": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/raf/-/raf-3.4.1.tgz",
      "integrity": "sha512-Sq4CW4QhwOHE8ucn6J34MqtZCeWFP2aQSmrlroYgqAV1PjStIhJXxYuTgUIfkEk7zTLjmIjLmU5q+fbD1NnOJA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "performance-now": "^2.1.0"
      }
    },
    "node_modules/randombytes": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
      "integrity": "sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "^5.1.0"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-datepicker": {
      "version": "8.7.0",
      "resolved": "https://registry.npmjs.org/react-datepicker/-/react-datepicker-8.7.0.tgz",
      "integrity": "sha512-r5OJbiLWc3YiVNy69Kau07/aVgVGsFVMA6+nlqCV7vyQ8q0FUOnJ+wAI4CgVxHejG3i5djAEiebrF8/Eip4rIw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/react": "^0.27.15",
        "clsx": "^2.1.1",
        "date-fns": "^4.1.0"
      },
      "peerDependencies": {
        "react": "^16.9.0 || ^17 || ^18 || ^19 || ^19.0.0-rc",
        "react-dom": "^16.9.0 || ^17 || ^18 || ^19 || ^19.0.0-rc"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-is": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
      "integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/react-lifecycles-compat": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/react-lifecycles-compat/-/react-lifecycles-compat-3.0.4.tgz",
      "integrity": "sha512-fBASbA6LnOU9dOU2eW7aQ8xmYBSXUIWr+UmF9b1efZBazGNO+rcXT/icdKnYm2pTwcRylVUYwW7H1PHfLekVzA==",
      "license": "MIT"
    },
    "node_modules/react-modal": {
      "version": "3.16.3",
      "resolved": "https://registry.npmjs.org/react-modal/-/react-modal-3.16.3.tgz",
      "integrity": "sha512-yCYRJB5YkeQDQlTt17WGAgFJ7jr2QYcWa1SHqZ3PluDmnKJ/7+tVU+E6uKyZ0nODaeEj+xCpK4LcSnKXLMC0Nw==",
      "license": "MIT",
      "dependencies": {
        "exenv": "^1.2.0",
        "prop-types": "^15.7.2",
        "react-lifecycles-compat": "^3.0.0",
        "warning": "^4.0.3"
      },
      "peerDependencies": {
        "react": "^0.14.0 || ^15.0.0 || ^16 || ^17 || ^18 || ^19",
        "react-dom": "^0.14.0 || ^15.0.0 || ^16 || ^17 || ^18 || ^19"
      }
    },
    "node_modules/read-cache": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pify": "^2.3.0"
      }
    },
    "node_modules/read-cache/node_modules/pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/redent": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redent/-/redent-3.0.0.tgz",
      "integrity": "sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "indent-string": "^4.0.0",
        "strip-indent": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regenerate": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz",
      "integrity": "sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==",
      "license": "MIT"
    },
    "node_modules/regenerate-unicode-properties": {
      "version": "10.2.2",
      "resolved": "https://registry.npmjs.org/regenerate-unicode-properties/-/regenerate-unicode-properties-10.2.2.tgz",
      "integrity": "sha512-m03P+zhBeQd1RGnYxrGyDAPpWX/epKirLrp8e3qevZdVkKtnCrjjWczIbYc8+xd6vcTStVlqfycTx1KR4LOr0g==",
      "license": "MIT",
      "dependencies": {
        "regenerate": "^1.4.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regenerator-runtime": {
      "version": "0.13.11",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.11.tgz",
      "integrity": "sha512-kY1AZVr2Ra+t+piVaJ4gxaFaReZVH40AKNo7UCX6W+dEwBo/2oZJzqfuN1qLq1oL45o56cPaTXELwrTh8Fpggg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexpu-core": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-6.3.1.tgz",
      "integrity": "sha512-DzcswPr252wEr7Qz8AyAVbfyBDKLoYp6eRA1We2Fa9qirRFSdtkP5sHr3yglDKy2BbA0fd2T+j/CUSKes3FeVQ==",
      "license": "MIT",
      "dependencies": {
        "regenerate": "^1.4.2",
        "regenerate-unicode-properties": "^10.2.2",
        "regjsgen": "^0.8.0",
        "regjsparser": "^0.12.0",
        "unicode-match-property-ecmascript": "^2.0.0",
        "unicode-match-property-value-ecmascript": "^2.2.1"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regjsgen": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/regjsgen/-/regjsgen-0.8.0.tgz",
      "integrity": "sha512-RvwtGe3d7LvWiDQXeQw8p5asZUmfU1G/l6WbUXeHta7Y2PEIvBTwH6E2EfmYUK8pxcxEdEmaomqyp0vZZ7C+3Q==",
      "license": "MIT"
    },
    "node_modules/regjsparser": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/regjsparser/-/regjsparser-0.12.0.tgz",
      "integrity": "sha512-cnE+y8bz4NhMjISKbgeVJtqNbtf5QpjZP+Bslo+UqkIt9QPnX9q095eiRRASJG1/tz6dlNr6Z5NsBiWYokp6EQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "jsesc": "~3.0.2"
      },
      "bin": {
        "regjsparser": "bin/parser"
      }
    },
    "node_modules/regjsparser/node_modules/jsesc": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.0.2.tgz",
      "integrity": "sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==",
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-cwd/node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/resolve-pkg-maps": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/resolve-pkg-maps/-/resolve-pkg-maps-1.0.0.tgz",
      "integrity": "sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/privatenumber/resolve-pkg-maps?sponsor=1"
      }
    },
    "node_modules/resolve.exports": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.3.tgz",
      "integrity": "sha512-OcXjMsGdhL4XnbShKpAcSqPMzQoYkYyhbEaeSko47MjRP9NfEQMhZkXL1DoFlt9LWQn4YttrdnV6X2OiyzBi+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rgbcolor": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/rgbcolor/-/rgbcolor-1.0.1.tgz",
      "integrity": "sha512-9aZLIrhRaD97sgVhtJOW6ckOEh6/GnvQtdVNfdZ6s67+3/XwLS9lBcQYzEEhYVeUowN7pRzMLsyGhK2i/xvWbw==",
      "license": "MIT OR SEE LICENSE IN FEEL-FREE.md",
      "optional": true,
      "engines": {
        "node": ">= 0.8.15"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rollup": {
      "version": "2.79.2",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-2.79.2.tgz",
      "integrity": "sha512-fS6iqSPZDs3dr/y7Od6y5nha8dW1YnbgtsyotCVvoFGKbERG++CVRFv1meyGDE1SNItQA8BrnCw7ScdAhRJ3XQ==",
      "license": "MIT",
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/rollup-plugin-terser": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/rollup-plugin-terser/-/rollup-plugin-terser-7.0.2.tgz",
      "integrity": "sha512-w3iIaU4OxcF52UUXiZNsNeuXIMDvFrr+ZXK6bFZ0Q60qyVfq4uLptoS4bbq3paG3x216eQllFZX7zt6TIImguQ==",
      "deprecated": "This package has been deprecated and is no longer maintained. Please use @rollup/plugin-terser",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.10.4",
        "jest-worker": "^26.2.1",
        "serialize-javascript": "^4.0.0",
        "terser": "^5.0.0"
      },
      "peerDependencies": {
        "rollup": "^2.0.0"
      }
    },
    "node_modules/rollup-plugin-terser/node_modules/jest-worker": {
      "version": "26.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-26.6.2.tgz",
      "integrity": "sha512-KWYVV1c4i+jbMpaBC+U++4Va0cp8OisU185o73T1vo99hqi7w8tSJfUXYswwqqrjzwxa6KpRK54WhPvwf5w6PQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^7.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/rollup-plugin-terser/node_modules/serialize-javascript": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-4.0.0.tgz",
      "integrity": "sha512-GaNA54380uFefWghODBWEGisLZFj00nS5ACs6yHa9nLqlLpVLO8ChDGeKRjZnV4Nh4n0Qi7nhYZD/9fCPzEqkw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/schema-utils": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-2.7.1.tgz",
      "integrity": "sha512-SHiNtMOUGWBQJwzISiVYKu82GiV4QYGePp3odlY1tuKO7gPtphAT5R/py0fA6xtbgLL/RvtJZnU9b8s0F1q0Xg==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.5",
        "ajv": "^6.12.4",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 8.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "devOptional": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/serialize-javascript": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.2.tgz",
      "integrity": "sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/sharp": {
      "version": "0.34.3",
      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.34.3.tgz",
      "integrity": "sha512-eX2IQ6nFohW4DbvHIOLRB3MHFpYqaqvXd3Tp5e/T/dSH83fxaNJQRvDMhASmkNTsNTVF2/OOopzRCt7xokgPfg==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "color": "^4.2.3",
        "detect-libc": "^2.0.4",
        "semver": "^7.7.2"
      },
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-darwin-arm64": "0.34.3",
        "@img/sharp-darwin-x64": "0.34.3",
        "@img/sharp-libvips-darwin-arm64": "1.2.0",
        "@img/sharp-libvips-darwin-x64": "1.2.0",
        "@img/sharp-libvips-linux-arm": "1.2.0",
        "@img/sharp-libvips-linux-arm64": "1.2.0",
        "@img/sharp-libvips-linux-ppc64": "1.2.0",
        "@img/sharp-libvips-linux-s390x": "1.2.0",
        "@img/sharp-libvips-linux-x64": "1.2.0",
        "@img/sharp-libvips-linuxmusl-arm64": "1.2.0",
        "@img/sharp-libvips-linuxmusl-x64": "1.2.0",
        "@img/sharp-linux-arm": "0.34.3",
        "@img/sharp-linux-arm64": "0.34.3",
        "@img/sharp-linux-ppc64": "0.34.3",
        "@img/sharp-linux-s390x": "0.34.3",
        "@img/sharp-linux-x64": "0.34.3",
        "@img/sharp-linuxmusl-arm64": "0.34.3",
        "@img/sharp-linuxmusl-x64": "0.34.3",
        "@img/sharp-wasm32": "0.34.3",
        "@img/sharp-win32-arm64": "0.34.3",
        "@img/sharp-win32-ia32": "0.34.3",
        "@img/sharp-win32-x64": "0.34.3"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "is-arrayish": "^0.3.1"
      }
    },
    "node_modules/simple-swizzle/node_modules/is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-list-map": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/source-list-map/-/source-list-map-2.0.1.tgz",
      "integrity": "sha512-qnQ7gVMxGNxsiL4lEuJwe/To8UnK7fAnmbGEEH8RpLouuKbeEm0lhbQVFIrNSuB+G7tVrAlVsZgETT5nljf+Iw==",
      "license": "MIT"
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sourcemap-codec": {
      "version": "1.4.8",
      "resolved": "https://registry.npmjs.org/sourcemap-codec/-/sourcemap-codec-1.4.8.tgz",
      "integrity": "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA==",
      "deprecated": "Please use @jridgewell/sourcemap-codec instead",
      "license": "MIT"
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/stable-hash": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/stable-hash/-/stable-hash-0.0.5.tgz",
      "integrity": "sha512-+L3ccpzibovGXFK+Ap/f8LOS0ahMrHTf3xu7mMLSpEGU0EO9ucaysSylKo9eRDFNhWve/y275iPmIZ4z39a9iA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/stack-utils/node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/stackblur-canvas": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/stackblur-canvas/-/stackblur-canvas-2.7.0.tgz",
      "integrity": "sha512-yf7OENo23AGJhBriGx0QivY5JP6Y1HbrrDI6WLt6C5auYZXlQrheoY8hD4ibekFKz1HOfE48Ww8kMWMnJD/zcQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.1.14"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/string-width/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/string.prototype.includes": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/string.prototype.includes/-/string.prototype.includes-2.0.1.tgz",
      "integrity": "sha512-o7+c9bW6zpAdJHTtujeePODAhkuicdAryFsfVKwA+wGw89wJ4GTY484WTucM9hLtDEOpOvI+aHnzqnC5lHp4Rg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string.prototype.matchall": {
      "version": "4.0.12",
      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.12.tgz",
      "integrity": "sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "regexp.prototype.flags": "^1.5.3",
        "set-function-name": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.repeat": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-1.0.0.tgz",
      "integrity": "sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.5"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/stringify-object": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/stringify-object/-/stringify-object-3.3.0.tgz",
      "integrity": "sha512-rHqiFh1elqCQ9WPLIC8I0Q/g/wj5J1eMkyoiD6eoQApWHP0FtlK7rqnhmabL5VUY9JQCcqwwvlOaSuutekgyrw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "get-own-enumerable-property-symbols": "^3.0.0",
        "is-obj": "^1.0.1",
        "is-regexp": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-comments/-/strip-comments-2.0.1.tgz",
      "integrity": "sha512-ZprKx+bBLXv067WTCALv8SSz5l2+XhpYCsVtSqlMnkAXMWDq+/ekVbl1ghqP9rUHTzv6sm/DwCOiYutU/yp1fw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-indent": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-indent/-/strip-indent-3.0.0.tgz",
      "integrity": "sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "min-indent": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/styled-jsx": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz",
      "integrity": "sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==",
      "license": "MIT",
      "dependencies": {
        "client-only": "0.0.1"
      },
      "engines": {
        "node": ">= 12.0.0"
      },
      "peerDependencies": {
        "react": ">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/sucrase": {
      "version": "3.35.0",
      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.2",
        "commander": "^4.0.0",
        "glob": "^10.3.10",
        "lines-and-columns": "^1.1.6",
        "mz": "^2.7.0",
        "pirates": "^4.0.1",
        "ts-interface-checker": "^0.1.9"
      },
      "bin": {
        "sucrase": "bin/sucrase",
        "sucrase-node": "bin/sucrase-node"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/sucrase/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/sucrase/node_modules/commander": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/sucrase/node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/sucrase/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/svg-pathdata": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-6.0.3.tgz",
      "integrity": "sha512-qsjeeq5YjBZ5eMdFuUa4ZosMLxgr5RZ+F+Y1OrDhuOCEInRMA3x74XdBtggJcj9kOeInz0WE+LgCPDkZFlBYJw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/tabbable": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/tabbable/-/tabbable-6.2.0.tgz",
      "integrity": "sha512-Cat63mxsVJlzYvN51JmVXIgNoUokrIaT2zLclCXjRd8boZ0004U4KCs/sToJ75C6sdlByWxpYnb5Boif1VSFew==",
      "license": "MIT"
    },
    "node_modules/tailwindcss": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.0.tgz",
      "integrity": "sha512-VigzymniH77knD1dryXbyxR+ePHihHociZbXnLZHUyzf2MMs2ZVqlUrZ3FvpXP8pno9JzmILt1sZPD19M3IxtA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@alloc/quick-lru": "^5.2.0",
        "arg": "^5.0.2",
        "chokidar": "^3.5.3",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.3.0",
        "glob-parent": "^6.0.2",
        "is-glob": "^4.0.3",
        "jiti": "^1.19.1",
        "lilconfig": "^2.1.0",
        "micromatch": "^4.0.5",
        "normalize-path": "^3.0.0",
        "object-hash": "^3.0.0",
        "picocolors": "^1.0.0",
        "postcss": "^8.4.23",
        "postcss-import": "^15.1.0",
        "postcss-js": "^4.0.1",
        "postcss-load-config": "^4.0.1",
        "postcss-nested": "^6.0.1",
        "postcss-selector-parser": "^6.0.11",
        "resolve": "^1.22.2",
        "sucrase": "^3.32.0"
      },
      "bin": {
        "tailwind": "lib/cli.js",
        "tailwindcss": "lib/cli.js"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/tailwindcss/node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/tailwindcss/node_modules/postcss-js": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
      "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "camelcase-css": "^2.0.1"
      },
      "engines": {
        "node": "^12 || ^14 || >= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.4.21"
      }
    },
    "node_modules/tailwindcss/node_modules/postcss-load-config": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
      "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "lilconfig": "^3.0.0",
        "yaml": "^2.3.4"
      },
      "engines": {
        "node": ">= 14"
      },
      "peerDependencies": {
        "postcss": ">=8.0.9",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "postcss": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/tailwindcss/node_modules/postcss-load-config/node_modules/lilconfig": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
      "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antonk52"
      }
    },
    "node_modules/tapable": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.3.tgz",
      "integrity": "sha512-ZL6DDuAlRlLGghwcfmSn9sK3Hr6ArtyudlSAiCqQ6IfE+b+HHbydbYDIG15IfS5do+7XQQBdBiubF/cV2dnDzg==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/temp-dir": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
      "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tempy": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tempy/-/tempy-0.6.0.tgz",
      "integrity": "sha512-G13vtMYPT/J8A4X2SjdtBTphZlrp1gKv6hZiOjw14RCWg6GbHuQBGtjlx75xLbYV/wEc0D7G5K4rxKP/cXk8Bw==",
      "license": "MIT",
      "dependencies": {
        "is-stream": "^2.0.0",
        "temp-dir": "^2.0.0",
        "type-fest": "^0.16.0",
        "unique-string": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/tempy/node_modules/type-fest": {
      "version": "0.16.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.16.0.tgz",
      "integrity": "sha512-eaBzG6MxNzEn9kiwvtre90cXaNLkmadMWa1zQMs3XORCXNbsH/OewwbxC5ia9dCxIxnTAsSxXJaa/p5y8DlvJg==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/terser": {
      "version": "5.44.0",
      "resolved": "https://registry.npmjs.org/terser/-/terser-5.44.0.tgz",
      "integrity": "sha512-nIVck8DK+GM/0Frwd+nIhZ84pR/BX7rmXMfYwyg+Sri5oGVE99/E3KvXqpC2xHFxyqXyGHTKBSioxxplrO4I4w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "@jridgewell/source-map": "^0.3.3",
        "acorn": "^8.15.0",
        "commander": "^2.20.0",
        "source-map-support": "~0.5.20"
      },
      "bin": {
        "terser": "bin/terser"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/terser-webpack-plugin": {
      "version": "5.3.14",
      "resolved": "https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.14.tgz",
      "integrity": "sha512-vkZjpUjb6OMS7dhV+tILUW6BhpDR7P2L/aQSAv+Uwk+m8KATX9EccViHTJR2qDtACKPIYndLGCyl3FMo+r2LMw==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.25",
        "jest-worker": "^27.4.5",
        "schema-utils": "^4.3.0",
        "serialize-javascript": "^6.0.2",
        "terser": "^5.31.1"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.1.0"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        },
        "uglify-js": {
          "optional": true
        }
      }
    },
    "node_modules/terser-webpack-plugin/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/terser-webpack-plugin/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/terser-webpack-plugin/node_modules/jest-worker": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-27.5.1.tgz",
      "integrity": "sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/terser-webpack-plugin/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/terser-webpack-plugin/node_modules/schema-utils": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.3.2.tgz",
      "integrity": "sha512-Gn/JaSk/Mt9gYubxTtSn/QCV4em9mpAPiR1rqy/Ocu19u/G9J5WWdNoUT4SiV6mFC3y6cxyFcFwdzPM3FgxGAQ==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.9.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.1.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/terser-webpack-plugin/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/terser/node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/text-segmentation": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/text-segmentation/-/text-segmentation-1.0.3.tgz",
      "integrity": "sha512-iOiPUo/BGnZ6+54OsWxZidGCsdU8YbE4PSpdPinp7DeMtUJNJBoJ/ouUSTJjHkh1KntHaltHl/gDs2FC4i5+Nw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "utrie": "^1.0.2"
      }
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/thenify": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "any-promise": "^1.0.0"
      }
    },
    "node_modules/thenify-all": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "thenify": ">= 3.1.0 < 4"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/tinyglobby": {
      "version": "0.2.15",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.15.tgz",
      "integrity": "sha512-j2Zq4NyQYG5XMST4cbs02Ak8iJUdxRM0XI5QyxXuZOzKOINmWurp3smXu3y5wDcJrptwpSjgXHzIQxR0omXljQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.5.0",
        "picomatch": "^4.0.3"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tinyglobby/node_modules/fdir": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
      "integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/tinyglobby/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/ts-api-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18.12"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4"
      }
    },
    "node_modules/ts-interface-checker": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
      "dev": true,
      "license": "Apache-2.0"
    },
    "node_modules/tsconfig-paths": {
      "version": "3.15.0",
      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/json5": "^0.0.29",
        "json5": "^1.0.2",
        "minimist": "^1.2.6",
        "strip-bom": "^3.0.0"
      }
    },
    "node_modules/tsconfig-paths/node_modules/json5": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.0"
      },
      "bin": {
        "json5": "lib/cli.js"
      }
    },
    "node_modules/tsconfig-paths/node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typescript": {
      "version": "5.9.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
      "integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
      "dev": true,
      "license": "Apache-2.0",
      "peer": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/undici": {
      "version": "6.19.7",
      "resolved": "https://registry.npmjs.org/undici/-/undici-6.19.7.tgz",
      "integrity": "sha512-HR3W/bMGPSr90i8AAp2C4DM3wChFdJPLrWYpIS++LxS8K+W535qftjt+4MyjNYHeWabMj1nvtmLIi7l++iq91A==",
      "license": "MIT",
      "engines": {
        "node": ">=18.17"
      }
    },
    "node_modules/undici-types": {
      "version": "7.10.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.10.0.tgz",
      "integrity": "sha512-t5Fy/nfn+14LuOc2KNYg75vZqClpAiqscVvMygNnlsHBFpSXdJaYtXMcdNLpl/Qvc3P2cB3s6lOV51nqsFq4ag==",
      "license": "MIT"
    },
    "node_modules/unicode-canonical-property-names-ecmascript": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-2.0.1.tgz",
      "integrity": "sha512-dA8WbNeb2a6oQzAQ55YlT5vQAWGV9WXOsi3SskE3bcCdM0P4SDd+24zS/OCacdRq5BkdsRj9q3Pg6YyQoxIGqg==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-ecmascript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-2.0.0.tgz",
      "integrity": "sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==",
      "license": "MIT",
      "dependencies": {
        "unicode-canonical-property-names-ecmascript": "^2.0.0",
        "unicode-property-aliases-ecmascript": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-value-ecmascript": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-2.2.1.tgz",
      "integrity": "sha512-JQ84qTuMg4nVkx8ga4A16a1epI9H6uTXAknqxkGF/aFfRLw1xC/Bp24HNLaZhHSkWd3+84t8iXnp1J0kYcZHhg==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-property-aliases-ecmascript": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.1.0.tgz",
      "integrity": "sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "license": "MIT",
      "dependencies": {
        "crypto-random-string": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/unrs-resolver": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/unrs-resolver/-/unrs-resolver-1.11.1.tgz",
      "integrity": "sha512-bSjt9pjaEBnNiGgc9rUiHGKv5l4/TGzDmYw3RhnkJGtLhbnnA/5qJj7x3dNDCRx/PJxu774LlH8lCOlB4hEfKg==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "napi-postinstall": "^0.3.0"
      },
      "funding": {
        "url": "https://opencollective.com/unrs-resolver"
      },
      "optionalDependencies": {
        "@unrs/resolver-binding-android-arm-eabi": "1.11.1",
        "@unrs/resolver-binding-android-arm64": "1.11.1",
        "@unrs/resolver-binding-darwin-arm64": "1.11.1",
        "@unrs/resolver-binding-darwin-x64": "1.11.1",
        "@unrs/resolver-binding-freebsd-x64": "1.11.1",
        "@unrs/resolver-binding-linux-arm-gnueabihf": "1.11.1",
        "@unrs/resolver-binding-linux-arm-musleabihf": "1.11.1",
        "@unrs/resolver-binding-linux-arm64-gnu": "1.11.1",
        "@unrs/resolver-binding-linux-arm64-musl": "1.11.1",
        "@unrs/resolver-binding-linux-ppc64-gnu": "1.11.1",
        "@unrs/resolver-binding-linux-riscv64-gnu": "1.11.1",
        "@unrs/resolver-binding-linux-riscv64-musl": "1.11.1",
        "@unrs/resolver-binding-linux-s390x-gnu": "1.11.1",
        "@unrs/resolver-binding-linux-x64-gnu": "1.11.1",
        "@unrs/resolver-binding-linux-x64-musl": "1.11.1",
        "@unrs/resolver-binding-wasm32-wasi": "1.11.1",
        "@unrs/resolver-binding-win32-arm64-msvc": "1.11.1",
        "@unrs/resolver-binding-win32-ia32-msvc": "1.11.1",
        "@unrs/resolver-binding-win32-x64-msvc": "1.11.1"
      }
    },
    "node_modules/upath": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/upath/-/upath-1.2.0.tgz",
      "integrity": "sha512-aZwGpamFO61g3OlfT7OQCHqhGnW43ieH9WZeP7QxN/G/jS4jfqUkZxoryvJgVPEcrl5NL/ggHsSmLMHuH64Lhg==",
      "license": "MIT",
      "engines": {
        "node": ">=4",
        "yarn": "*"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/utrie": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/utrie/-/utrie-1.0.2.tgz",
      "integrity": "sha512-1MLa5ouZiOmQzUbjbu9VmjLzn1QLXBhwpUa7kdLUQK+KQ5KA9I1vk5U4YHe/X2Ch7PYnJfWuWT+VbuxbGwljhw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "base64-arraybuffer": "^1.0.2"
      }
    },
    "node_modules/v8-to-istanbul": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.3.0.tgz",
      "integrity": "sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^2.0.0"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/warning": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/warning/-/warning-4.0.3.tgz",
      "integrity": "sha512-rpJyN222KWIvHJ/F53XSZv0Zl/accqHR8et1kpaMTD/fLCRxtV8iX8czMzY7sVZupTI3zcUTg8eycS2kNF9l6w==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.0.0"
      }
    },
    "node_modules/watchpack": {
      "version": "2.4.4",
      "resolved": "https://registry.npmjs.org/watchpack/-/watchpack-2.4.4.tgz",
      "integrity": "sha512-c5EGNOiyxxV5qmTtAB7rbiXxi1ooX1pQKMLX/MIabJjRA0SJBQOjKF+KSVfHkr9U1cADPon0mRiVe/riyaiDUA==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.1.2"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/webpack": {
      "version": "5.101.3",
      "resolved": "https://registry.npmjs.org/webpack/-/webpack-5.101.3.tgz",
      "integrity": "sha512-7b0dTKR3Ed//AD/6kkx/o7duS8H3f1a4w3BYpIriX4BzIhjkn4teo05cptsxvLesHFKK5KObnadmCHBwGc+51A==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/eslint-scope": "^3.7.7",
        "@types/estree": "^1.0.8",
        "@types/json-schema": "^7.0.15",
        "@webassemblyjs/ast": "^1.14.1",
        "@webassemblyjs/wasm-edit": "^1.14.1",
        "@webassemblyjs/wasm-parser": "^1.14.1",
        "acorn": "^8.15.0",
        "acorn-import-phases": "^1.0.3",
        "browserslist": "^4.24.0",
        "chrome-trace-event": "^1.0.2",
        "enhanced-resolve": "^5.17.3",
        "es-module-lexer": "^1.2.1",
        "eslint-scope": "5.1.1",
        "events": "^3.2.0",
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.2.11",
        "json-parse-even-better-errors": "^2.3.1",
        "loader-runner": "^4.2.0",
        "mime-types": "^2.1.27",
        "neo-async": "^2.6.2",
        "schema-utils": "^4.3.2",
        "tapable": "^2.1.1",
        "terser-webpack-plugin": "^5.3.11",
        "watchpack": "^2.4.1",
        "webpack-sources": "^3.3.3"
      },
      "bin": {
        "webpack": "bin/webpack.js"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependenciesMeta": {
        "webpack-cli": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-sources": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.3.3.tgz",
      "integrity": "sha512-yd1RBzSGanHkitROoPFd6qsrxt+oFhg/129YzheDGqeustzX0vTZJZsSsQjVQC4yzBQ56K55XU8gaNCtIzOnTg==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/webpack/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/webpack/node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "license": "BSD-2-Clause",
      "peer": true,
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/webpack/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "peer": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/webpack/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/webpack/node_modules/schema-utils": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.3.2.tgz",
      "integrity": "sha512-Gn/JaSk/Mt9gYubxTtSn/QCV4em9mpAPiR1rqy/Ocu19u/G9J5WWdNoUT4SiV6mFC3y6cxyFcFwdzPM3FgxGAQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.9.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.1.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "license": "Apache-2.0",
      "dependencies": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/workbox-background-sync": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-background-sync/-/workbox-background-sync-6.6.0.tgz",
      "integrity": "sha512-jkf4ZdgOJxC9u2vztxLuPT/UjlH7m/nWRQ/MgGL0v8BJHoZdVGJd18Kck+a0e55wGXdqyHO+4IQTk0685g4MUw==",
      "license": "MIT",
      "dependencies": {
        "idb": "^7.0.1",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-broadcast-update": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-broadcast-update/-/workbox-broadcast-update-6.6.0.tgz",
      "integrity": "sha512-nm+v6QmrIFaB/yokJmQ/93qIJ7n72NICxIwQwe5xsZiV2aI93MGGyEyzOzDPVz5THEr5rC3FJSsO3346cId64Q==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-build": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-build/-/workbox-build-6.6.0.tgz",
      "integrity": "sha512-Tjf+gBwOTuGyZwMz2Nk/B13Fuyeo0Q84W++bebbVsfr9iLkDSo6j6PST8tET9HYA58mlRXwlMGpyWO8ETJiXdQ==",
      "license": "MIT",
      "dependencies": {
        "@apideck/better-ajv-errors": "^0.3.1",
        "@babel/core": "^7.11.1",
        "@babel/preset-env": "^7.11.0",
        "@babel/runtime": "^7.11.2",
        "@rollup/plugin-babel": "^5.2.0",
        "@rollup/plugin-node-resolve": "^11.2.1",
        "@rollup/plugin-replace": "^2.4.1",
        "@surma/rollup-plugin-off-main-thread": "^2.2.3",
        "ajv": "^8.6.0",
        "common-tags": "^1.8.0",
        "fast-json-stable-stringify": "^2.1.0",
        "fs-extra": "^9.0.1",
        "glob": "^7.1.6",
        "lodash": "^4.17.20",
        "pretty-bytes": "^5.3.0",
        "rollup": "^2.43.1",
        "rollup-plugin-terser": "^7.0.0",
        "source-map": "^0.8.0-beta.0",
        "stringify-object": "^3.3.0",
        "strip-comments": "^2.0.1",
        "tempy": "^0.6.0",
        "upath": "^1.2.0",
        "workbox-background-sync": "6.6.0",
        "workbox-broadcast-update": "6.6.0",
        "workbox-cacheable-response": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-expiration": "6.6.0",
        "workbox-google-analytics": "6.6.0",
        "workbox-navigation-preload": "6.6.0",
        "workbox-precaching": "6.6.0",
        "workbox-range-requests": "6.6.0",
        "workbox-recipes": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0",
        "workbox-streams": "6.6.0",
        "workbox-sw": "6.6.0",
        "workbox-window": "6.6.0"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/workbox-build/node_modules/@apideck/better-ajv-errors": {
      "version": "0.3.6",
      "resolved": "https://registry.npmjs.org/@apideck/better-ajv-errors/-/better-ajv-errors-0.3.6.tgz",
      "integrity": "sha512-P+ZygBLZtkp0qqOAJJVX4oX/sFo5JR3eBWwwuqHHhK0GIgQOKWrAfiAaWX0aArHkRWHMuggFEgAZNxVPwPZYaA==",
      "license": "MIT",
      "dependencies": {
        "json-schema": "^0.4.0",
        "jsonpointer": "^5.0.0",
        "leven": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "ajv": ">=8"
      }
    },
    "node_modules/workbox-build/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/workbox-build/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/workbox-build/node_modules/source-map": {
      "version": "0.8.0-beta.0",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.8.0-beta.0.tgz",
      "integrity": "sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==",
      "deprecated": "The work that was done in this beta branch won't be included in future versions",
      "license": "BSD-3-Clause",
      "dependencies": {
        "whatwg-url": "^7.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/workbox-build/node_modules/tr46": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-1.0.1.tgz",
      "integrity": "sha512-dTpowEjclQ7Kgx5SdBkqRzVhERQXov8/l9Ft9dVM9fmg0W0KQSVaXX9T4i6twCPNtYiZM53lpSSUAwJbFPOHxA==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/workbox-build/node_modules/webidl-conversions": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-4.0.2.tgz",
      "integrity": "sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==",
      "license": "BSD-2-Clause"
    },
    "node_modules/workbox-build/node_modules/whatwg-url": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-7.1.0.tgz",
      "integrity": "sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==",
      "license": "MIT",
      "dependencies": {
        "lodash.sortby": "^4.7.0",
        "tr46": "^1.0.1",
        "webidl-conversions": "^4.0.2"
      }
    },
    "node_modules/workbox-cacheable-response": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-cacheable-response/-/workbox-cacheable-response-6.6.0.tgz",
      "integrity": "sha512-JfhJUSQDwsF1Xv3EV1vWzSsCOZn4mQ38bWEBR3LdvOxSPgB65gAM6cS2CX8rkkKHRgiLrN7Wxoyu+TuH67kHrw==",
      "deprecated": "workbox-background-sync@6.6.0",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-core": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-core/-/workbox-core-6.6.0.tgz",
      "integrity": "sha512-GDtFRF7Yg3DD859PMbPAYPeJyg5gJYXuBQAC+wyrWuuXgpfoOrIQIvFRZnQ7+czTIQjIr1DhLEGFzZanAT/3bQ==",
      "license": "MIT"
    },
    "node_modules/workbox-expiration": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-expiration/-/workbox-expiration-6.6.0.tgz",
      "integrity": "sha512-baplYXcDHbe8vAo7GYvyAmlS4f6998Jff513L4XvlzAOxcl8F620O91guoJ5EOf5qeXG4cGdNZHkkVAPouFCpw==",
      "license": "MIT",
      "dependencies": {
        "idb": "^7.0.1",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-google-analytics": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-google-analytics/-/workbox-google-analytics-6.6.0.tgz",
      "integrity": "sha512-p4DJa6OldXWd6M9zRl0H6vB9lkrmqYFkRQ2xEiNdBFp9U0LhsGO7hsBscVEyH9H2/3eZZt8c97NB2FD9U2NJ+Q==",
      "deprecated": "It is not compatible with newer versions of GA starting with v4, as long as you are using GAv3 it should be ok, but the package is not longer being maintained",
      "license": "MIT",
      "dependencies": {
        "workbox-background-sync": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-navigation-preload": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-navigation-preload/-/workbox-navigation-preload-6.6.0.tgz",
      "integrity": "sha512-utNEWG+uOfXdaZmvhshrh7KzhDu/1iMHyQOV6Aqup8Mm78D286ugu5k9MFD9SzBT5TcwgwSORVvInaXWbvKz9Q==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-precaching": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-precaching/-/workbox-precaching-6.6.0.tgz",
      "integrity": "sha512-eYu/7MqtRZN1IDttl/UQcSZFkHP7dnvr/X3Vn6Iw6OsPMruQHiVjjomDFCNtd8k2RdjLs0xiz9nq+t3YVBcWPw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-range-requests": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-range-requests/-/workbox-range-requests-6.6.0.tgz",
      "integrity": "sha512-V3aICz5fLGq5DpSYEU8LxeXvsT//mRWzKrfBOIxzIdQnV/Wj7R+LyJVTczi4CQ4NwKhAaBVaSujI1cEjXW+hTw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-recipes": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-recipes/-/workbox-recipes-6.6.0.tgz",
      "integrity": "sha512-TFi3kTgYw73t5tg73yPVqQC8QQjxJSeqjXRO4ouE/CeypmP2O/xqmB/ZFBBQazLTPxILUQ0b8aeh0IuxVn9a6A==",
      "license": "MIT",
      "dependencies": {
        "workbox-cacheable-response": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-expiration": "6.6.0",
        "workbox-precaching": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-routing": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-routing/-/workbox-routing-6.6.0.tgz",
      "integrity": "sha512-x8gdN7VDBiLC03izAZRfU+WKUXJnbqt6PG9Uh0XuPRzJPpZGLKce/FkOX95dWHRpOHWLEq8RXzjW0O+POSkKvw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-strategies": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-strategies/-/workbox-strategies-6.6.0.tgz",
      "integrity": "sha512-eC07XGuINAKUWDnZeIPdRdVja4JQtTuc35TZ8SwMb1ztjp7Ddq2CJ4yqLvWzFWGlYI7CG/YGqaETntTxBGdKgQ==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-streams": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-streams/-/workbox-streams-6.6.0.tgz",
      "integrity": "sha512-rfMJLVvwuED09CnH1RnIep7L9+mj4ufkTyDPVaXPKlhi9+0czCu+SJggWCIFbPpJaAZmp2iyVGLqS3RUmY3fxg==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0"
      }
    },
    "node_modules/workbox-sw": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-sw/-/workbox-sw-6.6.0.tgz",
      "integrity": "sha512-R2IkwDokbtHUE4Kus8pKO5+VkPHD2oqTgl+XJwh4zbF1HyjAbgNmK/FneZHVU7p03XUt9ICfuGDYISWG9qV/CQ==",
      "license": "MIT"
    },
    "node_modules/workbox-webpack-plugin": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-webpack-plugin/-/workbox-webpack-plugin-6.6.0.tgz",
      "integrity": "sha512-xNZIZHalboZU66Wa7x1YkjIqEy1gTR+zPM+kjrYJzqN7iurYZBctBLISyScjhkJKYuRrZUP0iqViZTh8rS0+3A==",
      "license": "MIT",
      "dependencies": {
        "fast-json-stable-stringify": "^2.1.0",
        "pretty-bytes": "^5.4.1",
        "upath": "^1.2.0",
        "webpack-sources": "^1.4.3",
        "workbox-build": "6.6.0"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "webpack": "^4.4.0 || ^5.9.0"
      }
    },
    "node_modules/workbox-webpack-plugin/node_modules/webpack-sources": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-1.4.3.tgz",
      "integrity": "sha512-lgTS3Xhv1lCOKo7SA5TjKXMjpSM4sBjNV5+q2bqesbSPs5FjGmU6jjtBSkX9b4qW87vDIsCIlUPOEhbZrMdjeQ==",
      "license": "MIT",
      "dependencies": {
        "source-list-map": "^2.0.0",
        "source-map": "~0.6.1"
      }
    },
    "node_modules/workbox-window": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-window/-/workbox-window-6.6.0.tgz",
      "integrity": "sha512-L4N9+vka17d16geaJXXRjENLFldvkWy7JyGxElRD0JvBxvFEd8LOhr+uXCcar/NzAmIBRv9EZ+M+Qr4mOoBITw==",
      "license": "MIT",
      "dependencies": {
        "@types/trusted-types": "^2.0.2",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/ws": {
      "version": "8.18.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "license": "ISC"
    },
    "node_modules/yaml": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.8.1.tgz",
      "integrity": "sha512-lcYcMxX2PO9XMGvAJkJ3OsNMw+/7FKes7/hgerGUYWIoWu5j/+YQqcZr5JnPZWzOsEBgMbSbiSTn/dv/69Mkpw==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "yaml": "bin.mjs"
      },
      "engines": {
        "node": ">= 14.6"
      }
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}



// =========================================
// 12. package.json
// =========================================

{
  "name": "app-entregas-woocommerce-frontend",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@supabase/auth-helpers-react": "^0.5.0",
    "@supabase/ssr": "^0.4.1",
    "@supabase/supabase-js": "^2.57.4",
    "axios": "^1.12.1",
    "date-fns": "^4.1.0",
    "firebase": "^10.14.1",
    "jspdf": "^3.0.3",
    "next": "^15.0.0",
    "next-pwa": "^5.6.0",
    "react": "^18.2.0",
    "react-datepicker": "^8.7.0",
    "react-dom": "^18.2.0",
    "react-modal": "^3.16.3"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.5.0",
    "@testing-library/react": "^16.0.1",
    "autoprefixer": "^10.4.0",
    "eslint": "^8.57.0",
    "eslint-config-next": "^15.0.0",
    "jest": "^29.7.0",
    "postcss": "^8.4.0",
    "tailwindcss": "^3.4.0"
  }
}



// =========================================
// 13. pages.txt
// =========================================

===== _app.js =====
// pages/_app.js
import '../styles/globals.css';
import Layout from '../components/Layout';

// ==============================================================================
// COMPONENTE MyApp - PONTO DE ENTRADA DA APLICAÇÃO
// ==============================================================================
/**
 * MyApp é o componente raiz que envolve todas as páginas
 * Aqui definimos layouts globais, providers e configurações comuns
 * 
 * @param {Object} props - Propriedades do Next.js
 * @param {React.Component} props.Component - Componente da página atual
 * @param {Object} props.pageProps - Props específicas da página
 */
function MyApp({ Component, pageProps }) {
  
  // ============================================================================
  // 1. DECISÃO DE LAYOUT POR PÁGINA
  // ============================================================================
  /**
   * Estratégia: Cada página pode definir se quer ou não o layout padrão
   * através da propriedade estática `noLayout`
   * 
   * Páginas que devem SEM layout:
   * - Login, Cadastro, Erros, Admin (porque tem layout próprio)
   */
  
  // Verificar se a página atual deve usar layout
  const shouldUseLayout = !Component.noLayout;

  // ============================================================================
  // 2. RENDERIZAÇÃO CONDICIONAL
  // ============================================================================
  return (
    <>
      {shouldUseLayout ? (
        // PÁGINAS COM LAYOUT PADRÃO (com sidebar e header)
        <Layout>
          <Component {...pageProps} />
        </Layout>
      ) : (
        // PÁGINAS SEM LAYOUT PADRÃO (renderizar apenas o conteúdo)
        <Component {...pageProps} />
      )}
    </>
  );
}

export default MyApp;


===== _document.js =====
 import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link rel="manifest" href="/manifest.json" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;


===== admin.js =====
// pages/admin.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ==============================================================================
// PÁGINA DE ADMINISTRAÇÃO
// ==============================================================================
/**
 * Painel administrativo para gerenciamento do sistema
 * Acessível apenas para usuários com role 'admin'
 * 
 * IMPORTANTE: Esta página NÃO usa o Layout padrão (já é aplicado pelo _app.js)
 * Por isso NÃO devemos envolver com <Layout> aqui
 */
export default function Admin() {
  // ============================================================================
  // 1. ESTADOS E HOOKS
  // ============================================================================
  const { userRole, loading: userLoading } = useUserProfile();
  const [activeTab, setActiveTab] = useState('lojas');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  // Estados para dados das abas
  const [lojas, setLojas] = useState([]);
  const [usuariosPendentes, setUsuariosPendentes] = useState([]);
  const [associacoes, setAssociacoes] = useState([]);

  // ============================================================================
  // 2. EFFECT: CARREGAR DADOS COM BASE NA ABA ATIVA
  // ============================================================================
  useEffect(() => {
    if (activeTab === 'lojas') {
      loadLojas();
    } else if (activeTab === 'usuarios') {
      loadUsuariosPendentes();
    } else if (activeTab === 'associacoes') {
      loadAssociacoes();
    }
  }, [activeTab]);

// ============================================================================
// 3. FUNÇÕES: CARREGAMENTO DE DADOS
// ============================================================================
/**
 * Carrega lista de lojas cadastradas
 */
const loadLojas = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('lojas')
      .select('*')
      .order('loja_nome');
    
    if (error) throw error;
    setLojas(data || []);
  } catch (err) {
    setError('Erro ao carregar lojas: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Carrega usuários não vinculados a lojas (pendentes)
 */
const loadUsuariosPendentes = async () => {
  try {
    setLoading(true);
    // ✅ CORREÇÃO: Consulta mais simples para evitar erro de UUID
    const { data: usuariosAssociados, error: errorAssociados } = await supabase
      .from('loja_associada')
      .select('uid_usuario')
      .eq('status_vinculacao', 'ativo');

    if (errorAssociados) {
      throw new Error('Erro ao buscar usuários associados: ' + errorAssociados.message);
    }

    // Extrair apenas os UIDs
    const uidsAssociados = usuariosAssociados?.map(ua => ua.uid_usuario) || [];

    // Buscar usuários NÃO presentes na lista de associados
    let query = supabase
      .from('usuarios')
      .select('*');

    // Aplicar filtro apenas se houver usuários associados
    if (uidsAssociados.length > 0) {
      query = query.not('uid', 'in', `(${uidsAssociados.map(uid => `"${uid}"`).join(',')})`);
    }

    const { data, error } = await query;

    if (error) {
      throw new Error('Erro ao buscar usuários pendentes: ' + error.message);
    }

    setUsuariosPendentes(data || []);

  } catch (err) {
    setError('Erro ao carregar usuários: ' + err.message);
    console.error('Erro detalhado:', err);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// ✅ CORREÇÃO: FUNÇÃO loadAssociacoes ADICIONADA
// ============================================================================
/**
 * Carrega associações ativas entre usuários e lojas
 */
const loadAssociacoes = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        *,
        usuarios:uid_usuario(nome_completo, email),
        lojas:id_loja(loja_nome)
      `)
      .order('ultimo_status_vinculacao', { ascending: false });
    
    if (error) throw error;
    setAssociacoes(data || []);
  } catch (err) {
    setError('Erro ao carregar associações: ' + err.message);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// 4. FUNÇÕES: AÇÕES DO ADMIN
// ============================================================================
/**
 * Cria uma nova loja no sistema
 */
const handleCriarLoja = async (dadosLoja) => {
  try {
    setLoading(true);
    setError(null);
    
    const { error } = await supabase
      .from('lojas')
      .insert([{
        id_loja: dadosLoja.id_loja,
        loja_nome: dadosLoja.loja_nome,
        loja_endereco: dadosLoja.loja_endereco,
        loja_telefone: dadosLoja.loja_telefone,
        loja_perimetro_entrega: dadosLoja.loja_perimetro_entrega,
        cnpj: dadosLoja.cnpj,
        ativa: true
      }]);
    
    if (error) throw error;
    
    setSuccess('Loja criada com sucesso!');
    await loadLojas();
  } catch (err) {
    setError('Erro ao criar loja: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Associa um usuário como gerente de uma loja
 */
const handleAssociarGerente = async (usuarioId, lojaId) => {
  try {
    setLoading(true);
    setError(null);
    
    // Buscar dados do usuário e loja em paralelo
    const [{ data: usuario }, { data: loja }] = await Promise.all([
      supabase.from('usuarios').select('*').eq('uid', usuarioId).single(),
      supabase.from('lojas').select('*').eq('id_loja', lojaId).single()
    ]);
    
    if (!usuario || !loja) throw new Error('Usuário ou loja não encontrados');
    
    // Criar associação
    const { error } = await supabase
      .from('loja_associada')
      .insert([{
        uid_usuario: usuarioId,
        nome_completo: usuario.nome_completo,
        id_loja: lojaId,
        loja_nome: loja.loja_nome,
        loja_endereco: loja.loja_endereco,
        loja_telefone: loja.loja_telefone,
        funcao: 'gerente',
        status_vinculacao: 'ativo',
        ultimo_status_vinculacao: new Date().toISOString()
      }]);
    
    if (error) throw error;
    
    setSuccess('Gerente associado com sucesso!');
    await loadAssociacoes(); // ✅ Agora esta função existe
    await loadUsuariosPendentes();
  } catch (err) {
    setError('Erro ao associar gerente: ' + err.message);
  } finally {
    setLoading(false);
  }
};
  // ============================================================================
  // 5. VERIFICAÇÕES DE ACESSO E LOADING
  // ============================================================================
  if (userLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // ============================================================================
  // 6. RENDERIZAÇÃO PRINCIPAL
  // ============================================================================
  return (
    <RouteGuard requiredRole="admin">
      {/* ✅ REMOVIDO: <Layout> wrapper (já é aplicado pelo _app.js) */}
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Painel Administrativo</h1>
        
        {/* Mensagens de status */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            {success}
          </div>
        )}

        {/* Navegação por abas */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="flex space-x-8">
            {['lojas', 'usuarios', 'associacoes'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                {tab === 'lojas' && 'Lojas'}
                {tab === 'usuarios' && 'Usuários Pendentes'}
                {tab === 'associacoes' && 'Associações'}
              </button>
            ))}
          </nav>
        </div>

        {/* Conteúdo das abas */}
        <div className="mt-6">
          {/* Aba: Lojas */}
          {activeTab === 'lojas' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Gerenciar Lojas</h2>
              
              {/* Formulário de criação */}
              <div className="bg-white p-4 rounded-lg shadow-md mb-4">
                <h3 className="text-lg font-medium mb-3">Criar Nova Loja</h3>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target);
                  handleCriarLoja({
                    id_loja: formData.get('id_loja'),
                    loja_nome: formData.get('loja_nome'),
                    loja_endereco: formData.get('loja_endereco'),
                    loja_telefone: formData.get('loja_telefone'),
                    loja_perimetro_entrega: formData.get('loja_perimetro_entrega'),
                    cnpj: formData.get('cnpj')
                  });
                }}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                    <input name="id_loja" placeholder="ID da Loja (ex: L1)" required />
                    <input name="loja_nome" placeholder="Nome da Loja" required />
                    <input name="loja_endereco" placeholder="Endereço" />
                    <input name="loja_telefone" placeholder="Telefone" />
                    <input name="loja_perimetro_entrega" placeholder="Perímetro de Entrega" />
                    <input name="cnpj" placeholder="CNPJ" />
                  </div>
                  <button type="submit" disabled={loading}>
                    {loading ? 'Criando...' : 'Criar Loja'}
                  </button>
                </form>
              </div>

              {/* Listagem de lojas */}
              <div>
                <h3 className="text-lg font-medium mb-3">Lojas Cadastradas</h3>
                {loading ? (
                  <div className="text-center py-4">Carregando...</div>
                ) : (
                  <div className="grid gap-4">
                    {lojas.map(loja => (
                      <div key={loja.id} className="bg-white p-4 rounded-lg shadow-md">
                        <h4 className="font-semibold">{loja.loja_nome} ({loja.id_loja})</h4>
                        <p className="text-gray-600">{loja.loja_endereco}</p>
                        <p className="text-gray-600">{loja.loja_telefone}</p>
                        <p className="text-gray-600">Perímetro: {loja.loja_perimetro_entrega}</p>
                        <span className={`inline-block px-2 py-1 rounded text-xs ${
                          loja.ativa ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {loja.ativa ? 'Ativa' : 'Inativa'}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Aba: Usuários Pendentes */}
          {activeTab === 'usuarios' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Usuários Pendentes</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {usuariosPendentes.map(usuario => (
                    <div key={usuario.uid} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{usuario.nome_completo}</h4>
                      <p className="text-gray-600">{usuario.email}</p>
                      <p className="text-gray-600">{usuario.telefone}</p>
                      <button
                        onClick={() => {
                          const lojaId = prompt('Digite o ID da loja para associar (ex: L1):');
                          if (lojaId) handleAssociarGerente(usuario.uid, lojaId);
                        }}
                        className="bg-green-500 text-white px-3 py-1 rounded text-sm mt-2"
                      >
                        Associar como Gerente
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Aba: Associações */}
          {activeTab === 'associacoes' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Associações Ativas</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {associacoes.map(associacao => (
                    <div key={associacao.id} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{associacao.nome_completo}</h4>
                      <p className="text-gray-600">Função: {associacao.funcao}</p>
                      <p className="text-gray-600">Loja: {associacao.loja_nome}</p>
                      <p className="text-gray-600">Status: {associacao.status_vinculacao}</p>
                      <p className="text-gray-600 text-sm">
                        Última atualização: {new Date(associacao.ultimo_status_vinculacao).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}

// ==============================================================================
// MARCAÇÃO: ESTA PÁGINA NÃO USA LAYOUT PADRÃO (já é aplicado pelo _app.js)
// ==============================================================================


===== atualizar-senha.js =====
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import Link from 'next/link';

export default function AtualizarSenha() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [session, setSession] = useState(null);
  const router = useRouter();

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
    });

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    return () => subscription.unsubscribe();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    if (password !== confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }

    if (password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) throw error;

      setSuccess('Senha atualizada com sucesso!');
      
      setTimeout(() => {
        router.push('/login');
      }, 2000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  if (!session) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 flex items-center justify-center">
        <div className="bg-white p-8 rounded-2xl shadow-2xl text-center">
          <p className="text-red-600 mb-4">Link inválido ou expirado</p>
          <Link href="/recuperar-senha" className="text-purple-600 hover:text-purple-800">
            Solicitar novo link
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">Nova Senha</h2>
          <p className="text-purple-200 mt-2">Digite sua nova senha</p>
        </div>

        {/* Card de Atualização */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Atualizar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Campo Nova Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                Nova Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Mínimo 6 caracteres"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            {/* Campo Confirmar Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                Confirmar Nova Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Digite novamente a senha"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Atualizando...' : 'Atualizar Senha'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
AtualizarSenha.noLayout = true;


===== cadastro.js =====
import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

export default function Cadastro() {
  const [formData, setFormData] = useState({
    nome_completo: '',
    email: '',
    telefone: '',
    password: '',
    confirmPassword: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const router = useRouter();

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    // Validações
    if (formData.password !== formData.confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }

    if (formData.password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }

    try {
      // 1. Criar usuário no Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
        options: {
          data: {
            nome_completo: formData.nome_completo,
            telefone: formData.telefone
          }
        }
      });

      if (authError) throw authError;

      // 2. Inserir na tabela usuarios
      const { error: userError } = await supabase
        .from('usuarios')
        .insert({
          uid: authData.user.id,
          email: formData.email,
          nome_completo: formData.nome_completo,
          telefone: formData.telefone,
          is_admin: false
        });

      if (userError) throw userError;

      setSuccess('Cadastro realizado com sucesso! Aguarde aprovação do administrador.');
      
      // Redirecionar após 3 segundos
      setTimeout(() => {
        router.push('/login');
      }, 3000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Criar Nova Conta</p>
        </div>

        {/* Card de Cadastro */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Cadastro
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="nome_completo" className="block text-sm font-medium text-gray-700">
                Nome Completo
              </label>
              <input
                id="nome_completo"
                name="nome_completo"
                type="text"
                value={formData.nome_completo}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="Seu nome completo"
              />
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
              />
            </div>

            <div>
              <label htmlFor="telefone" className="block text-sm font-medium text-gray-700">
                Telefone
              </label>
              <input
                id="telefone"
                name="telefone"
                type="tel"
                value={formData.telefone}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="(11) 99999-9999"
              />
            </div>

            <div className="relative">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  value={formData.password}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Mínimo 6 caracteres"
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <div className="relative">
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirmar Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Digite novamente sua senha"
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                >
                  {showConfirmPassword ? (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Criando conta...' : 'Criar Conta'}
            </button>
          </form>

          {/* Link para login */}
          <div className="mt-6 text-center">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Já tem uma conta? Faça login
            </Link>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2024 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
Cadastro.noLayout = true;


===== gestao-entregadores.js =====
// pages/gestao-entregadores.js (VERSÃO MELHORADA)
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// PÁGINA: GESTÃO DE ENTREGADORES
// ==============================================================================
export default function GestaoEntregadores() {
  const [entregadores, setEntregadores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [buscaEmail, setBuscaEmail] = useState('');
  const [usuarioEncontrado, setUsuarioEncontrado] = useState(null);
  const [buscando, setBuscando] = useState(false);

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 1. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 2. CARREGAR ENTREGADORES DA LOJA (COM MAIS CAMPOS)
  // ============================================================================
  useEffect(() => {
    if (userRole === 'gerente' || userRole === 'admin') {
      carregarEntregadores();
    }
  }, [userRole]);

  const carregarEntregadores = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('loja_associada')
        .select('*');

      // Gerente só vê pessoas da sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      // Filtrar apenas entregadores e gerentes
      const pessoasLoja = data.filter(pessoa => 
        pessoa.funcao === 'entregador' || pessoa.funcao === 'gerente'
      );
      
      setEntregadores(pessoasLoja || []);
    } catch (error) {
      console.error('Erro ao carregar pessoas da loja:', error);
      alert('Erro ao carregar lista de pessoas');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 3. BUSCAR USUÁRIO POR EMAIL NO SISTEMA (COM MAIS DETALHES)
  // ============================================================================
  const buscarUsuarioPorEmail = async () => {
    if (!buscaEmail.trim()) {
      alert('Por favor, digite um email para buscar');
      return;
    }
    
    try {
      setBuscando(true);
      
      // Buscar usuário na tabela usuarios pelo email
      const { data: usuario, error: usuarioError } = await supabase
        .from('usuarios')
        .select('uid, email, nome_completo, telefone, foto')
        .eq('email', buscaEmail.trim())
        .single();

      if (usuarioError) {
        if (usuarioError.code === 'PGRST116') {
          setUsuarioEncontrado(null);
          alert('Usuário não encontrado no sistema');
        } else {
          throw usuarioError;
        }
        return;
      }

      // Buscar TODOS os detalhes das lojas associadas a este usuário
      const { data: lojasAssociadas, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', usuario.uid);

      if (lojasError) throw lojasError;

      // Combinar dados do usuário com suas lojas
      setUsuarioEncontrado({
        ...usuario,
        lojasAssociadas: lojasAssociadas || []
      });

    } catch (error) {
      console.error('Erro ao buscar usuário:', error);
      alert('Erro ao buscar usuário. Verifique o console.');
      setUsuarioEncontrado(null);
    } finally {
      setBuscando(false);
    }
  };

  // ============================================================================
  // 4. VINCULAR USUÁRIO COMO ENTREGADOR
  // ============================================================================
  const vincularComoEntregador = async (usuario) => {
    if (!confirm(`Vincular ${usuario.nome_completo} como entregador nesta loja?`)) return;
    
    try {
      if (userRole === 'gerente' && (!userLojas || userLojas.length === 0)) {
        alert('Erro: Gerente não está vinculado a nenhuma loja');
        return;
      }

      const lojaId = userRole === 'gerente' ? userLojas[0].id_loja : prompt('Digite o ID da loja (admin):');
      const lojaNome = userRole === 'gerente' ? userLojas[0].loja_nome : prompt('Digite o nome da loja (admin):');

      if (!lojaId || !lojaNome) return;

      // Verificar se usuário já está vinculado a esta loja
      const { data: vinculoExistente } = await supabase
        .from('loja_associada')
        .select('id')
        .eq('uid_usuario', usuario.uid)
        .eq('id_loja', lojaId)
        .single();

      if (vinculoExistente) {
        alert('Este usuário já está vinculado a esta loja');
        return;
      }

      // Vincular usuário como entregador
      const { error } = await supabase
        .from('loja_associada')
        .insert({
          uid_usuario: usuario.uid,
          nome_completo: usuario.nome_completo,
          email_usuario: usuario.email, // ✅ NOVO CAMPO
          funcao: 'entregador',
          id_loja: lojaId,
          loja_nome: lojaNome,
          status_vinculacao: 'ativo',
          veiculo: 'Não informado',
          carga_maxima: 0,
          perimetro_entrega: 'Não definido',
          ultimo_status_vinculacao: new Date().toISOString()
        });

      if (error) throw error;

      alert('✅ Entregador vinculado com sucesso!');
      setBuscaEmail('');
      setUsuarioEncontrado(null);
      carregarEntregadores();
    } catch (error) {
      console.error('Erro ao vincular entregador:', error);
      alert('❌ Erro ao vincular entregador');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: FORMATAR VALOR NULO
  // ============================================================================
  const formatarValor = (valor) => {
    return valor || 'Não informado';
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  if (userRole !== 'admin' && userRole !== 'gerente') {
    return <div className="min-h-screen flex items-center justify-center">Acesso não autorizado</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">👥 Gestão de Entregadores</h1>

      {/* BUSCA POR EMAIL */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Buscar Usuário no Sistema</h2>
        <div className="flex gap-2 mb-4">
          <input
            type="email"
            placeholder="Digite o email do usuário"
            value={buscaEmail}
            onChange={(e) => setBuscaEmail(e.target.value)}
            className="flex-1 p-2 border border-gray-300 rounded"
            onKeyPress={(e) => e.key === 'Enter' && buscarUsuarioPorEmail()}
          />
          <button
            onClick={buscarUsuarioPorEmail}
            disabled={buscando}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
          >
            {buscando ? 'Buscando...' : 'Buscar'}
          </button>
        </div>

        {/* RESULTADO DA BUSCA - COM MAIS DETALHES */}
        {usuarioEncontrado && (
          <div className="mt-4 p-4 border border-green-200 bg-green-50 rounded">
            <h3 className="font-semibold text-green-800 mb-3">👤 Usuário encontrado:</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
              <div>
                <p><strong>Nome:</strong> {usuarioEncontrado.nome_completo}</p>
                <p><strong>Email:</strong> {usuarioEncontrado.email}</p>
                {usuarioEncontrado.telefone && (
                  <p><strong>Telefone:</strong> {usuarioEncontrado.telefone}</p>
                )}
              </div>
              
              {usuarioEncontrado.foto && (
                <div className="flex justify-center">
                  <img 
                    src={usuarioEncontrado.foto} 
                    alt="Foto do usuário"
                    className="w-16 h-16 rounded-full"
                  />
                </div>
              )}
            </div>

            <div className="mt-3">
              <strong>🏪 Lojas Associadas:</strong>
              {usuarioEncontrado.lojasAssociadas.length > 0 ? (
                <div className="ml-4 mt-2 space-y-2">
                  {usuarioEncontrado.lojasAssociadas.map((loja, index) => (
                    <div key={index} className="p-2 bg-white rounded border">
                      <p><strong>Loja:</strong> {loja.loja_nome} ({loja.id_loja})</p>
                      <p><strong>Função:</strong> 
                        <span className={`ml-1 ${
                          loja.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                        }`}>
                          {loja.funcao}
                        </span>
                      </p>
                      <p><strong>Status:</strong> 
                        <span className={`ml-1 ${
                          loja.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {loja.status_vinculacao}
                        </span>
                      </p>
                      {loja.veiculo && <p><strong>🚗 Veículo:</strong> {formatarValor(loja.veiculo)}</p>}
                      {loja.carga_maxima > 0 && <p><strong>📦 Carga Máxima:</strong> {loja.carga_maxima} kg</p>}
                      {loja.perimetro_entrega && <p><strong>📍 Perímetro:</strong> {formatarValor(loja.perimetro_entrega)}</p>}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-600 ml-4">Nenhuma loja associada</p>
              )}
            </div>

            <button
              onClick={() => vincularComoEntregador(usuarioEncontrado)}
              className="mt-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
            >
              ➕ Vincular como Entregador
            </button>
          </div>
        )}
      </div>

      {/* LISTA DE PESSOAS DA LOJA - COM MAIS DETALHES */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4">
          {userRole === 'gerente' ? '👥 Pessoas da Minha Loja' : '👥 Pessoas do Sistema'}
        </h2>
        
        {loading ? (
          <p className="text-gray-500">Carregando...</p>
        ) : entregadores.length === 0 ? (
          <p className="text-gray-500">Nenhuma pessoa encontrada</p>
        ) : (
          <div className="grid gap-4">
            {entregadores.map((pessoa) => (
              <div key={pessoa.id} className="border p-4 rounded-lg bg-gray-50">
                <h3 className="font-semibold text-lg text-purple-800">
                  {pessoa.funcao === 'gerente' ? '👑 ' : '🚚 '}
                  {pessoa.nome_completo}
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-2">
                  <div>
                    <p><strong>📧 Email:</strong> {pessoa.email_usuario}</p>
                    <p><strong>🎯 Função:</strong> 
                      <span className={`ml-1 ${
                        pessoa.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                      }`}>
                        {pessoa.funcao}
                      </span>
                    </p>
                    <p><strong>📊 Status:</strong> 
                      <span className={`ml-1 ${
                        pessoa.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {pessoa.status_vinculacao}
                      </span>
                    </p>
                  </div>
                  
                  <div>
                    <p><strong>🏪 Loja:</strong> {pessoa.loja_nome} ({pessoa.id_loja})</p>
                    <p><strong>🚗 Veículo:</strong> {formatarValor(pessoa.veiculo)}</p>
                    {pessoa.carga_maxima > 0 && (
                      <p><strong>📦 Carga Máx:</strong> {pessoa.carga_maxima} kg</p>
                    )}
                    {pessoa.perimetro_entrega && (
                      <p><strong>📍 Perímetro:</strong> {formatarValor(pessoa.perimetro_entrega)}</p>
                    )}
                  </div>
                </div>
                
                {pessoa.data_desligamento && (
                  <p className="text-red-600 text-sm mt-2">
                    <strong>🗓️ Data desligamento:</strong> {new Date(pessoa.data_desligamento).toLocaleDateString('pt-BR')}
                  </p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


===== index.js =====
// Importação de dependências necessárias do Next.js e React
import Head from 'next/head';
import Link from 'next/link';
import { useEffect } from 'react';

// Componente principal da página inicial
export default function HomePage() {
  // Hook useEffect para configurar a navegação suave
  useEffect(() => {
    // Seleção de todos os links internos que começam com '#'
    const anchors = document.querySelectorAll('a[href^="#"]');

    // Função para lidar com o clique em links internos
    const handleAnchorClick = (e) => {
      e.preventDefault();
      const targetId = e.currentTarget.getAttribute('href');

      // Verifica se o link não é apenas '#'
      if (targetId === '#') return;

      // Encontra o elemento alvo pelo ID
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        // Realiza a rolagem suave com offset para compensar o cabeçalho
        window.scrollTo({
          top: targetElement.offsetTop - 80, // Ajuste de 80px para o cabeçalho
          behavior: 'smooth'
        });
      }
    };

    // Adiciona event listeners para todos os links internos
    anchors.forEach(anchor => {
      anchor.addEventListener('click', handleAnchorClick);
    });

    // Cleanup: remove os event listeners quando o componente é desmontado
    return () => {
      anchors.forEach(anchor => {
        anchor.removeEventListener('click', handleAnchorClick);
      });
    };
  }, []);

  return (
    <>
      {/* Configuração do cabeçalho HTML com título e importação de Font Awesome */}
      <Head>
        <title>VendasWoo + EntregasWoo - Sistema Completo para E-commerce e Entregas</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
      </Head>

      {/* Cabeçalho da página com apenas o título */}
      <header>
        <div className="container">
          <div className="header-content">
            <div className="logo">
              <h1>VendasWoo <span>+ EntregasWoo</span></h1>
            </div>
          </div>
        </div>
      </header>

      {/* Seção Hero com chamada principal */}
      <section className="hero">
        <div className="container">
          <h2>Sistema Completo para E-commerce e Entregas</h2>
          <p>Conectamos lojas a entregadores locais para simplificar e agilizar as entregas na sua região.</p>
          <div className="hero-buttons">
            <Link href="#para-lojas" className="btn">Sou Lojista</Link>
            <Link href="#para-entregadores" className="btn btn-accent">Sou Entregador</Link>
            <a href="https://wa.me/552132727548" className="btn btn-outline" target="_blank" rel="noopener noreferrer">Fale no WhatsApp</a>
          </div>
        </div>
      </section>

      {/* Seção Como Funciona com passos para entregadores e lojas */}
      <section className="how-it-works" id="como-funciona">
        <div className="container">
          <div className="section-title">
            <h2>Como Funciona</h2>
            <p>Dois sistemas integrados para atender lojas e entregadores</p>
          </div>
          
          <div className="dual-steps">
            <div className="steps-container">
              <h3 className="steps-title">Para Entregadores</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Cadastro Simplificado</h4>
                  <p>Faça seu cadastro como motorista autônomo MEI com documentação em ordem.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Defina sua Área de Atuação</h4>
                  <p>Informe seu veículo, capacidade de carga e o perímetro onde quer trabalhar.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Conexão com Lojas</h4>
                  <p>Conectamos você às empresas que precisam de entregas na sua região.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Combine Preços e Área</h4>
                  <p>Negocie diretamente com as lojas os valores e detalhes do serviço.</p>
                </div>
              </div>
            </div>
            
            <div className="steps-container">
              <h3 className="steps-title">Para Lojas</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Plataforma Completa</h4>
                  <p>Tenha seu e-commerce com catálogo de produtos, atualização de preços fácil e múltiplas formas de pagamento.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Integração Total</h4>
                  <p>Receba pedidos pelo app, computador e WhatsApp integrados em um único sistema.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Gestão Completa</h4>
                  <p>Controle de estoque, relatórios, emissão de recibos e muito mais.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Entregas Terceirizadas</h4>
                  <p>Use o EntregasWoo para conectar-se a entregadores de bairro e terceirizar suas entregas.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Seção Para Lojas com benefícios */}
      <section id="para-lojas" className="benefits">
        <div className="container">
          <div className="section-title">
            <h2>Para Lojas e Empresas</h2>
            <p>Sistema completo para vendas online e gestão de entregas</p>
          </div>
          <ul className="benefits-list">
            <li>Plataforma online para apresentar seus produtos de forma profissional</li>
            <li>Atualização de preços fácil e intuitiva</li>
            <li>Múltiplas formas de pagamento integradas (PIX, cartão, etc)</li>
            <li>Recebimento de pedidos por app, computador e WhatsApp</li>
            <li>Controle de estoque em tempo real</li>
            <li>Relatórios detalhados de vendas e desempenho</li>
            <li>Emissão de recibos e comprovantes</li>
            <li>App EntregasWoo para terceirizar entregas para motoristas de bairro</li>
            <li>Gestão integrada de pedidos e entregas em um único sistema</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de saber mais sobre o sistema para lojas" className="btn">Quero saber mais</a>
          </div>
        </div>
      </section>

      {/* Seção Para Entregadores com benefícios */}
      <section id="para-entregadores" className="benefits" style={{backgroundColor: 'var(--light-gray)'}}>
        <div className="container">
          <div className="section-title">
            <h2>Para Entregadores</h2>
            <p>Conecte-se com lojas da sua região e aumente sua renda</p>
          </div>
          <ul className="benefits-list">
            <li>Cadastro gratuito para motoristas MEI com documentação regular</li>
            <li>Defina o tipo de veículo, capacidade de carga e área de atuação</li>
            <li>Escolha o perímetro onde quer trabalhar (bairros, regiões)</li>
            <li>Conexão direta com empresas que precisam de entregas na sua área</li>
            <li>Negociação direta de preços e condições de serviço</li>
            <li>Flexibilidade de horários - trabalhe quando quiser</li>
            <li>App simples para gerenciar corridas e ganhos</li>
            <li>Pagamentos rápidos e transparentes</li>
            <li>Construa sua reputação com avaliações das lojas</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de me cadastrar como entregador" className="btn btn-accent">Quero me cadastrar</a>
          </div>
        </div>
      </section>

      {/* Seção de Chamada para Ação (CTA) */}
      <section className="cta">
        <div className="container">
          <h2>Pronto para transformar seu negócio ou aumentar sua renda?</h2>
          <p>Entre em contato e faça um teste grátis dos nossos sistemas</p>
          <a href="https://wa.me/552132727548" className="btn" target="_blank" rel="noopener noreferrer">Fale conosco no WhatsApp</a>
        </div>
      </section>

      {/* Rodapé com links rápidos e informações de contato */}
      <footer id="contato">
        <div className="container">
          <div className="footer-content">
            <div className="footer-column">
              <h3>VendasWoo + EntregasWoo</h3>
              <p>Sistema integrado de e-commerce e gestão de entregas</p>
            </div>
            <div className="footer-column">
              <h3>Links Rápidos</h3>
              <ul>
                <li><Link href="#como-funciona">Como Funciona</Link></li>
                <li><Link href="#para-lojas">Para Lojas</Link></li>
                <li><Link href="#para-entregadores">Para Entregadores</Link></li>
                <li><a href="https://pedidossimples.com.br/vendaswoo/" target="_blank" rel="noopener noreferrer">VendasWoo</a></li>
              </ul>
            </div>
            <div className="footer-column">
              <h3>Contato</h3>
              <ul>
                <li>Email: comercial@abistec.com.br</li>
                <li>WhatsApp: (21) 3272-7548</li>
                <li>Site: <a href="https://pedidossimples.com.br">pedidossimples.com.br</a></li>
              </ul>
            </div>
          </div>
          <div className="copyright">
            <p>&copy; 2023 VendasWoo + EntregasWoo - Abistec Serviços Tecnológicos Ltda</p>
          </div>
        </div>
      </footer>

      {/* Estilos globais usando styled-jsx */}
      <style jsx global>{`
        :root {
          --primary: #3b7b2b;
          --secondary: #5c3b27;
          --accent: #f39c12;
          --light: #fdfaf6;
          --dark: #333;
          --gray: #777;
          --light-gray: #f5f5f5;
        }
        
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
          background-color: var(--light);
          color: var(--dark);
          line-height: 1.6;
        }
        
        .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0 20px;
        }
        
        /* Estilos do Cabeçalho */
        header {
          background-color: white;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          /* Removido o comportamento sticky para fluir com a rolagem */
        }
        
        .header-content {
          display: flex;
          justify-content: center;
          align-items: center;
          padding: 15px 0;
        }
        
        .logo {
          display: flex;
          align-items: center;
        }
        
        .logo h1 {
          color: var(--primary);
          font-size: 1.8rem;
          font-weight: bold;
        }
        
        .logo span {
          color: var(--secondary);
        }
        
        nav ul {
          display: flex;
          list-style: none;
        }
        
        nav li {
          margin-left: 25px;
        }
        
        nav a {
          text-decoration: none;
          color: var(--dark);
          font-weight: 500;
          transition: color 0.3s;
        }
        
        nav a:hover {
          color: var(--primary);
        }
        
        .btn {
          display: inline-block;
          padding: 12px 25px;
          background-color: var(--primary);
          color: white;
          border-radius: 5px;
          text-decoration: none;
          font-weight: 600;
          transition: all 0.3s;
          border: none;
          cursor: pointer;
        }
        
        .btn:hover {
          background-color: #2c5e20;
          transform: translateY(-2px);
        }
        
        .btn-outline {
          background-color: transparent;
          border: 2px solid var(--primary);
          color: var(--primary);
        }
        
        .btn-outline:hover {
          background-color: var(--primary);
          color: white;
        }
        
        .btn-accent {
          background-color: var(--accent);
        }
        
        .btn-accent:hover {
          background-color: #e67e22;
        }
        
        /* Estilos da Seção Hero */
        .hero {
          padding: 80px 0;
          background: linear-gradient(135deg, rgba(59,123,43,0.1) 0%, rgba(92,59,39,0.1) 100%);
          text-align: center;
        }
        
        .hero h2 {
          font-size: 2.5rem;
          margin-bottom: 20px;
          color: var(--secondary);
        }
        
        .hero p {
          font-size: 1.2rem;
          max-width: 800px;
          margin: 0 auto 30px;
          color: var(--gray);
        }
        
        .hero-buttons {
          display: flex;
          justify-content: center;
          gap: 15px;
          margin-top: 30px;
          flex-wrap: wrap;
        }
        
        /* Estilos da Seção Como Funciona */
        .how-it-works {
          padding: 80px 0;
          background-color: var(--light-gray);
        }
        
        .section-title {
          text-align: center;
          margin-bottom: 50px;
        }
        
        .section-title h2 {
          font-size: 2rem;
          color: var(--secondary);
          margin-bottom: 15px;
        }
        
        .section-title p {
          color: var(--gray);
          max-width: 700px;
          margin: 0 auto;
        }
        
        .dual-steps {
          display: flex;
          justify-content: space-between;
          flex-wrap: wrap;
          gap: 40px;
        }
        
        .steps-container {
          flex: 1;
          min-width: 300px;
          background: white;
          border-radius: 10px;
          padding: 30px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        .steps-title {
          text-align: center;
          margin-bottom: 30px;
          color: var(--primary);
          font-size: 1.5rem;
        }
        
        .step {
          display: flex;
          margin-bottom: 25px;
          align-items: flex-start;
        }
        
        .step-number {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background-color: var(--primary);
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          margin-right: 15px;
          flex-shrink: 0;
        }
        
        .step-content {
          flex: 1;
        }
        
        /* Estilos da Seção Benefícios */
        .benefits {
          padding: 80px 0;
          background-color: white;
        }
        
        .benefits-list {
          list-style: none;
          max-width: 800px;
          margin: 0 auto;
        }
        
        .benefits-list li {
          padding: 15px 0;
          border-bottom: 1px solid #eee;
          display: flex;
          align-items: center;
        }
        
        .benefits-list li:before {
          content: "✓";
          color: var(--primary);
          font-weight: bold;
          margin-right: 10px;
          font-size: 1.2rem;
        }
        
        /* Estilos da Seção CTA */
        .cta {
          padding: 80px 0;
          background: linear-gradient(135deg, var(--primary) 0%, #2c5e20 100%);
          color: white;
          text-align: center;
        }
        
        .cta h2 {
          font-size: 2.2rem;
          margin-bottom: 20px;
        }
        
        .cta p {
          max-width: 700px;
          margin: 0 auto 30px;
          font-size: 1.1rem;
        }
        
        .cta .btn {
          background-color: white;
          color: var(--primary);
        }
        
        .cta .btn:hover {
          background-color: #f0f0f0;
        }
        
        /* Estilos do Rodapé */
        footer {
          background-color: var(--secondary);
          color: white;
          padding: 50px 0 20px;
        }
        
        .footer-content {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 30px;
          margin-bottom: 30px;
        }
        
        .footer-column h3 {
          margin-bottom: 20px;
          font-size: 1.2rem;
        }
        
        .footer-column ul {
          list-style: none;
        }
        
        .footer-column li {
          margin-bottom: 10px;
        }
        
        .footer-column a {
          color: #ddd;
          text-decoration: none;
          transition: color 0.3s;
        }
        
        .footer-column a:hover {
          color: white;
        }
        
        .copyright {
          text-align: center;
          padding-top: 20px;
          border-top: 1px solid rgba(255,255,255,0.1);
          font-size: 0.9rem;
          color: #ddd;
        }
        
        /* Estilos Responsivos */
        @media (max-width: 768px) {
          .header-content {
            flex-direction: column;
          }
          
          .hero h2 {
            font-size: 2rem;
          }
          
          .hero-buttons {
            flex-direction: column;
            align-items: center;
          }
          
          .dual-steps {
            flex-direction: column;
          }
        }
      `}</style>
    </>
  );
}


===== login.js =====
import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE LOGIN
// ==============================================================================
export default function Login() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [email, setEmail] = useState('');              // Email do usuário
  const [password, setPassword] = useState('');        // Senha do usuário
  const [loading, setLoading] = useState(false);       // Estado de carregamento
  const [error, setError] = useState('');              // Mensagens de erro
  const [showPassword, setShowPassword] = useState(false); // Controla visibilidade da senha
  const router = useRouter();                          // Router para navegação

  // ============================================================================
  // 2. FUNÇÃO PRINCIPAL: LOGIN COM EMAIL/SENHA
  // ============================================================================
  const handleLogin = async (e) => {
    e.preventDefault(); // Previne comportamento padrão do formulário
    setLoading(true);   // Inicia estado de carregamento
    setError('');       // Limpa erros anteriores

    try {
      // ========================================================================
      // 2.1. AUTENTICAÇÃO NO SUPABASE
      // ========================================================================
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password
      });

      if (authError) throw authError; // Se houver erro na autenticação

      // ========================================================================
      // 2.2. VERIFICAÇÃO SE É ADMINISTRADOR
      // ========================================================================
      /**
       * Administradores têm acesso total e não precisam de vinculação com lojas
       * Verificamos pela flag is_admin na tabela usuarios
       */
      const { data: usuario, error: userError } = await supabase
        .from('usuarios')
        .select('is_admin')
        .eq('uid', authData.user.id)
        .single();

      if (userError) throw userError;

      // Se for admin, redireciona diretamente para painel admin
      if (usuario.is_admin) {
        router.push('/admin');
        return; // Interrompe a execução aqui
      }

      // ========================================================================
      // 2.3. VERIFICAÇÃO DE VINCULO COM LOJAS (NÃO-ADMIN)
      // ========================================================================
      /**
       * Para usuários não-admin, verificamos se estão vinculados a alguma loja ativa
       * UM GERENTE só pode ter UMA loja
       * UM ENTREGADOR pode ter MÚLTIPLAS lojas
       */
      const { data: associacoes, error: assocError } = await supabase
        .from('loja_associada')
        .select('funcao, id_loja, loja_nome')
        .eq('uid_usuario', authData.user.id)
        .eq('status_vinculacao', 'ativo');
        // ⚠️ REMOVIDO .single() para permitir múltiplas lojas

      // Verifica erros na consulta
      if (assocError) {
        throw new Error('Erro ao verificar permissões: ' + assocError.message);
      }

      // Verifica se usuário tem pelo menos uma loja ativa
      if (!associacoes || associacoes.length === 0) {
        throw new Error('Usuário não possui acesso ativo ao sistema. Entre em contato com o administrador.');
      }

      // ========================================================================
      // 2.4. VALIDAÇÃO ESPECÍFICA PARA GERENTES
      // ========================================================================
      /**
       * Gerentes não podem estar vinculados a múltiplas lojas
       * Se encontrar um gerente com mais de uma loja, é um erro de configuração
       */
      const gerentes = associacoes.filter(assoc => assoc.funcao === 'gerente');
      if (gerentes.length > 0 && associacoes.length > 1) {
        throw new Error('Gerente não pode estar associado a múltiplas lojas. Contate o administrador.');
      }

      // ========================================================================
      // 2.5. REDIRECIONAMENTO BASEADO NA FUNÇÃO
      // ========================================================================
      /**
       * Usa a PRIMEIRA associação para determinar o redirecionamento
       * Para entregadores com múltiplas lojas, todas serão consideradas depois
       */
      const primeiraAssociacao = associacoes[0];
      
      switch (primeiraAssociacao.funcao) {
        case 'gerente':
          router.push('/todos-pedidos'); // Gerente vai para gestão completa
          break;
        case 'entregador':
          router.push('/pedidos-pendentes'); // Entregador vai para pedidos disponíveis
          break;
        default:
          throw new Error('Função não reconhecida: ' + primeiraAssociacao.funcao);
      }

    } catch (error) {
      // ========================================================================
      // 2.6. TRATAMENTO DE ERROS
      // ========================================================================
      setError(error.message);
      console.error('Erro no login:', error);
    } finally {
      // ========================================================================
      // 2.7. FINALIZAÇÃO (EXECUTA SEMPRE, COM SUCESSO OU ERRO)
      // ========================================================================
      setLoading(false); // Finaliza estado de carregamento
    }
  };

  // ============================================================================
  // 3. FUNÇÃO: LOGIN COM GOOGLE (OAUTH)
  // ============================================================================
  const handleGoogleLogin = async () => {
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
      });
      if (error) throw error;
    } catch (error) {
      setError(error.message);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        
        {/* ==================================================================== */}
        {/* LOGO E IDENTIDADE VISUAL */}
        {/* ==================================================================== */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Sistema de Gestão de Entregas</p>
        </div>

        {/* ==================================================================== */}
        {/* CARD PRINCIPAL DE LOGIN */}
        {/* ==================================================================== */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Acessar Sistema
          </h3>

          {/* MENSAGENS DE ERRO */}
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {/* ================================================================ */}
          {/* FORMULÁRIO DE LOGIN */}
          {/* ================================================================ */}
          <form onSubmit={handleLogin} className="space-y-6">
            
            {/* CAMPO EMAIL */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
                disabled={loading}
              />
            </div>

            {/* CAMPO SENHA COM BOTÃO DE VISUALIZAÇÃO */}
            <div className="relative">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Sua senha"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={loading}
                >
                  {/* Ícone dinâmico (mostrar/ocultar senha) */}
                  {showPassword ? (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            {/* BOTÃO DE SUBMIT */}
            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'Entrando...' : 'Entrar'}
            </button>
          </form>

          {/* ================================================================ */}
          {/* LOGIN ALTERNATIVO (GOOGLE) */}
          {/* ================================================================ */}
          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white text-gray-500">Ou</span>
              </div>
            </div>

            <button
              onClick={handleGoogleLogin}
              disabled={loading}
              className="w-full mt-4 bg-white border border-gray-300 text-gray-700 py-3 px-4 rounded-lg font-medium hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Entrar com Google
            </button>
          </div>

          {/* ================================================================ */}
          {/* LINKS EXTRAS */}
          {/* ================================================================ */}
          <div className="mt-6 text-center space-y-3">
            <Link 
              href="/cadastro" 
              className="text-purple-600 hover:text-purple-800 text-sm font-medium"
            >
              Criar nova conta
            </Link>
            <br />
            <Link 
              href="/recuperar-senha" 
              className="text-gray-500 hover:text-gray-700 text-sm"
            >
              Esqueceu sua senha?
            </Link>
          </div>
        </div>

        {/* ==================================================================== */}
        {/* FOOTER */}
        {/* ==================================================================== */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2024 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}


===== orders.js =====
import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const { data, error } = await supabase.from('pedidos').select('*');
        if (error) throw error;
        setOrders(data || []);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

  if (loading) return <p>Carregando pedidos...</p>;
  if (error) return <p>Erro: {error}</p>;

  return (
    <div>
      <h1>Lista de Pedidos</h1>
      {orders.length === 0 ? (
        <p>Nenhum pedido encontrado.</p>
      ) : (
        <ul>
          {orders.map((order) => (
            <li key={order.id} style={{ marginBottom: '10px' }}>
              <strong>Pedido #{order.id_woo}</strong> - Cliente: {order.nome_cliente} - 
              Total: R${order.total} - Status: {order.status_transporte || 'Pendente'}
              <button
                onClick={() => handleAcceptOrder(order.id)}
                style={{ marginLeft: '10px', padding: '5px 10px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '3px' }}
                disabled={order.status_transporte === 'Entregue'}
              >
                Aceitar
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );

  async function handleAcceptOrder(orderId) {
    const { error } = await supabase
      .from('pedidos')
      .update({ status_transporte: 'Aceito' })
      .eq('id', orderId);
    if (error) {
      setError(`Erro ao aceitar pedido: ${error.message}`);
    } else {
      setOrders(orders.map(order =>
        order.id === orderId ? { ...order, status_transporte: 'Aceito' } : order
      ));
    }
  }
}


===== pedidos-aceitos.js =====
// pages/pedidos-aceitos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { filterPedidosPorUsuario } from '../utils/filterPedidos';
import { OrderModal, WithCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS ACEITOS
// ==============================================================================
export default function PedidosAceitos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]); // Todos os pedidos do banco
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [loadingAcoes, setLoadingAcoes] = useState(false); // Loading para ações
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null); // Pedido para modal
  const [modalAberto, setModalAberto] = useState(false); // Controle do modal
  
  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getPedidosAceitos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS ACEITOS/EM ROTA
  // ============================================================================
  const getPedidosAceitos = async () => {
    try {
      setLoading(true);
      
      // Busca TODOS os pedidos com status aceito ou em rota
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aceito', 'em rota'])
        .order('data', { ascending: false });

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. FILTRAR PEDIDOS POR USUÁRIO
  // ============================================================================
  const pedidosFiltrados = filterPedidosPorUsuario(
    todosPedidos,
    userRole, 
    userLojas
  );

  // ============================================================================
  // 6. FUNÇÕES DE AÇÃO: SAIR PARA ENTREGA / ENTREGAR / CANCELAR
  // ============================================================================
  const handleSairEntrega = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'em rota' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Atualiza lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, status_transporte: 'em rota' } : p
      ));
      
    } catch (error) {
      console.error('Erro ao atualizar status:', error);
      alert('Erro ao sair para entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleEntregar = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'entregue' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista (pedido entregue vai para outra página)
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Pedido marcado como entregue com sucesso!');
      
    } catch (error) {
      console.error('Erro ao entregar pedido:', error);
      alert('Erro ao marcar como entregue.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleCancelar = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja cancelar esta entrega?')) return;
    
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'cancelado' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Entrega cancelada com sucesso.');
      
    } catch (error) {
      console.error('Erro ao cancelar pedido:', error);
      alert('Erro ao cancelar entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  // ============================================================================
  // 7. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 8. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Carregando perfil...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">✅ Pedidos Aceitos</h1>

      {/* ESTADO DE CARREGAMENTO */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        /* LISTA DE PEDIDOS */
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido aceito encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>
                    <p className="text-sm">
                      <span className="font-medium">Status:</span> 
                      <span className={pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-green-600'}>
                        {pedido.status_transporte === 'em rota' ? ' 🚚 Em Rota' : ' ✅ Aceito'}
                      </span>
                    </p>
                  </div>

                  {/* BOTÕES DE AÇÃO */}
                  <div className="flex flex-col gap-2 ml-4">
                    {pedido.status_transporte === 'aceito' && (
                      <button 
                        onClick={() => handleSairEntrega(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-orange-500 text-white px-4 py-2 rounded text-sm hover:bg-orange-600 transition-colors"
                      >
                        🚚 Sair para Entrega
                      </button>
                    )}
                    
                    {pedido.status_transporte === 'em rota' && (
                      <button 
                        onClick={() => handleEntregar(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-green-500 text-white px-4 py-2 rounded text-sm hover:bg-green-600 transition-colors"
                      >
                        ✅ Entregar
                      </button>
                    )}
                    
                    <button 
                      onClick={() => handleCancelar(pedido.id)}
                      disabled={loadingAcoes}
                      className="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600 transition-colors"
                    >
                      ❌ Cancelar
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


===== pedidos-entregues.js =====
import React, { useState, useEffect, useCallback } from 'react';
import { createClient } from '@supabase/supabase-js';
import { jsPDF } from 'jspdf';

// ==============================================================================
// 1. CONFIGURAÇÃO DO SUPABASE
// ==============================================================================
const supabaseUrl = 'https://czzidhzzpqegfvvmdgno.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6emlkaHp6cHFlZ2Z2dm1kZ25vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5NTIwMDMsImV4cCI6MjA2ODUyODAwM30.zK2iFp-b4e5vghpHgWGuOk0LooujlyU7kVm4sbM85m0';
const supabase = createClient(supabaseUrl, supabaseKey);

// ==============================================================================
// 2. FUNÇÕES AUXILIARES
// ==============================================================================

/**
 * Formata data para o padrão do Supabase (YYYY-MM-DD)
 */
const formatarDataParaSupabase = (dataString) => {
  if (!dataString) return '';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) return dataString;
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) {
    const [dia, mes, ano] = dataString.split('/');
    return `${ano}-${mes}-${dia}`;
  }
  return dataString;
};

/**
 * Formata data para exibição (DD/MM/YYYY)
 */
const formatarDataParaExibicao = (dataString) => {
  if (!dataString) return '-';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) {
    const [ano, mes, dia] = dataString.split('-');
    return `${dia}/${mes}/${ano}`;
  }
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) return dataString;
  try {
    const data = new Date(dataString);
    if (!isNaN(data.getTime())) return data.toLocaleDateString('pt-BR');
  } catch (e) {
    console.error('Erro ao formatar data:', e);
  }
  return dataString;
};

// ==============================================================================
// 3. COMPONENTE MODAL DE DETALHES
// ==============================================================================
const ModalDetalhesPedido = ({ pedido, isOpen, onClose }) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Informações da Loja */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p><strong>ID:</strong> {pedido.id}</p>
                <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
                <p><strong>Data:</strong> {pedido.data ? new Date(pedido.data).toLocaleString('pt-BR') : 'N/A'}</p>
              </div>
              <div>
                <p><strong>Telefone da Loja:</strong> {pedido.loja_telefone || 'N/A'}</p>
                <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
              </div>
            </div>
          </div>

          {/* Informações do Cliente */}
          <div className="mb-6 p-4 bg-gray-50 rounded">
            <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
            <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
            <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
          </div>

          {/* Produtos */}
          <div className="mb-6">
            <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
            <div className="bg-white border rounded p-3">
              {pedido.produto ? (
                <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
              ) : (
                <p>Nenhum produto informado</p>
              )}
            </div>
          </div>

          {/* Informações de Pagamento e Total */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div>
              <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
              <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p><strong>Frete Pago:</strong> R$ {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            </div>
            <div>
              <p><strong>Status Pagamento:</strong> {pedido.status_pagamento ? 'Pago' : 'Pendente'}</p>
              <p><strong>Data Pagamento:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
            </div>
          </div>

          {/* Observações */}
          {pedido.observacao_pedido && (
            <div className="mb-6">
              <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
              <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
            </div>
          )}

          {/* Entregador */}
          <div className="mb-6 p-4 bg-purple-50 rounded">
            <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
            <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
          </div>

          {/* Botão Fechar */}
          <div className="flex justify-end">
            <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition-colors">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// ==============================================================================
// 4. FUNÇÕES DE CARREGAMENTO DE IMAGEM E GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};

// ==============================================================================
// 5. COMPONENTE PRINCIPAL
// ==============================================================================
export default function PedidosEntregues() {
  // Estados do componente
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);

  // ============================================================================
  // 5.1 FUNÇÕES DE CÁLCULO E CARREGAMENTO
  // ============================================================================

  /**
   * Calcula o total dos pedidos selecionados
   */
  const calcularTotais = useCallback((pedidosList, selecionados) => {
    const total = Array.from(selecionados).reduce((sum, id) => {
      const pedido = pedidosList.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, []);

  /**
   * Carrega pedidos do Supabase com filtros aplicados
   */
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      let query = supabase.from('pedidos').select('*, loja_logo').eq('status_transporte', 'entregue');
      
      if (filtroEntregador) query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      if (filtroLoja) query = query.eq('id_loja', filtroLoja);
      if (filtroStatus) query = query.eq('status_pagamento', filtroStatus === 'true');
      
      const { data, error } = await query;
      if (error) throw error;
      
      setPedidos(data || []);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Atualiza pedidos selecionados no Supabase
   */
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }
    
    const dataFormatada = formatarDataParaSupabase(dataPagamento);
    
    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;
        
        const { error } = await supabase
          .from('pedidos')
          .update({
            frete_pago: fretePago,
            status_pagamento: fretePago > 0,
            data_pagamento: dataFormatada,
          })
          .eq('id', id);
        
        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pedidos atualizados com sucesso!');
      
      // Atualizar estado local
      setPedidos(prevPedidos => 
        prevPedidos.map(pedido => 
          pedidosSelecionados.has(pedido.id) 
            ? { 
                ...pedido, 
                data_pagamento: dataFormatada,
                status_pagamento: parseFloat(pedido.frete_pago || 0) > 0
              } 
            : pedido
        )
      );
      
      setPedidosSelecionados(new Set());
      
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ============================================================================
  // 5.2 HANDLERS DE INTERAÇÃO
  // ============================================================================

  /**
   * Manipula seleção/deseleção de pedidos
   */
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) {
      newSet.add(pedidoId);
    } else {
      newSet.delete(pedidoId);
    }
    setPedidosSelecionados(newSet);
  };

  /**
   * Atualiza valor do frete de um pedido
   */
  const handleAtualizarFrete = (pedidoId, novoValor) => {
    const newPedidos = pedidos.map(p => 
      p.id === pedidoId ? { ...p, frete_pago: novoValor } : p
    );
    setPedidos(newPedidos);
  };

  /**
   * Abre modal com detalhes do pedido
   */
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  /**
   * Fecha modal de detalhes
   */
  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 5.3 USE EFFECTS
  // ============================================================================

  // Carrega pedidos quando os filtros mudam
  useEffect(() => {
    carregarPedidos();
  }, [filtroEntregador, filtroLoja, filtroStatus]);

  // Calcula totais quando a seleção ou pedidos mudam
  useEffect(() => {
    calcularTotais(pedidos, pedidosSelecionados);
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ============================================================================
  // 5.4 DADOS DERIVADOS
  // ============================================================================

  // Lista de lojas únicas para o filtro
  const lojasUnicas = [...new Set(pedidos.map(p => p.id_loja))].map(id => {
    const nome = pedidos.find(p => p.id_loja === id)?.loja_nome;
    return { id, nome: nome || id };
  });

  // ============================================================================
  // 5.5 RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================

  return (
    <div className="bg-gray-50 min-h-screen mobile-optimized">
      {/* Modal de Detalhes */}
      <ModalDetalhesPedido
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={fecharModal}
      />

      {/* Cabeçalho Otimizado para Mobile */}
      <div className="bg-white shadow-md rounded-lg p-3 mb-3 sticky top-2 z-10 mobile-header">
        <div className="flex justify-between items-center mb-3">
          <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">{pedidosSelecionados.size}</span>
            <div className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </div>
          </div>
        </div>

        {/* Filtros sem rótulos */}
        <div className="grid grid-cols-1 gap-2 mb-3">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Entregadores</option>
            {[...new Set(pedidos.map(p => p.aceito_por_nome).filter(Boolean))].map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todas Lojas</option>
            {lojasUnicas.map(loja => (
              <option key={loja.id} value={loja.id}>{loja.nome}</option>
            ))}
          </select>
          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data e Botões na mesma linha */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded mobile-field"
          />
          <button 
            onClick={atualizarPedidos} 
            className="bg-purple-600 text-white p-2 rounded hover:bg-purple-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Atualizar
          </button>
          <button 
            onClick={async () => await gerarRecibosPDF(pedidosSelecionados, pedidos)}
            className="bg-green-600 text-white p-2 rounded hover:bg-green-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Recibo
          </button>
        </div>
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        <div className="grid grid-cols-1 gap-3">
          {isLoading ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Carregando...</p>
            </div>
          ) : pedidos.length === 0 ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow card-pedido p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="mobile-checkbox h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800 mobile-text-small">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 mobile-text-small">
                  <p><span className="font-semibold">Entregador:</span> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><span className="font-semibold">Pago em:</span> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p className="flex items-center">
                    <span className="font-semibold mr-1">Pagamento:</span> 
                    {pedido.status_pagamento ? (
                      <span className="text-green-600 mr-1">✔</span>
                    ) : (
                      <span className="text-red-600 mr-1">✘</span>
                    )} 
                    {pedido.status_pagamento ? 'Pago' : 'Pendente'}
                  </p>
                  <p className="flex items-center">
                    <span className="font-semibold">Frete Pago: R$</span>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0.0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500 focus:border-transparent mobile-text-small"
                    />
                  </p>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

{/* Estilos inline para mobile */}
<style jsx>{`
  @media (max-width: 768px) {
    .mobile-optimized :global(*) {
      font-size: 14px !important;
    }
    .mobile-header :global(*) {
      padding: 0px 10px !important;
    }
    .mobile-field :global(*) {
      padding: 10px !important;
      font-size: 14px !important;
    }
    .mobile-button :global(*) {
      padding: 10px 12px !important;
      font-size: 14px !important;
    }
    .mobile-text-small :global(*) {
      font-size: 13px !important;
    }
    .mobile-checkbox :global(*) {
      width: 18px !important;
      height: 18px !important;
    }
  }

  /* Estilos para tablet/PC (acima de 768px) - mantém o padrão */
  @media (min-width: 769px) {
    .mobile-header :global(*) {
      padding: 12px 10px !important; /* Valor original para tablet/PC */
    }
  }
`}</style>
    </div>
  );
}


===== pedidos-pendentes.js =====
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { OrderModal, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS PENDENTES
// ==============================================================================
export default function PedidosPendentes() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [pedidos, setPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [loadingAceitar, setLoadingAceitar] = useState(false);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    checkAuthAndGetPedidos();
  }, []);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }
      await getPedidosPendentes();
    } catch (error) {
      console.error('Erro na autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS PENDENTES
  // ============================================================================
  const getPedidosPendentes = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aguardando', 'revertido'])
        .order('data', { ascending: false });

      if (error) throw error;
      setPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos.');
    } finally {
      setLoading(false);
    }
  };

// ============================================================================
// 5. FUNÇÃO: ACEITAR PEDIDO (CORRIGIDA - ESTRUTURA CORRETA)
// ============================================================================
const handleAceitarPedido = async (pedidoId) => {
  try {
    setLoadingAceitar(true);
    
    // 1. Verificar se usuário está autenticado
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      alert('Sessão expirada. Faça login novamente.');
      router.push('/login');
      return;
    }

    // 2. ✅ BUSCAR TELEFONE DO USUÁRIO na tabela usuarios
    const { data: usuarioData, error: usuarioError } = await supabase
      .from('usuarios')
      .select('telefone, nome_completo')
      .eq('uid', user.id)
      .single();

    if (usuarioError) {
      console.warn('Erro ao buscar telefone do usuário:', usuarioError);
      // Não impede a continuação - usamos valores padrão
    }

    // 3. ✅ BUSCAR DADOS DA LOJA ASSOCIADA
    const { data: entregadorData, error: entregadorError } = await supabase
      .from('loja_associada')
      .select('nome_completo, loja_telefone, loja_nome')
      .eq('uid_usuario', user.id)
      .limit(1);

    if (entregadorError) {
      console.warn('Erro ao buscar dados da loja:', entregadorError);
      // Não impede a continuação
    }

    const entregador = entregadorData?.[0];
    const usuario = usuarioData;

    // 4. ✅ ATUALIZAR PEDIDO COM DADOS CORRETOS
    const { error: updateError } = await supabase
      .from('pedidos')
      .update({
        status_transporte: 'aceito',
        aceito_por_uid: user.id,
        aceito_por_nome: entregador?.nome_completo || usuario?.nome_completo || user.email,
        aceito_por_email: user.email,
        aceito_por_telefone: usuario?.telefone || entregador?.loja_telefone || 'Não informado',
        ultimo_status: new Date().toISOString()
      })
      .eq('id', pedidoId);

    if (updateError) {
      throw new Error('Erro ao atualizar pedido: ' + updateError.message);
    }

    // 5. Atualizar lista localmente
    setPedidos(pedidos.filter(pedido => pedido.id !== pedidoId));
    alert('✅ Pedido aceito com sucesso!');

  } catch (error) {
    console.error('Erro ao aceitar pedido:', error);
    alert(`❌ ${error.message}`);
  } finally {
    setLoadingAceitar(false);
  }
};

  // ============================================================================
  // 6. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 7. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📋 Pedidos Pendentes</h1>
      
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidos.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido pendente encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>
                    {pedido.frete_oferecido && (
                      <p className="text-sm text-green-600 font-medium mt-1">
                        💰 Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
                      </p>
                    )}
                  </div>

                  <button 
                    onClick={() => handleAceitarPedido(pedido.id)}
                    disabled={loadingAceitar}
                    className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 
                             transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed
                             ml-4 min-w-[80px]"
                  >
                    {loadingAceitar ? '⏳' : '✅'} Aceitar
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithoutCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


===== perfil.js =====
// pages/perfil.js
import { useState } from 'react';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import EditUsuarioModal from '../components/EditUsuarioModal';
import EditLojaModal from '../components/EditLojaModal';

// ==============================================================================
// PÁGINA: PERFIL DO USUÁRIO
// ==============================================================================
export default function Perfil() {
  const router = useRouter();
  const { userProfile, userRole, userLojas, loading, error } = useUserProfile();
  const [modalUsuarioOpen, setModalUsuarioOpen] = useState(false);
  const [modalLojaOpen, setModalLojaOpen] = useState(false);
  const [lojaSelecionada, setLojaSelecionada] = useState(null);

  // ============================================================================
  // 1. REDIRECIONAR SE NÃO ESTIVER LOGADO
  // ============================================================================
  if (!loading && !userProfile) {
    router.push('/login');
    return null;
  }

  // ============================================================================
  // 2. ABRIR MODAL DE EDIÇÃO DA LOJA
  // ============================================================================
  const abrirModalLoja = (loja) => {
    setLojaSelecionada(loja);
    setModalLojaOpen(true);
  };

  // ============================================================================
  // 3. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      
      {/* CABEÇALHO */}
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-purple-800 mb-2">👤 Meu Perfil</h1>
        <p className="text-gray-600">Gerencie suas informações pessoais e de entrega</p>
      </div>

      {loading ? (
        <div className="text-center">
          <p className="text-purple-600">Carregando...</p>
        </div>
      ) : error ? (
        <div className="bg-red-100 border border-red-400 text-red-700 p-4 rounded">
          <p>Erro: {error}</p>
        </div>
      ) : (
        <div className="grid md:grid-cols-2 gap-8">
          
          {/* ================================================================== */}
          {/* CARD: DADOS DO USUÁRIO */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">📋 Dados Pessoais</h2>
            
            <div className="space-y-3 mb-4">
              {userProfile.foto && (
                <div className="text-center">
                  <img
                    src={userProfile.foto}
                    alt="Foto do perfil"
                    className="w-20 h-20 rounded-full mx-auto border-2 border-purple-600"
                  />
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome Completo</label>
                <p className="text-gray-800 font-medium">{userProfile.nome_completo || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome de Usuário</label>
                <p className="text-gray-800">{userProfile.nome_usuario || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Email</label>
                <p className="text-gray-800">{userProfile.email}</p>
              </div>
              
              {userProfile.telefone && (
                <div>
                  <label className="block text-sm font-medium text-gray-600">Telefone</label>
                  <p className="text-gray-800">{userProfile.telefone}</p>
                </div>
              )}
            </div>

            <button
              onClick={() => setModalUsuarioOpen(true)}
              className="w-full bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700 transition-colors"
            >
              ✏️ Editar Dados Pessoais
            </button>
          </div>

          {/* ================================================================== */}
          {/* CARD: LOJAS ASSOCIADAS */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">🏪 Lojas Associadas</h2>
            
            {userLojas.length === 0 ? (
              <p className="text-gray-600 text-center py-4">Nenhuma loja associada</p>
            ) : (
              <div className="space-y-3">
                {userLojas.map((loja) => (
                  <div key={loja.id} className="border rounded-lg p-3 hover:bg-gray-50">
                    <h3 className="font-semibold text-gray-800">{loja.loja_nome}</h3>
                    <p className="text-sm text-gray-600">ID: {loja.id_loja}</p>
                    <p className="text-sm text-purple-600">Função: {loja.funcao}</p>
                    
                    <div className="mt-2 text-sm text-gray-700">
                      <p>🚗 Veículo: {loja.veiculo || 'Não informado'}</p>
                      <p>📦 Carga máxima: {loja.carga_maxima || '0'} kg</p>
                      <p>📍 Perímetro: {loja.perimetro_entrega || 'Não definido'}</p>
                    </div>

                    <button
                      onClick={() => abrirModalLoja(loja)}
                      className="mt-2 w-full bg-blue-600 text-white py-1 px-3 rounded text-sm hover:bg-blue-700 transition-colors"
                    >
                      ✏️ Editar Esta Loja
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* ====================================================================== */}
      {/* MODAIS */}
      {/* ====================================================================== */}
      <EditUsuarioModal
        isOpen={modalUsuarioOpen}
        onClose={() => setModalUsuarioOpen(false)}
        userProfile={userProfile}
      />
      
      {lojaSelecionada && (
        <EditLojaModal
          isOpen={modalLojaOpen}
          onClose={() => setModalLojaOpen(false)}
          loja={lojaSelecionada}
        />
      )}
    </div>
  );
}


===== recuperar-senha.js =====
import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';

export default function RecuperarSenha() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/atualizar-senha`,
      });

      if (error) throw error;

      setSuccess('Email de recuperação enviado! Verifique sua caixa de entrada.');

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Recuperar Senha</p>
        </div>

        {/* Card de Recuperação */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Recuperar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Enviando...' : 'Enviar Email de Recuperação'}
            </button>
          </form>

          {/* Links */}
          <div className="mt-6 text-center space-y-3">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Voltar para o login
            </Link>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2024 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
RecuperarSenha.noLayout = true;


===== relatorios.js =====
// pages/relatorios.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

export default function Relatorios() {
  const { userRole, userLojas, loading: userLoading } = useUserProfile();
  const [loading, setLoading] = useState(true);
  const [dadosRelatorios, setDadosRelatorios] = useState(null);

  useEffect(() => {
    carregarRelatorios();
  }, []);

  const carregarRelatorios = async () => {
    try {
      setLoading(true);
      // Aqui você implementará a lógica para buscar dados de relatórios
      
      setDadosRelatorios({
        totalPedidos: 150,
        pedidosEntregues: 120,
        pedidosCancelados: 10,
        taxaSucesso: '92%'
      });
      
    } catch (error) {
      console.error('Erro ao carregar relatórios:', error);
    } finally {
      setLoading(false);
    }
  };

  if (userLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <RouteGuard requiredRole="gerente">
      {/* ✅ REMOVIDO: <Layout> wrapper (já é aplicado pelo _app.js) */}
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Relatórios</h1>
        
        {loading ? (
          <div className="flex justify-center items-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500"></div>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-white p-6 rounded-lg shadow-md text-center">
              <div className="text-3xl font-bold text-purple-600 mb-2">150</div>
              <div className="text-gray-600">Total de Pedidos</div>
            </div>
            
            <div className="bg-white p-6 rounded-lg shadow-md text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">120</div>
              <div className="text-gray-600">Pedidos Entregues</div>
            </div>
            
            <div className="bg-white p-6 rounded-lg shadow-md text-center">
              <div className="text-3xl font-bold text-red-600 mb-2">10</div>
              <div className="text-gray-600">Pedidos Cancelados</div>
            </div>
            
            <div className="bg-white p-6 rounded-lg shadow-md text-center">
              <div className="text-3xl font-bold text-blue-600 mb-2">92%</div>
              <div className="text-gray-600">Taxa de Sucesso</div>
            </div>
          </div>
        )}

        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4">Relatórios Disponíveis</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="p-4 border rounded-lg">
              <h3 className="font-medium mb-2">📊 Relatório de Entregas</h3>
              <p className="text-gray-600 text-sm">Relatório detalhado de pedidos entregues por período</p>
            </div>
            
            <div className="p-4 border rounded-lg">
              <h3 className="font-medium mb-2">👥 Desempenho de Entregadores</h3>
              <p className="text-gray-600 text-sm">Estatísticas de performance por entregador</p>
            </div>
            
            <div className="p-4 border rounded-lg">
              <h3 className="font-medium mb-2">🏬 Relatório por Loja</h3>
              <p className="text-gray-600 text-sm">Dados de pedidos organizados por loja</p>
            </div>
            
            <div className="p-4 border rounded-lg">
              <h3 className="font-medium mb-2">📅 Relatório Mensal</h3>
              <p className="text-gray-600 text-sm">Consolidado mensal de todas as métricas</p>
            </div>
          </div>
        </div>
      </div>
    </RouteGuard>
  );
}


===== test-css.js =====
export default function TestCSS() {
  return (
    <div className="bg-red-500 text-white p-8 text-center">
      <h1 className="text-2xl font-bold">TESTE CSS - Next.js 15</h1>
      <p>Se isso estiver vermelho, o CSS funciona!</p>
      <button className="bg-woo-purple text-white px-4 py-2 rounded mt-4">
        Botão Woo Purple
      </button>
    </div>
  );
}


===== test-modal.js =====
// pages/test-modal.js
import React, { useState } from 'react';
import { OrderModal, WithCourier } from '../components/OrderModal';

export default function TestModal() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  
  // Dados de exemplo para testar
  const pedidoTeste = {
    id: 1,
    id_loja_woo: '12-739',
    loja_nome: '36 Luanda Hortifruti',
    loja_telefone: '(11) 9999-9999',
    status_transporte: 'entregue',
    nome_cliente: 'João Silva',
    telefone_cliente: '(11) 8888-8888',
    email_cliente: 'joao@email.com',
    endereco_entrega: 'Rua Teste, 123 - São Paulo',
    produto: '2x Maçã Verde\n1x Banana Nanica\n3x Laranja Lima',
    forma_pagamento: 'Cartão de Crédito',
    total: '89.90',
    aceito_por_nome: 'Almir da Silva Salles',
    aceito_por_telefone: '(11) 7777-7777',
    aceito_por_email: 'almir@entregador.com',
    observacao_pedido: 'Deixar na portaria'
  };

return (
    <div className="p-8">
      <h1 className="text-2xl font-bold mb-4">Teste do Modal</h1>
      
      <button 
        onClick={() => setIsModalOpen(true)}
        className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700"
      >
        Abrir Modal de Teste
      </button>

      <OrderModal 
        pedido={pedidoTeste} 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)}
      >
        <WithCourier 
          pedido={pedidoTeste} 
          onClose={() => setIsModalOpen(false)} 
        />
      </OrderModal>
    </div>
  );
}


===== test-tailwind.js =====
// pages/test-tailwind.js
export default function TestTailwind() {
  return (
    <div className="bg-purple-600 text-white p-8 text-center">
      <h1 className="text-2xl font-bold">Teste Tailwind</h1>
      <p className="text-lg">Se isso estiver roxo, o Tailwind funciona!</p>
      <button className="bg-white text-purple-600 px-4 py-2 rounded mt-4">
        Botão de Teste
      </button>
    </div>
  );
}


===== todos-pedidos.js =====
// pages/todos-pedidos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { OrderModal, WithCourier, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - TODOS OS PEDIDOS
// ==============================================================================
export default function TodosPedidos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  
  // Estados para filtros
  const [filtroStatus, setFiltroStatus] = useState('');
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [editandoFrete, setEditandoFrete] = useState(null);
  const [valorFrete, setValorFrete] = useState('');

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 4. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getTodosPedidos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: BUSCAR TODOS OS PEDIDOS
  // ============================================================================
  const getTodosPedidos = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('pedidos')
        .select('*')
        .order('data', { ascending: false });

      // Se for gerente, filtrar apenas pela sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: FILTRAR PEDIDOS
  // ============================================================================
  const pedidosFiltrados = todosPedidos.filter(pedido => {
    // Filtro por status
    if (filtroStatus && pedido.status_transporte !== filtroStatus) {
      return false;
    }
    
    // Filtro por entregador
    if (filtroEntregador && pedido.aceito_por_nome !== filtroEntregador) {
      return false;
    }
    
    // Filtro por loja (apenas para admin)
    if (userRole === 'admin' && filtroLoja && pedido.id_loja !== filtroLoja) {
      return false;
    }
    
    return true;
  });

  // ============================================================================
  // 7. FUNÇÃO: REVERTER PEDIDO (BOTÃO GERENTE/ADMIN)
  // ============================================================================
  const handleReverterPedido = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja reverter este pedido?')) return;
    
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { 
          ...p, 
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null
        } : p
      ));
      
      alert('✅ Pedido revertido com sucesso!');
    } catch (error) {
      console.error('Erro ao reverter pedido:', error);
      alert('❌ Erro ao reverter pedido.');
    }
  };

  // ============================================================================
  // 8. FUNÇÃO: EDITAR FRETE OFERECIDO
  // ============================================================================
  const handleEditarFrete = (pedido, valor) => {
    setEditandoFrete(pedido.id);
    setValorFrete(valor || '');
  };

  const handleSalvarFrete = async (pedidoId) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ 
          frete_oferecido: parseFloat(valorFrete) || null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, frete_oferecido: parseFloat(valorFrete) || null } : p
      ));
      
      setEditandoFrete(null);
      alert('✅ Frete atualizado com sucesso!');
    } catch (error) {
      console.error('Erro ao atualizar frete:', error);
      alert('❌ Erro ao atualizar frete.');
    }
  };

  // ============================================================================
  // 9. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 10. DADOS PARA FILTROS
  // ============================================================================
  const statusUnicos = [...new Set(todosPedidos.map(p => p.status_transporte))].filter(Boolean);
  const entregadoresUnicos = [...new Set(todosPedidos.map(p => p.aceito_por_nome))].filter(Boolean);
  const lojasUnicas = [...new Set(todosPedidos.map(p => p.id_loja))].filter(Boolean);

  // ============================================================================
  // 11. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📊 Todos os Pedidos</h1>

      {/* FILTROS */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Filtros</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Filtro Status */}
          <div>
            <label className="block text-sm font-medium mb-1">Status</label>
            <select
              value={filtroStatus}
              onChange={(e) => setFiltroStatus(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os status</option>
              {statusUnicos.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>

          {/* Filtro Entregador */}
          <div>
            <label className="block text-sm font-medium mb-1">Entregador</label>
            <select
              value={filtroEntregador}
              onChange={(e) => setFiltroEntregador(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os entregadores</option>
              {entregadoresUnicos.map(entregador => (
                <option key={entregador} value={entregador}>{entregador}</option>
              ))}
            </select>
          </div>

          {/* Filtro Loja (apenas admin) */}
          {userRole === 'admin' && (
            <div>
              <label className="block text-sm font-medium mb-1">Loja</label>
              <select
                value={filtroLoja}
                onChange={(e) => setFiltroLoja(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded"
              >
                <option value="">Todas as lojas</option>
                {lojasUnicas.map(loja => (
                  <option key={loja} value={loja}>{loja}</option>
                ))}
              </select>
            </div>
          )}
        </div>
      </div>

      {/* LISTA DE PEDIDOS */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-start justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Status:</span> 
                      <span className={`ml-1 ${
                        pedido.status_transporte === 'entregue' ? 'text-green-600' :
                        pedido.status_transporte === 'cancelado' ? 'text-red-600' :
                        pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-blue-600'
                      }`}>
                        {pedido.status_transporte}
                      </span>
                    </p>
                    
                    {pedido.aceito_por_nome && (
                      <p className="text-sm"><span className="font-medium">Entregador:</span> {pedido.aceito_por_nome}</p>
                    )}

                    {/* EDIÇÃO DE FRETE */}
                    <div className="mt-2">
                      <span className="text-sm font-medium">Frete oferecido: </span>
                      {editandoFrete === pedido.id ? (
                        <div className="flex items-center gap-2 mt-1">
                          <input
                            type="number"
                            step="0.01"
                            value={valorFrete}
                            onChange={(e) => setValorFrete(e.target.value)}
                            className="w-20 p-1 border border-gray-300 rounded"
                            placeholder="0.00"
                          />
                          <button
                            onClick={() => handleSalvarFrete(pedido.id)}
                            className="bg-green-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ✅
                          </button>
                          <button
                            onClick={() => setEditandoFrete(null)}
                            className="bg-gray-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ❌
                          </button>
                        </div>
                      ) : (
                        <span className="text-green-600">
                          R$ {pedido.frete_oferecido?.toFixed(2) || '0.00'} 
                          <button
                            onClick={() => handleEditarFrete(pedido, pedido.frete_oferecido)}
                            className="ml-2 text-blue-600 text-sm"
                          >
                            ✏️
                          </button>
                        </span>
                      )}
                    </div>
                  </div>

                  {/* BOTÕES DE AÇÃO (GERENTE/ADMIN) */}
                  <div className="flex flex-col gap-2 ml-4">
                    {/* BOTÃO REVERTER (para pedidos aceitos/em rota) */}
                    {['aceito', 'em rota'].includes(pedido.status_transporte) && (
                      <button 
                        onClick={() => handleReverterPedido(pedido.id)}
                        className="bg-yellow-500 text-white px-4 py-2 rounded text-sm hover:bg-yellow-600"
                      >
                        ↩️ Reverter
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        {pedidoSelecionado?.aceito_por_nome ? (
          <WithCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        ) : (
          <WithoutCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        )}
      </OrderModal>
    </div>
  );
}





// =========================================
// 14. postcss.config.js
// =========================================

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


// =========================================
// 15. saida_inclui_push.txt
// =========================================

// =========================================
// 1. components\Filters\CourierFilter.js
// =========================================



// =========================================
// 2. components\Filters\StatusFilter.js
// =========================================



// =========================================
// 1. components\OrderModal\index.js
// =========================================

// components/OrderModal/index.js
import OrderModal from './OrderModal';
import WithCourier from './WithCourier';
import WithoutCourier from './WithoutCourier';

export { OrderModal, WithCourier, WithoutCourier };


// =========================================
// 2. components\OrderModal\OrderModal.js
// =========================================

// components/OrderModal/OrderModal.js
import React from 'react';

const OrderModal = ({ 
  pedido, 
  isOpen, 
  onClose, 
  children 
}) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Conteúdo específico (será injetado via children) */}
          {children}
        </div>
      </div>
    </div>
  );
};

export default OrderModal;


// =========================================
// 3. components\OrderModal\WithCourier.js
// =========================================

// components/OrderModal/WithCourier.js
import React from 'react';

const WithCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Entregador */}
      <div className="mb-6 p-4 bg-purple-50 rounded">
        <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
        <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithCourier;


// =========================================
// 4. components\OrderModal\WithoutCourier.js
// =========================================

// components/OrderModal/WithoutCourier.js
import React from 'react';

const WithoutCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithoutCourier;


// =========================================
// 1. components\DeliveryStatus.js
// =========================================

 



// =========================================
// 2. components\EditLojaModal.js
// =========================================

// components/EditLojaModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function EditLojaModal({ isOpen, onClose, loja }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  useEffect(() => {
    if (isOpen && loja) {
      setFormData({
        veiculo: loja.veiculo || '',
        carga_maxima: loja.carga_maxima || '',
        perimetro_entrega: loja.perimetro_entrega || ''
      });
    }
  }, [isOpen, loja]);

  const handleSave = async () => {
    try {
      setLoading(true);
      
      const { error } = await supabase
        .from('loja_associada')
        .update({
          veiculo: formData.veiculo,
          carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
          perimetro_entrega: formData.perimetro_entrega
        })
        .eq('id', loja.id);

      if (error) throw error;

      alert('Dados da loja atualizados com sucesso!');
      onClose();
      window.location.reload();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      alert('Erro ao atualizar dados da loja');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">🏪 Editar Loja: {loja.loja_nome}</h2>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm font-medium text-gray-700">Veículo</label>
            <select
              value={formData.veiculo}
              onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            >
              <option value="">Selecione o veículo</option>
              <option value="carro">Carro</option>
              <option value="moto">Moto</option>
              <option value="bicicleta">Bicicleta</option>
              <option value="caminhao">Caminhão</option>
              <option value="van">Van</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Carga Máxima (kg)</label>
            <input
              type="number"
              value={formData.carga_maxima}
              onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Perímetro de Entrega</label>
            <input
              type="text"
              value={formData.perimetro_entrega}
              onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 rounded"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-blue-600 text-white py-2 rounded disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 3. components\EditProfileModal.js
// =========================================

// components/EditProfileModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDIÇÃO DE PERFIL
// ==============================================================================
export default function EditProfileModal({ isOpen, onClose, userProfile, userRole, userLojas }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: '',
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  // ============================================================================
  // 1. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setFormData({
        nome_completo: userProfile.nome_completo || '',
        nome_usuario: userProfile.nome_usuario || '',
        telefone: userProfile.telefone || '',
        foto: userProfile.foto || '',
        veiculo: userLojas[0]?.veiculo || '',
        carga_maxima: userLojas[0]?.carga_maxima || '',
        perimetro_entrega: userLojas[0]?.perimetro_entrega || ''
      });
    }
  }, [isOpen, userProfile, userLojas]);

  // ============================================================================
  // 2. FUNÇÃO: SALVAR ALTERAÇÕES
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);

      const { error: userError } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (userError) throw userError;

      if (userRole === 'entregador' && userLojas.length > 0) {
        const { error: lojaError } = await supabase
          .from('loja_associada')
          .update({
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          })
          .eq('uid_usuario', userProfile.uid)
          .eq('id_loja', userLojas[0].id_loja);

        if (lojaError) throw lojaError;
      }

      alert('Perfil atualizado com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      alert('Erro ao atualizar perfil');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw max-h-95vh overflow-y-auto">
        
        {/* CABEÇALHO */}
        <h2 className="text-xl font-bold mb-4 text-gray-800">✏️ Editar Perfil</h2>
        
        {/* CAMPOS DO FORMULÁRIO */}
        <div className="space-y-4">
          {/* NOME COMPLETO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome Completo
            </label>
            <input
              type="text"
              value={formData.nome_completo}
              onChange={(e) => setFormData({...formData, nome_completo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome completo"
            />
          </div>

          {/* NOME DE USUÁRIO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome de Usuário
            </label>
            <input
              type="text"
              value={formData.nome_usuario}
              onChange={(e) => setFormData({...formData, nome_usuario: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome de usuário"
            />
          </div>

          {/* TELEFONE */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone
            </label>
            <input
              type="tel"
              value={formData.telefone}
              onChange={(e) => setFormData({...formData, telefone: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="(11) 99999-9999"
            />
          </div>

          {/* FOTO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL da Foto
            </label>
            <input
              type="url"
              value={formData.foto}
              onChange={(e) => setFormData({...formData, foto: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="https://exemplo.com/foto.jpg"
            />
          </div>

          {/* CAMPOS ESPECÍFICOS PARA ENTREGADORES */}
          {userRole === 'entregador' && (
            <>
              {/* VEÍCULO */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Veículo
                </label>
                <select
                  value={formData.veiculo}
                  onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                >
                  <option value="">Selecione o veículo</option>
                  <option value="carro">Carro</option>
                  <option value="moto">Moto</option>
                  <option value="bicicleta">Bicicleta</option>
                  <option value="caminhao">Caminhão</option>
                  <option value="van">Van</option>
                </select>
              </div>

              {/* CARGA MÁXIMA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Carga Máxima (kg)
                </label>
                <input
                  type="number"
                  value={formData.carga_maxima}
                  onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: 50"
                />
              </div>

              {/* PERÍMETRO DE ENTREGA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Perímetro de Entrega
                </label>
                <input
                  type="text"
                  value={formData.perimetro_entrega}
                  onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: Zona Norte, até 10km"
                />
              </div>
            </>
          )}
        </div>

        {/* BOTÕES DE AÇÃO */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded font-medium hover:bg-gray-400 transition-colors"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-purple-600 text-white py-2 px-4 rounded font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 4. components\EditUsuarioModal.js
// =========================================

// components/EditUsuarioModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDIÇÃO SIMPLIFICADA: APENAS TELEFONE E FOTO
// ==============================================================================
export default function EditUsuarioModal({ isOpen, onClose, userProfile }) {
  // ============================================================================
  // 1. DEFINIÇÃO DE ESTADOS
  // ============================================================================
  const [loading, setLoading] = useState(false);
  const [telefone, setTelefone] = useState('');
  const [foto, setFoto] = useState('');
  const [selectedFile, setSelectedFile] = useState(null);
  const [error, setError] = useState('');
  const [showRemovePhoto, setShowRemovePhoto] = useState(false);

  // ============================================================================
  // 2. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setTelefone(userProfile.telefone || '');
      setFoto(userProfile.foto || '');
    }
  }, [isOpen, userProfile]);

  // ============================================================================
  // 3. FUNÇÃO: NORMALIZAR NOME DO ARQUIVO
  // ============================================================================
  const normalizeFileName = (fileName) => {
    return fileName
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^a-zA-Z0-9.-]/g, '_');
  };

  // ============================================================================
  // 4. FUNÇÃO: ATUALIZAR ARQUIVO DE FOTO
  // ============================================================================
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        setError('Por favor, selecione um arquivo de imagem.');
        setSelectedFile(null);
        return;
      }
      if (file.size > 5 * 1024 * 1024) {
        setError('O arquivo excede o limite de 5MB.');
        setSelectedFile(null);
        return;
      }
      setSelectedFile(file);
      setError('');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: SALVAR ALTERAÇÕES (APENAS TELEFONE E FOTO)
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);
      setError('');

      let photoUrl = foto;
      let oldFileFullPath = null;

      // Identifica foto antiga para possível exclusão
      if (foto) {
        const url = new URL(foto);
        const pathParts = url.pathname.split('/');
        oldFileFullPath = pathParts.slice(4).join('/');
      }

      // Upload da nova foto (se houver)
      if (selectedFile) {
        const baseName = normalizeFileName(selectedFile.name);
        const fileName = `${userProfile.uid}-${Date.now()}-${baseName}`;
        const fullPath = `fotos/${fileName}`;
        
        const { error: uploadError } = await supabase.storage
          .from('box')
          .upload(fullPath, selectedFile, {
            cacheControl: '3600',
            upsert: false,
          });

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('box')
          .getPublicUrl(fullPath);
        photoUrl = urlData.publicUrl;
      }

      // Atualiza APENAS telefone e foto no banco
      const { error: updateError } = await supabase
        .from('usuarios')
        .update({
          telefone: telefone,
          foto: photoUrl
        })
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      // Remove foto antiga se foi feita substituição
      if (oldFileFullPath && selectedFile) {
        try {
          await supabase.storage
            .from('box')
            .remove([oldFileFullPath]);
        } catch (deleteError) {
          console.warn('Aviso: Foto antiga não pôde ser removida:', deleteError);
        }
      }

      alert('Dados atualizados com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      setError(error.message || 'Erro ao atualizar dados. Tente novamente.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: REMOVER FOTO
  // ============================================================================
  const handleRemovePhoto = async () => {
    if (!foto) return;
    
    try {
      const url = new URL(foto);
      const pathParts = url.pathname.split('/');
      const fullPath = pathParts.slice(4).join('/');
      
      const { error: removeError } = await supabase.storage
        .from('box')
        .remove([fullPath]);
      
      if (removeError) throw removeError;
      
      // Atualiza estado local e banco
      setFoto('');
      const { error: updateError } = await supabase
        .from('usuarios')
        .update({ foto: '' })
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      setShowRemovePhoto(false);
      setSelectedFile(null);
      setError('');
      
      alert('Foto removida com sucesso!');
      
    } catch (error) {
      console.error('Erro ao remover foto:', error);
      setError('Erro ao remover foto. Tente novamente.');
    }
  };

  // ============================================================================
  // 7. RENDERIZAÇÃO DO MODAL SIMPLIFICADO
  // ============================================================================
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">
          ✏️ Editar Telefone e Foto
        </h2>
        
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-600 p-2 mb-4 rounded">
            {error}
          </div>
        )}

        <div className="space-y-4">
          {/* Campo Telefone */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone *
            </label>
            <input
              type="tel"
              value={telefone}
              onChange={(e) => setTelefone(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 focus:ring-2 focus:ring-purple-500"
              required
              disabled={loading}
            />
          </div>

          {/* Seção de Foto de Perfil */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Foto de Perfil
            </label>
            
            {/* Preview da foto atual */}
            {foto && (
              <div className="relative inline-block mb-3">
                <img
                  src={foto}
                  alt="Foto atual do perfil"
                  className="h-20 w-20 object-cover rounded-full border-2 border-gray-200"
                />
                <button
                  type="button"
                  onClick={() => setShowRemovePhoto(true)}
                  className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold hover:bg-red-600"
                  disabled={loading}
                >
                  ×
                </button>
              </div>
            )}

            {/* Input para nova foto */}
            <input
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-purple-600 file:text-white hover:file:bg-purple-700"
              disabled={loading}
            />
            <p className="text-xs text-gray-500 mt-2">
              Escolha uma imagem (máx. 5MB). Formatos: JPG, PNG, GIF.
            </p>
          </div>
        </div>

        {/* Botões de Ação */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-200 text-gray-700 py-2 rounded font-medium hover:bg-gray-300"
            disabled={loading}
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading || !telefone.trim()}
            className="flex-1 bg-purple-600 text-white py-2 rounded font-medium hover:bg-purple-700 disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar Alterações'}
          </button>
        </div>
      </div>

      {/* Modal de Confirmação para Remover Foto */}
      {showRemovePhoto && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-60">
          <div className="bg-white p-6 rounded-lg w-80 shadow-xl">
            <h3 className="text-lg font-bold text-gray-800 mb-3">Remover Foto</h3>
            <p className="text-gray-600 mb-5">
              Tem certeza que deseja remover sua foto de perfil?
            </p>
            <div className="flex gap-3">
              <button
                onClick={() => setShowRemovePhoto(false)}
                className="flex-1 bg-gray-200 text-gray-700 py-2 rounded font-medium hover:bg-gray-300"
              >
                Manter Foto
              </button>
              <button
                onClick={handleRemovePhoto}
                className="flex-1 bg-red-600 text-white py-2 rounded font-medium hover:bg-red-700"
              >
                Remover
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


// =========================================
// 5. components\Header.js
// =========================================

// components/Header.js
export default function Header({ toggleSidebar, showMenuButton = true, title }) {
  return (
    <header className="bg-white shadow-sm border-b border-gray-200">
      <div className="flex items-center justify-between px-4 py-3">
        
        {/* ================================================================== */}
        {/* BOTÃO HAMBURGUER (CONDICIONAL) */}
        {/* ================================================================== */}
        <div className="flex items-center">
          {showMenuButton && (
            <button
              onClick={toggleSidebar}
              className="lg:hidden p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100"
              aria-label="Abrir menu"
            >
              {/* Ícone do hamburger */}
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          )}
          
          {/* Espaço para alinhamento quando não há botão */}
          {!showMenuButton && <div className="w-10 h-10"></div>}
        </div>

        {/* ================================================================== */}
        {/* TÍTULO (CUSTOMIZÁVEL PARA PÁGINAS SEM SIDEBAR) */}
        {/* ================================================================== */}
        <div className="flex-1 text-center lg:text-left">
          <h1 className="text-xl font-semibold text-gray-900">
            {title || 'EntregasWoo'} {/* Usa título customizado ou padrão */}
          </h1>
        </div>

        {/* ================================================================== */}
        {/* ESPAÇO PARA ELEMENTOS À DIREITA (BOTÃO DE PERFIL, ETC) */}
        {/* ================================================================== */}
        <div className="w-10 h-10"></div>
      </div>
    </header>
  );
}


// =========================================
// 6. components\Layout.js
// =========================================

// components/Layout.js
import { useState, useEffect } from 'react';
import Header from './Header';
import Sidebar from './Sidebar';

// ==============================================================================
// COMPONENTE LAYOUT PRINCIPAL
// ==============================================================================
/**
 * Layout é o componente que define a estrutura básica de todas as páginas
 * Ele gerencia: Sidebar, Header e Conteúdo principal
 * 
 * @param {Object} props - Propriedades do componente
 * @param {ReactNode} props.children - Conteúdo da página
 * @param {boolean} [props.hideSidebar=false] - Oculta a sidebar (para páginas como Admin)
 */
const Layout = ({ children, hideSidebar = false }) => {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  // ============================================================================
  // 2. EFFECT: DETECTAR TAMANHO DA TELA
  // ============================================================================
  useEffect(() => {
    const checkIsMobile = () => setIsMobile(window.innerWidth < 1024);
    
    // Verificar inicialmente
    checkIsMobile();
    
    // Adicionar listener para redimensionamento
    window.addEventListener('resize', checkIsMobile);
    
    // Cleanup
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);

  // ============================================================================
  // 3. FUNÇÕES: CONTROLE DA SIDEBAR
  // ============================================================================
  /**
   * Alterna o estado da sidebar (aberto/fechado)
   */
  const toggleSidebar = () => {
    setSidebarOpen(prev => !prev);
  };

  /**
   * Fecha a sidebar (útil para links mobile)
   */
  const closeSidebar = () => {
    if (isMobile) {
      setSidebarOpen(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO LAYOUT
  // ============================================================================
  return (
    <div className="flex h-screen bg-gray-50">
      
      {/* ====================================================================== */}
      {/* SIDEBAR - MENU LATERAL (CONDICIONAL) */}
      {/* ====================================================================== */}
      {/**
       * A sidebar é opcional (pode ser ocultada com hideSidebar=true)
       * Mas o Header SEMPRE deve aparecer, mesmo sem sidebar
       */}
      {!hideSidebar && (
        <Sidebar 
          isOpen={sidebarOpen} 
          toggleSidebar={toggleSidebar}
          onItemClick={closeSidebar}
        />
      )}
      
      {/* ====================================================================== */}
      {/* CONTEÚDO PRINCIPAL */}
      {/* ====================================================================== */}
      <div className="flex-1 flex flex-col overflow-hidden">
        
        {/* ================================================================== */}
        {/* HEADER - CABEÇALHO (SEMPRE VISÍVEL, INDEPENDENTE DA SIDEBAR) */}
        {/* ================================================================== */}
        {/**
         * ✅ CORREÇÃO: Header SEMPRE visível, mas o botão hamburger é condicional
         * showMenuButton=false quando hideSidebar=true
         */}
        <Header 
          toggleSidebar={toggleSidebar} 
          showMenuButton={!hideSidebar} // Botão só aparece se sidebar existir
          title={hideSidebar ? "Painel Administrativo" : undefined} // Título customizado para Admin
        />
        
        {/* ================================================================== */}
        {/* CONTEÚDO DA PÁGINA */}
        {/* ================================================================== */}
        <main 
          className="flex-1 overflow-y-auto p-4 lg:p-6"
          id="main-content"
          tabIndex={-1}
        >
          {children}
        </main>
      </div>

      {/* ====================================================================== */}
      {/* OVERLAY - SOMENTE MOBILE E QUANDO SIDEBAR NÃO ESTÁ OCULTA */}
      {/* ====================================================================== */}
      {!hideSidebar && sidebarOpen && isMobile && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
          onClick={closeSidebar}
          aria-hidden="true"
          role="button"
          aria-label="Fechar menu"
        />
      )}
    </div>
  );
};

export default Layout;


// =========================================
// 7. components\MobileMenu.js
// =========================================



// =========================================
// 8. components\Notification.js
// =========================================

 



// =========================================
// 9. components\OrderCard.js
// =========================================

 



// =========================================
// 10. components\Pagination.js
// =========================================

// components/Pagination.js
// ==============================================================================
// COMPONENTE PAGINATION (SEM DEPENDÊNCIAS EXTERNAS)
// ==============================================================================
export default function Pagination({ currentPage, totalPages, onPageChange }) {
  // ============================================================================
  // 1. FUNÇÃO: GERAR BOTÕES DE PÁGINA
  // ============================================================================
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 5; // Máximo de páginas visíveis
    
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    // Ajustar se estiver no início
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  };

  // ============================================================================
  // 2. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (totalPages <= 1) return null; // Não mostrar paginação se só tiver uma página

  return (
    <div className="flex items-center justify-between border-t border-gray-200 px-4 py-3 sm:px-6">
      
      {/* ✅ PAGINAÇÃO MOBILE */}
      <div className="flex flex-1 justify-between sm:hidden">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          ← Anterior
        </button>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Próxima →
        </button>
      </div>
      
      {/* ✅ PAGINAÇÃO DESKTOP */}
      <div className="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        
        {/* ✅ CONTADOR DE PÁGINAS */}
        <div>
          <p className="text-sm text-gray-700">
            Página <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        
        {/* ✅ NAVEGAÇÃO */}
        <div>
          <nav className="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
            
            {/* ✅ BOTÃO ANTERIOR */}
            <button
              onClick={() => onPageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Anterior</span>
              ← {/* Emoji seta esquerda */}
            </button>
            
            {/* ✅ BOTÕES DE PÁGINA */}
            {getPageNumbers().map((page) => (
              <button
                key={page}
                onClick={() => onPageChange(page)}
                className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                  currentPage === page
                    ? 'bg-purple-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600'
                    : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                }`}
              >
                {page}
              </button>
            ))}
            
            {/* ✅ BOTÃO PRÓXIMA */}
            <button
              onClick={() => onPageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Próxima</span>
              → {/* Emoji seta direita */}
            </button>
          </nav>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 11. components\PedidosEntregues.js
// =========================================

// components/PedidosEntregues.js
// ============================================================================
// 1. IMPORTAÇÕES
// ============================================================================
import { useEffect } from "react";
import { useUserProfile } from "../hooks/useUserProfile";

// Importa as versões da página, cada uma para um tipo de usuário
import PedidosEntreguesAdmin from "./PedidosEntreguesAdmin";
import PedidosEntreguesGerente from "./PedidosEntreguesGerente";
import PedidosEntreguesEntregador from "./PedidosEntreguesEntregador";

// ============================================================================
// 2. COMPONENTE PRINCIPAL
// ============================================================================
export default function PedidosEntregues() {
  // Hook que carrega dados do usuário
  const { userProfile, userRole, userLojas, loading } = useUserProfile();

    // ==========================================================================
  // 3. ESTADOS DE CARREGAMENTO E AUTENTICAÇÃO
  // ==========================================================================
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-purple-600 text-lg">Carregando...</div>
      </div>
    );
  }

  if (!userProfile) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-red-600 text-lg">Usuário não autenticado</div>
        <p className="text-gray-600 text-sm mt-2">
          Faça login para acessar esta página.
        </p>
      </div>
    );
  }



    // ==========================================================================
  // 4. ROTEAMENTO BASEADO NO TIPO DE USUÁRIO
  // ==========================================================================
  switch (userRole?.toLowerCase()) {
    // ------------------------------------------------------------------------
    // CASO 1: ADMINISTRADOR
    // ------------------------------------------------------------------------
    case "admin":
    case "administrador":
    case "administrator":
      return <PedidosEntreguesAdmin userProfile={userProfile} />;

    // ------------------------------------------------------------------------
    // CASO 2: GERENTE
    // ------------------------------------------------------------------------
    case "gerente":
    case "manager":
    case "gestor":
      return (
        <PedidosEntreguesGerente
          userProfile={userProfile}
          userLojas={userLojas}
        />
      );

    // ------------------------------------------------------------------------
    // CASO 3: ENTREGADOR
    // ------------------------------------------------------------------------
    case "entregador":
    case "delivery":
    case "courier":
    case "motoboy":
      return (
        <PedidosEntreguesEntregador
          userProfile={userProfile}
          userLojas={userLojas}
        />
      );

    // ------------------------------------------------------------------------
    // CASO PADRÃO: ACESSO NEGADO
    // ------------------------------------------------------------------------
    default:
      return (
        <div className="flex flex-col items-center justify-center min-h-screen p-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 max-w-md text-center">
            <h2 className="text-red-800 text-xl font-bold mb-2">
              ⚠️ Acesso Não Autorizado
            </h2>

            <p className="text-gray-700 mb-3">
              Seu tipo de usuário não tem permissão para acessar esta página.
            </p>

            <div className="bg-gray-100 p-3 rounded text-sm mb-4">
              <p>
                <strong>Tipo de usuário:</strong>{" "}
                {userRole || "Não definido"}
              </p>
              <p>
                <strong>Usuário:</strong>{" "}
                {userProfile.nome_completo || userProfile.email}
              </p>
            </div>

            <p className="text-sm text-gray-600">
              Contate o administrador do sistema para solicitar acesso.
            </p>

            <button
              onClick={() => window.history.back()}
              className="mt-4 bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 transition-colors"
            >
              Voltar
            </button>
          </div>
        </div>
      );
  }
}




// =========================================
// 12. components\PedidosEntreguesAdmin.js
// =========================================

import React, { useState, useEffect, useCallback } from 'react';
import { createClient } from '@supabase/supabase-js';
import { jsPDF } from 'jspdf';

// ==============================================================================
// 1. CONFIGURAÇÃO DO SUPABASE
// ==============================================================================
const supabaseUrl = 'https://czzidhzzpqegfvvmdgno.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6emlkaHp6cHFlZ2Z2dm1kZ25vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5NTIwMDMsImV4cCI6MjA2ODUyODAwM30.zK2iFp-b4e5vghpHgWGuOk0LooujlyU7kVm4sbM85m0';
const supabase = createClient(supabaseUrl, supabaseKey);

// ==============================================================================
// 2. FUNÇÕES AUXILIARES
// ==============================================================================

/**
 * Formata data para o padrão do Supabase (YYYY-MM-DD)
 */
const formatarDataParaSupabase = (dataString) => {
  if (!dataString) return '';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) return dataString;
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) {
    const [dia, mes, ano] = dataString.split('/');
    return `${ano}-${mes}-${dia}`;
  }
  return dataString;
};

/**
 * Formata data para exibição (DD/MM/YYYY)
 */
const formatarDataParaExibicao = (dataString) => {
  if (!dataString) return '-';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) {
    const [ano, mes, dia] = dataString.split('-');
    return `${dia}/${mes}/${ano}`;
  }
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) return dataString;
  try {
    const data = new Date(dataString);
    if (!isNaN(data.getTime())) return data.toLocaleDateString('pt-BR');
  } catch (e) {
    console.error('Erro ao formatar data:', e);
  }
  return dataString;
};

// ==============================================================================
// 3. COMPONENTE MODAL DE DETALHES
// ==============================================================================
const ModalDetalhesPedido = ({ pedido, isOpen, onClose }) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Informações da Loja */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p><strong>ID:</strong> {pedido.id}</p>
                <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
                <p><strong>Data:</strong> {pedido.data ? new Date(pedido.data).toLocaleString('pt-BR') : 'N/A'}</p>
              </div>
              <div>
                <p><strong>Telefone da Loja:</strong> {pedido.loja_telefone || 'N/A'}</p>
                <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
              </div>
            </div>
          </div>

          {/* Informações do Cliente */}
          <div className="mb-6 p-4 bg-gray-50 rounded">
            <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
            <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
            <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
          </div>

          {/* Produtos */}
          <div className="mb-6">
            <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
            <div className="bg-white border rounded p-3">
              {pedido.produto ? (
                <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
              ) : (
                <p>Nenhum produto informado</p>
              )}
            </div>
          </div>

          {/* Informações de Pagamento e Total */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div>
              <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
              <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p><strong>Frete Pago:</strong> R$ {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            </div>
            <div>
              <p><strong>Status Pagamento:</strong> {pedido.status_pagamento ? 'Pago' : 'Pendente'}</p>
              <p><strong>Data Pagamento:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
            </div>
          </div>

          {/* Observações */}
          {pedido.observacao_pedido && (
            <div className="mb-6">
              <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
              <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
            </div>
          )}

          {/* Entregador */}
          <div className="mb-6 p-4 bg-purple-50 rounded">
            <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
            <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
          </div>

          {/* Botão Fechar */}
          <div className="flex justify-end">
            <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition-colors">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// ==============================================================================
// 4. FUNÇÕES DE CARREGAMENTO DE IMAGEM E GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};

// ==============================================================================
// 5. COMPONENTE PRINCIPAL
// ==============================================================================
export default function PedidosEntregues() {
  // Estados do componente
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);

  // ============================================================================
  // 5.1 FUNÇÕES DE CÁLCULO E CARREGAMENTO
  // ============================================================================

  /**
   * Calcula o total dos pedidos selecionados
   */
  const calcularTotais = useCallback((pedidosList, selecionados) => {
    const total = Array.from(selecionados).reduce((sum, id) => {
      const pedido = pedidosList.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, []);

  /**
   * Carrega pedidos do Supabase com filtros aplicados
   */
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      let query = supabase.from('pedidos').select('*, loja_logo').eq('status_transporte', 'entregue');
      
      if (filtroEntregador) query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      if (filtroLoja) query = query.eq('id_loja', filtroLoja);
      if (filtroStatus) query = query.eq('status_pagamento', filtroStatus === 'true');
      
      const { data, error } = await query;
      if (error) throw error;
      
      setPedidos(data || []);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Atualiza pedidos selecionados no Supabase
   */
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }
    
    const dataFormatada = formatarDataParaSupabase(dataPagamento);
    
    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;
        
        const { error } = await supabase
          .from('pedidos')
          .update({
            frete_pago: fretePago,
            status_pagamento: fretePago > 0,
            data_pagamento: dataFormatada,
          })
          .eq('id', id);
        
        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pedidos atualizados com sucesso!');
      
      // Atualizar estado local
      setPedidos(prevPedidos => 
        prevPedidos.map(pedido => 
          pedidosSelecionados.has(pedido.id) 
            ? { 
                ...pedido, 
                data_pagamento: dataFormatada,
                status_pagamento: parseFloat(pedido.frete_pago || 0) > 0
              } 
            : pedido
        )
      );
      
      setPedidosSelecionados(new Set());
      
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ============================================================================
  // 5.2 HANDLERS DE INTERAÇÃO
  // ============================================================================

  /**
   * Manipula seleção/deseleção de pedidos
   */
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) {
      newSet.add(pedidoId);
    } else {
      newSet.delete(pedidoId);
    }
    setPedidosSelecionados(newSet);
  };

  /**
   * Atualiza valor do frete de um pedido
   */
  const handleAtualizarFrete = (pedidoId, novoValor) => {
    const newPedidos = pedidos.map(p => 
      p.id === pedidoId ? { ...p, frete_pago: novoValor } : p
    );
    setPedidos(newPedidos);
  };

  /**
   * Abre modal com detalhes do pedido
   */
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  /**
   * Fecha modal de detalhes
   */
  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 5.3 USE EFFECTS
  // ============================================================================

  // Carrega pedidos quando os filtros mudam
  useEffect(() => {
    carregarPedidos();
  }, [filtroEntregador, filtroLoja, filtroStatus]);

  // Calcula totais quando a seleção ou pedidos mudam
  useEffect(() => {
    calcularTotais(pedidos, pedidosSelecionados);
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ============================================================================
  // 5.4 DADOS DERIVADOS
  // ============================================================================

  // Lista de lojas únicas para o filtro
  const lojasUnicas = [...new Set(pedidos.map(p => p.id_loja))].map(id => {
    const nome = pedidos.find(p => p.id_loja === id)?.loja_nome;
    return { id, nome: nome || id };
  });

  // ============================================================================
  // 5.5 RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================

  return (
    <div className="bg-gray-50 min-h-screen mobile-optimized">
      {/* Modal de Detalhes */}
      <ModalDetalhesPedido
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={fecharModal}
      />

      {/* Cabeçalho Otimizado para Mobile */}
      <div className="bg-white shadow-md rounded-lg p-3 mb-3 sticky top-2 z-10 mobile-header">
        <div className="flex justify-between items-center mb-3">
          <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">{pedidosSelecionados.size}</span>
            <div className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </div>
          </div>
        </div>

        {/* Filtros sem rótulos */}
        <div className="grid grid-cols-1 gap-2 mb-3">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Entregadores</option>
            {[...new Set(pedidos.map(p => p.aceito_por_nome).filter(Boolean))].map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todas Lojas</option>
            {lojasUnicas.map(loja => (
              <option key={loja.id} value={loja.id}>{loja.nome}</option>
            ))}
          </select>
          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data e Botões na mesma linha */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded mobile-field"
          />
          <button 
            onClick={atualizarPedidos} 
            className="bg-purple-600 text-white p-2 rounded hover:bg-purple-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Atualizar
          </button>
          <button 
            onClick={async () => await gerarRecibosPDF(pedidosSelecionados, pedidos)}
            className="bg-green-600 text-white p-2 rounded hover:bg-green-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Recibo
          </button>
        </div>
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        <div className="grid grid-cols-1 gap-3">
          {isLoading ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Carregando...</p>
            </div>
          ) : pedidos.length === 0 ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow card-pedido p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="mobile-checkbox h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800 mobile-text-small">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 mobile-text-small">
                  <p><span className="font-semibold">Entregador:</span> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><span className="font-semibold">Pago em:</span> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p className="flex items-center">
                    <span className="font-semibold mr-1">Pagamento:</span> 
                    {pedido.status_pagamento ? (
                      <span className="text-green-600 mr-1">✔</span>
                    ) : (
                      <span className="text-red-600 mr-1">✘</span>
                    )} 
                    {pedido.status_pagamento ? 'Pago' : 'Pendente'}
                  </p>
                  <p className="flex items-center">
                    <span className="font-semibold">Frete Pago: R$</span>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0.0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500 focus:border-transparent mobile-text-small"
                    />
                  </p>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

{/* Estilos inline para mobile */}
<style jsx>{`
  @media (max-width: 768px) {
    .mobile-optimized :global(*) {
      font-size: 14px !important;
    }
    .mobile-header :global(*) {
      padding: 0px 10px !important;
    }
    .mobile-field :global(*) {
      padding: 10px !important;
      font-size: 14px !important;
    }
    .mobile-button :global(*) {
      padding: 10px 12px !important;
      font-size: 14px !important;
    }
    .mobile-text-small :global(*) {
      font-size: 13px !important;
    }
    .mobile-checkbox :global(*) {
      width: 18px !important;
      height: 18px !important;
    }
  }

  /* Estilos para tablet/PC (acima de 768px) - mantém o padrão */
  @media (min-width: 769px) {
    .mobile-header :global(*) {
      padding: 12px 10px !important; /* Valor original para tablet/PC */
    }
  }
`}</style>
    </div>
  );
}


// =========================================
// 13. components\PedidosEntreguesEntregador.js
// =========================================

// ============================================================================
// IMPORTAÇÕES
// ============================================================================
import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { OrderModal, WithCourier } from './OrderModal';

// ============================================================================
// COMPONENTE: PEDIDOS ENTREGUES - ENTREGADOR
// ============================================================================
/**
 * Versão exclusiva para ENTREGADORES:
 * - Só pode visualizar seus próprios pedidos entregues.
 * - Pode filtrar por loja e status de pagamento.
 * - Não pode editar valores, nem atualizar, nem gerar recibos.
 */
export default function PedidosEntreguesEntregador({ userProfile }) {
  // ==========================================================================
  // 1. ESTADOS DO COMPONENTE
  // ==========================================================================
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const [lojas, setLojas] = useState([]);
  const [error, setError] = useState(null); // Estado para erros

  // ==========================================================================
  // 2. CARREGAR LOJAS ASSOCIADAS AO ENTREGADOR
  // ==========================================================================
  useEffect(() => {
    const carregarLojas = async () => {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      try {
        console.log('🔍 Carregando lojas para UID:', userProfile.uid); // Log para depuração
        const { data, error } = await supabase
          .from('loja_associada')
          .select('id_loja, loja_nome')
          .eq('uid_usuario', userProfile.uid); // ✅ Corrigido: 'uid_usuario'

        if (error) throw error;
        console.log('✅ Lojas carregadas:', data); // Log para depuração
        
        // Processar para uniques por id_loja
        const uniqueLojas = [...new Map(data.map(item => [item.id_loja, item])).values()];
        setLojas(uniqueLojas);
      } catch (err) {
        console.error('Erro ao carregar lojas do entregador:', err.message);
        setError('Falha ao carregar lojas associadas. Verifique o schema da tabela loja_associada.');
      }
    };

    carregarLojas();
  }, [userProfile]);

  // ==========================================================================
  // 3. CARREGAR PEDIDOS DO ENTREGADOR LOGADO
  // ==========================================================================
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      console.log('🔍 Carregando pedidos para UID:', userProfile.uid); // Log para depuração
      let query = supabase
        .from('pedidos')
        .select('*')
        .eq('status_transporte', 'entregue')
        .eq('aceito_por_uid', userProfile.uid); // ✅ Corrigido: 'aceito_por_uid'

      if (filtroLoja) {
        query = query.eq('id_loja', filtroLoja);
      }
      if (filtroStatus) {
        query = query.eq('status_pagamento', filtroStatus === 'true');
      }

      const { data, error } = await query;
      if (error) throw error;

      console.log('✅ Pedidos carregados:', data); // Log para depuração
      setPedidos(data || []);
      setError(null);
    } catch (err) {
      console.error('Erro ao carregar pedidos do entregador:', err.message);
      setError('Falha ao carregar pedidos. Verifique o schema da tabela pedidos.');
    } finally {
      setIsLoading(false);
    }
  };

  // ==========================================================================
  // 4. ABRIR MODAL DE DETALHES
  // ==========================================================================
  const abrirModalDetalhes = (pedido) => {
    if (pedido) {
      setPedidoSelecionado(pedido);
      setModalAberto(true);
    }
  };

  // ==========================================================================
  // 5. USEEFFECT PARA CARREGAR PEDIDOS
  // ==========================================================================
  useEffect(() => {
    if (userProfile?.uid) carregarPedidos();
  }, [userProfile, filtroLoja, filtroStatus]);

  // ==========================================================================
  // 6. RENDERIZAÇÃO
  // ==========================================================================
  return (
    <div className="bg-gray-50 min-h-screen p-4">
      {/* Cabeçalho do entregador */}
      <div className="bg-white shadow-md rounded-lg p-4 mb-4 sticky top-4 z-10">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-xl font-bold text-purple-800">Meus Pedidos Entregues</h1>
            <p className="text-sm text-gray-600">
              Entregador: {userProfile.nome_completo || 'Não informado'}
            </p>
          </div>
        </div>

        {/* Filtros → Loja + Status */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todas Lojas</option>
            {lojas.map((loja) => (
              <option key={loja.id_loja} value={loja.id_loja}>
                {loja.loja_nome || `Loja ${loja.id_loja}`} {/* Fallback e desambiguação */}
              </option>
            ))}
          </select>

          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>
        {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
      </div>

      {/* Lista de pedidos (apenas visualização) */}
      <div className="container mx-auto px-2">
        {isLoading ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Carregando seus pedidos...</p>
          </div>
        ) : pedidos.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Nenhum pedido entregue encontrado.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {pedidos.map((pedido) => (
              <div key={pedido.id} className="bg-white rounded-lg shadow p-3">
                <button
                  onClick={() => abrirModalDetalhes(pedido)}
                  className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline w-full text-left"
                >
                  Pedido #{pedido.id_loja_woo}
                </button>
                <p className="text-sm font-semibold text-blue-800">{pedido.loja_nome}</p>
                <div className="mt-2 text-sm">
  <p>
    <strong>Data Entrega:</strong>{' '}
    {pedido.data ? new Date(pedido.data).toLocaleDateString('pt-BR') : '-'}
  </p>
  <p>
    <strong>Status Pagamento:</strong>{' '}
    {pedido.status_pagamento ? '✅ Pago' : '❌ Pendente'}
  </p>
  
  {/* FRETE OFERECIDO - ADICIONADO */}
  {pedido.frete_oferecido && (
    <p>
      <strong>Frete Oferecido:</strong> R${' '}
      {parseFloat(pedido.frete_oferecido).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
    </p>
  )}
  
  <p>
    <strong>Frete:</strong> R${' '}
    {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
  </p>
</div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modal de detalhes */}
      <OrderModal
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={() => setModalAberto(false)}
      >
        <WithCourier
          pedido={pedidoSelecionado}
          onClose={() => setModalAberto(false)}
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 14. components\PedidosEntreguesGerente.js
// =========================================

// ============================================================================
// IMPORTAÇÕES
// ============================================================================
import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '../lib/supabase';
import { OrderModal, WithCourier } from './OrderModal';
import { gerarRecibosPDF } from '../utils/pdfUtils';

// ============================================================================
// COMPONENTE: PEDIDOS ENTREGUES - GERENTE
// ============================================================================
/**
 * Versão exclusiva para GERENTES:
 * - Filtra pedidos apenas da loja do gerente.
 * - Pode visualizar, filtrar (entregador/status), atualizar pagamentos e gerar recibos.
 * - Não vê pedidos de outras lojas.
 */
export default function PedidosEntreguesGerente({ userProfile }) {
  // ==========================================================================
  // 1. ESTADOS DO COMPONENTE
  // ==========================================================================
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const [entregadores, setEntregadores] = useState([]);
  const [lojaInfo, setLojaInfo] = useState({ id_loja: null, loja_nome: null });
  const [error, setError] = useState(null); // Novo estado para erros

  // ==========================================================================
  // 2. CARREGAR LOJA DO GERENTE
  // ==========================================================================
  useEffect(() => {
    const carregarLojaGerente = async () => {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      try {
        const { data, error } = await supabase
          .from('loja_associada')
          .select('id_loja, loja_nome')
          .eq('uid_usuario', userProfile.uid)
          .eq('funcao', 'gerente')
          .single(); // Gerente tem apenas uma loja

        if (error) throw error;
        if (!data) {
          setError('Usuário sem loja associada como gerente.');
          return;
        }

        setLojaInfo({ id_loja: data.id_loja, loja_nome: data.loja_nome });
      } catch (err) {
        console.error('Erro ao carregar loja do gerente:', err.message);
        setError('Falha ao carregar loja associada.');
      }
    };

    carregarLojaGerente();
  }, [userProfile]);

  // ==========================================================================
  // 3. CARREGAR ENTREGADORES DA LOJA DO GERENTE
  // ==========================================================================
  useEffect(() => {
    const carregarEntregadores = async () => {
      if (!lojaInfo.id_loja) return;

      try {
        const { data, error } = await supabase
          .from('loja_associada')
          .select('nome_completo, uid_usuario')
          .eq('funcao', 'entregador')
          .eq('id_loja', lojaInfo.id_loja)
          .order('nome_completo');

        if (error) throw error;
        setEntregadores(data.map(u => u.nome_completo).filter(Boolean) || []);
      } catch (error) {
        console.error('Erro ao carregar entregadores:', error.message);
        setError('Falha ao carregar entregadores.');
      }
    };

    carregarEntregadores();
  }, [lojaInfo]);

  // ==========================================================================
  // 4. CARREGAR PEDIDOS DA LOJA DO GERENTE
  // ==========================================================================
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      if (!lojaInfo.id_loja) {
        setError('Usuário sem loja associada.');
        return;
      }

      let query = supabase
        .from('pedidos')
        .select('*')
        .eq('status_transporte', 'entregue')
        .eq('id_loja', lojaInfo.id_loja); // Filtro essencial

      if (filtroEntregador) {
        query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      }
      if (filtroStatus) {
        query = query.eq('status_pagamento', filtroStatus === 'true');
      }

      const { data, error } = await query;
      if (error) throw error;

      setPedidos(data || []);
      setError(null);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
      setError('Falha ao carregar pedidos.');
    } finally {
      setIsLoading(false);
    }
  };

  // ==========================================================================
  // 5. CALCULAR TOTAIS DOS PEDIDOS SELECIONADOS
  // ==========================================================================
  const calcularTotais = useCallback(() => {
    const total = Array.from(pedidosSelecionados).reduce((sum, id) => {
      const pedido = pedidos.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, [pedidosSelecionados, pedidos]);

  // ==========================================================================
  // 6. ATUALIZAR PAGAMENTOS DOS PEDIDOS SELECIONADOS
  // ==========================================================================
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }

    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;

        const { error } = await supabase
          .from('pedidos')
          .update({
            status_pagamento: fretePago > 0,
            data_pagamento: dataPagamento,
            frete_pago: fretePago, // Persistir frete atualizado
          })
          .eq('id', id);

        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pagamentos atualizados com sucesso!');
      carregarPedidos(); // Recarregar para refletir mudanças
      setPedidosSelecionados(new Set());
      setDataPagamento('');
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ==========================================================================
  // 7. MANIPULAR SELEÇÃO DE PEDIDOS
  // ==========================================================================
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) newSet.add(pedidoId);
    else newSet.delete(pedidoId);
    setPedidosSelecionados(newSet);
  };

  // ==========================================================================
  // 8. ATUALIZAR VALOR DO FRETE (LOCAL E BANCO)
  // ==========================================================================
  const handleAtualizarFrete = async (pedidoId, novoValor) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ frete_pago: novoValor })
        .eq('id', pedidoId);
      if (error) throw error;

      setPedidos(prevPedidos =>
        prevPedidos.map(p => p.id === pedidoId ? { ...p, frete_pago: novoValor } : p)
      );
    } catch (err) {
      console.error('Erro ao atualizar frete:', err.message);
      setError('Falha ao atualizar frete.');
    }
  };

  // ==========================================================================
  // 9. ABRIR MODAL DE DETALHES
  // ==========================================================================
  const abrirModalDetalhes = (pedido) => {
    if (pedido) {
      setPedidoSelecionado(pedido);
      setModalAberto(true);
    }
  };

  // ==========================================================================
  // 10. USEEFFECTS → carregar pedidos e recalcular totais
  // ==========================================================================
  useEffect(() => {
    if (lojaInfo.id_loja) carregarPedidos();
  }, [lojaInfo, filtroEntregador, filtroStatus]);

  useEffect(() => {
    calcularTotais();
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ==========================================================================
  // 11. FORMATAR DATA PARA EXIBIÇÃO
  // ==========================================================================
  const formatarDataParaExibicao = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return 'Data inválida';
    }
  };

  // ==========================================================================
  // 12. RENDERIZAÇÃO
  // ==========================================================================
  return (
    <div className="bg-gray-50 min-h-screen p-4">
      {/* Modal de Detalhes */}
      <OrderModal
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={() => setModalAberto(false)}
      >
        <WithCourier
          pedido={pedidoSelecionado}
          onClose={() => setModalAberto(false)}
        />
      </OrderModal>

      {/* Cabeçalho com nome da loja */}
      <div className="bg-white shadow-md rounded-lg p-4 mb-4 sticky top-4 z-10">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
            <p className="text-sm text-gray-600">
              Loja: {lojaInfo.loja_nome || lojaInfo.id_loja || 'Não definida'}
            </p>
          </div>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">
              {pedidosSelecionados.size} selecionados
            </span>
            <span className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
            </span>
          </div>
        </div>

        {/* Filtros: entregador e status */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Entregadores</option>
            {entregadores.map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>

          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data + botões de ação */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded"
          />
          <button
            onClick={atualizarPedidos}
            className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700"
            disabled={isLoading}
          >
            Atualizar
          </button>
          <button
            onClick={() => gerarRecibosPDF(pedidosSelecionados, pedidos, lojaInfo.id_loja)} // Passar id_loja para filtrar
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
            disabled={isLoading || pedidosSelecionados.size === 0}
          >
            Recibo
          </button>
        </div>
        {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        {isLoading ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Carregando pedidos...</p>
          </div>
        ) : pedidos.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Nenhum pedido encontrado para esta loja.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="h-4 w-4 text-purple-600 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 text-sm">
                  <p><strong>Entregador:</strong> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><strong>Pago em:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p>
                    <strong>Pagamento:</strong>{' '}
                    {pedido.status_pagamento ? '✅ Pago' : '❌ Pendente'}
                  </p>
                  <p className="flex items-center">
                    <strong>Frete Pago: R$</strong>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500"
                      disabled={isLoading}
                    />
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


// =========================================
// 15. components\RouteGuard.js
// =========================================

// components/RouteGuard.js
import { useUserProfile } from '../hooks/useUserProfile';
import { useRouter } from 'next/router';
import { useEffect } from 'react';

const RouteGuard = ({ children, requiredRole }) => {
  const { userRole, loading } = useUserProfile();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      // Definir hierarquia de permissões
      const rolesHierarchy = {
        'visitante': 0,
        'entregador': 1,
        'gerente': 2,
        'admin': 3
      };

      // Verificar se usuário tem permissão
      const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];
      
      if (!hasPermission) {
        // Redirecionar para página não autorizada ou home
        router.push('/');
      }
    }
  }, [userRole, loading, requiredRole, router]);

  // Mostrar loading enquanto verifica permissões
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Verificação final (caso o useEffect não tenha redirecionado ainda)
  const rolesHierarchy = {
    'visitante': 0,
    'entregador': 1,
    'gerente': 2,
    'admin': 3
  };
  
  const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];

  if (!hasPermission) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600">Acesso Não Autorizado</h1>
          <p className="text-gray-600 mt-2">Você não tem permissão para acessar esta página.</p>
        </div>
      </div>
    );
  }

  return children;
};

export default RouteGuard;


// =========================================
// 16. components\Sidebar.js
// =========================================

// components/Sidebar.js
import { useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import UserProfile from './UserProfile';

// ==============================================================================
// COMPONENTE SIDEBAR - MENU LATERAL
// ==============================================================================
/**
 * Sidebar é o menu de navegação lateral do sistema.
 * Contém: Logo, Menu de navegação, Perfil do usuário e Botão de login/logout.
 * Responsivo: Mobile (overlay) e Desktop (fixo).
 * Integra com useUserProfile para gerenciar autenticação e visibilidade de menus.
 */
const Sidebar = ({ isOpen, toggleSidebar }) => {
  const router = useRouter();
  const { user, userRole, userLojas, loading: loadingUser } = useUserProfile();
  
  // ============================================================================
  // 1. DEFINIÇÃO DOS ITENS DO MENU (INDIVIDUAIS)
  // ============================================================================
  /**
   * Definimos cada item separadamente para facilitar a montagem condicional.
   * Cada item tem: path (rota), icon (emoji), label (texto).
   */
  const homeItem = { path: '/', icon: '🏠', label: 'Home' };
  const perfilItem = { path: '/perfil', icon: '👤', label: 'Meu Perfil' };
  const pendentesItem = { path: '/pedidos-pendentes', icon: '📋', label: 'Pedidos Pendentes' };
  const aceitosItem = { path: '/pedidos-aceitos', icon: '✅', label: 'Pedidos Aceitos' };
  const entreguesItem = { path: '/pedidos-entregues', icon: '🚚', label: 'Pedidos Entregues' };
  const gestaoItem = { path: '/gestao-entregadores', icon: '👥', label: 'Gestão de Entregadores' };
  const todosItem = { path: '/todos-pedidos', icon: '📊', label: 'Todos os Pedidos' };
  const relatoriosItem = { path: '/relatorios', icon: '📈', label: 'Relatórios' };
  const adminItem = { path: '/admin', icon: '⚙️', label: 'Administração' };

  // ============================================================================
  // 2. MONTAGEM CONDICIONAL DOS ITENS DO MENU (CORRIGIDA)
  // ============================================================================
  /**
   * Constrói a lista de menuItems dinamicamente com base no user e userRole.
   * - Sempre inclui 'Home'.
   * - Para logados: Adiciona 'Meu Perfil'.
   * - Para 'entregador': Adiciona menus de pedidos pendentes e aceitos.
   * - Para 'entregador', 'gerente' e 'admin': Adiciona pedidos entregues.
   * - Para associados à loja (userLojas.length > 0) ou admin: Adiciona 'Relatórios'.
   * - Para 'gerente' ou 'admin': Adiciona gestão e todos os pedidos.
   * - Para 'admin': Adiciona administração.
   * 
   * ✅ CORREÇÃO: Pedidos Pendentes e Aceitos são APENAS para entregadores.
   */
  let menuItems = [homeItem]; // Sempre visível (até para não logados)

  if (user) { // Apenas para usuários logados
    menuItems.push(perfilItem);

    // --------------------------------------------------------------------------
    // BLOCO A: ITENS DE PEDIDOS PENDENTES E ACEITOS (APENAS ENTREGADORES)
    // --------------------------------------------------------------------------
    if (userRole === 'entregador') {
      menuItems.push(pendentesItem, aceitosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO B: ITENS DE PEDIDOS ENTREGUES (ENTREGADORES, GERENTES E ADMIN)
    // --------------------------------------------------------------------------
    if (['entregador', 'gerente', 'admin'].includes(userRole)) {
      menuItems.push(entreguesItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO C: RELATÓRIOS (para quem está vinculado a loja ou admin)
    // --------------------------------------------------------------------------
    if (userLojas.length > 0 || userRole === 'admin') {
      menuItems.push(relatoriosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO D: GESTÃO E TODOS OS PEDIDOS (GERENTE E ADMIN)
    // --------------------------------------------------------------------------
    if (['gerente', 'admin'].includes(userRole)) {
      menuItems.push(gestaoItem, todosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO E: ADMINISTRAÇÃO (APENAS ADMIN)
    // --------------------------------------------------------------------------
    if (userRole === 'admin') {
      menuItems.push(adminItem);
    }
  }

  // ============================================================================
  // 3. FUNÇÃO: LOGOUT DO USUÁRIO
  // ============================================================================
  /**
   * Realiza o logout do usuário via Supabase.
   * O useUserProfile lida com a atualização dos estados e redirecionamento.
   */
  const handleLogout = async () => {
    try {
      // Fechar sidebar no mobile antes do logout
      if (window.innerWidth < 1024) {
        toggleSidebar();
      }
      
      // Realizar logout
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      console.log('Logout realizado com sucesso');
    } catch (error) {
      console.error('Erro ao fazer logout:', error);
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: REDIRECIONAR PARA LOGIN
  // ============================================================================
  /**
   * Redireciona para a página de login quando o usuário não está autenticado.
   */
  const handleLoginRedirect = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
    router.push('/login');
  };

  // ============================================================================
  // 5. FUNÇÃO: FECHAR SIDEBAR AO CLICAR EM ITEM (MOBILE)
  // ============================================================================
  /**
   * Fecha o sidebar no mobile quando um item de menu é clicado.
   */
  const handleMenuItemClick = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <>
      {/* Overlay para mobile */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={toggleSidebar}
        />
      )}
      
      {/* Sidebar principal */}
      <div className={`
        fixed lg:static inset-y-0 left-0 z-50
        w-64 bg-purple-800 text-white
        transform transition-transform duration-300 ease-in-out
        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}
        flex flex-col h-full
      `}>
        {/* Logo / Marca do sistema */}
        <div className="p-6 border-b border-purple-700">
          <Link href="/" passHref onClick={handleMenuItemClick}>
            <div className="cursor-pointer">
              <h1 className="text-2xl font-bold">EntregasWoo</h1>
              <p className="text-purple-300 text-sm">Sistema de Gestão</p>
            </div>
          </Link>
        </div>

        {/* Menu de navegação */}
        <nav className="flex-1 p-4 overflow-y-auto">
          {menuItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`flex items-center py-3 px-4 rounded-lg mb-2 transition-colors
                ${router.pathname === item.path
                  ? 'bg-purple-900 text-white shadow-md'
                  : 'hover:bg-purple-700 text-purple-200'
                }`}
              onClick={handleMenuItemClick}
            >
              <span className="text-xl mr-3">{item.icon}</span>
              <span className="font-medium">{item.label}</span>
            </Link>
          ))}
        </nav>

        {/* Perfil do usuário (condicional) */}
        {user && (
          <div className="p-4 border-t border-purple-700 bg-purple-900">
            <UserProfile />
          </div>
        )}

        {/* Botão dinâmico: Entrar/Sair */}
        <div className="p-4 border-t border-purple-700">
          {user ? (
            <button
              onClick={handleLogout}
              className="w-full flex items-center justify-center py-2 px-4 bg-purple-700 hover:bg-purple-600 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              Sair
            </button>
          ) : (
            <button
              onClick={handleLoginRedirect}
              className="w-full flex items-center justify-center py-2 px-4 bg-green-600 hover:bg-green-500 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l-4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
              </svg>
              Entrar
            </button>
          )}
        </div>
      </div>
    </>
  );
};

export default Sidebar;


// =========================================
// 17. components\UserProfile.js
// =========================================

// components/UserProfile.js (VERSÃO SIMPLIFICADA)
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// COMPONENTE: PERFIL DO USUÁRIO (VERSÃO SIMPLIFICADA)
// ==============================================================================
/**
 * Componente de perfil simplificado para sidebar, exibindo informações básicas
 * (foto, nome, email, função e status) sem opções de edição.
 * Utiliza hook useUserProfile para dados e suporta modo mobile.
 * Aprimoramentos: Acessibilidade, feedback de erro e design responsivo.
 */
const UserProfile = ({ isMobile = false }) => {
  // ============================================================================
  // 1. OBTENÇÃO DE DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Usa o hook useUserProfile para obter perfil, função e estado de carregamento.
   * Desestruturação para acessar os valores retornados.
   */
  const { userProfile, userRole, loading, error } = useUserProfile();

  // ============================================================================
  // 2. ESTADO DE CARREGAMENTO
  // ============================================================================
  /**
   * Exibe um placeholder animado durante o carregamento dos dados.
   * Design aprimorado com múltiplos elementos para simular conteúdo.
   */
  if (loading) {
    return (
      <div
        className="p-4 border-t"
        role="status"
        aria-label="Carregando perfil do usuário"
      >
        <div className="animate-pulse space-y-2">
          <div className="h-4 bg-purple-700 rounded w-3/4 mb-2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/3 mt-2"></div>
        </div>
      </div>
    );
  }

  // ============================================================================
  // 3. TRATAMENTO DE ERRO
  // ============================================================================
  /**
   * Exibe uma mensagem de erro se a busca de perfil falhar.
   * Permite ao usuário tentar novamente ou entrar em contato com suporte.
   */
  if (error) {
    return (
      <div
        className="p-4 border-t"
        role="alert"
        aria-label="Erro ao carregar perfil"
      >
        <p className="text-sm text-red-300">Erro ao carregar perfil.</p>
        <p className="text-xs text-red-400">Tente novamente ou contate o suporte.</p>
      </div>
    );
  }

  // ============================================================================
  // 4. USUÁRIO NÃO AUTENTICADO
  // ============================================================================
  /**
   * Exibe mensagem para visitantes não autenticados, incentivando login.
   */
  if (!userProfile) {
    return (
      <div
        className="p-4 border-t"
        role="region"
        aria-label="Status de visitante"
      >
        <p className="text-sm text-purple-300">Visitante</p>
        <p className="text-xs text-purple-400">Faça login para acessar</p>
      </div>
    );
  }

  // ============================================================================
  // 5. RENDERIZAÇÃO SIMPLIFICADA
  // ============================================================================
  /**
   * Exibe informações do usuário autenticado com foto, nome, email, função e status.
   * Ajustes para responsividade em modo mobile e acessibilidade.
   */
  return (
    <div
      className={`p-4 border-t ${isMobile ? 'text-sm' : 'text-base'}`}
      role="region"
      aria-label="Perfil do usuário"
    >
      {/* INFORMAÇÕES BÁSICAS DO USUÁRIO */}
      <div className="space-y-2">
        {/* NOME E EMAIL */}
        <div className="flex items-center">
          {userProfile.foto && (
            <img
              src={userProfile.foto}
              alt={`${userProfile.nome_completo || userProfile.nome_usuario} foto de perfil`}
              className="w-8 h-8 rounded-full mr-3 border-2 border-purple-600"
              loading="lazy" // Otimização de carregamento
            />
          )}
          <div className="flex-1 min-w-0">
            <p
              className="text-sm font-semibold text-white truncate"
              title={userProfile.nome_completo || userProfile.nome_usuario}
            >
              {userProfile.nome_completo || userProfile.nome_usuario}
            </p>
            <p
              className="text-xs text-purple-300 truncate"
              title={userProfile.email}
            >
              {userProfile.email}
            </p>
          </div>
        </div>

        {/* FUNÇÃO/ROLE (APENAS TEXTO) */}
        <div className="bg-purple-700 rounded p-1">
          <p
            className="text-xs text-center text-white"
            role="status"
            aria-label={`Função: ${userRole}`}
          >
            {userRole === 'admin' && '👑 Admin'}
            {userRole === 'gerente' && '💼 Gerente'}
            {userRole === 'entregador' && '🚚 Entregador'}
            {userRole === 'visitante' && '👤 Visitante'}
          </p>
        </div>

        {/* STATUS DE CONEXÃO (SIMPLES) */}
        <div
          className="flex items-center justify-between text-xs text-purple-400"
          role="status"
          aria-label="Status de conexão"
        >
          <span>🟢 Conectado</span>
        </div>
      </div>
    </div>
  );
};

export default UserProfile;


// =========================================
// 1. hooks\useFirebaseNotifications.js
// =========================================

// hooks/useFirebaseNotifications.js
import { useState, useEffect } from 'react';
import { messaging, requestForToken, onMessageListener } from '../lib/firebase';
import { supabase } from '../lib/supabase';

// ==============================================================================
// HOOK PERSONALIZADO PARA GERENCIAR NOTIFICAÇÕES DO FIREBASE
// ==============================================================================
/**
 * Hook para gerenciar notificações push do Firebase
 * 
 * @param {string} userId - ID do usuário autenticado (opcional)
 * @returns {Object} - Token e notificação atual
 */
export const useFirebaseNotifications = (userId) => {
  // ============================================================================
  // 1. ESTADOS DO HOOK
  // ============================================================================
  const [token, setToken] = useState(null);
  const [notification, setNotification] = useState(null);

  // ============================================================================
  // 2. EFFECT: SOLICITAR PERMISSÃO E OBTER TOKEN
  // ============================================================================
  useEffect(() => {
    if (userId && typeof window !== 'undefined' && 'serviceWorker' in navigator) {
      const getToken = async () => {
        try {
          const currentToken = await requestForToken();
          if (currentToken) {
            setToken(currentToken);
            
            console.log('✅ Token FCM obtido:', currentToken);
            
            // Salvar token no Supabase
            const { error } = await supabase
              .from('user_tokens')
              .upsert({
                user_id: userId,
                token: currentToken,
                updated_at: new Date().toISOString()
              }, {
                onConflict: 'user_id,token'
              });
            
            if (error) {
              console.error('❌ Erro ao salvar token:', error);
            } else {
              console.log('✅ Token salvo no Supabase com sucesso!');
            }
          }
        } catch (error) {
          console.error('❌ Erro ao obter token:', error);
        }
      };

      getToken();
    }
  }, [userId]);

  // ============================================================================
  // 3. EFFECT: ESCUTAR MENSAGENS EM FOREGROUND
  // ============================================================================
  useEffect(() => {
    if (typeof window !== 'undefined') {
      onMessageListener()
        .then((payload) => {
          console.log('📩 Mensagem em foreground recebida:', payload);
          setNotification(payload);
        })
        .catch((error) => console.log('❌ Erro no listener: ', error));
    }
  }, []);

  // ============================================================================
  // 4. RETORNO DO HOOK
  // ============================================================================
  return { token, notification };
};


// =========================================
// 2. hooks\useOrders.js
// =========================================

 import { notifyNewOrder, notifyOrderStatusChange } from '../utils/notificationSender';

// Quando um novo pedido é criado
const handleNewOrder = (order) => {
  // Notificar entregadores da loja
  notifyNewOrder(entregadorId, order.id, order.loja_nome);
};

// Quando o status de um pedido muda
const updateOrderStatus = async (orderId, newStatus) => {
  // Sua lógica existente...
  
  // Notificar envolvidos
  if (newStatus === 'aceito') {
    // Notificar gerente que pedido foi aceito
    notifyOrderStatusChange(gerenteId, orderId, newStatus, order.nome_cliente);
  } else if (newStatus === 'entregue') {
    // Notificar gerente que pedido foi entregue
    notifyOrderStatusChange(gerenteId, orderId, newStatus, order.nome_cliente);
  }
};



// =========================================
// 3. hooks\useRealtimePedidos.js
// =========================================

// hooks/useRealtimePedidos.js
import { useEffect } from 'react';
import { supabase } from '../lib/supabase';

export const useRealtimePedidos = (callback) => {
  useEffect(() => {
    const subscription = supabase
      .channel('pedidos-realtime')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'pedidos' 
        }, 
        (payload) => {
          callback(payload);
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, [callback]);
};

// Como usar em uma página:
const [pedidos, setPedidos] = useState([]);

useRealtimePedidos((payload) => {
  // Atualizar a lista de pedidos em tempo real
  if (payload.eventType === 'INSERT') {
    setPedidos(prev => [payload.new, ...prev]);
  } else if (payload.eventType === 'UPDATE') {
    setPedidos(prev => prev.map(p => 
      p.id === payload.new.id ? payload.new : p
    ));
  } else if (payload.eventType === 'DELETE') {
    setPedidos(prev => prev.filter(p => p.id !== payload.old.id));
  }
});


// =========================================
// 4. hooks\useUserProfile.js
// =========================================

// src/hooks/useUserProfile.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// 1. HOOK PERSONALIZADO: useUserProfile
// ==============================================================================
/**
 * Hook para gerenciar dados do usuário autenticado com sistema de permissões baseado em:
 * 1. ✅ Tabela 'usuarios': Campo 'is_admin' (boolean) - Define administradores do sistema
 * 2. ✅ Tabela 'loja_associada': Campo 'funcao' (string) - Define gerentes e entregadores
 * 
 * Fluxo de decisão de permissões:
 * 1. Se is_admin = true → Administrador (acesso completo)
 * 2. Se tem registro em loja_associada com funcao = 'gerente' → Gerente (acesso à loja)
 * 3. Se tem registro em loja_associada com funcao = 'entregador' → Entregador (acesso limitado)
 * 4. Se não atende nenhum critério → Visitante (acesso mínimo)
 */
export const useUserProfile = () => {
  // ============================================================================
  // 2. ESTADOS DO HOOK
  // ============================================================================
  const [user, setUser] = useState(null); // Dados do Supabase Auth
  const [userProfile, setUserProfile] = useState(null); // Dados da tabela 'usuarios'
  const [userRole, setUserRole] = useState('visitante'); // Função: 'admin', 'gerente', 'entregador', 'visitante'
  const [userLojas, setUserLojas] = useState([]); // Lojas associadas da tabela 'loja_associada'
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [error, setError] = useState(null); // Mensagens de erro
  const [updating, setUpdating] = useState(false); // Estado de atualização
  const [isInitialized, setIsInitialized] = useState(false); // Novo estado para verificar inicialização do Supabase

  // ============================================================================
  // 3. FUNÇÃO AUXILIAR: ESPERAR INICIALIZAÇÃO DO SUPABASE
  // ============================================================================
  /**
   * Aguarda até que o Supabase esteja inicializado e a sessão esteja carregada
   */
  const waitForSupabase = async () => {
    try {
      console.log('⏳ Aguardando inicialização do Supabase...');
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        console.log('⚠️ Nenhuma sessão encontrada na inicialização');
        return null;
      }
      console.log('✅ Sessão inicial carregada');
      return session.user;
    } catch (error) {
      console.error('❌ Erro ao verificar sessão inicial:', error);
      return null;
    }
  };

  // ============================================================================
  // 4. FUNÇÃO PRINCIPAL: CARREGAR DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Carrega todos os dados do usuário de forma sequencial e determinística
   * Segue a hierarquia de permissões do sistema
   */
  const loadUserData = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('🔄 Iniciando carregamento de dados do usuário...');

      // 4.1. VERIFICAR INICIALIZAÇÃO DO SUPABASE
      if (!isInitialized) {
        console.log('⏳ Supabase ainda não inicializado, aguardando...');
        const initialUser = await waitForSupabase();
        if (!initialUser) {
          console.log('👤 Nenhum usuário autenticado na inicialização');
          resetToVisitor();
          return;
        }
        setUser(initialUser);
        setIsInitialized(true);
      }

      // 4.2. OBTER USUÁRIO AUTENTICADO
      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        console.error('❌ Erro de autenticação:', authError);
        setError('Falha na autenticação: ' + authError.message);
        resetToVisitor();
        return;
      }

      if (!authUser) {
        console.log('👤 Nenhum usuário autenticado');
        resetToVisitor();
        return;
      }

      setUser(authUser);
      console.log('✅ Usuário autenticado:', authUser.email);

      // 4.3. BUSCAR PERFIL NA TABELA 'usuarios'
      const { data: usuarioData, error: usuarioError } = await supabase
        .from('usuarios')
        .select('*')
        .eq('uid', authUser.id)
        .single();

      if (usuarioError) {
        console.error('❌ Erro ao buscar perfil:', usuarioError);
        setError('Perfil não encontrado: ' + usuarioError.message);
        resetToVisitor();
        return;
      }

      setUserProfile(usuarioData);
      console.log('✅ Perfil carregado:', usuarioData.nome_completo);

      // 4.4. VERIFICAÇÃO CRÍTICA: É ADMINISTRADOR?
      if (usuarioData.is_admin === true) {
        console.log('🎯 Usuário é ADMINISTRADOR (is_admin = true)');
        setUserRole('admin');
        setUserLojas([]); // Admin não precisa de lojas associadas
        setLoading(false);
        return;
      }

      // 4.5. BUSCAR LOJAS ASSOCIADAS NA TABELA 'loja_associada'
      const { data: lojasData, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', authUser.id)
        .eq('status_vinculacao', 'ativo');

      if (lojasError) {
        console.warn('⚠️ Erro ao buscar lojas associadas:', lojasError);
        setUserLojas([]);
        setUserRole('visitante');
        setLoading(false);
        return;
      }

      setUserLojas(lojasData || []);
      console.log('📊 Lojas associadas encontradas:', lojasData?.length || 0);

      // 4.6. DETERMINAR FUNÇÃO BASEADA NAS LOJAS ASSOCIADAS
      if (!lojasData || lojasData.length === 0) {
        console.log('👤 Usuário é VISITANTE (sem lojas associadas)');
        setUserRole('visitante');
      } else {
        const lojasComoGerente = lojasData.filter(loja => loja.funcao === 'gerente');
        
        if (lojasComoGerente.length > 0) {
          if (lojasComoGerente.length > 1) {
            console.error('❌ CONFLITO: Usuário é gerente em múltiplas lojas');
            setError('Configuração inválida: Gerente em múltiplas lojas');
            setUserRole('erro');
          } else {
            console.log('💼 Usuário é GERENTE da loja:', lojasComoGerente[0].id_loja);
            setUserRole('gerente');
          }
        } else {
          console.log('🚚 Usuário é ENTREGADOR em', lojasData.length, 'loja(s)');
          setUserRole('entregador');
        }
      }

    } catch (error) {
      console.error('💥 Erro inesperado no carregamento:', error);
      setError('Erro inesperado: ' + error.message);
      resetToVisitor();
    } finally {
      setLoading(false);
      console.log('✅ Carregamento finalizado. Função:', userRole);
    }
  };

  // ============================================================================
  // 5. FUNÇÃO AUXILIAR: RESETAR PARA VISITANTE
  // ============================================================================
  /**
   * Reinicia todos os estados para usuário visitante (não autenticado)
   * Usado em casos de erro ou logout
   */
  const resetToVisitor = () => {
    setUser(null);
    setUserProfile(null);
    setUserRole('visitante');
    setUserLojas([]);
    setLoading(false);
  };

  // ============================================================================
  // 6. EFFECT: INICIALIZAÇÃO E OBSERVADOR DE AUTENTICAÇÃO
  // ============================================================================
  /**
   * Executa o carregamento inicial e fica observando mudanças de autenticação
   * Atualiza automaticamente quando usuário faz login/logout
   */
  useEffect(() => {
    // Carregamento inicial com verificação de sessão
    const initialize = async () => {
      const initialUser = await waitForSupabase();
      if (initialUser) {
        setUser(initialUser);
        setIsInitialized(true);
        await loadUserData();
      } else {
        resetToVisitor();
        setIsInitialized(true);
      }
    };

    initialize();

    // Observar mudanças de estado de autenticação
    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('🔐 Evento de autenticação:', event);
        
        if (event === 'SIGNED_IN' && session?.user) {
          console.log('✅ Usuário logado:', session.user.email);
          setUser(session.user);
          await loadUserData();
        } else if (event === 'SIGNED_OUT') {
          console.log('👋 Usuário desconectado');
          resetToVisitor();
        }
      }
    );

    // Cleanup: Remover observador quando componente desmontar
    return () => {
      if (authListener?.subscription) {
        authListener.subscription.unsubscribe();
        console.log('🧹 Observador de autenticação removido');
      }
    };
  }, []);

  // ============================================================================
  // 7. FUNÇÃO: ATUALIZAR PERFIL DO USUÁRIO
  // ============================================================================
  /**
   * Atualiza dados do perfil na tabela 'usuarios'
   * ⚠️ Não permite alterar 'is_admin' via interface comum
   */
  const updateUserProfile = async (formData) => {
    try {
      setUpdating(true);
      setError(null);

      if (!userProfile?.uid) throw new Error('Perfil não carregado');
      if (!formData.nome_completo || !formData.telefone) {
        throw new Error('Nome completo e telefone são obrigatórios');
      }

      const updateData = {
        nome_completo: formData.nome_completo,
        nome_usuario: formData.nome_usuario || userProfile.nome_usuario,
        telefone: formData.telefone,
        foto: formData.foto || userProfile.foto
      };

      const { error: updateError } = await supabase
        .from('usuarios')
        .update(updateData)
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      setUserProfile(prev => ({ ...prev, ...updateData }));

      return { success: true, message: 'Perfil atualizado com sucesso!' };

    } catch (error) {
      const errorMsg = 'Erro ao atualizar: ' + error.message;
      setError(errorMsg);
      return { success: false, message: errorMsg };
    } finally {
      setUpdating(false);
    }
  };

  // ============================================================================
  // 8. FUNÇÃO: RECARREGAR DADOS
  // ============================================================================
  /**
   * Força recarregamento completo dos dados do usuário
   * Útil após atualizações externas ou para sincronização
   */
  const reloadUserData = async () => {
    console.log('🔄 Recarregando dados do usuário...');
    await loadUserData();
  };

  // ============================================================================
  // 9. RETORNO DO HOOK
  // ============================================================================
  /**
   * Expõe estados e funções para componentes consumidores
   */
  return {
    user,
    userProfile,
    userRole,
    userLojas,
    loading,
    error,
    updating,
    updateUserProfile,
    reloadUserData
  };
};


// =========================================
// 1. lib\firebase.js
// =========================================

// lib/firebase.js - VERSÃO CORRIGIDA
import { initializeApp } from "firebase/app";
import { getMessaging, getToken, onMessage, isSupported } from "firebase/messaging";

// Configuração do Firebase
const firebaseConfig = {
  apiKey: "AIzaSyCQbJZQ1RP2VJvQOqUTDp-rvxCSN_cf4ZQ",
  authDomain: "entregaswoonotificacoes.firebaseapp.com",
  projectId: "entregaswoonotificacoes",
  storageBucket: "entregaswoonotificacoes.firebasestorage.app",
  messagingSenderId: "185849507222",
  appId: "1:185849507222:web:02ecd0936086cc7a5dc1b7"
};

// Variáveis globais
let app = null;
let messaging = null;

// Só inicializa no navegador (evita erro no servidor)
if (typeof window !== 'undefined') {
  try {
    app = initializeApp(firebaseConfig);
    
    // Verifica se o navegador suporta Firebase Messaging
    isSupported().then(supported => {
      if (supported) {
        messaging = getMessaging(app);
        console.log('Firebase Messaging inicializado!');
      } else {
        console.log('Firebase Messaging não suportado neste navegador');
      }
    }).catch(error => {
      console.log('Erro ao verificar suporte:', error);
    });
    
  } catch (error) {
    console.log('Erro ao inicializar Firebase:', error);
  }
}

// Solicitar permissão para notificações
export const requestForToken = () => {
  return new Promise(async (resolve) => {
    if (typeof window === 'undefined' || !messaging) {
      console.log('Firebase não disponível');
      resolve(null);
      return;
    }

    try {
      const currentToken = await getToken(messaging, { 
        vapidKey: "BBI4OTlcRQahrvbbC_XGTak7Xae9Q9zVt5mCte7w-zuy2xVAmcNWqv2Fxt_rDmhKJggNdsyJ8P-9dMt3LImstxw"
      });
      
      if (currentToken) {
        console.log('Token atual para cliente: ', currentToken);
        resolve(currentToken);
      } else {
        console.log('Nenhum token de registro disponível.');
        resolve(null);
      }
    } catch (error) {
      console.log('Erro ao recuperar token: ', error);
      resolve(null);
    }
  });
};

// Listener para mensagens em foreground
export const onMessageListener = () => {
  return new Promise((resolve) => {
    if (!messaging) {
      resolve(null);
      return;
    }

    onMessage(messaging, (payload) => {
      resolve(payload);
    });
  });
};

export { messaging };
export default app;


// =========================================
// 2. lib\supabase.js
// =========================================

 import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase URL or Anon Key. Check .env.local');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);



// =========================================
// 3. lib\wooCommerce.js
// =========================================

 



// =========================================
// 1. pages\_app.js
// =========================================

// pages/_app.js (VERSÃO SUPER SIMPLES)
import '../styles/globals.css';
import Layout from '../components/Layout';

function MyApp({ Component, pageProps }) {
  // ✅ Use layout em TODAS as páginas por enquanto
  // Depois ajustamos as exceções
  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  );
}

export default MyApp;


// =========================================
// 2. pages\_document.js
// =========================================

 import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link rel="manifest" href="/manifest.json" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;



// =========================================
// 3. pages\admin.js
// =========================================

// pages/admin.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ==============================================================================
// PÁGINA DE ADMINISTRAÇÃO
// ==============================================================================
/**
 * Painel administrativo para gerenciamento do sistema
 * Acessível apenas para usuários com role 'admin'
 * 
 * IMPORTANTE: Esta página NÃO usa o Layout padrão (já é aplicado pelo _app.js)
 * Por isso NÃO devemos envolver com <Layout> aqui
 */
export default function Admin() {
  // ============================================================================
  // 1. ESTADOS E HOOKS
  // ============================================================================
  const { userRole, loading: userLoading } = useUserProfile();
  const [activeTab, setActiveTab] = useState('lojas');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  // Estados para dados das abas
  const [lojas, setLojas] = useState([]);
  const [usuariosPendentes, setUsuariosPendentes] = useState([]);
  const [associacoes, setAssociacoes] = useState([]);

  // ============================================================================
  // 2. EFFECT: CARREGAR DADOS COM BASE NA ABA ATIVA
  // ============================================================================
  useEffect(() => {
    if (activeTab === 'lojas') {
      loadLojas();
    } else if (activeTab === 'usuarios') {
      loadUsuariosPendentes();
    } else if (activeTab === 'associacoes') {
      loadAssociacoes();
    }
  }, [activeTab]);

// ============================================================================
// 3. FUNÇÕES: CARREGAMENTO DE DADOS
// ============================================================================
/**
 * Carrega lista de lojas cadastradas
 */
const loadLojas = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('lojas')
      .select('*')
      .order('loja_nome');
    
    if (error) throw error;
    setLojas(data || []);
  } catch (err) {
    setError('Erro ao carregar lojas: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Carrega usuários não vinculados a lojas (pendentes)
 */
const loadUsuariosPendentes = async () => {
  try {
    setLoading(true);
    // ✅ CORREÇÃO: Consulta mais simples para evitar erro de UUID
    const { data: usuariosAssociados, error: errorAssociados } = await supabase
      .from('loja_associada')
      .select('uid_usuario')
      .eq('status_vinculacao', 'ativo');

    if (errorAssociados) {
      throw new Error('Erro ao buscar usuários associados: ' + errorAssociados.message);
    }

    // Extrair apenas os UIDs
    const uidsAssociados = usuariosAssociados?.map(ua => ua.uid_usuario) || [];

    // Buscar usuários NÃO presentes na lista de associados
    let query = supabase
      .from('usuarios')
      .select('*');

    // Aplicar filtro apenas se houver usuários associados
    if (uidsAssociados.length > 0) {
      query = query.not('uid', 'in', `(${uidsAssociados.map(uid => `"${uid}"`).join(',')})`);
    }

    const { data, error } = await query;

    if (error) {
      throw new Error('Erro ao buscar usuários pendentes: ' + error.message);
    }

    setUsuariosPendentes(data || []);

  } catch (err) {
    setError('Erro ao carregar usuários: ' + err.message);
    console.error('Erro detalhado:', err);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// ✅ CORREÇÃO: FUNÇÃO loadAssociacoes ADICIONADA
// ============================================================================
/**
 * Carrega associações ativas entre usuários e lojas
 */
const loadAssociacoes = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        *,
        usuarios:uid_usuario(nome_completo, email),
        lojas:id_loja(loja_nome)
      `)
      .order('ultimo_status_vinculacao', { ascending: false });
    
    if (error) throw error;
    setAssociacoes(data || []);
  } catch (err) {
    setError('Erro ao carregar associações: ' + err.message);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// 4. FUNÇÕES: AÇÕES DO ADMIN
// ============================================================================
/**
 * Cria uma nova loja no sistema
 */
const handleCriarLoja = async (dadosLoja) => {
  try {
    setLoading(true);
    setError(null);
    
    const { error } = await supabase
      .from('lojas')
      .insert([{
        id_loja: dadosLoja.id_loja,
        loja_nome: dadosLoja.loja_nome,
        loja_endereco: dadosLoja.loja_endereco,
        loja_telefone: dadosLoja.loja_telefone,
        loja_perimetro_entrega: dadosLoja.loja_perimetro_entrega,
        cnpj: dadosLoja.cnpj,
        ativa: true
      }]);
    
    if (error) throw error;
    
    setSuccess('Loja criada com sucesso!');
    await loadLojas();
  } catch (err) {
    setError('Erro ao criar loja: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Associa um usuário como gerente de uma loja
 */
const handleAssociarGerente = async (usuarioId, lojaId) => {
  try {
    setLoading(true);
    setError(null);
    
    // Buscar dados do usuário e loja em paralelo
    const [{ data: usuario }, { data: loja }] = await Promise.all([
      supabase.from('usuarios').select('*').eq('uid', usuarioId).single(),
      supabase.from('lojas').select('*').eq('id_loja', lojaId).single()
    ]);
    
    if (!usuario || !loja) throw new Error('Usuário ou loja não encontrados');
    
    // Criar associação
    const { error } = await supabase
      .from('loja_associada')
      .insert([{
        uid_usuario: usuarioId,
        nome_completo: usuario.nome_completo,
        id_loja: lojaId,
        loja_nome: loja.loja_nome,
        loja_endereco: loja.loja_endereco,
        loja_telefone: loja.loja_telefone,
        funcao: 'gerente',
        status_vinculacao: 'ativo',
        ultimo_status_vinculacao: new Date().toISOString()
      }]);
    
    if (error) throw error;
    
    setSuccess('Gerente associado com sucesso!');
    await loadAssociacoes(); // ✅ Agora esta função existe
    await loadUsuariosPendentes();
  } catch (err) {
    setError('Erro ao associar gerente: ' + err.message);
  } finally {
    setLoading(false);
  }
};
  // ============================================================================
  // 5. VERIFICAÇÕES DE ACESSO E LOADING
  // ============================================================================
  if (userLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // ============================================================================
  // 6. RENDERIZAÇÃO PRINCIPAL
  // ============================================================================
  return (
    <RouteGuard requiredRole="admin">
      {/* ✅ REMOVIDO: <Layout> wrapper (já é aplicado pelo _app.js) */}
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Painel Administrativo</h1>
        
        {/* Mensagens de status */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            {success}
          </div>
        )}

        {/* Navegação por abas */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="flex space-x-8">
            {['lojas', 'usuarios', 'associacoes'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                {tab === 'lojas' && 'Lojas'}
                {tab === 'usuarios' && 'Usuários Pendentes'}
                {tab === 'associacoes' && 'Associações'}
              </button>
            ))}
          </nav>
        </div>

        {/* Conteúdo das abas */}
        <div className="mt-6">
          {/* Aba: Lojas */}
          {activeTab === 'lojas' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Gerenciar Lojas</h2>
              
              {/* Formulário de criação */}
              <div className="bg-white p-4 rounded-lg shadow-md mb-4">
                <h3 className="text-lg font-medium mb-3">Criar Nova Loja</h3>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target);
                  handleCriarLoja({
                    id_loja: formData.get('id_loja'),
                    loja_nome: formData.get('loja_nome'),
                    loja_endereco: formData.get('loja_endereco'),
                    loja_telefone: formData.get('loja_telefone'),
                    loja_perimetro_entrega: formData.get('loja_perimetro_entrega'),
                    cnpj: formData.get('cnpj')
                  });
                }}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                    <input name="id_loja" placeholder="ID da Loja (ex: L1)" required />
                    <input name="loja_nome" placeholder="Nome da Loja" required />
                    <input name="loja_endereco" placeholder="Endereço" />
                    <input name="loja_telefone" placeholder="Telefone" />
                    <input name="loja_perimetro_entrega" placeholder="Perímetro de Entrega" />
                    <input name="cnpj" placeholder="CNPJ" />
                  </div>
                  <button type="submit" disabled={loading}>
                    {loading ? 'Criando...' : 'Criar Loja'}
                  </button>
                </form>
              </div>

              {/* Listagem de lojas */}
              <div>
                <h3 className="text-lg font-medium mb-3">Lojas Cadastradas</h3>
                {loading ? (
                  <div className="text-center py-4">Carregando...</div>
                ) : (
                  <div className="grid gap-4">
                    {lojas.map(loja => (
                      <div key={loja.id} className="bg-white p-4 rounded-lg shadow-md">
                        <h4 className="font-semibold">{loja.loja_nome} ({loja.id_loja})</h4>
                        <p className="text-gray-600">{loja.loja_endereco}</p>
                        <p className="text-gray-600">{loja.loja_telefone}</p>
                        <p className="text-gray-600">Perímetro: {loja.loja_perimetro_entrega}</p>
                        <span className={`inline-block px-2 py-1 rounded text-xs ${
                          loja.ativa ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {loja.ativa ? 'Ativa' : 'Inativa'}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Aba: Usuários Pendentes */}
          {activeTab === 'usuarios' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Usuários Pendentes</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {usuariosPendentes.map(usuario => (
                    <div key={usuario.uid} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{usuario.nome_completo}</h4>
                      <p className="text-gray-600">{usuario.email}</p>
                      <p className="text-gray-600">{usuario.telefone}</p>
                      <button
                        onClick={() => {
                          const lojaId = prompt('Digite o ID da loja para associar (ex: L1):');
                          if (lojaId) handleAssociarGerente(usuario.uid, lojaId);
                        }}
                        className="bg-green-500 text-white px-3 py-1 rounded text-sm mt-2"
                      >
                        Associar como Gerente
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Aba: Associações */}
          {activeTab === 'associacoes' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Associações Ativas</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {associacoes.map(associacao => (
                    <div key={associacao.id} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{associacao.nome_completo}</h4>
                      <p className="text-gray-600">Função: {associacao.funcao}</p>
                      <p className="text-gray-600">Loja: {associacao.loja_nome}</p>
                      <p className="text-gray-600">Status: {associacao.status_vinculacao}</p>
                      <p className="text-gray-600 text-sm">
                        Última atualização: {new Date(associacao.ultimo_status_vinculacao).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}

// ==============================================================================
// MARCAÇÃO: ESTA PÁGINA NÃO USA LAYOUT PADRÃO (já é aplicado pelo _app.js)
// ==============================================================================



// =========================================
// 4. pages\atualizar-senha.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import Link from 'next/link';

export default function AtualizarSenha() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [session, setSession] = useState(null);
  const router = useRouter();

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
    });

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    return () => subscription.unsubscribe();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    if (password !== confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }

    if (password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) throw error;

      setSuccess('Senha atualizada com sucesso!');
      
      setTimeout(() => {
        router.push('/login');
      }, 2000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  if (!session) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 flex items-center justify-center">
        <div className="bg-white p-8 rounded-2xl shadow-2xl text-center">
          <p className="text-red-600 mb-4">Link inválido ou expirado</p>
          <Link href="/recuperar-senha" className="text-purple-600 hover:text-purple-800">
            Solicitar novo link
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">Nova Senha</h2>
          <p className="text-purple-200 mt-2">Digite sua nova senha</p>
        </div>

        {/* Card de Atualização */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Atualizar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Campo Nova Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                Nova Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Mínimo 6 caracteres"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            {/* Campo Confirmar Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                Confirmar Nova Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Digite novamente a senha"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Atualizando...' : 'Atualizar Senha'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
AtualizarSenha.noLayout = true;


// =========================================
// 5. pages\cadastro.js
// =========================================

// pages/cadastro.js
import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE CADASTRO COM NOME E TELEFONE
// ==============================================================================
/**
 * Inclui campos para nome completo e telefone, essenciais para credenciamento de motoristas.
 * Exibe mensagem sobre confirmação de email após cadastro.
 * Redireciona para /login após sucesso para tentativa de login.
 * Aprendizado: Integre mensagens de suporte ao fluxo de autenticação do Supabase.
 */
export default function Cadastro() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE (BLOCO DE ESTADOS)
  // ============================================================================
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    nome_completo: '',
    telefone: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. FUNÇÃO: ATUALIZAÇÃO DOS CAMPOS (BLOCO DE FUNÇÃO)
  // ============================================================================
  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  // ============================================================================
  // 3. FUNÇÃO: SUBMISSÃO DO CADASTRO (BLOCO DE FUNÇÃO ASSÍNCRONA)
  // ============================================================================
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    // 3.1. VALIDAÇÕES
    if (formData.password !== formData.confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }
    if (formData.password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }
    if (!formData.nome_completo.trim()) {
      setError('O nome completo é obrigatório');
      setLoading(false);
      return;
    }
    if (!formData.telefone.trim()) {
      setError('O telefone é obrigatório');
      setLoading(false);
      return;
    }

    try {
      // 3.2. CRIAÇÃO NO AUTH
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
        options: {
          data: {
            nome_completo: formData.nome_completo,
            telefone: formData.telefone
          }
        }
      });

      if (authError) throw authError;

      // 3.3. INSERÇÃO NA TABELA USUÁRIOS
      const { error: userError } = await supabase
        .from('usuarios')
        .insert({
          uid: authData.user.id,
          email: formData.email,
          nome_usuario: formData.email,
          nome_completo: formData.nome_completo,
          telefone: formData.telefone,
          foto: '',
          is_admin: false
        });

      if (userError) throw userError;

      // 3.4. SUCESSO E REDIRECIONAMENTO
      setSuccess('Cadastro realizado! Verifique seu email e clique no link de confirmação para fazer login.');
      setTimeout(() => {
        router.push('/login');
      }, 2000);
    } catch (error) {
      console.error('Erro detalhado:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO COMPONENTE (BLOCO DE JSX)
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 4.1. SEÇÃO VISUAL: LOGO E TÍTULO */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Criar Nova Conta</p>
        </div>

        {/* 4.2. CARD PRINCIPAL: CONTAINER DE CADASTRO */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Cadastro
          </h3>

          {/* 4.2.1. EXIBIÇÃO DE ERRO OU SUCESSO */}
          {error && <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">{error}</div>}
          {success && <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">{success}</div>}

          {/* 4.2.2. FORMULÁRIO COM NOME E TELEFONE */}
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="nome_completo" className="block text-sm font-medium text-gray-700">
                Nome Completo
              </label>
              <input
                id="nome_completo"
                name="nome_completo"
                type="text"
                value={formData.nome_completo}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="Seu nome completo"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="telefone" className="block text-sm font-medium text-gray-700">
                Telefone
              </label>
              <input
                id="telefone"
                name="telefone"
                type="tel"
                value={formData.telefone}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="(11) 99999-9999"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
                disabled={loading}
              />
            </div>

            <div className="relative">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  value={formData.password}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Mínimo 6 caracteres"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={loading}
                >
                  {showPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <div className="relative">
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirmar Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Digite novamente sua senha"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  disabled={loading}
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Criando conta...' : 'Criar Conta'}
            </button>
          </form>

          {/* 4.2.3. LINK PARA LOGIN */}
          <div className="mt-6 text-center">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Já tem uma conta? Faça login
            </Link>
          </div>
        </div>

        {/* 4.3. SEÇÃO DE RODAPÉ */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2025 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
Cadastro.noLayout = true;


// =========================================
// 6. pages\gestao-entregadores.js
// =========================================

// pages/gestao-entregadores.js (VERSÃO MELHORADA)
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// PÁGINA: GESTÃO DE ENTREGADORES
// ==============================================================================
export default function GestaoEntregadores() {
  const [entregadores, setEntregadores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [buscaEmail, setBuscaEmail] = useState('');
  const [usuarioEncontrado, setUsuarioEncontrado] = useState(null);
  const [buscando, setBuscando] = useState(false);

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 1. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 2. CARREGAR ENTREGADORES DA LOJA (COM MAIS CAMPOS)
  // ============================================================================
  useEffect(() => {
    if (userRole === 'gerente' || userRole === 'admin') {
      carregarEntregadores();
    }
  }, [userRole]);

  const carregarEntregadores = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('loja_associada')
        .select('*');

      // Gerente só vê pessoas da sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      // Filtrar apenas entregadores e gerentes
      const pessoasLoja = data.filter(pessoa => 
        pessoa.funcao === 'entregador' || pessoa.funcao === 'gerente'
      );
      
      setEntregadores(pessoasLoja || []);
    } catch (error) {
      console.error('Erro ao carregar pessoas da loja:', error);
      alert('Erro ao carregar lista de pessoas');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 3. BUSCAR USUÁRIO POR EMAIL NO SISTEMA (COM MAIS DETALHES)
  // ============================================================================
  const buscarUsuarioPorEmail = async () => {
    if (!buscaEmail.trim()) {
      alert('Por favor, digite um email para buscar');
      return;
    }
    
    try {
      setBuscando(true);
      
      // Buscar usuário na tabela usuarios pelo email
      const { data: usuario, error: usuarioError } = await supabase
        .from('usuarios')
        .select('uid, email, nome_completo, telefone, foto')
        .eq('email', buscaEmail.trim())
        .single();

      if (usuarioError) {
        if (usuarioError.code === 'PGRST116') {
          setUsuarioEncontrado(null);
          alert('Usuário não encontrado no sistema');
        } else {
          throw usuarioError;
        }
        return;
      }

      // Buscar TODOS os detalhes das lojas associadas a este usuário
      const { data: lojasAssociadas, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', usuario.uid);

      if (lojasError) throw lojasError;

      // Combinar dados do usuário com suas lojas
      setUsuarioEncontrado({
        ...usuario,
        lojasAssociadas: lojasAssociadas || []
      });

    } catch (error) {
      console.error('Erro ao buscar usuário:', error);
      alert('Erro ao buscar usuário. Verifique o console.');
      setUsuarioEncontrado(null);
    } finally {
      setBuscando(false);
    }
  };

  // ============================================================================
  // 4. VINCULAR USUÁRIO COMO ENTREGADOR
  // ============================================================================
  const vincularComoEntregador = async (usuario) => {
    if (!confirm(`Vincular ${usuario.nome_completo} como entregador nesta loja?`)) return;
    
    try {
      if (userRole === 'gerente' && (!userLojas || userLojas.length === 0)) {
        alert('Erro: Gerente não está vinculado a nenhuma loja');
        return;
      }

      const lojaId = userRole === 'gerente' ? userLojas[0].id_loja : prompt('Digite o ID da loja (admin):');
      const lojaNome = userRole === 'gerente' ? userLojas[0].loja_nome : prompt('Digite o nome da loja (admin):');

      if (!lojaId || !lojaNome) return;

      // Verificar se usuário já está vinculado a esta loja
      const { data: vinculoExistente } = await supabase
        .from('loja_associada')
        .select('id')
        .eq('uid_usuario', usuario.uid)
        .eq('id_loja', lojaId)
        .single();

      if (vinculoExistente) {
        alert('Este usuário já está vinculado a esta loja');
        return;
      }

      // Vincular usuário como entregador
      const { error } = await supabase
        .from('loja_associada')
        .insert({
          uid_usuario: usuario.uid,
          nome_completo: usuario.nome_completo,
          email_usuario: usuario.email, // ✅ NOVO CAMPO
          funcao: 'entregador',
          id_loja: lojaId,
          loja_nome: lojaNome,
          status_vinculacao: 'ativo',
          veiculo: 'Não informado',
          carga_maxima: 0,
          perimetro_entrega: 'Não definido',
          ultimo_status_vinculacao: new Date().toISOString()
        });

      if (error) throw error;

      alert('✅ Entregador vinculado com sucesso!');
      setBuscaEmail('');
      setUsuarioEncontrado(null);
      carregarEntregadores();
    } catch (error) {
      console.error('Erro ao vincular entregador:', error);
      alert('❌ Erro ao vincular entregador');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: FORMATAR VALOR NULO
  // ============================================================================
  const formatarValor = (valor) => {
    return valor || 'Não informado';
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  if (userRole !== 'admin' && userRole !== 'gerente') {
    return <div className="min-h-screen flex items-center justify-center">Acesso não autorizado</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">👥 Gestão de Entregadores</h1>

      {/* BUSCA POR EMAIL */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Buscar Usuário no Sistema</h2>
        <div className="flex gap-2 mb-4">
          <input
            type="email"
            placeholder="Digite o email do usuário"
            value={buscaEmail}
            onChange={(e) => setBuscaEmail(e.target.value)}
            className="flex-1 p-2 border border-gray-300 rounded"
            onKeyPress={(e) => e.key === 'Enter' && buscarUsuarioPorEmail()}
          />
          <button
            onClick={buscarUsuarioPorEmail}
            disabled={buscando}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
          >
            {buscando ? 'Buscando...' : 'Buscar'}
          </button>
        </div>

        {/* RESULTADO DA BUSCA - COM MAIS DETALHES */}
        {usuarioEncontrado && (
          <div className="mt-4 p-4 border border-green-200 bg-green-50 rounded">
            <h3 className="font-semibold text-green-800 mb-3">👤 Usuário encontrado:</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
              <div>
                <p><strong>Nome:</strong> {usuarioEncontrado.nome_completo}</p>
                <p><strong>Email:</strong> {usuarioEncontrado.email}</p>
                {usuarioEncontrado.telefone && (
                  <p><strong>Telefone:</strong> {usuarioEncontrado.telefone}</p>
                )}
              </div>
              
              {usuarioEncontrado.foto && (
                <div className="flex justify-center">
                  <img 
                    src={usuarioEncontrado.foto} 
                    alt="Foto do usuário"
                    className="w-16 h-16 rounded-full"
                  />
                </div>
              )}
            </div>

            <div className="mt-3">
              <strong>🏪 Lojas Associadas:</strong>
              {usuarioEncontrado.lojasAssociadas.length > 0 ? (
                <div className="ml-4 mt-2 space-y-2">
                  {usuarioEncontrado.lojasAssociadas.map((loja, index) => (
                    <div key={index} className="p-2 bg-white rounded border">
                      <p><strong>Loja:</strong> {loja.loja_nome} ({loja.id_loja})</p>
                      <p><strong>Função:</strong> 
                        <span className={`ml-1 ${
                          loja.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                        }`}>
                          {loja.funcao}
                        </span>
                      </p>
                      <p><strong>Status:</strong> 
                        <span className={`ml-1 ${
                          loja.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {loja.status_vinculacao}
                        </span>
                      </p>
                      {loja.veiculo && <p><strong>🚗 Veículo:</strong> {formatarValor(loja.veiculo)}</p>}
                      {loja.carga_maxima > 0 && <p><strong>📦 Carga Máxima:</strong> {loja.carga_maxima} kg</p>}
                      {loja.perimetro_entrega && <p><strong>📍 Perímetro:</strong> {formatarValor(loja.perimetro_entrega)}</p>}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-600 ml-4">Nenhuma loja associada</p>
              )}
            </div>

            <button
              onClick={() => vincularComoEntregador(usuarioEncontrado)}
              className="mt-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
            >
              ➕ Vincular como Entregador
            </button>
          </div>
        )}
      </div>

      {/* LISTA DE PESSOAS DA LOJA - COM MAIS DETALHES */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4">
          {userRole === 'gerente' ? '👥 Pessoas da Minha Loja' : '👥 Pessoas do Sistema'}
        </h2>
        
        {loading ? (
          <p className="text-gray-500">Carregando...</p>
        ) : entregadores.length === 0 ? (
          <p className="text-gray-500">Nenhuma pessoa encontrada</p>
        ) : (
          <div className="grid gap-4">
            {entregadores.map((pessoa) => (
              <div key={pessoa.id} className="border p-4 rounded-lg bg-gray-50">
                <h3 className="font-semibold text-lg text-purple-800">
                  {pessoa.funcao === 'gerente' ? '👑 ' : '🚚 '}
                  {pessoa.nome_completo}
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-2">
                  <div>
                    <p><strong>📧 Email:</strong> {pessoa.email_usuario}</p>
                    <p><strong>🎯 Função:</strong> 
                      <span className={`ml-1 ${
                        pessoa.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                      }`}>
                        {pessoa.funcao}
                      </span>
                    </p>
                    <p><strong>📊 Status:</strong> 
                      <span className={`ml-1 ${
                        pessoa.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {pessoa.status_vinculacao}
                      </span>
                    </p>
                  </div>
                  
<div>
  <p><strong>🏪 Loja:</strong> {pessoa.loja_nome} ({pessoa.id_loja})</p>
  
  {/* MOSTRAR CAMPOS DE ENTREGA APENAS PARA ENTREGADORES */}
  {pessoa.funcao === 'entregador' && (
    <>
      <p><strong>🚗 Veículo:</strong> {formatarValor(pessoa.veiculo)}</p>
      {pessoa.carga_maxima > 0 && (
        <p><strong>📦 Carga Máx:</strong> {pessoa.carga_maxima} kg</p>
      )}
      {pessoa.perimetro_entrega && (
        <p><strong>📍 Perímetro:</strong> {formatarValor(pessoa.perimetro_entrega)}</p>
      )}
    </>
  )}

  {/* MOSTRAR MENSAGEM ESPECIAL PARA GERENTES */}
  {pessoa.funcao === 'gerente' && (
    <p className="text-green-600 text-sm mt-1">
      👑 Gerente da loja
    </p>
  )}
</div>
                </div>
                
                {pessoa.data_desligamento && (
                  <p className="text-red-600 text-sm mt-2">
                    <strong>🗓️ Data desligamento:</strong> {new Date(pessoa.data_desligamento).toLocaleDateString('pt-BR')}
                  </p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


// =========================================
// 7. pages\index.js
// =========================================

// Importação de dependências necessárias do Next.js e React
import Head from 'next/head';
import Link from 'next/link';
import { useEffect } from 'react';

// Componente principal da página inicial
export default function HomePage() {
  // Hook useEffect para configurar a navegação suave
  useEffect(() => {
    // Seleção de todos os links internos que começam com '#'
    const anchors = document.querySelectorAll('a[href^="#"]');

    // Função para lidar com o clique em links internos
    const handleAnchorClick = (e) => {
      e.preventDefault();
      const targetId = e.currentTarget.getAttribute('href');

      // Verifica se o link não é apenas '#'
      if (targetId === '#') return;

      // Encontra o elemento alvo pelo ID
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        // Realiza a rolagem suave com offset para compensar o cabeçalho
        window.scrollTo({
          top: targetElement.offsetTop - 80, // Ajuste de 80px para o cabeçalho
          behavior: 'smooth'
        });
      }
    };

    // Adiciona event listeners para todos os links internos
    anchors.forEach(anchor => {
      anchor.addEventListener('click', handleAnchorClick);
    });

    // Cleanup: remove os event listeners quando o componente é desmontado
    return () => {
      anchors.forEach(anchor => {
        anchor.removeEventListener('click', handleAnchorClick);
      });
    };
  }, []);

  return (
    <>
      {/* Configuração do cabeçalho HTML com título e importação de Font Awesome */}
      <Head>
        <title>VendasWoo + EntregasWoo - Sistema Completo para E-commerce e Entregas</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
      </Head>

      {/* Cabeçalho da página com apenas o título */}
      <header>
        <div className="container">
          <div className="header-content">
            <div className="logo">
              <h1>VendasWoo <span>+ EntregasWoo</span></h1>
            </div>
          </div>
        </div>
      </header>

      {/* Seção Hero com chamada principal */}
      <section className="hero">
        <div className="container">
          <h2>Sistema Completo para E-commerce e Entregas</h2>
          <p>Conectamos lojas a entregadores locais para simplificar e agilizar as entregas na sua região.</p>
          <div className="hero-buttons">
            <Link href="#para-lojas" className="btn">Sou Lojista</Link>
            <Link href="#para-entregadores" className="btn btn-accent">Sou Entregador</Link>
            <a href="https://wa.me/552132727548" className="btn btn-outline" target="_blank" rel="noopener noreferrer">Fale no WhatsApp</a>
          </div>
        </div>
      </section>

      {/* Seção Como Funciona com passos para entregadores e lojas */}
      <section className="how-it-works" id="como-funciona">
        <div className="container">
          <div className="section-title">
            <h2>Como Funciona</h2>
            <p>Dois sistemas integrados para atender lojas e entregadores</p>
          </div>
          
          <div className="dual-steps">
            <div className="steps-container">
              <h3 className="steps-title">Para Entregadores</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Cadastro Simplificado</h4>
                  <p>Faça seu cadastro como motorista autônomo MEI com documentação em ordem.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Defina sua Área de Atuação</h4>
                  <p>Informe seu veículo, capacidade de carga e o perímetro onde quer trabalhar.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Conexão com Lojas</h4>
                  <p>Conectamos você às empresas que precisam de entregas na sua região.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Combine Preços e Área</h4>
                  <p>Negocie diretamente com as lojas os valores e detalhes do serviço.</p>
                </div>
              </div>
            </div>
            
            <div className="steps-container">
              <h3 className="steps-title">Para Lojas</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Plataforma Completa</h4>
                  <p>Tenha seu e-commerce com catálogo de produtos, atualização de preços fácil e múltiplas formas de pagamento.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Integração Total</h4>
                  <p>Receba pedidos pelo app, computador e WhatsApp integrados em um único sistema.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Gestão Completa</h4>
                  <p>Controle de estoque, relatórios, emissão de recibos e muito mais.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Entregas Terceirizadas</h4>
                  <p>Use o EntregasWoo para conectar-se a entregadores de bairro e terceirizar suas entregas.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Seção Para Lojas com benefícios */}
      <section id="para-lojas" className="benefits">
        <div className="container">
          <div className="section-title">
            <h2>Para Lojas e Empresas</h2>
            <p>Sistema completo para vendas online e gestão de entregas</p>
          </div>
          <ul className="benefits-list">
            <li>Plataforma online para apresentar seus produtos de forma profissional</li>
            <li>Atualização de preços fácil e intuitiva</li>
            <li>Múltiplas formas de pagamento integradas (PIX, cartão, etc)</li>
            <li>Recebimento de pedidos por app, computador e WhatsApp</li>
            <li>Controle de estoque em tempo real</li>
            <li>Relatórios detalhados de vendas e desempenho</li>
            <li>Emissão de recibos e comprovantes</li>
            <li>App EntregasWoo para terceirizar entregas para motoristas de bairro</li>
            <li>Gestão integrada de pedidos e entregas em um único sistema</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de saber mais sobre o sistema para lojas" className="btn">Quero saber mais</a>
          </div>
        </div>
      </section>

      {/* Seção Para Entregadores com benefícios */}
      <section id="para-entregadores" className="benefits" style={{backgroundColor: 'var(--light-gray)'}}>
        <div className="container">
          <div className="section-title">
            <h2>Para Entregadores</h2>
            <p>Conecte-se com lojas da sua região e aumente sua renda</p>
          </div>
          <ul className="benefits-list">
            <li>Cadastro gratuito para motoristas MEI com documentação regular</li>
            <li>Defina o tipo de veículo, capacidade de carga e área de atuação</li>
            <li>Escolha o perímetro onde quer trabalhar (bairros, regiões)</li>
            <li>Conexão direta com empresas que precisam de entregas na sua área</li>
            <li>Negociação direta de preços e condições de serviço</li>
            <li>Flexibilidade de horários - trabalhe quando quiser</li>
            <li>App simples para gerenciar corridas e ganhos</li>
            <li>Pagamentos rápidos e transparentes</li>
            <li>Construa sua reputação com avaliações das lojas</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de me cadastrar como entregador" className="btn btn-accent">Quero me cadastrar</a>
          </div>
        </div>
      </section>

      {/* Seção de Chamada para Ação (CTA) */}
      <section className="cta">
        <div className="container">
          <h2>Pronto para transformar seu negócio ou aumentar sua renda?</h2>
          <p>Entre em contato e faça um teste grátis dos nossos sistemas</p>
          <a href="https://wa.me/552132727548" className="btn" target="_blank" rel="noopener noreferrer">Fale conosco no WhatsApp</a>
        </div>
      </section>

      {/* Rodapé com links rápidos e informações de contato */}
      <footer id="contato">
        <div className="container">
          <div className="footer-content">
            <div className="footer-column">
              <h3>VendasWoo + EntregasWoo</h3>
              <p>Sistema integrado de e-commerce e gestão de entregas</p>
            </div>
            <div className="footer-column">
              <h3>Links Rápidos</h3>
              <ul>
                <li><Link href="#como-funciona">Como Funciona</Link></li>
                <li><Link href="#para-lojas">Para Lojas</Link></li>
                <li><Link href="#para-entregadores">Para Entregadores</Link></li>
                <li><a href="https://pedidossimples.com.br/vendaswoo/" target="_blank" rel="noopener noreferrer">VendasWoo</a></li>
              </ul>
            </div>
            <div className="footer-column">
              <h3>Contato</h3>
              <ul>
                <li>Email: comercial@abistec.com.br</li>
                <li>WhatsApp: (21) 3272-7548</li>
                <li>Site: <a href="https://pedidossimples.com.br">pedidossimples.com.br</a></li>
              </ul>
            </div>
          </div>
          <div className="copyright">
            <p>&copy; 2023 VendasWoo + EntregasWoo - Abistec Serviços Tecnológicos Ltda</p>
          </div>
        </div>
      </footer>

      {/* Estilos globais usando styled-jsx */}
      <style jsx global>{`
        :root {
          --primary: #3b7b2b;
          --secondary: #5c3b27;
          --accent: #f39c12;
          --light: #fdfaf6;
          --dark: #333;
          --gray: #777;
          --light-gray: #f5f5f5;
        }
        
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
          background-color: var(--light);
          color: var(--dark);
          line-height: 1.6;
        }
        
        .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0 20px;
        }
        
        /* Estilos do Cabeçalho */
        header {
          background-color: white;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          /* Removido o comportamento sticky para fluir com a rolagem */
        }
        
        .header-content {
          display: flex;
          justify-content: center;
          align-items: center;
          padding: 15px 0;
        }
        
        .logo {
          display: flex;
          align-items: center;
        }
        
        .logo h1 {
          color: var(--primary);
          font-size: 1.8rem;
          font-weight: bold;
        }
        
        .logo span {
          color: var(--secondary);
        }
        
        nav ul {
          display: flex;
          list-style: none;
        }
        
        nav li {
          margin-left: 25px;
        }
        
        nav a {
          text-decoration: none;
          color: var(--dark);
          font-weight: 500;
          transition: color 0.3s;
        }
        
        nav a:hover {
          color: var(--primary);
        }
        
        .btn {
          display: inline-block;
          padding: 12px 25px;
          background-color: var(--primary);
          color: white;
          border-radius: 5px;
          text-decoration: none;
          font-weight: 600;
          transition: all 0.3s;
          border: none;
          cursor: pointer;
        }
        
        .btn:hover {
          background-color: #2c5e20;
          transform: translateY(-2px);
        }
        
        .btn-outline {
          background-color: transparent;
          border: 2px solid var(--primary);
          color: var(--primary);
        }
        
        .btn-outline:hover {
          background-color: var(--primary);
          color: white;
        }
        
        .btn-accent {
          background-color: var(--accent);
        }
        
        .btn-accent:hover {
          background-color: #e67e22;
        }
        
        /* Estilos da Seção Hero */
        .hero {
          padding: 80px 0;
          background: linear-gradient(135deg, rgba(59,123,43,0.1) 0%, rgba(92,59,39,0.1) 100%);
          text-align: center;
        }
        
        .hero h2 {
          font-size: 2.5rem;
          margin-bottom: 20px;
          color: var(--secondary);
        }
        
        .hero p {
          font-size: 1.2rem;
          max-width: 800px;
          margin: 0 auto 30px;
          color: var(--gray);
        }
        
        .hero-buttons {
          display: flex;
          justify-content: center;
          gap: 15px;
          margin-top: 30px;
          flex-wrap: wrap;
        }
        
        /* Estilos da Seção Como Funciona */
        .how-it-works {
          padding: 80px 0;
          background-color: var(--light-gray);
        }
        
        .section-title {
          text-align: center;
          margin-bottom: 50px;
        }
        
        .section-title h2 {
          font-size: 2rem;
          color: var(--secondary);
          margin-bottom: 15px;
        }
        
        .section-title p {
          color: var(--gray);
          max-width: 700px;
          margin: 0 auto;
        }
        
        .dual-steps {
          display: flex;
          justify-content: space-between;
          flex-wrap: wrap;
          gap: 40px;
        }
        
        .steps-container {
          flex: 1;
          min-width: 300px;
          background: white;
          border-radius: 10px;
          padding: 30px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        .steps-title {
          text-align: center;
          margin-bottom: 30px;
          color: var(--primary);
          font-size: 1.5rem;
        }
        
        .step {
          display: flex;
          margin-bottom: 25px;
          align-items: flex-start;
        }
        
        .step-number {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background-color: var(--primary);
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          margin-right: 15px;
          flex-shrink: 0;
        }
        
        .step-content {
          flex: 1;
        }
        
        /* Estilos da Seção Benefícios */
        .benefits {
          padding: 80px 0;
          background-color: white;
        }
        
        .benefits-list {
          list-style: none;
          max-width: 800px;
          margin: 0 auto;
        }
        
        .benefits-list li {
          padding: 15px 0;
          border-bottom: 1px solid #eee;
          display: flex;
          align-items: center;
        }
        
        .benefits-list li:before {
          content: "✓";
          color: var(--primary);
          font-weight: bold;
          margin-right: 10px;
          font-size: 1.2rem;
        }
        
        /* Estilos da Seção CTA */
        .cta {
          padding: 80px 0;
          background: linear-gradient(135deg, var(--primary) 0%, #2c5e20 100%);
          color: white;
          text-align: center;
        }
        
        .cta h2 {
          font-size: 2.2rem;
          margin-bottom: 20px;
        }
        
        .cta p {
          max-width: 700px;
          margin: 0 auto 30px;
          font-size: 1.1rem;
        }
        
        .cta .btn {
          background-color: white;
          color: var(--primary);
        }
        
        .cta .btn:hover {
          background-color: #f0f0f0;
        }
        
        /* Estilos do Rodapé */
        footer {
          background-color: var(--secondary);
          color: white;
          padding: 50px 0 20px;
        }
        
        .footer-content {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 30px;
          margin-bottom: 30px;
        }
        
        .footer-column h3 {
          margin-bottom: 20px;
          font-size: 1.2rem;
        }
        
        .footer-column ul {
          list-style: none;
        }
        
        .footer-column li {
          margin-bottom: 10px;
        }
        
        .footer-column a {
          color: #ddd;
          text-decoration: none;
          transition: color 0.3s;
        }
        
        .footer-column a:hover {
          color: white;
        }
        
        .copyright {
          text-align: center;
          padding-top: 20px;
          border-top: 1px solid rgba(255,255,255,0.1);
          font-size: 0.9rem;
          color: #ddd;
        }
        
        /* Estilos Responsivos */
        @media (max-width: 768px) {
          .header-content {
            flex-direction: column;
          }
          
          .hero h2 {
            font-size: 2rem;
          }
          
          .hero-buttons {
            flex-direction: column;
            align-items: center;
          }
          
          .dual-steps {
            flex-direction: column;
          }
        }
      `}</style>
    </>
  );
}


// =========================================
// 8. pages\login.js
// =========================================

// pages/login.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE LOGIN
// ==============================================================================
/**
 * Página de login com suporte a autenticação via Google OAuth e email/senha.
 * Inclui modal controlado, redirecionamento baseado em perfil (admin, gerente, entregador)
 * e links para cadastro e recuperação de senha.
 * Aprimoramentos: Validação de formulário, acessibilidade e feedback visual.
 */
export default function Login() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [email, setEmail] = useState('');              // Email do usuário
  const [password, setPassword] = useState('');        // Senha do usuário
  const [loading, setLoading] = useState(false);       // Estado de carregamento
  const [error, setError] = useState('');              // Mensagens de erro
  const [showPassword, setShowPassword] = useState(false); // Visibilidade da senha
  const [isModalOpen, setIsModalOpen] = useState(false);  // Controle do modal
  const [formValid, setFormValid] = useState(false);    // Validação do formulário
  const router = useRouter();

  // ============================================================================
  // 2. EFFECT: VALIDAR FORMULÁRIO EM TEMPO REAL
  // ============================================================================
  /**
   * Valida email e senha em tempo real, atualizando o estado de validade.
   * Requisitos: Email válido e senha com no mínimo 6 caracteres.
   */
  useEffect(() => {
    const emailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    const passwordValid = password.length >= 6;
    setFormValid(emailValid && passwordValid);
  }, [email, password]);

  // ============================================================================
  // 3. FUNÇÃO: TRADUZIR ERROS TÉCNICOS PARA MENSAGENS AMIGÁVEIS
  // ============================================================================
  /**
   * Converte erros técnicos do Supabase em mensagens amigáveis para o usuário
   */
  const translateError = (error) => {
    if (error.message.includes('Invalid login credentials')) {
      return 'E-mail ou senha incorretos. Verifique suas credenciais.';
    } else if (error.message.includes('Email not confirmed')) {
      return 'E-mail não confirmado. Verifique sua caixa de entrada.';
    } else if (error.message.includes('User not found')) {
      return 'Usuário não encontrado. Verifique o e-mail ou crie uma conta.';
    } else if (error.message.includes('Network error')) {
      return 'Erro de conexão. Verifique sua internet e tente novamente.';
    } else if (error.message.includes('Too many requests')) {
      return 'Muitas tentativas. Tente novamente em alguns minutos.';
    } else {
      return 'Erro ao fazer login. Tente novamente.';
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: LOGIN COM EMAIL/SENHA
  // ============================================================================
  /**
   * Autentica o usuário com email/senha e redireciona com base no perfil.
   * Inclui validação prévia e tratamento de erros detalhado.
   */
  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    if (!formValid) {
      setError('Por favor, insira um email válido e uma senha com pelo menos 6 caracteres.');
      setLoading(false);
      return;
    }

    try {
      // 4.1. AUTENTICAÇÃO COM SUPABASE
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      
      if (authError) {
        throw authError;
      }

      // 4.2. VERIFICAÇÃO DE PERFIL E REDIRECIONAMENTO
      const { data: usuario, error: userError } = await supabase
        .from('usuarios')
        .select('is_admin')
        .eq('uid', authData.user.id)
        .single();
      
      if (userError) throw userError;

      if (usuario.is_admin) {
        router.push('/admin');
        return;
      }

      const { data: associacoes, error: assocError } = await supabase
        .from('loja_associada')
        .select('funcao')
        .eq('uid_usuario', authData.user.id)
        .eq('status_vinculacao', 'ativo');
      
      if (assocError) throw new Error('Erro ao verificar permissões: ' + assocError.message);

      if (!associacoes || associacoes.length === 0) {
        setError('Você não possui acesso ativo. Contate o administrador.');
        await supabase.auth.signOut(); // Desconta usuário sem acesso
        return;
      }

      const primeiraAssociacao = associacoes[0];
      switch (primeiraAssociacao.funcao) {
        case 'gerente':
          router.push('/todos-pedidos');
          break;
        case 'entregador':
          router.push('/pedidos-pendentes');
          break;
        default:
          throw new Error('Função não reconhecida.');
      }
    } catch (error) {
      // 4.3. TRATAMENTO DE ERROS AMIGÁVEL
      setError(translateError(error));
      console.error('Erro no login:', error);
    } finally {
      // 4.4. FINALIZAÇÃO
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: LOGIN COM GOOGLE
  // ============================================================================
  /**
   * Inicia o fluxo de login com Google OAuth, redirecionando para completar perfil.
   * Inclui tratamento de erros e feedback visual.
   */
  const handleGoogleLogin = async () => {
    try {
      setLoading(true);
      setError('');
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/perfil`,
        },
      });
      if (error) throw error;
    } catch (error) {
      setError(translateError(error));
      console.error('Erro no login Google:', error);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 6.1. SEÇÃO VISUAL: LOGO E TÍTULO */}
        <div className="text-center mb-8">
          <div
            className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center"
            role="img"
            aria-label="Ícone de entrega"
          >
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h1 className="text-3xl font-bold text-white">EntregasWoo</h1>
          <p className="text-purple-200 mt-2">Sistema de Gestão de Entregas</p>
        </div>

        {/* 6.2. CARD PRINCIPAL: CONTAINER DE LOGIN */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h2 className="text-2xl font-bold text-gray-800 text-center mb-6" id="login-title">
            Acessar Sistema
          </h2>

          {/* 6.2.1. EXIBIÇÃO DE ERRO */}
          {error && (
            <div
              className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4 flex items-start"
              role="alert"
            >
              <svg className="w-5 h-5 mr-2 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>{error}</span>
            </div>
          )}

          {/* 6.2.2. BOTÃO DE LOGIN GOOGLE */}
          <button
            onClick={handleGoogleLogin}
            disabled={loading}
            className="w-full flex items-center justify-center py-3 px-4 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Login com Google"
          >
            {loading ? (
              <span className="flex items-center">
                <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Carregando...
              </span>
            ) : (
              <>
                <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Entrar com Google
              </>
            )}
          </button>

          {/* 6.2.3. ABRE MODAL PARA LOGIN EMAIL/SENHA */}
          <div className="mt-4 text-center">
            <button
              onClick={() => setIsModalOpen(true)}
              className="text-purple-600 hover:text-purple-800 font-medium"
              aria-controls="email-login-modal"
            >
              Ou entre com email e senha
            </button>
          </div>

          {/* 6.2.4. MODAL DE LOGIN EMAIL/SENHA */}
          {isModalOpen && (
            <div
              className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
              role="dialog"
              aria-labelledby="email-login-modal-title"
              aria-modal="true"
              onClick={() => setIsModalOpen(false)}
            >
              <div 
                className="bg-white rounded-2xl shadow-2xl p-6 w-full max-w-md"
                onClick={(e) => e.stopPropagation()}
              >
                <div className="flex justify-between items-center mb-4">
                  <h3
                    id="email-login-modal-title"
                    className="text-xl font-bold text-gray-800"
                  >
                    Login com Email
                  </h3>
                  <button
                    onClick={() => setIsModalOpen(false)}
                    className="text-gray-500 hover:text-gray-700"
                    aria-label="Fechar modal"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                <form onSubmit={handleLogin} className="space-y-4">
                  <div>
                    <label
                      htmlFor="email-input"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Email
                    </label>
                    <input
                      id="email-input"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      required
                      disabled={loading}
                      aria-required="true"
                      placeholder="seu@email.com"
                    />
                  </div>
                  
                  <div className="relative">
                    <label
                      htmlFor="password-input"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Senha
                    </label>
                    <input
                      id="password-input"
                      type={showPassword ? "text" : "password"}
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      required
                      disabled={loading}
                      aria-required="true"
                      placeholder="Sua senha"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute right-3 top-9 text-gray-500"
                      disabled={loading}
                      aria-label={showPassword ? "Ocultar senha" : "Mostrar senha"}
                    >
                      {showPassword ? (
                        <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                        </svg>
                      ) : (
                        <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                        </svg>
                      )}
                    </button>
                  </div>
                  
                  <button
                    type="submit"
                    disabled={loading || !formValid}
                    className="w-full bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {loading ? (
                      <span className="flex items-center justify-center">
                        <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Entrando...
                      </span>
                    ) : (
                      'Entrar'
                    )}
                  </button>
                </form>
                
                <div className="mt-4 text-center">
                  <Link
                    href="/recuperar-senha"
                    className="text-purple-600 hover:text-purple-800 text-sm"
                    onClick={() => setIsModalOpen(false)}
                  >
                    Esqueceu sua senha?
                  </Link>
                </div>
              </div>
            </div>
          )}

          {/* 6.2.5. LINKS EXTRAS */}
          <div className="mt-6 text-center space-y-3">
            <p className="text-gray-600 text-sm">
              Não tem uma conta?{' '}
              <Link
                href="/cadastro"
                className="text-purple-600 hover:text-purple-800 font-medium"
              >
                Criar nova conta
              </Link>
            </p>
          </div>
        </div>

        {/* 6.3. SEÇÃO DE RODAPÉ */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2025 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 9. pages\orders.js
// =========================================

import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const { data, error } = await supabase.from('pedidos').select('*');
        if (error) throw error;
        setOrders(data || []);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

  if (loading) return <p>Carregando pedidos...</p>;
  if (error) return <p>Erro: {error}</p>;

  return (
    <div>
      <h1>Lista de Pedidos</h1>
      {orders.length === 0 ? (
        <p>Nenhum pedido encontrado.</p>
      ) : (
        <ul>
          {orders.map((order) => (
            <li key={order.id} style={{ marginBottom: '10px' }}>
              <strong>Pedido #{order.id_woo}</strong> - Cliente: {order.nome_cliente} - 
              Total: R${order.total} - Status: {order.status_transporte || 'Pendente'}
              <button
                onClick={() => handleAcceptOrder(order.id)}
                style={{ marginLeft: '10px', padding: '5px 10px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '3px' }}
                disabled={order.status_transporte === 'Entregue'}
              >
                Aceitar
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );

  async function handleAcceptOrder(orderId) {
    const { error } = await supabase
      .from('pedidos')
      .update({ status_transporte: 'Aceito' })
      .eq('id', orderId);
    if (error) {
      setError(`Erro ao aceitar pedido: ${error.message}`);
    } else {
      setOrders(orders.map(order =>
        order.id === orderId ? { ...order, status_transporte: 'Aceito' } : order
      ));
    }
  }
}


// =========================================
// 10. pages\pedidos-aceitos.js
// =========================================

// pages/pedidos-aceitos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { filterPedidosPorUsuario } from '../utils/filterPedidos';
import { OrderModal, WithCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS ACEITOS
// ==============================================================================
export default function PedidosAceitos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]); // Todos os pedidos do banco
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [loadingAcoes, setLoadingAcoes] = useState(false); // Loading para ações
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null); // Pedido para modal
  const [modalAberto, setModalAberto] = useState(false); // Controle do modal
  
  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getPedidosAceitos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS ACEITOS/EM ROTA
  // ============================================================================
  const getPedidosAceitos = async () => {
    try {
      setLoading(true);
      
      // Busca TODOS os pedidos com status aceito ou em rota
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aceito', 'em rota'])
        .order('data', { ascending: false });

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. FILTRAR PEDIDOS POR USUÁRIO
  // ============================================================================
  const pedidosFiltrados = filterPedidosPorUsuario(
    todosPedidos,
    userRole, 
    userLojas
  );

  // ============================================================================
  // 6. FUNÇÕES DE AÇÃO: SAIR PARA ENTREGA / ENTREGAR / CANCELAR
  // ============================================================================
  const handleSairEntrega = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'em rota' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Atualiza lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, status_transporte: 'em rota' } : p
      ));
      
    } catch (error) {
      console.error('Erro ao atualizar status:', error);
      alert('Erro ao sair para entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleEntregar = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'entregue' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista (pedido entregue vai para outra página)
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Pedido marcado como entregue com sucesso!');
      
    } catch (error) {
      console.error('Erro ao entregar pedido:', error);
      alert('Erro ao marcar como entregue.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleCancelar = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja cancelar esta entrega?')) return;
    
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'cancelado' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Entrega cancelada com sucesso.');
      
    } catch (error) {
      console.error('Erro ao cancelar pedido:', error);
      alert('Erro ao cancelar entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  // ============================================================================
  // 7. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 8. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Carregando perfil...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">✅ Pedidos Aceitos</h1>

      {/* ESTADO DE CARREGAMENTO */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        /* LISTA DE PEDIDOS */
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido aceito encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>

{/* FRETE OFERECIDO - ADICIONADO */}
{pedido.frete_oferecido && (
  <p className="text-sm text-green-600 font-medium mt-1">
    💰 Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
  </p>
)}

<p className="text-sm">
  <span className="font-medium">Status:</span> 
  <span className={pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-green-600'}>
    {pedido.status_transporte === 'em rota' ? ' 🚚 Em Rota' : ' ✅ Aceito'}
  </span>
</p>
                  </div>

                  {/* BOTÕES DE AÇÃO */}
                  <div className="flex flex-col gap-2 ml-4">
                    {pedido.status_transporte === 'aceito' && (
                      <button 
                        onClick={() => handleSairEntrega(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-orange-500 text-white px-4 py-2 rounded text-sm hover:bg-orange-600 transition-colors"
                      >
                        🚚 Sair para Entrega
                      </button>
                    )}
                    
                    {pedido.status_transporte === 'em rota' && (
                      <button 
                        onClick={() => handleEntregar(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-green-500 text-white px-4 py-2 rounded text-sm hover:bg-green-600 transition-colors"
                      >
                        ✅ Entregar
                      </button>
                    )}
                    
                    <button 
                      onClick={() => handleCancelar(pedido.id)}
                      disabled={loadingAcoes}
                      className="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600 transition-colors"
                    >
                      ❌ Cancelar
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 11. pages\pedidos-entregues.js
// =========================================

// pages/pedidos-entregues.js
import PedidosEntregues from '../components/PedidosEntregues';

/**
 * Página principal de Pedidos Entregues
 * Delega a renderização para o componente PedidosEntregues
 * que decide qual versão mostrar (Admin, Gerente ou Entregador)
 */
export default function PedidosEntreguesPage() {
  return <PedidosEntregues />;
}


// =========================================
// 12. pages\pedidos-pendentes.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { OrderModal, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS PENDENTES
// ==============================================================================
export default function PedidosPendentes() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [pedidos, setPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [loadingAceitar, setLoadingAceitar] = useState(false);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    checkAuthAndGetPedidos();
  }, []);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }
      await getPedidosPendentes();
    } catch (error) {
      console.error('Erro na autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS PENDENTES
  // ============================================================================
  const getPedidosPendentes = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aguardando', 'revertido'])
        .order('data', { ascending: false });

      if (error) throw error;
      setPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos.');
    } finally {
      setLoading(false);
    }
  };

// ============================================================================
// 5. FUNÇÃO: ACEITAR PEDIDO (CORRIGIDA - ESTRUTURA CORRETA)
// ============================================================================
const handleAceitarPedido = async (pedidoId) => {
  try {
    setLoadingAceitar(true);
    
    // 1. Verificar se usuário está autenticado
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      alert('Sessão expirada. Faça login novamente.');
      router.push('/login');
      return;
    }

    // 2. ✅ BUSCAR TELEFONE DO USUÁRIO na tabela usuarios
    const { data: usuarioData, error: usuarioError } = await supabase
      .from('usuarios')
      .select('telefone, nome_completo')
      .eq('uid', user.id)
      .single();

    if (usuarioError) {
      console.warn('Erro ao buscar telefone do usuário:', usuarioError);
      // Não impede a continuação - usamos valores padrão
    }

    // 3. ✅ BUSCAR DADOS DA LOJA ASSOCIADA
    const { data: entregadorData, error: entregadorError } = await supabase
      .from('loja_associada')
      .select('nome_completo, loja_telefone, loja_nome')
      .eq('uid_usuario', user.id)
      .limit(1);

    if (entregadorError) {
      console.warn('Erro ao buscar dados da loja:', entregadorError);
      // Não impede a continuação
    }

    const entregador = entregadorData?.[0];
    const usuario = usuarioData;

    // 4. ✅ ATUALIZAR PEDIDO COM DADOS CORRETOS
    const { error: updateError } = await supabase
      .from('pedidos')
      .update({
        status_transporte: 'aceito',
        aceito_por_uid: user.id,
        aceito_por_nome: entregador?.nome_completo || usuario?.nome_completo || user.email,
        aceito_por_email: user.email,
        aceito_por_telefone: usuario?.telefone || entregador?.loja_telefone || 'Não informado',
        ultimo_status: new Date().toISOString()
      })
      .eq('id', pedidoId);

    if (updateError) {
      throw new Error('Erro ao atualizar pedido: ' + updateError.message);
    }

    // 5. Atualizar lista localmente
    setPedidos(pedidos.filter(pedido => pedido.id !== pedidoId));
    alert('✅ Pedido aceito com sucesso!');

  } catch (error) {
    console.error('Erro ao aceitar pedido:', error);
    alert(`❌ ${error.message}`);
  } finally {
    setLoadingAceitar(false);
  }
};

  // ============================================================================
  // 6. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 7. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📋 Pedidos Pendentes</h1>
      
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidos.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido pendente encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>
                    {pedido.frete_oferecido && (
                      <p className="text-sm text-green-600 font-medium mt-1">
                        💰 Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
                      </p>
                    )}
                  </div>

                  <button 
                    onClick={() => handleAceitarPedido(pedido.id)}
                    disabled={loadingAceitar}
                    className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 
                             transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed
                             ml-4 min-w-[80px]"
                  >
                    {loadingAceitar ? '⏳' : '✅'} Aceitar
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithoutCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 13. pages\perfil.js
// =========================================

// pages/perfil.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import EditUsuarioModal from '../components/EditUsuarioModal';
import EditLojaModal from '../components/EditLojaModal';

// ==============================================================================
// PÁGINA: PERFIL DO USUÁRIO
// ==============================================================================
export default function Perfil() {
  const router = useRouter();
  const { userProfile, userRole, userLojas, loading, error } = useUserProfile();
  const [modalUsuarioOpen, setModalUsuarioOpen] = useState(false);
  const [modalLojaOpen, setModalLojaOpen] = useState(false);
  const [lojaSelecionada, setLojaSelecionada] = useState(null);
  const [lojasAtualizadas, setLojasAtualizadas] = useState([]);

  // ============================================================================
  // 1. MAPEAMENTO DOS NOMES CORRETOS DAS LOJAS
  // ============================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ============================================================================
  // 2. ATUALIZAR OS NOMES DAS LOJAS COM OS VALORES CORRETOS
  // ============================================================================
  useEffect(() => {
    if (userLojas && userLojas.length > 0) {
      const lojasCorrigidas = userLojas.map(loja => ({
        ...loja,
        // Usa o nome correto do mapeamento, mantendo o original como fallback
        loja_nome: mapeamentoLojas[loja.id_loja] || loja.loja_nome
      }));
      setLojasAtualizadas(lojasCorrigidas);
    }
  }, [userLojas]);

  // ============================================================================
  // 3. REDIRECIONAR SE NÃO ESTIVER LOGADO
  // ============================================================================
  if (!loading && !userProfile) {
    router.push('/login');
    return null;
  }

  // ============================================================================
  // 4. ABRIR MODAL DE EDIÇÃO DA LOJA
  // ============================================================================
  const abrirModalLoja = (loja) => {
    setLojaSelecionada(loja);
    setModalLojaOpen(true);
  };

  // ============================================================================
  // 5. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      
      {/* CABEÇALHO */}
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-purple-800 mb-2">👤 Meu Perfil</h1>
        <p className="text-gray-600">Gerencie suas informações pessoais e de entrega</p>
      </div>

      {loading ? (
        <div className="text-center">
          <p className="text-purple-600">Carregando...</p>
        </div>
      ) : error ? (
        <div className="bg-red-100 border border-red-400 text-red-700 p-4 rounded">
          <p>Erro: {error}</p>
        </div>
      ) : (
        <div className="grid md:grid-cols-2 gap-8">
          
          {/* ================================================================== */}
          {/* CARD: DADOS DO USUÁRIO */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">📋 Dados Pessoais</h2>
            
            <div className="space-y-3 mb-4">
              {userProfile.foto && (
                <div className="text-center">
                  <img
                    src={userProfile.foto}
                    alt="Foto do perfil"
                    className="w-20 h-20 rounded-full mx-auto border-2 border-purple-600"
                  />
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome Completo</label>
                <p className="text-gray-800 font-medium">{userProfile.nome_completo || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome de Usuário</label>
                <p className="text-gray-800">{userProfile.nome_usuario || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Email</label>
                <p className="text-gray-800">{userProfile.email}</p>
              </div>
              
              {userProfile.telefone && (
                <div>
                  <label className="block text-sm font-medium text-gray-600">Telefone</label>
                  <p className="text-gray-800">{userProfile.telefone}</p>
                </div>
              )}
            </div>

            <button
              onClick={() => setModalUsuarioOpen(true)}
              className="w-full bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700 transition-colors"
            >
              ✏️ Editar Dados Pessoais
            </button>
          </div>

          {/* ================================================================== */}
          {/* CARD: LOJAS ASSOCIADAS */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            {/* Título dinâmico baseado na função */}
            <h2 className="text-xl font-semibold text-purple-800 mb-4">
              {userRole === 'entregador' ? '🏪 Lojas Associadas' : '👑 Sua Gerência'}
            </h2>
            
            {lojasAtualizadas.length === 0 ? (
              <p className="text-gray-600 text-center py-4">Nenhuma loja associada</p>
            ) : (
              <div className="space-y-3">
                {lojasAtualizadas.map((loja) => (
                  <div key={loja.id} className="border rounded-lg p-3 hover:bg-gray-50">
                    <h3 className="font-semibold text-gray-800">{loja.loja_nome}</h3>
                    <p className="text-sm text-gray-600">ID: {loja.id_loja}</p>
                    <p className="text-sm text-purple-600">Função: {loja.funcao}</p>
                    
                    {/* BLOCO: Mostrar campos de ENTREGADOR apenas se a função na LOJA for 'entregador' */}
                    {loja.funcao === 'entregador' && (
                      <div className="mt-2 text-sm text-gray-700">
                        <p>🚗 Veículo: {loja.veiculo || 'Não informado'}</p>
                        <p>📦 Carga máxima: {loja.carga_maxima || '0'} kg</p>
                        <p>📍 Perímetro: {loja.perimetro_entrega || 'Não definido'}</p>
                      </div>
                    )}

                    {/* BLOCO: Mostrar mensagem especial para GERENTES */}
                    {loja.funcao === 'gerente' && (
                      <div className="mt-2">
                        <p className="text-sm text-green-600 font-medium">👑 Você é o gerente desta loja.</p>
                        <p className="text-xs text-gray-500">Para editar dados da loja, contate um administrador.</p>
                      </div>
                    )}

                    {/* BOTÃO: Mostrar botão de edição APENAS para lojas onde o usuário é ENTREGADOR */}
                    {loja.funcao === 'entregador' && (
                      <button
                        onClick={() => abrirModalLoja(loja)}
                        className="mt-2 w-full bg-blue-600 text-white py-1 px-3 rounded text-sm hover:bg-blue-700 transition-colors"
                      >
                        ✏️ Editar Dados de Entrega
                      </button>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* ====================================================================== */}
      {/* MODAIS */}
      {/* ====================================================================== */}
      <EditUsuarioModal
        isOpen={modalUsuarioOpen}
        onClose={() => setModalUsuarioOpen(false)}
        userProfile={userProfile}
      />
      
      {lojaSelecionada && (
        <EditLojaModal
          isOpen={modalLojaOpen}
          onClose={() => setModalLojaOpen(false)}
          loja={lojaSelecionada}
        />
      )}
    </div>
  );
}


// =========================================
// 14. pages\recuperar-senha.js
// =========================================

import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';

export default function RecuperarSenha() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/atualizar-senha`,
      });

      if (error) throw error;

      setSuccess('Email de recuperação enviado! Verifique sua caixa de entrada.');

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Recuperar Senha</p>
        </div>

        {/* Card de Recuperação */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Recuperar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Enviando...' : 'Enviar Email de Recuperação'}
            </button>
          </form>

          {/* Links */}
          <div className="mt-6 text-center space-y-3">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Voltar para o login
            </Link>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2024 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
RecuperarSenha.noLayout = true;


// =========================================
// 15. pages\relatorios.js
// =========================================

// pages/relatorios.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE RELATÓRIOS
// ============================================================================
export default function Relatorios() {
  // ==========================================================================
  // 1. ESTADOS E HOOKS
  // ==========================================================================
  const { userRole, userLojas, userProfile, loading: userLoading } = useUserProfile();
  const [loading, setLoading] = useState(true);
  const [dadosRelatorios, setDadosRelatorios] = useState(null);
  const [periodo, setPeriodo] = useState('mes'); // dia, semana, mes, ano
  const [dadosTempoReal, setDadosTempoReal] = useState([]); // Dados do dia atual

  // ==========================================================================
  // 2. MAPEAMENTO DOS NOMES DAS LOJAS
  // ==========================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ==========================================================================
  // 3. FUNÇÃO PARA CORRIGIR NOME DA LOJA
  // ==========================================================================
  const corrigirNomeLoja = (idLoja, nomeOriginal) => {
    return mapeamentoLojas[idLoja] || nomeOriginal;
  };

  // ==========================================================================
  // 4. EFFECT PRINCIPAL - CARREGAR DADOS
  // ==========================================================================
  useEffect(() => {
    if (!userLoading) {
      carregarRelatorios();
      carregarDadosTempoReal(); // Dados do dia atual em tempo real
    }
  }, [userLoading, periodo]);

// ==========================================================================
// 5. CARREGAR DADOS EM TEMPO REAL (HOJE) - CORRIGIDO
// ==========================================================================
const carregarDadosTempoReal = async () => {
  try {
    // Data de hoje no formato YYYY-MM-DD
    const hoje = new Date().toISOString().split('T')[0];
    
    let query = supabase
      .from('pedidos')
      .select('*')
      .eq('status_transporte', 'entregue')
      .gte('ultimo_status', `${hoje}T00:00:00`)  // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
      .lte('ultimo_status', `${hoje}T23:59:59`); // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
    
    // Aplicar filtros por perfil
    if (userRole === 'gerente' && userLojas.length > 0) {
      query = query.eq('id_loja', userLojas[0].id_loja);
    } else if (userRole === 'entregador') {
      query = query.eq('aceito_por_uid', userProfile?.uid); // ✅ CORRIGIDO: aceito_por_uid em vez de aceito_por
    }
    
    const { data, error } = await query;
    
    if (error) throw error;
    
    // Processar dados para exibição
    const processados = data.map(pedido => ({
      id: pedido.id,
      pedido: pedido.id_loja_woo,
      cliente: pedido.nome_cliente,
      loja: corrigirNomeLoja(pedido.id_loja, pedido.loja_nome),
      entregador: pedido.aceito_por_nome,
      valor: pedido.frete_pago || 0,
      data: pedido.ultimo_status // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
    }));
    
    setDadosTempoReal(processados);
  } catch (error) {
    console.error('Erro ao carregar dados em tempo real:', error);
  }
};

  // ==========================================================================
  // 6. CARREGAR RELATÓRIOS PRINCIPAIS (CUMULATIVOS)
  // ==========================================================================
  const carregarRelatorios = async () => {
    try {
      setLoading(true);
      
      let dados = null;

      // LÓGICA POR TIPO DE USUÁRIO
      if (userRole === 'admin') {
        dados = await carregarRelatoriosAdmin();
      } else if (userRole === 'gerente') {
        dados = await carregarRelatoriosGerente();
      } else if (userRole === 'entregador') {
        dados = await carregarRelatoriosEntregador();
      }

      setDadosRelatorios(dados);
      
    } catch (error) {
      console.error('Erro ao carregar relatórios:', error);
    } finally {
      setLoading(false);
    }
  };

  // ==========================================================================
  // 7. RELATÓRIOS PARA ADMIN - TODAS AS LOJAS
  // ==========================================================================
  const carregarRelatoriosAdmin = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado,
        usuarios:uid_usuario(nome_completo, email)
      `)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador');

    if (error) throw error;

    // Aplicar correção dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const totalEntregadores = new Set(lojasCorrigidas.map(item => item.uid_usuario)).size;
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'admin',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      totalEntregadores,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // ==========================================================================
  // 8. RELATÓRIOS PARA GERENTE - APENAS SUA LOJA
  // ==========================================================================
  const carregarRelatoriosGerente = async () => {
    if (!userLojas || userLojas.length === 0) return null;

    const idLoja = userLojas[0].id_loja;
    const nomeLojaCorrigido = corrigirNomeLoja(idLoja, userLojas[0].loja_nome);

    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        nome_completo,
        email_usuario,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado,
        veiculo
      `)
      .eq('id_loja', idLoja)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador')
      .order('mes_entregue', { ascending: false });

    if (error) throw error;

    const totalEntregas = data.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = data.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'gerente',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      totalEntregadores: data.length,
      entregadores: data,
      loja: nomeLojaCorrigido,
      periodo
    };
  };

  // ==========================================================================
  // 9. RELATÓRIOS PARA ENTREGADOR - SEUS DADOS
  // ==========================================================================
  const carregarRelatoriosEntregador = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado
      `)
      .eq('uid_usuario', userProfile?.uid)
      .eq('status_vinculacao', 'ativo');

    if (error) throw error;

    // Aplicar correção dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'entregador',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // ==========================================================================
  // 10. CALCULAR TOTAL DE FRETE DOS DADOS EM TEMPO REAL
  // ==========================================================================
  const calcularTotalFreteHoje = () => {
    return dadosTempoReal.reduce((total, pedido) => total + (pedido.valor || 0), 0);
  };

  // ==========================================================================
  // 11. COMPONENTE DE CARREGAMENTO
  // ==========================================================================
  if (userLoading || loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        <span className="ml-3">Carregando relatórios...</span>
      </div>
    );
  }

  // ==========================================================================
  // 12. RENDERIZAÇÃO PRINCIPAL
  // ==========================================================================
  return (
    <RouteGuard requiredRole="entregador">
      <div className="container mx-auto px-4 py-8">
        {/* CABEÇALHO E FILTROS */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
          <h1 className="text-3xl font-bold text-purple-800 mb-4 md:mb-0">
            📊 Relatórios - {userRole?.toUpperCase()}
          </h1>
          
          <select
            value={periodo}
            onChange={(e) => setPeriodo(e.target.value)}
            className="bg-white border border-gray-300 rounded-lg px-4 py-2"
          >
            <option value="dia">Hoje</option>
            <option value="semana">Esta Semana</option>
            <option value="mes">Este Mês</option>
            <option value="ano">Este Ano</option>
          </select>
        </div>

        {/* SEÇÃO DE DADOS EM TEMPO REAL (HOJE) */}
        <div className="bg-blue-50 p-6 rounded-lg shadow-md mb-8">
          <h2 className="text-xl font-semibold mb-4 text-blue-800">
            🕒 Entregas de Hoje (Tempo Real)
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-blue-600 mb-1">
                {dadosTempoReal.length}
              </div>
              <div className="text-sm text-gray-600">Entregas Hoje</div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-green-600 mb-1">
                R$ {calcularTotalFreteHoje().toFixed(2)}
              </div>
              <div className="text-sm text-gray-600">Total em Fretes</div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-purple-600 mb-1">
                {new Date().toLocaleDateString('pt-BR')}
              </div>
              <div className="text-sm text-gray-600">Data</div>
            </div>
          </div>
          
          {/* LISTA DE ENTREGAS DO DIA */}
          {dadosTempoReal.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white rounded-lg">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Pedido</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Cliente</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Loja</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Valor</th>
                  </tr>
                </thead>
                <tbody>
                  {dadosTempoReal.map((pedido, index) => (
                    <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                      <td className="p-3 text-sm">{pedido.pedido}</td>
                      <td className="p-3 text-sm">{pedido.cliente}</td>
                      <td className="p-3 text-sm">{pedido.loja}</td>
                      <td className="p-3 text-sm font-medium">R$ {pedido.valor.toFixed(2)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p className="text-gray-500 text-center py-4">Nenhuma entrega registrada hoje</p>
          )}
        </div>

        {/* ESTATÍSTICAS CUMULATIVAS */}
        <div className="bg-white p-6 rounded-lg shadow-md mb-8">
          <h2 className="text-xl font-semibold mb-4">
            {periodo === 'dia' ? 'Estatísticas de Hoje' : 
             periodo === 'semana' ? 'Estatísticas da Semana' :
             periodo === 'mes' ? 'Estatísticas do Mês' : 'Estatísticas do Ano'}
          </h2>

          {/* CARDS DE ESTATÍSTICAS */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-green-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">
                {dadosRelatorios?.totalEntregas || 0}
              </div>
              <div className="text-gray-600">Total de Entregas</div>
            </div>
            
            <div className="bg-red-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-red-600 mb-2">
                {dadosRelatorios?.totalCancelamentos || 0}
              </div>
              <div className="text-gray-600">Cancelamentos</div>
            </div>
            
            <div className="bg-blue-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-blue-600 mb-2">
                {dadosRelatorios?.taxaSucesso || 0}%
              </div>
              <div className="text-gray-600">Taxa de Sucesso</div>
            </div>
            
            {userRole !== 'entregador' && (
              <div className="bg-purple-50 p-6 rounded-lg shadow-sm text-center">
                <div className="text-3xl font-bold text-purple-600 mb-2">
                  {dadosRelatorios?.totalEntregadores || 0}
                </div>
                <div className="text-gray-600">Entregadores</div>
              </div>
            )}
          </div>

          {/* DETALHES ESPECÍFICOS POR TIPO DE USUÁRIO */}
          <h3 className="text-lg font-medium mb-4">
            {userRole === 'admin' && '🏢 Desempenho por Loja'}
            {userRole === 'gerente' && `👥 Desempenho por Entregador - ${dadosRelatorios?.loja}`}
            {userRole === 'entregador' && '🏪 Meu Desempenho por Loja'}
          </h3>

          {userRole === 'admin' && dadosRelatorios?.lojas && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {dadosRelatorios.lojas.map((loja, index) => {
                const entregas = loja[`${periodo}_entregue`] || 0;
                const cancelamentos = loja[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{loja.loja_nome}</h4>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                      <div>
                        <span className="font-semibold">Entregadores:</span> {loja.usuarios ? 1 : 0}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {userRole === 'gerente' && dadosRelatorios?.entregadores && (
            <div className="space-y-4">
              {dadosRelatorios.entregadores.map((entregador, index) => {
                const entregas = entregador[`${periodo}_entregue`] || 0;
                const cancelamentos = entregador[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{entregador.nome_completo}</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                      <div>
                        <span className="font-semibold">Veículo:</span> {entregador.veiculo}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {userRole === 'entregador' && dadosRelatorios?.lojas && (
            <div className="space-y-4">
              {dadosRelatorios.lojas.map((loja, index) => {
                const entregas = loja[`${periodo}_entregue`] || 0;
                const cancelamentos = loja[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{loja.loja_nome}</h4>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}


// =========================================
// 16. pages\todos-pedidos.js
// =========================================

// pages/todos-pedidos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { OrderModal, WithCourier, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - TODOS OS PEDIDOS
// ==============================================================================
export default function TodosPedidos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  
  // Estados para filtros
  const [filtroStatus, setFiltroStatus] = useState('');
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [editandoFrete, setEditandoFrete] = useState(null);
  const [valorFrete, setValorFrete] = useState('');

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 4. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getTodosPedidos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: BUSCAR TODOS OS PEDIDOS
  // ============================================================================
  const getTodosPedidos = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('pedidos')
        .select('*')
        .order('data', { ascending: false });

      // Se for gerente, filtrar apenas pela sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: FILTRAR PEDIDOS
  // ============================================================================
  const pedidosFiltrados = todosPedidos.filter(pedido => {
    // Filtro por status
    if (filtroStatus && pedido.status_transporte !== filtroStatus) {
      return false;
    }
    
    // Filtro por entregador
    if (filtroEntregador && pedido.aceito_por_nome !== filtroEntregador) {
      return false;
    }
    
    // Filtro por loja (apenas para admin)
    if (userRole === 'admin' && filtroLoja && pedido.id_loja !== filtroLoja) {
      return false;
    }
    
    return true;
  });

  // ============================================================================
  // 7. FUNÇÃO: REVERTER PEDIDO (BOTÃO GERENTE/ADMIN)
  // ============================================================================
  const handleReverterPedido = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja reverter este pedido?')) return;
    
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { 
          ...p, 
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null
        } : p
      ));
      
      alert('✅ Pedido revertido com sucesso!');
    } catch (error) {
      console.error('Erro ao reverter pedido:', error);
      alert('❌ Erro ao reverter pedido.');
    }
  };

  // ============================================================================
  // 8. FUNÇÃO: EDITAR FRETE OFERECIDO
  // ============================================================================
  const handleEditarFrete = (pedido, valor) => {
    setEditandoFrete(pedido.id);
    setValorFrete(valor || '');
  };

  const handleSalvarFrete = async (pedidoId) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ 
          frete_oferecido: parseFloat(valorFrete) || null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, frete_oferecido: parseFloat(valorFrete) || null } : p
      ));
      
      setEditandoFrete(null);
      alert('✅ Frete atualizado com sucesso!');
    } catch (error) {
      console.error('Erro ao atualizar frete:', error);
      alert('❌ Erro ao atualizar frete.');
    }
  };

  // ============================================================================
  // 9. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 10. DADOS PARA FILTROS
  // ============================================================================
  const statusUnicos = [...new Set(todosPedidos.map(p => p.status_transporte))].filter(Boolean);
  const entregadoresUnicos = [...new Set(todosPedidos.map(p => p.aceito_por_nome))].filter(Boolean);
  const lojasUnicas = [...new Set(todosPedidos.map(p => p.id_loja))].filter(Boolean);

  // ============================================================================
  // 11. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📊 Todos os Pedidos</h1>

      {/* FILTROS */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Filtros</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Filtro Status */}
          <div>
            <label className="block text-sm font-medium mb-1">Status</label>
            <select
              value={filtroStatus}
              onChange={(e) => setFiltroStatus(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os status</option>
              {statusUnicos.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>

          {/* Filtro Entregador */}
          <div>
            <label className="block text-sm font-medium mb-1">Entregador</label>
            <select
              value={filtroEntregador}
              onChange={(e) => setFiltroEntregador(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os entregadores</option>
              {entregadoresUnicos.map(entregador => (
                <option key={entregador} value={entregador}>{entregador}</option>
              ))}
            </select>
          </div>

          {/* Filtro Loja (apenas admin) */}
          {userRole === 'admin' && (
            <div>
              <label className="block text-sm font-medium mb-1">Loja</label>
              <select
                value={filtroLoja}
                onChange={(e) => setFiltroLoja(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded"
              >
                <option value="">Todas as lojas</option>
                {lojasUnicas.map(loja => (
                  <option key={loja} value={loja}>{loja}</option>
                ))}
              </select>
            </div>
          )}
        </div>
      </div>

      {/* LISTA DE PEDIDOS */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-start justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Status:</span> 
                      <span className={`ml-1 ${
                        pedido.status_transporte === 'entregue' ? 'text-green-600' :
                        pedido.status_transporte === 'cancelado' ? 'text-red-600' :
                        pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-blue-600'
                      }`}>
                        {pedido.status_transporte}
                      </span>
                    </p>
                    
                    {pedido.aceito_por_nome && (
                      <p className="text-sm"><span className="font-medium">Entregador:</span> {pedido.aceito_por_nome}</p>
                    )}

                    {/* EDIÇÃO DE FRETE */}
                    <div className="mt-2">
                      <span className="text-sm font-medium">Frete oferecido: </span>
                      {editandoFrete === pedido.id ? (
                        <div className="flex items-center gap-2 mt-1">
                          <input
                            type="number"
                            step="0.01"
                            value={valorFrete}
                            onChange={(e) => setValorFrete(e.target.value)}
                            className="w-20 p-1 border border-gray-300 rounded"
                            placeholder="0.00"
                          />
                          <button
                            onClick={() => handleSalvarFrete(pedido.id)}
                            className="bg-green-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ✅
                          </button>
                          <button
                            onClick={() => setEditandoFrete(null)}
                            className="bg-gray-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ❌
                          </button>
                        </div>
                      ) : (
                        <span className="text-green-600">
                          R$ {pedido.frete_oferecido?.toFixed(2) || '0.00'} 
                          <button
                            onClick={() => handleEditarFrete(pedido, pedido.frete_oferecido)}
                            className="ml-2 text-blue-600 text-sm"
                          >
                            ✏️
                          </button>
                        </span>
                      )}
                    </div>
                  </div>

                  {/* BOTÕES DE AÇÃO (GERENTE/ADMIN) */}
                  <div className="flex flex-col gap-2 ml-4">
                    {/* BOTÃO REVERTER (para pedidos aceitos/em rota) */}
                    {['aceito', 'em rota'].includes(pedido.status_transporte) && (
                      <button 
                        onClick={() => handleReverterPedido(pedido.id)}
                        className="bg-yellow-500 text-white px-4 py-2 rounded text-sm hover:bg-yellow-600"
                      >
                        ↩️ Reverter
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        {pedidoSelecionado?.aceito_por_nome ? (
          <WithCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        ) : (
          <WithoutCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        )}
      </OrderModal>
    </div>
  );
}


// =========================================
// 1. public\favicon.ico
// =========================================

 



// =========================================
// 2. public\manifest.json
// =========================================

 {
  "name": "EntregasWoo - Sistema de Gestão",
  "short_name": "EntregasWoo",
  "description": "Sistema de gestão de entregas para WooCommerce",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#000000",
  "icons": [
    {
      "src": "/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}



// =========================================
// 1. styles\globals.css
// =========================================

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Estilos globais para WooCommerce */
:root {
  --woo-purple: #7f54b3;
  --woo-purple-dark: #6b3fa0;
  --woo-purple-light: #f0e6ff;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  margin: 0;
  padding: 0;
}

/* Cabeçalho fixo */
.sticky-header {
  position: sticky;
  top: 0;
  z-index: 50;
  background: white;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  border-bottom: 2px solid #e9d5ff;
}


// =========================================
// 1. utils\filterPedidos.js
// =========================================

// utils/filterPedidos.js
export const filterPedidosPorUsuario = (pedidos, userRole, userLojas) => {
  if (userRole === 'admin') {
    // Admin vê TUDO
    return pedidos;
  }

  if (userRole === 'gerente' && userLojas.length === 1) {
    // Gerente vê apenas sua loja
    return pedidos.filter(pedido => pedido.id_loja === userLojas[0].id_loja);
  }

  if (userRole === 'entregador' && userLojas.length > 0) {
    // Entregador vê pedidos de todas as suas lojas
    const lojasIds = userLojas.map(loja => loja.id_loja);
    return pedidos.filter(pedido => lojasIds.includes(pedido.id_loja));
  }

  // Visitante ou erro não vê nada
  return [];
};


// =========================================
// 2. utils\formatters.js
// =========================================

 



// =========================================
// 3. utils\notificationSender.js
// =========================================

import { supabase } from '../lib/supabase';

export const sendNotification = async (userId, title, body, data = {}) => {
  try {
    const { error } = await supabase.functions.invoke('send-notification', {
      body: { userId, title, body, data }
    });

    if (error) {
      console.error('Erro ao enviar notificação:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Erro ao enviar notificação:', error);
    return false;
  }
};

// Funções específicas para seu sistema
export const notifyNewOrder = (userId, orderId, storeName) => {
  return sendNotification(
    userId,
    'Novo Pedido Disponível',
    `Um novo pedido da loja ${storeName} está aguardando entrega.`,
    { type: 'new_order', orderId, storeName }
  );
};

export const notifyOrderStatusChange = (userId, orderId, status, customerName) => {
  const statusMessages = {
    'aceito': `Pedido para ${customerName} foi aceito`,
    'em rota': `Pedido para ${customerName} saiu para entrega`,
    'entregue': `Pedido para ${customerName} foi entregue`,
    'cancelado': `Pedido para ${customerName} foi cancelado`
  };

  return sendNotification(
    userId,
    'Status do Pedido Atualizado',
    statusMessages[status] || `Status do pedido alterado para ${status}`,
    { type: 'status_change', orderId, status, customerName }
  );
};


// =========================================
// 4. utils\pdfUtils.js
// =========================================

// utils/pdfUtils.js
import { jsPDF } from 'jspdf';

// ==============================================================================
// FUNÇÕES UTILITÁRIAS PARA GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
export const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
export const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};


// =========================================
// 1. serviceWorker.js
// =========================================

 




// =========================================
// ÁRVORE DE DIRETÓRIOS
// =========================================
📦src/
📦components/
  📦components/Filters/
    1 📜components\Filters\CourierFilter.js
    2 📜components\Filters\StatusFilter.js
  📦components/OrderModal/
    1 📜components\OrderModal\index.js
    2 📜components\OrderModal\OrderModal.js
    3 📜components\OrderModal\WithCourier.js
    4 📜components\OrderModal\WithoutCourier.js
  1 📜components\DeliveryStatus.js
  2 📜components\EditLojaModal.js
  3 📜components\EditProfileModal.js
  4 📜components\EditUsuarioModal.js
  5 📜components\Header.js
  6 📜components\Layout.js
  7 📜components\MobileMenu.js
  8 📜components\Notification.js
  9 📜components\OrderCard.js
  10 📜components\Pagination.js
  11 📜components\PedidosEntregues.js
  12 📜components\PedidosEntreguesAdmin.js
  13 📜components\PedidosEntreguesEntregador.js
  14 📜components\PedidosEntreguesGerente.js
  15 📜components\RouteGuard.js
  16 📜components\Sidebar.js
  17 📜components\UserProfile.js
📦hooks/
  1 📜hooks\useFirebaseNotifications.js
  2 📜hooks\useOrders.js
  3 📜hooks\useRealtimePedidos.js
  4 📜hooks\useUserProfile.js
📦lib/
  1 📜lib\firebase.js
  2 📜lib\supabase.js
  3 📜lib\wooCommerce.js
📦pages/
  1 📜pages\_app.js
  2 📜pages\_document.js
  3 📜pages\admin.js
  4 📜pages\atualizar-senha.js
  5 📜pages\cadastro.js
  6 📜pages\gestao-entregadores.js
  7 📜pages\index.js
  8 📜pages\login.js
  9 📜pages\orders.js
  10 📜pages\pedidos-aceitos.js
  11 📜pages\pedidos-entregues.js
  12 📜pages\pedidos-pendentes.js
  13 📜pages\perfil.js
  14 📜pages\recuperar-senha.js
  15 📜pages\relatorios.js
  16 📜pages\todos-pedidos.js
📦public/
  1 📜public\favicon.ico
  2 📜public\manifest.json
📦styles/
  1 📜styles\globals.css
📦utils/
  1 📜utils\filterPedidos.js
  2 📜utils\formatters.js
  3 📜utils\notificationSender.js
  4 📜utils\pdfUtils.js
1 📜serviceWorker.js



// =========================================
// 16. saida2.txt
// =========================================

// =========================================
// 1. components\Filters\CourierFilter.js
// =========================================



// =========================================
// 2. components\Filters\StatusFilter.js
// =========================================



// =========================================
// 1. components\OrderModal\index.js
// =========================================

// components/OrderModal/index.js
import OrderModal from './OrderModal';
import WithCourier from './WithCourier';
import WithoutCourier from './WithoutCourier';

export { OrderModal, WithCourier, WithoutCourier };


// =========================================
// 2. components\OrderModal\OrderModal.js
// =========================================

// components/OrderModal/OrderModal.js
import React from 'react';

const OrderModal = ({ 
  pedido, 
  isOpen, 
  onClose, 
  children 
}) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Conteúdo específico (será injetado via children) */}
          {children}
        </div>
      </div>
    </div>
  );
};

export default OrderModal;


// =========================================
// 3. components\OrderModal\WithCourier.js
// =========================================

// components/OrderModal/WithCourier.js
import React from 'react';

const WithCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Entregador */}
      <div className="mb-6 p-4 bg-purple-50 rounded">
        <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
        <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithCourier;


// =========================================
// 4. components\OrderModal\WithoutCourier.js
// =========================================

// components/OrderModal/WithoutCourier.js
import React from 'react';

const WithoutCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informações da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Observações */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Botão Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithoutCourier;


// =========================================
// 1. components\DeliveryStatus.js
// =========================================

 



// =========================================
// 2. components\EditLojaModal.js
// =========================================

// components/EditLojaModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';

export default function EditLojaModal({ isOpen, onClose, loja }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  useEffect(() => {
    if (isOpen && loja) {
      setFormData({
        veiculo: loja.veiculo || '',
        carga_maxima: loja.carga_maxima || '',
        perimetro_entrega: loja.perimetro_entrega || ''
      });
    }
  }, [isOpen, loja]);

  const handleSave = async () => {
    try {
      setLoading(true);
      
      const { error } = await supabase
        .from('loja_associada')
        .update({
          veiculo: formData.veiculo,
          carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
          perimetro_entrega: formData.perimetro_entrega
        })
        .eq('id', loja.id);

      if (error) throw error;

      alert('Dados da loja atualizados com sucesso!');
      onClose();
      window.location.reload();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      alert('Erro ao atualizar dados da loja');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">🏪 Editar Loja: {loja.loja_nome}</h2>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm font-medium text-gray-700">Veículo</label>
            <select
              value={formData.veiculo}
              onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            >
              <option value="">Selecione o veículo</option>
              <option value="carro">Carro</option>
              <option value="moto">Moto</option>
              <option value="bicicleta">Bicicleta</option>
              <option value="caminhao">Caminhão</option>
              <option value="van">Van</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Carga Máxima (kg)</label>
            <input
              type="number"
              value={formData.carga_maxima}
              onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Perímetro de Entrega</label>
            <input
              type="text"
              value={formData.perimetro_entrega}
              onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 rounded"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-blue-600 text-white py-2 rounded disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 3. components\EditProfileModal.js
// =========================================

// components/EditProfileModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDIÇÃO DE PERFIL
// ==============================================================================
export default function EditProfileModal({ isOpen, onClose, userProfile, userRole, userLojas }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: '',
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  // ============================================================================
  // 1. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setFormData({
        nome_completo: userProfile.nome_completo || '',
        nome_usuario: userProfile.nome_usuario || '',
        telefone: userProfile.telefone || '',
        foto: userProfile.foto || '',
        veiculo: userLojas[0]?.veiculo || '',
        carga_maxima: userLojas[0]?.carga_maxima || '',
        perimetro_entrega: userLojas[0]?.perimetro_entrega || ''
      });
    }
  }, [isOpen, userProfile, userLojas]);

  // ============================================================================
  // 2. FUNÇÃO: SALVAR ALTERAÇÕES
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);

      const { error: userError } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (userError) throw userError;

      if (userRole === 'entregador' && userLojas.length > 0) {
        const { error: lojaError } = await supabase
          .from('loja_associada')
          .update({
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          })
          .eq('uid_usuario', userProfile.uid)
          .eq('id_loja', userLojas[0].id_loja);

        if (lojaError) throw lojaError;
      }

      alert('Perfil atualizado com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      alert('Erro ao atualizar perfil');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw max-h-95vh overflow-y-auto">
        
        {/* CABEÇALHO */}
        <h2 className="text-xl font-bold mb-4 text-gray-800">✏️ Editar Perfil</h2>
        
        {/* CAMPOS DO FORMULÁRIO */}
        <div className="space-y-4">
          {/* NOME COMPLETO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome Completo
            </label>
            <input
              type="text"
              value={formData.nome_completo}
              onChange={(e) => setFormData({...formData, nome_completo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome completo"
            />
          </div>

          {/* NOME DE USUÁRIO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome de Usuário
            </label>
            <input
              type="text"
              value={formData.nome_usuario}
              onChange={(e) => setFormData({...formData, nome_usuario: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome de usuário"
            />
          </div>

          {/* TELEFONE */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone
            </label>
            <input
              type="tel"
              value={formData.telefone}
              onChange={(e) => setFormData({...formData, telefone: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="(11) 99999-9999"
            />
          </div>

          {/* FOTO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL da Foto
            </label>
            <input
              type="url"
              value={formData.foto}
              onChange={(e) => setFormData({...formData, foto: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="https://exemplo.com/foto.jpg"
            />
          </div>

          {/* CAMPOS ESPECÍFICOS PARA ENTREGADORES */}
          {userRole === 'entregador' && (
            <>
              {/* VEÍCULO */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Veículo
                </label>
                <select
                  value={formData.veiculo}
                  onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                >
                  <option value="">Selecione o veículo</option>
                  <option value="carro">Carro</option>
                  <option value="moto">Moto</option>
                  <option value="bicicleta">Bicicleta</option>
                  <option value="caminhao">Caminhão</option>
                  <option value="van">Van</option>
                </select>
              </div>

              {/* CARGA MÁXIMA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Carga Máxima (kg)
                </label>
                <input
                  type="number"
                  value={formData.carga_maxima}
                  onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: 50"
                />
              </div>

              {/* PERÍMETRO DE ENTREGA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Perímetro de Entrega
                </label>
                <input
                  type="text"
                  value={formData.perimetro_entrega}
                  onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: Zona Norte, até 10km"
                />
              </div>
            </>
          )}
        </div>

        {/* BOTÕES DE AÇÃO */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded font-medium hover:bg-gray-400 transition-colors"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-purple-600 text-white py-2 px-4 rounded font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 4. components\EditUsuarioModal.js
// =========================================

// components/EditUsuarioModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';

// ==============================================================================
// MODAL DE EDIÇÃO SIMPLIFICADA: APENAS TELEFONE E FOTO
// ==============================================================================
export default function EditUsuarioModal({ isOpen, onClose, userProfile }) {
  // ============================================================================
  // 1. DEFINIÇÃO DE ESTADOS
  // ============================================================================
  const [loading, setLoading] = useState(false);
  const [telefone, setTelefone] = useState('');
  const [foto, setFoto] = useState('');
  const [selectedFile, setSelectedFile] = useState(null);
  const [error, setError] = useState('');
  const [showRemovePhoto, setShowRemovePhoto] = useState(false);

  // ============================================================================
  // 2. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setTelefone(userProfile.telefone || '');
      setFoto(userProfile.foto || '');
    }
  }, [isOpen, userProfile]);

  // ============================================================================
  // 3. FUNÇÃO: NORMALIZAR NOME DO ARQUIVO
  // ============================================================================
  const normalizeFileName = (fileName) => {
    return fileName
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^a-zA-Z0-9.-]/g, '_');
  };

  // ============================================================================
  // 4. FUNÇÃO: ATUALIZAR ARQUIVO DE FOTO
  // ============================================================================
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        setError('Por favor, selecione um arquivo de imagem.');
        setSelectedFile(null);
        return;
      }
      if (file.size > 5 * 1024 * 1024) {
        setError('O arquivo excede o limite de 5MB.');
        setSelectedFile(null);
        return;
      }
      setSelectedFile(file);
      setError('');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: SALVAR ALTERAÇÕES (APENAS TELEFONE E FOTO)
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);
      setError('');

      let photoUrl = foto;
      let oldFileFullPath = null;

      // Identifica foto antiga para possível exclusão
      if (foto) {
        const url = new URL(foto);
        const pathParts = url.pathname.split('/');
        oldFileFullPath = pathParts.slice(4).join('/');
      }

      // Upload da nova foto (se houver)
      if (selectedFile) {
        const baseName = normalizeFileName(selectedFile.name);
        const fileName = `${userProfile.uid}-${Date.now()}-${baseName}`;
        const fullPath = `fotos/${fileName}`;
        
        const { error: uploadError } = await supabase.storage
          .from('box')
          .upload(fullPath, selectedFile, {
            cacheControl: '3600',
            upsert: false,
          });

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('box')
          .getPublicUrl(fullPath);
        photoUrl = urlData.publicUrl;
      }

      // Atualiza APENAS telefone e foto no banco
      const { error: updateError } = await supabase
        .from('usuarios')
        .update({
          telefone: telefone,
          foto: photoUrl
        })
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      // Remove foto antiga se foi feita substituição
      if (oldFileFullPath && selectedFile) {
        try {
          await supabase.storage
            .from('box')
            .remove([oldFileFullPath]);
        } catch (deleteError) {
          console.warn('Aviso: Foto antiga não pôde ser removida:', deleteError);
        }
      }

      alert('Dados atualizados com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      setError(error.message || 'Erro ao atualizar dados. Tente novamente.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: REMOVER FOTO
  // ============================================================================
  const handleRemovePhoto = async () => {
    if (!foto) return;
    
    try {
      const url = new URL(foto);
      const pathParts = url.pathname.split('/');
      const fullPath = pathParts.slice(4).join('/');
      
      const { error: removeError } = await supabase.storage
        .from('box')
        .remove([fullPath]);
      
      if (removeError) throw removeError;
      
      // Atualiza estado local e banco
      setFoto('');
      const { error: updateError } = await supabase
        .from('usuarios')
        .update({ foto: '' })
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      setShowRemovePhoto(false);
      setSelectedFile(null);
      setError('');
      
      alert('Foto removida com sucesso!');
      
    } catch (error) {
      console.error('Erro ao remover foto:', error);
      setError('Erro ao remover foto. Tente novamente.');
    }
  };

  // ============================================================================
  // 7. RENDERIZAÇÃO DO MODAL SIMPLIFICADO
  // ============================================================================
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">
          ✏️ Editar Telefone e Foto
        </h2>
        
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-600 p-2 mb-4 rounded">
            {error}
          </div>
        )}

        <div className="space-y-4">
          {/* Campo Telefone */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone *
            </label>
            <input
              type="tel"
              value={telefone}
              onChange={(e) => setTelefone(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 focus:ring-2 focus:ring-purple-500"
              required
              disabled={loading}
            />
          </div>

          {/* Seção de Foto de Perfil */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Foto de Perfil
            </label>
            
            {/* Preview da foto atual */}
            {foto && (
              <div className="relative inline-block mb-3">
                <img
                  src={foto}
                  alt="Foto atual do perfil"
                  className="h-20 w-20 object-cover rounded-full border-2 border-gray-200"
                />
                <button
                  type="button"
                  onClick={() => setShowRemovePhoto(true)}
                  className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold hover:bg-red-600"
                  disabled={loading}
                >
                  ×
                </button>
              </div>
            )}

            {/* Input para nova foto */}
            <input
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-purple-600 file:text-white hover:file:bg-purple-700"
              disabled={loading}
            />
            <p className="text-xs text-gray-500 mt-2">
              Escolha uma imagem (máx. 5MB). Formatos: JPG, PNG, GIF.
            </p>
          </div>
        </div>

        {/* Botões de Ação */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-200 text-gray-700 py-2 rounded font-medium hover:bg-gray-300"
            disabled={loading}
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading || !telefone.trim()}
            className="flex-1 bg-purple-600 text-white py-2 rounded font-medium hover:bg-purple-700 disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar Alterações'}
          </button>
        </div>
      </div>

      {/* Modal de Confirmação para Remover Foto */}
      {showRemovePhoto && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-60">
          <div className="bg-white p-6 rounded-lg w-80 shadow-xl">
            <h3 className="text-lg font-bold text-gray-800 mb-3">Remover Foto</h3>
            <p className="text-gray-600 mb-5">
              Tem certeza que deseja remover sua foto de perfil?
            </p>
            <div className="flex gap-3">
              <button
                onClick={() => setShowRemovePhoto(false)}
                className="flex-1 bg-gray-200 text-gray-700 py-2 rounded font-medium hover:bg-gray-300"
              >
                Manter Foto
              </button>
              <button
                onClick={handleRemovePhoto}
                className="flex-1 bg-red-600 text-white py-2 rounded font-medium hover:bg-red-700"
              >
                Remover
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


// =========================================
// 5. components\Header.js
// =========================================

// components/Header.js
export default function Header({ toggleSidebar, showMenuButton = true, title }) {
  return (
    <header className="bg-white shadow-sm border-b border-gray-200">
      <div className="flex items-center justify-between px-4 py-3">
        
        {/* ================================================================== */}
        {/* BOTÃO HAMBURGUER (CONDICIONAL) */}
        {/* ================================================================== */}
        <div className="flex items-center">
          {showMenuButton && (
            <button
              onClick={toggleSidebar}
              className="lg:hidden p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100"
              aria-label="Abrir menu"
            >
              {/* Ícone do hamburger */}
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          )}
          
          {/* Espaço para alinhamento quando não há botão */}
          {!showMenuButton && <div className="w-10 h-10"></div>}
        </div>

        {/* ================================================================== */}
        {/* TÍTULO (CUSTOMIZÁVEL PARA PÁGINAS SEM SIDEBAR) */}
        {/* ================================================================== */}
        <div className="flex-1 text-center lg:text-left">
          <h1 className="text-xl font-semibold text-gray-900">
            {title || 'EntregasWoo'} {/* Usa título customizado ou padrão */}
          </h1>
        </div>

        {/* ================================================================== */}
        {/* ESPAÇO PARA ELEMENTOS À DIREITA (BOTÃO DE PERFIL, ETC) */}
        {/* ================================================================== */}
        <div className="w-10 h-10"></div>
      </div>
    </header>
  );
}


// =========================================
// 6. components\Layout.js
// =========================================

// components/Layout.js
import { useState, useEffect } from 'react';
import Header from './Header';
import Sidebar from './Sidebar';

// ==============================================================================
// COMPONENTE LAYOUT PRINCIPAL
// ==============================================================================
/**
 * Layout é o componente que define a estrutura básica de todas as páginas
 * Ele gerencia: Sidebar, Header e Conteúdo principal
 * 
 * @param {Object} props - Propriedades do componente
 * @param {ReactNode} props.children - Conteúdo da página
 * @param {boolean} [props.hideSidebar=false] - Oculta a sidebar (para páginas como Admin)
 */
const Layout = ({ children, hideSidebar = false }) => {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  // ============================================================================
  // 2. EFFECT: DETECTAR TAMANHO DA TELA
  // ============================================================================
  useEffect(() => {
    const checkIsMobile = () => setIsMobile(window.innerWidth < 1024);
    
    // Verificar inicialmente
    checkIsMobile();
    
    // Adicionar listener para redimensionamento
    window.addEventListener('resize', checkIsMobile);
    
    // Cleanup
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);

  // ============================================================================
  // 3. FUNÇÕES: CONTROLE DA SIDEBAR
  // ============================================================================
  /**
   * Alterna o estado da sidebar (aberto/fechado)
   */
  const toggleSidebar = () => {
    setSidebarOpen(prev => !prev);
  };

  /**
   * Fecha a sidebar (útil para links mobile)
   */
  const closeSidebar = () => {
    if (isMobile) {
      setSidebarOpen(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO LAYOUT
  // ============================================================================
  return (
    <div className="flex h-screen bg-gray-50">
      
      {/* ====================================================================== */}
      {/* SIDEBAR - MENU LATERAL (CONDICIONAL) */}
      {/* ====================================================================== */}
      {/**
       * A sidebar é opcional (pode ser ocultada com hideSidebar=true)
       * Mas o Header SEMPRE deve aparecer, mesmo sem sidebar
       */}
      {!hideSidebar && (
        <Sidebar 
          isOpen={sidebarOpen} 
          toggleSidebar={toggleSidebar}
          onItemClick={closeSidebar}
        />
      )}
      
      {/* ====================================================================== */}
      {/* CONTEÚDO PRINCIPAL */}
      {/* ====================================================================== */}
      <div className="flex-1 flex flex-col overflow-hidden">
        
        {/* ================================================================== */}
        {/* HEADER - CABEÇALHO (SEMPRE VISÍVEL, INDEPENDENTE DA SIDEBAR) */}
        {/* ================================================================== */}
        {/**
         * ✅ CORREÇÃO: Header SEMPRE visível, mas o botão hamburger é condicional
         * showMenuButton=false quando hideSidebar=true
         */}
        <Header 
          toggleSidebar={toggleSidebar} 
          showMenuButton={!hideSidebar} // Botão só aparece se sidebar existir
          title={hideSidebar ? "Painel Administrativo" : undefined} // Título customizado para Admin
        />
        
        {/* ================================================================== */}
        {/* CONTEÚDO DA PÁGINA */}
        {/* ================================================================== */}
        <main 
          className="flex-1 overflow-y-auto p-4 lg:p-6"
          id="main-content"
          tabIndex={-1}
        >
          {children}
        </main>
      </div>

      {/* ====================================================================== */}
      {/* OVERLAY - SOMENTE MOBILE E QUANDO SIDEBAR NÃO ESTÁ OCULTA */}
      {/* ====================================================================== */}
      {!hideSidebar && sidebarOpen && isMobile && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
          onClick={closeSidebar}
          aria-hidden="true"
          role="button"
          aria-label="Fechar menu"
        />
      )}
    </div>
  );
};

export default Layout;


// =========================================
// 7. components\MobileMenu.js
// =========================================



// =========================================
// 8. components\Notification.js
// =========================================

 



// =========================================
// 9. components\OrderCard.js
// =========================================

 



// =========================================
// 10. components\Pagination.js
// =========================================

// components/Pagination.js
// ==============================================================================
// COMPONENTE PAGINATION (SEM DEPENDÊNCIAS EXTERNAS)
// ==============================================================================
export default function Pagination({ currentPage, totalPages, onPageChange }) {
  // ============================================================================
  // 1. FUNÇÃO: GERAR BOTÕES DE PÁGINA
  // ============================================================================
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 5; // Máximo de páginas visíveis
    
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    // Ajustar se estiver no início
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  };

  // ============================================================================
  // 2. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (totalPages <= 1) return null; // Não mostrar paginação se só tiver uma página

  return (
    <div className="flex items-center justify-between border-t border-gray-200 px-4 py-3 sm:px-6">
      
      {/* ✅ PAGINAÇÃO MOBILE */}
      <div className="flex flex-1 justify-between sm:hidden">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          ← Anterior
        </button>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Próxima →
        </button>
      </div>
      
      {/* ✅ PAGINAÇÃO DESKTOP */}
      <div className="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        
        {/* ✅ CONTADOR DE PÁGINAS */}
        <div>
          <p className="text-sm text-gray-700">
            Página <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        
        {/* ✅ NAVEGAÇÃO */}
        <div>
          <nav className="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
            
            {/* ✅ BOTÃO ANTERIOR */}
            <button
              onClick={() => onPageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Anterior</span>
              ← {/* Emoji seta esquerda */}
            </button>
            
            {/* ✅ BOTÕES DE PÁGINA */}
            {getPageNumbers().map((page) => (
              <button
                key={page}
                onClick={() => onPageChange(page)}
                className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                  currentPage === page
                    ? 'bg-purple-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600'
                    : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                }`}
              >
                {page}
              </button>
            ))}
            
            {/* ✅ BOTÃO PRÓXIMA */}
            <button
              onClick={() => onPageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Próxima</span>
              → {/* Emoji seta direita */}
            </button>
          </nav>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 11. components\PedidosEntregues.js
// =========================================

// components/PedidosEntregues.js
// ============================================================================
// 1. IMPORTAÇÕES
// ============================================================================
import { useEffect } from "react";
import { useUserProfile } from "../hooks/useUserProfile";

// Importa as versões da página, cada uma para um tipo de usuário
import PedidosEntreguesAdmin from "./PedidosEntreguesAdmin";
import PedidosEntreguesGerente from "./PedidosEntreguesGerente";
import PedidosEntreguesEntregador from "./PedidosEntreguesEntregador";

// ============================================================================
// 2. COMPONENTE PRINCIPAL
// ============================================================================
export default function PedidosEntregues() {
  // Hook que carrega dados do usuário
  const { userProfile, userRole, userLojas, loading } = useUserProfile();

    // ==========================================================================
  // 3. ESTADOS DE CARREGAMENTO E AUTENTICAÇÃO
  // ==========================================================================
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-purple-600 text-lg">Carregando...</div>
      </div>
    );
  }

  if (!userProfile) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-red-600 text-lg">Usuário não autenticado</div>
        <p className="text-gray-600 text-sm mt-2">
          Faça login para acessar esta página.
        </p>
      </div>
    );
  }



    // ==========================================================================
  // 4. ROTEAMENTO BASEADO NO TIPO DE USUÁRIO
  // ==========================================================================
  switch (userRole?.toLowerCase()) {
    // ------------------------------------------------------------------------
    // CASO 1: ADMINISTRADOR
    // ------------------------------------------------------------------------
    case "admin":
    case "administrador":
    case "administrator":
      return <PedidosEntreguesAdmin userProfile={userProfile} />;

    // ------------------------------------------------------------------------
    // CASO 2: GERENTE
    // ------------------------------------------------------------------------
    case "gerente":
    case "manager":
    case "gestor":
      return (
        <PedidosEntreguesGerente
          userProfile={userProfile}
          userLojas={userLojas}
        />
      );

    // ------------------------------------------------------------------------
    // CASO 3: ENTREGADOR
    // ------------------------------------------------------------------------
    case "entregador":
    case "delivery":
    case "courier":
    case "motoboy":
      return (
        <PedidosEntreguesEntregador
          userProfile={userProfile}
          userLojas={userLojas}
        />
      );

    // ------------------------------------------------------------------------
    // CASO PADRÃO: ACESSO NEGADO
    // ------------------------------------------------------------------------
    default:
      return (
        <div className="flex flex-col items-center justify-center min-h-screen p-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 max-w-md text-center">
            <h2 className="text-red-800 text-xl font-bold mb-2">
              ⚠️ Acesso Não Autorizado
            </h2>

            <p className="text-gray-700 mb-3">
              Seu tipo de usuário não tem permissão para acessar esta página.
            </p>

            <div className="bg-gray-100 p-3 rounded text-sm mb-4">
              <p>
                <strong>Tipo de usuário:</strong>{" "}
                {userRole || "Não definido"}
              </p>
              <p>
                <strong>Usuário:</strong>{" "}
                {userProfile.nome_completo || userProfile.email}
              </p>
            </div>

            <p className="text-sm text-gray-600">
              Contate o administrador do sistema para solicitar acesso.
            </p>

            <button
              onClick={() => window.history.back()}
              className="mt-4 bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 transition-colors"
            >
              Voltar
            </button>
          </div>
        </div>
      );
  }
}




// =========================================
// 12. components\PedidosEntreguesAdmin.js
// =========================================

import React, { useState, useEffect, useCallback } from 'react';
import { createClient } from '@supabase/supabase-js';
import { jsPDF } from 'jspdf';

// ==============================================================================
// 1. CONFIGURAÇÃO DO SUPABASE
// ==============================================================================
const supabaseUrl = 'https://czzidhzzpqegfvvmdgno.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6emlkaHp6cHFlZ2Z2dm1kZ25vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5NTIwMDMsImV4cCI6MjA2ODUyODAwM30.zK2iFp-b4e5vghpHgWGuOk0LooujlyU7kVm4sbM85m0';
const supabase = createClient(supabaseUrl, supabaseKey);

// ==============================================================================
// 2. FUNÇÕES AUXILIARES
// ==============================================================================

/**
 * Formata data para o padrão do Supabase (YYYY-MM-DD)
 */
const formatarDataParaSupabase = (dataString) => {
  if (!dataString) return '';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) return dataString;
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) {
    const [dia, mes, ano] = dataString.split('/');
    return `${ano}-${mes}-${dia}`;
  }
  return dataString;
};

/**
 * Formata data para exibição (DD/MM/YYYY)
 */
const formatarDataParaExibicao = (dataString) => {
  if (!dataString) return '-';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) {
    const [ano, mes, dia] = dataString.split('-');
    return `${dia}/${mes}/${ano}`;
  }
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) return dataString;
  try {
    const data = new Date(dataString);
    if (!isNaN(data.getTime())) return data.toLocaleDateString('pt-BR');
  } catch (e) {
    console.error('Erro ao formatar data:', e);
  }
  return dataString;
};

// ==============================================================================
// 3. COMPONENTE MODAL DE DETALHES
// ==============================================================================
const ModalDetalhesPedido = ({ pedido, isOpen, onClose }) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Informações da Loja */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p><strong>ID:</strong> {pedido.id}</p>
                <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
                <p><strong>Data:</strong> {pedido.data ? new Date(pedido.data).toLocaleString('pt-BR') : 'N/A'}</p>
              </div>
              <div>
                <p><strong>Telefone da Loja:</strong> {pedido.loja_telefone || 'N/A'}</p>
                <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
              </div>
            </div>
          </div>

          {/* Informações do Cliente */}
          <div className="mb-6 p-4 bg-gray-50 rounded">
            <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
            <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
            <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
          </div>

          {/* Produtos */}
          <div className="mb-6">
            <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
            <div className="bg-white border rounded p-3">
              {pedido.produto ? (
                <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
              ) : (
                <p>Nenhum produto informado</p>
              )}
            </div>
          </div>

          {/* Informações de Pagamento e Total */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div>
              <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
              <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p><strong>Frete Pago:</strong> R$ {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            </div>
            <div>
              <p><strong>Status Pagamento:</strong> {pedido.status_pagamento ? 'Pago' : 'Pendente'}</p>
              <p><strong>Data Pagamento:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
            </div>
          </div>

          {/* Observações */}
          {pedido.observacao_pedido && (
            <div className="mb-6">
              <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
              <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
            </div>
          )}

          {/* Entregador */}
          <div className="mb-6 p-4 bg-purple-50 rounded">
            <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
            <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
          </div>

          {/* Botão Fechar */}
          <div className="flex justify-end">
            <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition-colors">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// ==============================================================================
// 4. FUNÇÕES DE CARREGAMENTO DE IMAGEM E GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};

// ==============================================================================
// 5. COMPONENTE PRINCIPAL
// ==============================================================================
export default function PedidosEntregues() {
  // Estados do componente
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);

  // ============================================================================
  // 5.1 FUNÇÕES DE CÁLCULO E CARREGAMENTO
  // ============================================================================

  /**
   * Calcula o total dos pedidos selecionados
   */
  const calcularTotais = useCallback((pedidosList, selecionados) => {
    const total = Array.from(selecionados).reduce((sum, id) => {
      const pedido = pedidosList.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, []);

  /**
   * Carrega pedidos do Supabase com filtros aplicados
   */
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      let query = supabase.from('pedidos').select('*, loja_logo').eq('status_transporte', 'entregue');
      
      if (filtroEntregador) query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      if (filtroLoja) query = query.eq('id_loja', filtroLoja);
      if (filtroStatus) query = query.eq('status_pagamento', filtroStatus === 'true');
      
      const { data, error } = await query;
      if (error) throw error;
      
      setPedidos(data || []);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Atualiza pedidos selecionados no Supabase
   */
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }
    
    const dataFormatada = formatarDataParaSupabase(dataPagamento);
    
    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;
        
        const { error } = await supabase
          .from('pedidos')
          .update({
            frete_pago: fretePago,
            status_pagamento: fretePago > 0,
            data_pagamento: dataFormatada,
          })
          .eq('id', id);
        
        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pedidos atualizados com sucesso!');
      
      // Atualizar estado local
      setPedidos(prevPedidos => 
        prevPedidos.map(pedido => 
          pedidosSelecionados.has(pedido.id) 
            ? { 
                ...pedido, 
                data_pagamento: dataFormatada,
                status_pagamento: parseFloat(pedido.frete_pago || 0) > 0
              } 
            : pedido
        )
      );
      
      setPedidosSelecionados(new Set());
      
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ============================================================================
  // 5.2 HANDLERS DE INTERAÇÃO
  // ============================================================================

  /**
   * Manipula seleção/deseleção de pedidos
   */
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) {
      newSet.add(pedidoId);
    } else {
      newSet.delete(pedidoId);
    }
    setPedidosSelecionados(newSet);
  };

  /**
   * Atualiza valor do frete de um pedido
   */
  const handleAtualizarFrete = (pedidoId, novoValor) => {
    const newPedidos = pedidos.map(p => 
      p.id === pedidoId ? { ...p, frete_pago: novoValor } : p
    );
    setPedidos(newPedidos);
  };

  /**
   * Abre modal com detalhes do pedido
   */
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  /**
   * Fecha modal de detalhes
   */
  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 5.3 USE EFFECTS
  // ============================================================================

  // Carrega pedidos quando os filtros mudam
  useEffect(() => {
    carregarPedidos();
  }, [filtroEntregador, filtroLoja, filtroStatus]);

  // Calcula totais quando a seleção ou pedidos mudam
  useEffect(() => {
    calcularTotais(pedidos, pedidosSelecionados);
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ============================================================================
  // 5.4 DADOS DERIVADOS
  // ============================================================================

  // Lista de lojas únicas para o filtro
  const lojasUnicas = [...new Set(pedidos.map(p => p.id_loja))].map(id => {
    const nome = pedidos.find(p => p.id_loja === id)?.loja_nome;
    return { id, nome: nome || id };
  });

  // ============================================================================
  // 5.5 RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================

  return (
    <div className="bg-gray-50 min-h-screen mobile-optimized">
      {/* Modal de Detalhes */}
      <ModalDetalhesPedido
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={fecharModal}
      />

      {/* Cabeçalho Otimizado para Mobile */}
      <div className="bg-white shadow-md rounded-lg p-3 mb-3 sticky top-2 z-10 mobile-header">
        <div className="flex justify-between items-center mb-3">
          <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">{pedidosSelecionados.size}</span>
            <div className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </div>
          </div>
        </div>

        {/* Filtros sem rótulos */}
        <div className="grid grid-cols-1 gap-2 mb-3">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Entregadores</option>
            {[...new Set(pedidos.map(p => p.aceito_por_nome).filter(Boolean))].map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todas Lojas</option>
            {lojasUnicas.map(loja => (
              <option key={loja.id} value={loja.id}>{loja.nome}</option>
            ))}
          </select>
          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data e Botões na mesma linha */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded mobile-field"
          />
          <button 
            onClick={atualizarPedidos} 
            className="bg-purple-600 text-white p-2 rounded hover:bg-purple-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Atualizar
          </button>
          <button 
            onClick={async () => await gerarRecibosPDF(pedidosSelecionados, pedidos)}
            className="bg-green-600 text-white p-2 rounded hover:bg-green-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Recibo
          </button>
        </div>
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        <div className="grid grid-cols-1 gap-3">
          {isLoading ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Carregando...</p>
            </div>
          ) : pedidos.length === 0 ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow card-pedido p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="mobile-checkbox h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800 mobile-text-small">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 mobile-text-small">
                  <p><span className="font-semibold">Entregador:</span> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><span className="font-semibold">Pago em:</span> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p className="flex items-center">
                    <span className="font-semibold mr-1">Pagamento:</span> 
                    {pedido.status_pagamento ? (
                      <span className="text-green-600 mr-1">✔</span>
                    ) : (
                      <span className="text-red-600 mr-1">✘</span>
                    )} 
                    {pedido.status_pagamento ? 'Pago' : 'Pendente'}
                  </p>
                  <p className="flex items-center">
                    <span className="font-semibold">Frete Pago: R$</span>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0.0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500 focus:border-transparent mobile-text-small"
                    />
                  </p>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

{/* Estilos inline para mobile */}
<style jsx>{`
  @media (max-width: 768px) {
    .mobile-optimized :global(*) {
      font-size: 14px !important;
    }
    .mobile-header :global(*) {
      padding: 0px 10px !important;
    }
    .mobile-field :global(*) {
      padding: 10px !important;
      font-size: 14px !important;
    }
    .mobile-button :global(*) {
      padding: 10px 12px !important;
      font-size: 14px !important;
    }
    .mobile-text-small :global(*) {
      font-size: 13px !important;
    }
    .mobile-checkbox :global(*) {
      width: 18px !important;
      height: 18px !important;
    }
  }

  /* Estilos para tablet/PC (acima de 768px) - mantém o padrão */
  @media (min-width: 769px) {
    .mobile-header :global(*) {
      padding: 12px 10px !important; /* Valor original para tablet/PC */
    }
  }
`}</style>
    </div>
  );
}


// =========================================
// 13. components\PedidosEntreguesEntregador.js
// =========================================

// ============================================================================
// IMPORTAÇÕES
// ============================================================================
import React, { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { OrderModal, WithCourier } from './OrderModal';

// ============================================================================
// COMPONENTE: PEDIDOS ENTREGUES - ENTREGADOR
// ============================================================================
/**
 * Versão exclusiva para ENTREGADORES:
 * - Só pode visualizar seus próprios pedidos entregues.
 * - Pode filtrar por loja e status de pagamento.
 * - Não pode editar valores, nem atualizar, nem gerar recibos.
 */
export default function PedidosEntreguesEntregador({ userProfile }) {
  // ==========================================================================
  // 1. ESTADOS DO COMPONENTE
  // ==========================================================================
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const [lojas, setLojas] = useState([]);
  const [error, setError] = useState(null); // Estado para erros

  // ==========================================================================
  // 2. CARREGAR LOJAS ASSOCIADAS AO ENTREGADOR
  // ==========================================================================
  useEffect(() => {
    const carregarLojas = async () => {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      try {
        console.log('🔍 Carregando lojas para UID:', userProfile.uid); // Log para depuração
        const { data, error } = await supabase
          .from('loja_associada')
          .select('id_loja, loja_nome')
          .eq('uid_usuario', userProfile.uid); // ✅ Corrigido: 'uid_usuario'

        if (error) throw error;
        console.log('✅ Lojas carregadas:', data); // Log para depuração
        
        // Processar para uniques por id_loja
        const uniqueLojas = [...new Map(data.map(item => [item.id_loja, item])).values()];
        setLojas(uniqueLojas);
      } catch (err) {
        console.error('Erro ao carregar lojas do entregador:', err.message);
        setError('Falha ao carregar lojas associadas. Verifique o schema da tabela loja_associada.');
      }
    };

    carregarLojas();
  }, [userProfile]);

  // ==========================================================================
  // 3. CARREGAR PEDIDOS DO ENTREGADOR LOGADO
  // ==========================================================================
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      console.log('🔍 Carregando pedidos para UID:', userProfile.uid); // Log para depuração
      let query = supabase
        .from('pedidos')
        .select('*')
        .eq('status_transporte', 'entregue')
        .eq('aceito_por_uid', userProfile.uid); // ✅ Corrigido: 'aceito_por_uid'

      if (filtroLoja) {
        query = query.eq('id_loja', filtroLoja);
      }
      if (filtroStatus) {
        query = query.eq('status_pagamento', filtroStatus === 'true');
      }

      const { data, error } = await query;
      if (error) throw error;

      console.log('✅ Pedidos carregados:', data); // Log para depuração
      setPedidos(data || []);
      setError(null);
    } catch (err) {
      console.error('Erro ao carregar pedidos do entregador:', err.message);
      setError('Falha ao carregar pedidos. Verifique o schema da tabela pedidos.');
    } finally {
      setIsLoading(false);
    }
  };

  // ==========================================================================
  // 4. ABRIR MODAL DE DETALHES
  // ==========================================================================
  const abrirModalDetalhes = (pedido) => {
    if (pedido) {
      setPedidoSelecionado(pedido);
      setModalAberto(true);
    }
  };

  // ==========================================================================
  // 5. USEEFFECT PARA CARREGAR PEDIDOS
  // ==========================================================================
  useEffect(() => {
    if (userProfile?.uid) carregarPedidos();
  }, [userProfile, filtroLoja, filtroStatus]);

  // ==========================================================================
  // 6. RENDERIZAÇÃO
  // ==========================================================================
  return (
    <div className="bg-gray-50 min-h-screen p-4">
      {/* Cabeçalho do entregador */}
      <div className="bg-white shadow-md rounded-lg p-4 mb-4 sticky top-4 z-10">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-xl font-bold text-purple-800">Meus Pedidos Entregues</h1>
            <p className="text-sm text-gray-600">
              Entregador: {userProfile.nome_completo || 'Não informado'}
            </p>
          </div>
        </div>

        {/* Filtros → Loja + Status */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todas Lojas</option>
            {lojas.map((loja) => (
              <option key={loja.id_loja} value={loja.id_loja}>
                {loja.loja_nome || `Loja ${loja.id_loja}`} {/* Fallback e desambiguação */}
              </option>
            ))}
          </select>

          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>
        {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
      </div>

      {/* Lista de pedidos (apenas visualização) */}
      <div className="container mx-auto px-2">
        {isLoading ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Carregando seus pedidos...</p>
          </div>
        ) : pedidos.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Nenhum pedido entregue encontrado.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {pedidos.map((pedido) => (
              <div key={pedido.id} className="bg-white rounded-lg shadow p-3">
                <button
                  onClick={() => abrirModalDetalhes(pedido)}
                  className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline w-full text-left"
                >
                  Pedido #{pedido.id_loja_woo}
                </button>
                <p className="text-sm font-semibold text-blue-800">{pedido.loja_nome}</p>
                <div className="mt-2 text-sm">
  <p>
    <strong>Data Entrega:</strong>{' '}
    {pedido.data ? new Date(pedido.data).toLocaleDateString('pt-BR') : '-'}
  </p>
  <p>
    <strong>Status Pagamento:</strong>{' '}
    {pedido.status_pagamento ? '✅ Pago' : '❌ Pendente'}
  </p>
  
  {/* FRETE OFERECIDO - ADICIONADO */}
  {pedido.frete_oferecido && (
    <p>
      <strong>Frete Oferecido:</strong> R${' '}
      {parseFloat(pedido.frete_oferecido).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
    </p>
  )}
  
  <p>
    <strong>Frete:</strong> R${' '}
    {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
  </p>
</div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modal de detalhes */}
      <OrderModal
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={() => setModalAberto(false)}
      >
        <WithCourier
          pedido={pedidoSelecionado}
          onClose={() => setModalAberto(false)}
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 14. components\PedidosEntreguesGerente.js
// =========================================

// ============================================================================
// IMPORTAÇÕES
// ============================================================================
import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '../../lib/supabase';
import { OrderModal, WithCourier } from './OrderModal';
import { gerarRecibosPDF } from '../utils/pdfUtils';

// ============================================================================
// COMPONENTE: PEDIDOS ENTREGUES - GERENTE
// ============================================================================
/**
 * Versão exclusiva para GERENTES:
 * - Filtra pedidos apenas da loja do gerente.
 * - Pode visualizar, filtrar (entregador/status), atualizar pagamentos e gerar recibos.
 * - Não vê pedidos de outras lojas.
 */
export default function PedidosEntreguesGerente({ userProfile }) {
  // ==========================================================================
  // 1. ESTADOS DO COMPONENTE
  // ==========================================================================
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const [entregadores, setEntregadores] = useState([]);
  const [lojaInfo, setLojaInfo] = useState({ id_loja: null, loja_nome: null });
  const [error, setError] = useState(null); // Novo estado para erros

  // ==========================================================================
  // 2. CARREGAR LOJA DO GERENTE
  // ==========================================================================
  useEffect(() => {
    const carregarLojaGerente = async () => {
      if (!userProfile?.uid) {
        setError('Usuário não autenticado.');
        return;
      }

      try {
        const { data, error } = await supabase
          .from('loja_associada')
          .select('id_loja, loja_nome')
          .eq('uid_usuario', userProfile.uid)
          .eq('funcao', 'gerente')
          .single(); // Gerente tem apenas uma loja

        if (error) throw error;
        if (!data) {
          setError('Usuário sem loja associada como gerente.');
          return;
        }

        setLojaInfo({ id_loja: data.id_loja, loja_nome: data.loja_nome });
      } catch (err) {
        console.error('Erro ao carregar loja do gerente:', err.message);
        setError('Falha ao carregar loja associada.');
      }
    };

    carregarLojaGerente();
  }, [userProfile]);

  // ==========================================================================
  // 3. CARREGAR ENTREGADORES DA LOJA DO GERENTE
  // ==========================================================================
  useEffect(() => {
    const carregarEntregadores = async () => {
      if (!lojaInfo.id_loja) return;

      try {
        const { data, error } = await supabase
          .from('loja_associada')
          .select('nome_completo, uid_usuario')
          .eq('funcao', 'entregador')
          .eq('id_loja', lojaInfo.id_loja)
          .order('nome_completo');

        if (error) throw error;
        setEntregadores(data.map(u => u.nome_completo).filter(Boolean) || []);
      } catch (error) {
        console.error('Erro ao carregar entregadores:', error.message);
        setError('Falha ao carregar entregadores.');
      }
    };

    carregarEntregadores();
  }, [lojaInfo]);

  // ==========================================================================
  // 4. CARREGAR PEDIDOS DA LOJA DO GERENTE
  // ==========================================================================
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      if (!lojaInfo.id_loja) {
        setError('Usuário sem loja associada.');
        return;
      }

      let query = supabase
        .from('pedidos')
        .select('*')
        .eq('status_transporte', 'entregue')
        .eq('id_loja', lojaInfo.id_loja); // Filtro essencial

      if (filtroEntregador) {
        query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      }
      if (filtroStatus) {
        query = query.eq('status_pagamento', filtroStatus === 'true');
      }

      const { data, error } = await query;
      if (error) throw error;

      setPedidos(data || []);
      setError(null);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
      setError('Falha ao carregar pedidos.');
    } finally {
      setIsLoading(false);
    }
  };

  // ==========================================================================
  // 5. CALCULAR TOTAIS DOS PEDIDOS SELECIONADOS
  // ==========================================================================
  const calcularTotais = useCallback(() => {
    const total = Array.from(pedidosSelecionados).reduce((sum, id) => {
      const pedido = pedidos.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, [pedidosSelecionados, pedidos]);

  // ==========================================================================
  // 6. ATUALIZAR PAGAMENTOS DOS PEDIDOS SELECIONADOS
  // ==========================================================================
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }

    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;

        const { error } = await supabase
          .from('pedidos')
          .update({
            status_pagamento: fretePago > 0,
            data_pagamento: dataPagamento,
            frete_pago: fretePago, // Persistir frete atualizado
          })
          .eq('id', id);

        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pagamentos atualizados com sucesso!');
      carregarPedidos(); // Recarregar para refletir mudanças
      setPedidosSelecionados(new Set());
      setDataPagamento('');
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ==========================================================================
  // 7. MANIPULAR SELEÇÃO DE PEDIDOS
  // ==========================================================================
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) newSet.add(pedidoId);
    else newSet.delete(pedidoId);
    setPedidosSelecionados(newSet);
  };

  // ==========================================================================
  // 8. ATUALIZAR VALOR DO FRETE (LOCAL E BANCO)
  // ==========================================================================
  const handleAtualizarFrete = async (pedidoId, novoValor) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ frete_pago: novoValor })
        .eq('id', pedidoId);
      if (error) throw error;

      setPedidos(prevPedidos =>
        prevPedidos.map(p => p.id === pedidoId ? { ...p, frete_pago: novoValor } : p)
      );
    } catch (err) {
      console.error('Erro ao atualizar frete:', err.message);
      setError('Falha ao atualizar frete.');
    }
  };

  // ==========================================================================
  // 9. ABRIR MODAL DE DETALHES
  // ==========================================================================
  const abrirModalDetalhes = (pedido) => {
    if (pedido) {
      setPedidoSelecionado(pedido);
      setModalAberto(true);
    }
  };

  // ==========================================================================
  // 10. USEEFFECTS → carregar pedidos e recalcular totais
  // ==========================================================================
  useEffect(() => {
    if (lojaInfo.id_loja) carregarPedidos();
  }, [lojaInfo, filtroEntregador, filtroStatus]);

  useEffect(() => {
    calcularTotais();
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ==========================================================================
  // 11. FORMATAR DATA PARA EXIBIÇÃO
  // ==========================================================================
  const formatarDataParaExibicao = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return 'Data inválida';
    }
  };

  // ==========================================================================
  // 12. RENDERIZAÇÃO
  // ==========================================================================
  return (
    <div className="bg-gray-50 min-h-screen p-4">
      {/* Modal de Detalhes */}
      <OrderModal
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={() => setModalAberto(false)}
      >
        <WithCourier
          pedido={pedidoSelecionado}
          onClose={() => setModalAberto(false)}
        />
      </OrderModal>

      {/* Cabeçalho com nome da loja */}
      <div className="bg-white shadow-md rounded-lg p-4 mb-4 sticky top-4 z-10">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
            <p className="text-sm text-gray-600">
              Loja: {lojaInfo.loja_nome || lojaInfo.id_loja || 'Não definida'}
            </p>
          </div>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">
              {pedidosSelecionados.size} selecionados
            </span>
            <span className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
            </span>
          </div>
        </div>

        {/* Filtros: entregador e status */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Entregadores</option>
            {entregadores.map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>

          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data + botões de ação */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded"
          />
          <button
            onClick={atualizarPedidos}
            className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700"
            disabled={isLoading}
          >
            Atualizar
          </button>
          <button
            onClick={() => gerarRecibosPDF(pedidosSelecionados, pedidos, lojaInfo.id_loja)} // Passar id_loja para filtrar
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
            disabled={isLoading || pedidosSelecionados.size === 0}
          >
            Recibo
          </button>
        </div>
        {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        {isLoading ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Carregando pedidos...</p>
          </div>
        ) : pedidos.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-purple-600">Nenhum pedido encontrado para esta loja.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="h-4 w-4 text-purple-600 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 text-sm">
                  <p><strong>Entregador:</strong> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><strong>Pago em:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p>
                    <strong>Pagamento:</strong>{' '}
                    {pedido.status_pagamento ? '✅ Pago' : '❌ Pendente'}
                  </p>
                  <p className="flex items-center">
                    <strong>Frete Pago: R$</strong>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500"
                      disabled={isLoading}
                    />
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


// =========================================
// 15. components\RouteGuard.js
// =========================================

// components/RouteGuard.js
import { useUserProfile } from '../hooks/useUserProfile';
import { useRouter } from 'next/router';
import { useEffect } from 'react';

const RouteGuard = ({ children, requiredRole }) => {
  const { userRole, loading } = useUserProfile();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      // Definir hierarquia de permissões
      const rolesHierarchy = {
        'visitante': 0,
        'entregador': 1,
        'gerente': 2,
        'admin': 3
      };

      // Verificar se usuário tem permissão
      const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];
      
      if (!hasPermission) {
        // Redirecionar para página não autorizada ou home
        router.push('/');
      }
    }
  }, [userRole, loading, requiredRole, router]);

  // Mostrar loading enquanto verifica permissões
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Verificação final (caso o useEffect não tenha redirecionado ainda)
  const rolesHierarchy = {
    'visitante': 0,
    'entregador': 1,
    'gerente': 2,
    'admin': 3
  };
  
  const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];

  if (!hasPermission) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600">Acesso Não Autorizado</h1>
          <p className="text-gray-600 mt-2">Você não tem permissão para acessar esta página.</p>
        </div>
      </div>
    );
  }

  return children;
};

export default RouteGuard;


// =========================================
// 16. components\Sidebar.js
// =========================================

// components/Sidebar.js
import { useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
// Corrigido de '../lib/supabase' para '../../lib/supabase'
import { supabase } from '../../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import UserProfile from './UserProfile';

// ==============================================================================
// COMPONENTE SIDEBAR - MENU LATERAL
// ==============================================================================
/**
 * Sidebar é o menu de navegação lateral do sistema.
 * Contém: Logo, Menu de navegação, Perfil do usuário e Botão de login/logout.
 * Responsivo: Mobile (overlay) e Desktop (fixo).
 * Integra com useUserProfile para gerenciar autenticação e visibilidade de menus.
 */
const Sidebar = ({ isOpen, toggleSidebar }) => {
  const router = useRouter();
  const { user, userRole, userLojas, loading: loadingUser } = useUserProfile();
  
  // ============================================================================
  // 1. DEFINIÇÃO DOS ITENS DO MENU (INDIVIDUAIS)
  // ============================================================================
  /**
   * Definimos cada item separadamente para facilitar a montagem condicional.
   * Cada item tem: path (rota), icon (emoji), label (texto).
   */
  const homeItem = { path: '/', icon: '🏠', label: 'Home' };
  const perfilItem = { path: '/perfil', icon: '👤', label: 'Meu Perfil' };
  const pendentesItem = { path: '/pedidos-pendentes', icon: '📋', label: 'Pedidos Pendentes' };
  const aceitosItem = { path: '/pedidos-aceitos', icon: '✅', label: 'Pedidos Aceitos' };
  const entreguesItem = { path: '/pedidos-entregues', icon: '🚚', label: 'Pedidos Entregues' };
  const gestaoItem = { path: '/gestao-entregadores', icon: '👥', label: 'Gestão de Entregadores' };
  const todosItem = { path: '/todos-pedidos', icon: '📊', label: 'Todos os Pedidos' };
  const relatoriosItem = { path: '/relatorios', icon: '📈', label: 'Relatórios' };
  const adminItem = { path: '/admin', icon: '⚙️', label: 'Administração' };

  // ============================================================================
  // 2. MONTAGEM CONDICIONAL DOS ITENS DO MENU (CORRIGIDA)
  // ============================================================================
  /**
   * Constrói a lista de menuItems dinamicamente com base no user e userRole.
   * - Sempre inclui 'Home'.
   * - Para logados: Adiciona 'Meu Perfil'.
   * - Para 'entregador': Adiciona menus de pedidos pendentes e aceitos.
   * - Para 'entregador', 'gerente' e 'admin': Adiciona pedidos entregues.
   * - Para associados à loja (userLojas.length > 0) ou admin: Adiciona 'Relatórios'.
   * - Para 'gerente' ou 'admin': Adiciona gestão e todos os pedidos.
   * - Para 'admin': Adiciona administração.
   * 
   * ✅ CORREÇÃO: Pedidos Pendentes e Aceitos são APENAS para entregadores.
   */
  let menuItems = [homeItem]; // Sempre visível (até para não logados)

  if (user) { // Apenas para usuários logados
    menuItems.push(perfilItem);

    // --------------------------------------------------------------------------
    // BLOCO A: ITENS DE PEDIDOS PENDENTES E ACEITOS (APENAS ENTREGADORES)
    // --------------------------------------------------------------------------
    if (userRole === 'entregador') {
      menuItems.push(pendentesItem, aceitosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO B: ITENS DE PEDIDOS ENTREGUES (ENTREGADORES, GERENTES E ADMIN)
    // --------------------------------------------------------------------------
    if (['entregador', 'gerente', 'admin'].includes(userRole)) {
      menuItems.push(entreguesItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO C: RELATÓRIOS (para quem está vinculado a loja ou admin)
    // --------------------------------------------------------------------------
    if (userLojas.length > 0 || userRole === 'admin') {
      menuItems.push(relatoriosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO D: GESTÃO E TODOS OS PEDIDOS (GERENTE E ADMIN)
    // --------------------------------------------------------------------------
    if (['gerente', 'admin'].includes(userRole)) {
      menuItems.push(gestaoItem, todosItem);
    }

    // --------------------------------------------------------------------------
    // BLOCO E: ADMINISTRAÇÃO (APENAS ADMIN)
    // --------------------------------------------------------------------------
    if (userRole === 'admin') {
      menuItems.push(adminItem);
    }
  }

  // ============================================================================
  // 3. FUNÇÃO: LOGOUT DO USUÁRIO
  // ============================================================================
  /**
   * Realiza o logout do usuário via Supabase.
   * O useUserProfile lida com a atualização dos estados e redirecionamento.
   */
  const handleLogout = async () => {
    try {
      // Fechar sidebar no mobile antes do logout
      if (window.innerWidth < 1024) {
        toggleSidebar();
      }
      
      // Realizar logout
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      console.log('Logout realizado com sucesso');
    } catch (error) {
      console.error('Erro ao fazer logout:', error);
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: REDIRECIONAR PARA LOGIN
  // ============================================================================
  /**
   * Redireciona para a página de login quando o usuário não está autenticado.
   */
  const handleLoginRedirect = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
    router.push('/login');
  };

  // ============================================================================
  // 5. FUNÇÃO: FECHAR SIDEBAR AO CLICAR EM ITEM (MOBILE)
  // ============================================================================
  /**
   * Fecha o sidebar no mobile quando um item de menu é clicado.
   */
  const handleMenuItemClick = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <>
      {/* Overlay para mobile */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={toggleSidebar}
        />
      )}
      
      {/* Sidebar principal */}
      <div className={`
        fixed lg:static inset-y-0 left-0 z-50
        w-64 bg-purple-800 text-white
        transform transition-transform duration-300 ease-in-out
        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}
        flex flex-col h-full
      `}>
        {/* Logo / Marca do sistema */}
        <div className="p-6 border-b border-purple-700">
          <Link href="/" passHref onClick={handleMenuItemClick}>
            <div className="cursor-pointer">
              <h1 className="text-2xl font-bold">EntregasWoo</h1>
              <p className="text-purple-300 text-sm">Sistema de Gestão</p>
            </div>
          </Link>
        </div>

        {/* Menu de navegação */}
        <nav className="flex-1 p-4 overflow-y-auto">
          {menuItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`flex items-center py-3 px-4 rounded-lg mb-2 transition-colors
                ${router.pathname === item.path
                  ? 'bg-purple-900 text-white shadow-md'
                  : 'hover:bg-purple-700 text-purple-200'
                }`}
              onClick={handleMenuItemClick}
            >
              <span className="text-xl mr-3">{item.icon}</span>
              <span className="font-medium">{item.label}</span>
            </Link>
          ))}
        </nav>

        {/* Perfil do usuário (condicional) */}
        {user && (
          <div className="p-4 border-t border-purple-700 bg-purple-900">
            <UserProfile />
          </div>
        )}

        {/* Botão dinâmico: Entrar/Sair */}
        <div className="p-4 border-t border-purple-700">
          {user ? (
            <button
              onClick={handleLogout}
              className="w-full flex items-center justify-center py-2 px-4 bg-purple-700 hover:bg-purple-600 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              Sair
            </button>
          ) : (
            <button
              onClick={handleLoginRedirect}
              className="w-full flex items-center justify-center py-2 px-4 bg-green-600 hover:bg-green-500 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l-4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
              </svg>
              Entrar
            </button>
          )}
        </div>
      </div>
    </>
  );
};

export default Sidebar;


// =========================================
// 17. components\UserProfile.js
// =========================================

// components/UserProfile.js (VERSÃO SIMPLIFICADA)
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// COMPONENTE: PERFIL DO USUÁRIO (VERSÃO SIMPLIFICADA)
// ==============================================================================
/**
 * Componente de perfil simplificado para sidebar, exibindo informações básicas
 * (foto, nome, email, função e status) sem opções de edição.
 * Utiliza hook useUserProfile para dados e suporta modo mobile.
 * Aprimoramentos: Acessibilidade, feedback de erro e design responsivo.
 */
const UserProfile = ({ isMobile = false }) => {
  // ============================================================================
  // 1. OBTENÇÃO DE DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Usa o hook useUserProfile para obter perfil, função e estado de carregamento.
   * Desestruturação para acessar os valores retornados.
   */
  const { userProfile, userRole, loading, error } = useUserProfile();

  // ============================================================================
  // 2. ESTADO DE CARREGAMENTO
  // ============================================================================
  /**
   * Exibe um placeholder animado durante o carregamento dos dados.
   * Design aprimorado com múltiplos elementos para simular conteúdo.
   */
  if (loading) {
    return (
      <div
        className="p-4 border-t"
        role="status"
        aria-label="Carregando perfil do usuário"
      >
        <div className="animate-pulse space-y-2">
          <div className="h-4 bg-purple-700 rounded w-3/4 mb-2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/3 mt-2"></div>
        </div>
      </div>
    );
  }

  // ============================================================================
  // 3. TRATAMENTO DE ERRO
  // ============================================================================
  /**
   * Exibe uma mensagem de erro se a busca de perfil falhar.
   * Permite ao usuário tentar novamente ou entrar em contato com suporte.
   */
  if (error) {
    return (
      <div
        className="p-4 border-t"
        role="alert"
        aria-label="Erro ao carregar perfil"
      >
        <p className="text-sm text-red-300">Erro ao carregar perfil.</p>
        <p className="text-xs text-red-400">Tente novamente ou contate o suporte.</p>
      </div>
    );
  }

  // ============================================================================
  // 4. USUÁRIO NÃO AUTENTICADO
  // ============================================================================
  /**
   * Exibe mensagem para visitantes não autenticados, incentivando login.
   */
  if (!userProfile) {
    return (
      <div
        className="p-4 border-t"
        role="region"
        aria-label="Status de visitante"
      >
        <p className="text-sm text-purple-300">Visitante</p>
        <p className="text-xs text-purple-400">Faça login para acessar</p>
      </div>
    );
  }

  // ============================================================================
  // 5. RENDERIZAÇÃO SIMPLIFICADA
  // ============================================================================
  /**
   * Exibe informações do usuário autenticado com foto, nome, email, função e status.
   * Ajustes para responsividade em modo mobile e acessibilidade.
   */
  return (
    <div
      className={`p-4 border-t ${isMobile ? 'text-sm' : 'text-base'}`}
      role="region"
      aria-label="Perfil do usuário"
    >
      {/* INFORMAÇÕES BÁSICAS DO USUÁRIO */}
      <div className="space-y-2">
        {/* NOME E EMAIL */}
        <div className="flex items-center">
          {userProfile.foto && (
            <img
              src={userProfile.foto}
              alt={`${userProfile.nome_completo || userProfile.nome_usuario} foto de perfil`}
              className="w-8 h-8 rounded-full mr-3 border-2 border-purple-600"
              loading="lazy" // Otimização de carregamento
            />
          )}
          <div className="flex-1 min-w-0">
            <p
              className="text-sm font-semibold text-white truncate"
              title={userProfile.nome_completo || userProfile.nome_usuario}
            >
              {userProfile.nome_completo || userProfile.nome_usuario}
            </p>
            <p
              className="text-xs text-purple-300 truncate"
              title={userProfile.email}
            >
              {userProfile.email}
            </p>
          </div>
        </div>

        {/* FUNÇÃO/ROLE (APENAS TEXTO) */}
        <div className="bg-purple-700 rounded p-1">
          <p
            className="text-xs text-center text-white"
            role="status"
            aria-label={`Função: ${userRole}`}
          >
            {userRole === 'admin' && '👑 Admin'}
            {userRole === 'gerente' && '💼 Gerente'}
            {userRole === 'entregador' && '🚚 Entregador'}
            {userRole === 'visitante' && '👤 Visitante'}
          </p>
        </div>

        {/* STATUS DE CONEXÃO (SIMPLES) */}
        <div
          className="flex items-center justify-between text-xs text-purple-400"
          role="status"
          aria-label="Status de conexão"
        >
          <span>🟢 Conectado</span>
        </div>
      </div>
    </div>
  );
};

export default UserProfile;


// =========================================
// 1. hooks\useFirebaseNotifications.js
// =========================================

// hooks/useFirebaseNotifications.js
import { useState, useEffect } from 'react';
// Atualiza o import para o novo caminho em public/
import { messaging, requestForToken, onMessageListener } from '/firebase.js';
import { supabase } from '../lib/supabase';

// ==============================================================================
// HOOK PERSONALIZADO PARA GERENCIAR NOTIFICAÇÕES DO FIREBASE
// ==============================================================================
/**
 * Hook para gerenciar notificações push do Firebase
 * 
 * @param {string} userId - ID do usuário autenticado (opcional)
 * @returns {Object} - Token e notificação atual
 */
export const useFirebaseNotifications = (userId) => {
  // ============================================================================
  // 1. ESTADOS DO HOOK
  // ============================================================================
  const [token, setToken] = useState(null);
  const [notification, setNotification] = useState(null);

  // ============================================================================
  // 2. EFFECT: SOLICITAR PERMISSÃO E OBTER TOKEN
  // ============================================================================
  useEffect(() => {
    if (userId && typeof window !== 'undefined' && 'serviceWorker' in navigator) {
      const getToken = async () => {
        try {
          const currentToken = await requestForToken();
          if (currentToken) {
            setToken(currentToken);
            
            console.log('✅ Token FCM obtido:', currentToken);
            
            // Salvar token no Supabase
            const { error } = await supabase
              .from('user_tokens')
              .upsert({
                user_id: userId,
                token: currentToken,
                updated_at: new Date().toISOString()
              }, {
                onConflict: 'user_id,token'
              });
            
            if (error) {
              console.error('❌ Erro ao salvar token:', error);
            } else {
              console.log('✅ Token salvo no Supabase com sucesso!');
            }
          }
        } catch (error) {
          console.error('❌ Erro ao obter token:', error);
        }
      };

      getToken();
    }
  }, [userId]);

  // ============================================================================
  // 3. EFFECT: ESCUTAR MENSAGENS EM FOREGROUND
  // ============================================================================
  useEffect(() => {
    if (typeof window !== 'undefined') {
      onMessageListener()
        .then((payload) => {
          console.log('📩 Mensagem em foreground recebida:', payload);
          setNotification(payload);
        })
        .catch((error) => console.log('❌ Erro no listener: ', error));
    }
  }, []);

  // ============================================================================
  // 4. RETORNO DO HOOK
  // ============================================================================
  return { token, notification };
};


// =========================================
// 2. hooks\useOrders.js
// =========================================

 import { notifyNewOrder, notifyOrderStatusChange } from '../utils/notificationSender';

// Quando um novo pedido é criado
const handleNewOrder = (order) => {
  // Notificar entregadores da loja
  notifyNewOrder(entregadorId, order.id, order.loja_nome);
};

// Quando o status de um pedido muda
const updateOrderStatus = async (orderId, newStatus) => {
  // Sua lógica existente...
  
  // Notificar envolvidos
  if (newStatus === 'aceito') {
    // Notificar gerente que pedido foi aceito
    notifyOrderStatusChange(gerenteId, orderId, newStatus, order.nome_cliente);
  } else if (newStatus === 'entregue') {
    // Notificar gerente que pedido foi entregue
    notifyOrderStatusChange(gerenteId, orderId, newStatus, order.nome_cliente);
  }
};



// =========================================
// 3. hooks\useRealtimePedidos.js
// =========================================

// hooks/useRealtimePedidos.js
import { useEffect } from 'react';
import { supabase } from '../lib/supabase';

export const useRealtimePedidos = (callback) => {
  useEffect(() => {
    const subscription = supabase
      .channel('pedidos-realtime')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'pedidos' 
        }, 
        (payload) => {
          callback(payload);
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, [callback]);
};

// Como usar em uma página:
const [pedidos, setPedidos] = useState([]);

useRealtimePedidos((payload) => {
  // Atualizar a lista de pedidos em tempo real
  if (payload.eventType === 'INSERT') {
    setPedidos(prev => [payload.new, ...prev]);
  } else if (payload.eventType === 'UPDATE') {
    setPedidos(prev => prev.map(p => 
      p.id === payload.new.id ? payload.new : p
    ));
  } else if (payload.eventType === 'DELETE') {
    setPedidos(prev => prev.filter(p => p.id !== payload.old.id));
  }
});


// =========================================
// 4. hooks\useUserProfile.js
// =========================================

// src/hooks/useUserProfile.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';

// ==============================================================================
// 1. HOOK PERSONALIZADO: useUserProfile
// ==============================================================================
/**
 * Hook para gerenciar dados do usuário autenticado com sistema de permissões baseado em:
 * 1. ✅ Tabela 'usuarios': Campo 'is_admin' (boolean) - Define administradores do sistema
 * 2. ✅ Tabela 'loja_associada': Campo 'funcao' (string) - Define gerentes e entregadores
 * 
 * Fluxo de decisão de permissões:
 * 1. Se is_admin = true → Administrador (acesso completo)
 * 2. Se tem registro em loja_associada com funcao = 'gerente' → Gerente (acesso à loja)
 * 3. Se tem registro em loja_associada com funcao = 'entregador' → Entregador (acesso limitado)
 * 4. Se não atende nenhum critério → Visitante (acesso mínimo)
 */
export const useUserProfile = () => {
  // ============================================================================
  // 2. ESTADOS DO HOOK
  // ============================================================================
  const [user, setUser] = useState(null); // Dados do Supabase Auth
  const [userProfile, setUserProfile] = useState(null); // Dados da tabela 'usuarios'
  const [userRole, setUserRole] = useState('visitante'); // Função: 'admin', 'gerente', 'entregador', 'visitante'
  const [userLojas, setUserLojas] = useState([]); // Lojas associadas da tabela 'loja_associada'
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [error, setError] = useState(null); // Mensagens de erro
  const [updating, setUpdating] = useState(false); // Estado de atualização
  const [isInitialized, setIsInitialized] = useState(false); // Novo estado para verificar inicialização do Supabase

  // ============================================================================
  // 3. FUNÇÃO AUXILIAR: ESPERAR INICIALIZAÇÃO DO SUPABASE
  // ============================================================================
  /**
   * Aguarda até que o Supabase esteja inicializado e a sessão esteja carregada
   */
  const waitForSupabase = async () => {
    try {
      console.log('⏳ Aguardando inicialização do Supabase...');
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        console.log('⚠️ Nenhuma sessão encontrada na inicialização');
        return null;
      }
      console.log('✅ Sessão inicial carregada');
      return session.user;
    } catch (error) {
      console.error('❌ Erro ao verificar sessão inicial:', error);
      return null;
    }
  };

  // ============================================================================
  // 4. FUNÇÃO PRINCIPAL: CARREGAR DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Carrega todos os dados do usuário de forma sequencial e determinística
   * Segue a hierarquia de permissões do sistema
   */
  const loadUserData = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('🔄 Iniciando carregamento de dados do usuário...');

      // 4.1. VERIFICAR INICIALIZAÇÃO DO SUPABASE
      if (!isInitialized) {
        console.log('⏳ Supabase ainda não inicializado, aguardando...');
        const initialUser = await waitForSupabase();
        if (!initialUser) {
          console.log('👤 Nenhum usuário autenticado na inicialização');
          resetToVisitor();
          return;
        }
        setUser(initialUser);
        setIsInitialized(true);
      }

      // 4.2. OBTER USUÁRIO AUTENTICADO
      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        console.error('❌ Erro de autenticação:', authError);
        setError('Falha na autenticação: ' + authError.message);
        resetToVisitor();
        return;
      }

      if (!authUser) {
        console.log('👤 Nenhum usuário autenticado');
        resetToVisitor();
        return;
      }

      setUser(authUser);
      console.log('✅ Usuário autenticado:', authUser.email);

      // 4.3. BUSCAR PERFIL NA TABELA 'usuarios'
      const { data: usuarioData, error: usuarioError } = await supabase
        .from('usuarios')
        .select('*')
        .eq('uid', authUser.id)
        .single();

      if (usuarioError) {
        console.error('❌ Erro ao buscar perfil:', usuarioError);
        setError('Perfil não encontrado: ' + usuarioError.message);
        resetToVisitor();
        return;
      }

      setUserProfile(usuarioData);
      console.log('✅ Perfil carregado:', usuarioData.nome_completo);

      // 4.4. VERIFICAÇÃO CRÍTICA: É ADMINISTRADOR?
      if (usuarioData.is_admin === true) {
        console.log('🎯 Usuário é ADMINISTRADOR (is_admin = true)');
        setUserRole('admin');
        setUserLojas([]); // Admin não precisa de lojas associadas
        setLoading(false);
        return;
      }

      // 4.5. BUSCAR LOJAS ASSOCIADAS NA TABELA 'loja_associada'
      const { data: lojasData, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', authUser.id)
        .eq('status_vinculacao', 'ativo');

      if (lojasError) {
        console.warn('⚠️ Erro ao buscar lojas associadas:', lojasError);
        setUserLojas([]);
        setUserRole('visitante');
        setLoading(false);
        return;
      }

      setUserLojas(lojasData || []);
      console.log('📊 Lojas associadas encontradas:', lojasData?.length || 0);

      // 4.6. DETERMINAR FUNÇÃO BASEADA NAS LOJAS ASSOCIADAS
      if (!lojasData || lojasData.length === 0) {
        console.log('👤 Usuário é VISITANTE (sem lojas associadas)');
        setUserRole('visitante');
      } else {
        const lojasComoGerente = lojasData.filter(loja => loja.funcao === 'gerente');
        
        if (lojasComoGerente.length > 0) {
          if (lojasComoGerente.length > 1) {
            console.error('❌ CONFLITO: Usuário é gerente em múltiplas lojas');
            setError('Configuração inválida: Gerente em múltiplas lojas');
            setUserRole('erro');
          } else {
            console.log('💼 Usuário é GERENTE da loja:', lojasComoGerente[0].id_loja);
            setUserRole('gerente');
          }
        } else {
          console.log('🚚 Usuário é ENTREGADOR em', lojasData.length, 'loja(s)');
          setUserRole('entregador');
        }
      }

    } catch (error) {
      console.error('💥 Erro inesperado no carregamento:', error);
      setError('Erro inesperado: ' + error.message);
      resetToVisitor();
    } finally {
      setLoading(false);
      console.log('✅ Carregamento finalizado. Função:', userRole);
    }
  };

  // ============================================================================
  // 5. FUNÇÃO AUXILIAR: RESETAR PARA VISITANTE
  // ============================================================================
  /**
   * Reinicia todos os estados para usuário visitante (não autenticado)
   * Usado em casos de erro ou logout
   */
  const resetToVisitor = () => {
    setUser(null);
    setUserProfile(null);
    setUserRole('visitante');
    setUserLojas([]);
    setLoading(false);
  };

  // ============================================================================
  // 6. EFFECT: INICIALIZAÇÃO E OBSERVADOR DE AUTENTICAÇÃO
  // ============================================================================
  /**
   * Executa o carregamento inicial e fica observando mudanças de autenticação
   * Atualiza automaticamente quando usuário faz login/logout
   */
  useEffect(() => {
    // Carregamento inicial com verificação de sessão
    const initialize = async () => {
      const initialUser = await waitForSupabase();
      if (initialUser) {
        setUser(initialUser);
        setIsInitialized(true);
        await loadUserData();
      } else {
        resetToVisitor();
        setIsInitialized(true);
      }
    };

    initialize();

    // Observar mudanças de estado de autenticação
    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('🔐 Evento de autenticação:', event);
        
        if (event === 'SIGNED_IN' && session?.user) {
          console.log('✅ Usuário logado:', session.user.email);
          setUser(session.user);
          await loadUserData();
        } else if (event === 'SIGNED_OUT') {
          console.log('👋 Usuário desconectado');
          resetToVisitor();
        }
      }
    );

    // Cleanup: Remover observador quando componente desmontar
    return () => {
      if (authListener?.subscription) {
        authListener.subscription.unsubscribe();
        console.log('🧹 Observador de autenticação removido');
      }
    };
  }, []);

  // ============================================================================
  // 7. FUNÇÃO: ATUALIZAR PERFIL DO USUÁRIO
  // ============================================================================
  /**
   * Atualiza dados do perfil na tabela 'usuarios'
   * ⚠️ Não permite alterar 'is_admin' via interface comum
   */
  const updateUserProfile = async (formData) => {
    try {
      setUpdating(true);
      setError(null);

      if (!userProfile?.uid) throw new Error('Perfil não carregado');
      if (!formData.nome_completo || !formData.telefone) {
        throw new Error('Nome completo e telefone são obrigatórios');
      }

      const updateData = {
        nome_completo: formData.nome_completo,
        nome_usuario: formData.nome_usuario || userProfile.nome_usuario,
        telefone: formData.telefone,
        foto: formData.foto || userProfile.foto
      };

      const { error: updateError } = await supabase
        .from('usuarios')
        .update(updateData)
        .eq('uid', userProfile.uid);

      if (updateError) throw updateError;

      setUserProfile(prev => ({ ...prev, ...updateData }));

      return { success: true, message: 'Perfil atualizado com sucesso!' };

    } catch (error) {
      const errorMsg = 'Erro ao atualizar: ' + error.message;
      setError(errorMsg);
      return { success: false, message: errorMsg };
    } finally {
      setUpdating(false);
    }
  };

  // ============================================================================
  // 8. FUNÇÃO: RECARREGAR DADOS
  // ============================================================================
  /**
   * Força recarregamento completo dos dados do usuário
   * Útil após atualizações externas ou para sincronização
   */
  const reloadUserData = async () => {
    console.log('🔄 Recarregando dados do usuário...');
    await loadUserData();
  };

  // ============================================================================
  // 9. RETORNO DO HOOK
  // ============================================================================
  /**
   * Expõe estados e funções para componentes consumidores
   */
  return {
    user,
    userProfile,
    userRole,
    userLojas,
    loading,
    error,
    updating,
    updateUserProfile,
    reloadUserData
  };
};


// =========================================
// 1. pages\tests\test-notifications.js
// =========================================

// 1. IMPORTAÇÕES
import { useEffect, useState } from 'react';

// 2. COMPONENTE DE TESTE
export default function TestNotifications() {
  const [isFirebaseLoaded, setIsFirebaseLoaded] = useState(false);

  // 3. HOOK USEEFFECT
  useEffect(() => {
    console.log('Iniciando carregamento do Firebase via firebase.js...');
    const script = document.createElement('script');
    script.src = '/firebase.js';
    script.async = true;
    script.onload = () => {
      console.log('Script firebase.js carregado com sucesso.');
      let checkAttempts = 0;
      const maxAttempts = 150; // Aumenta para 15 segundos (150 * 100ms)

      const checkFirebase = () => {
        if (window.requestForToken) {
          console.log('requestForToken detectado após', checkAttempts, 'tentativas.');
          setIsFirebaseLoaded(true);
        } else if (checkAttempts < maxAttempts) {
          console.log('Aguardando requestForToken... Tentativa', checkAttempts + 1);
          checkAttempts++;
          setTimeout(checkFirebase, 100);
        } else {
          console.error('Tempo esgotado esperando requestForToken.');
        }
      };

      checkFirebase();
    };
    script.onerror = () => console.error('Erro ao carregar firebase.js');
    document.body.appendChild(script);

    return () => {
      document.body.removeChild(script);
    };
  }, []);

  // 4. FUNÇÃO DE TESTE
  const handleTestNotification = () => {
    if (!isFirebaseLoaded || !window.requestForToken) {
      console.error('Firebase não está pronto. Aguarde o carregamento ou verifique os logs.');
      return;
    }

    window.requestForToken().then(token => console.log('Token:', token)).catch(error => console.error('Erro:', error));
  };

  // 5. RETORNO JSX
  return (
    <div style={{ padding: '20px', textAlign: 'center' }}>
      <h1>Teste de Notificações</h1>
      <button
        onClick={handleTestNotification}
        style={{ padding: '10px 20px', backgroundColor: '#3b7b2b', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}
        disabled={!isFirebaseLoaded}
      >
        Testar Notificação
      </button>
      {!isFirebaseLoaded && <p style={{ color: 'red' }}>Carregando Firebase...</p>}
    </div>
  );
}


// =========================================
// 1. pages\_app.js
// =========================================

// pages/_app.js (VERSÃO SUPER SIMPLES)
import '../styles/globals.css';
import Layout from '../components/Layout';

function MyApp({ Component, pageProps }) {
  // ✅ Use layout em TODAS as páginas por enquanto
  // Depois ajustamos as exceções
  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  );
}

export default MyApp;


// =========================================
// 2. pages\_document.js
// =========================================

 import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link rel="manifest" href="/manifest.json" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;



// =========================================
// 3. pages\admin.js
// =========================================

// pages/admin.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ==============================================================================
// PÁGINA DE ADMINISTRAÇÃO
// ==============================================================================
/**
 * Painel administrativo para gerenciamento do sistema
 * Acessível apenas para usuários com role 'admin'
 * 
 * IMPORTANTE: Esta página NÃO usa o Layout padrão (já é aplicado pelo _app.js)
 * Por isso NÃO devemos envolver com <Layout> aqui
 */
export default function Admin() {
  // ============================================================================
  // 1. ESTADOS E HOOKS
  // ============================================================================
  const { userRole, loading: userLoading } = useUserProfile();
  const [activeTab, setActiveTab] = useState('lojas');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  // Estados para dados das abas
  const [lojas, setLojas] = useState([]);
  const [usuariosPendentes, setUsuariosPendentes] = useState([]);
  const [associacoes, setAssociacoes] = useState([]);

  // ============================================================================
  // 2. EFFECT: CARREGAR DADOS COM BASE NA ABA ATIVA
  // ============================================================================
  useEffect(() => {
    if (activeTab === 'lojas') {
      loadLojas();
    } else if (activeTab === 'usuarios') {
      loadUsuariosPendentes();
    } else if (activeTab === 'associacoes') {
      loadAssociacoes();
    }
  }, [activeTab]);

// ============================================================================
// 3. FUNÇÕES: CARREGAMENTO DE DADOS
// ============================================================================
/**
 * Carrega lista de lojas cadastradas
 */
const loadLojas = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('lojas')
      .select('*')
      .order('loja_nome');
    
    if (error) throw error;
    setLojas(data || []);
  } catch (err) {
    setError('Erro ao carregar lojas: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Carrega usuários não vinculados a lojas (pendentes)
 */
const loadUsuariosPendentes = async () => {
  try {
    setLoading(true);
    // ✅ CORREÇÃO: Consulta mais simples para evitar erro de UUID
    const { data: usuariosAssociados, error: errorAssociados } = await supabase
      .from('loja_associada')
      .select('uid_usuario')
      .eq('status_vinculacao', 'ativo');

    if (errorAssociados) {
      throw new Error('Erro ao buscar usuários associados: ' + errorAssociados.message);
    }

    // Extrair apenas os UIDs
    const uidsAssociados = usuariosAssociados?.map(ua => ua.uid_usuario) || [];

    // Buscar usuários NÃO presentes na lista de associados
    let query = supabase
      .from('usuarios')
      .select('*');

    // Aplicar filtro apenas se houver usuários associados
    if (uidsAssociados.length > 0) {
      query = query.not('uid', 'in', `(${uidsAssociados.map(uid => `"${uid}"`).join(',')})`);
    }

    const { data, error } = await query;

    if (error) {
      throw new Error('Erro ao buscar usuários pendentes: ' + error.message);
    }

    setUsuariosPendentes(data || []);

  } catch (err) {
    setError('Erro ao carregar usuários: ' + err.message);
    console.error('Erro detalhado:', err);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// ✅ CORREÇÃO: FUNÇÃO loadAssociacoes ADICIONADA
// ============================================================================
/**
 * Carrega associações ativas entre usuários e lojas
 */
const loadAssociacoes = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        *,
        usuarios:uid_usuario(nome_completo, email),
        lojas:id_loja(loja_nome)
      `)
      .order('ultimo_status_vinculacao', { ascending: false });
    
    if (error) throw error;
    setAssociacoes(data || []);
  } catch (err) {
    setError('Erro ao carregar associações: ' + err.message);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// 4. FUNÇÕES: AÇÕES DO ADMIN
// ============================================================================
/**
 * Cria uma nova loja no sistema
 */
const handleCriarLoja = async (dadosLoja) => {
  try {
    setLoading(true);
    setError(null);
    
    const { error } = await supabase
      .from('lojas')
      .insert([{
        id_loja: dadosLoja.id_loja,
        loja_nome: dadosLoja.loja_nome,
        loja_endereco: dadosLoja.loja_endereco,
        loja_telefone: dadosLoja.loja_telefone,
        loja_perimetro_entrega: dadosLoja.loja_perimetro_entrega,
        cnpj: dadosLoja.cnpj,
        ativa: true
      }]);
    
    if (error) throw error;
    
    setSuccess('Loja criada com sucesso!');
    await loadLojas();
  } catch (err) {
    setError('Erro ao criar loja: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Associa um usuário como gerente de uma loja
 */
const handleAssociarGerente = async (usuarioId, lojaId) => {
  try {
    setLoading(true);
    setError(null);
    
    // Buscar dados do usuário e loja em paralelo
    const [{ data: usuario }, { data: loja }] = await Promise.all([
      supabase.from('usuarios').select('*').eq('uid', usuarioId).single(),
      supabase.from('lojas').select('*').eq('id_loja', lojaId).single()
    ]);
    
    if (!usuario || !loja) throw new Error('Usuário ou loja não encontrados');
    
    // Criar associação
    const { error } = await supabase
      .from('loja_associada')
      .insert([{
        uid_usuario: usuarioId,
        nome_completo: usuario.nome_completo,
        id_loja: lojaId,
        loja_nome: loja.loja_nome,
        loja_endereco: loja.loja_endereco,
        loja_telefone: loja.loja_telefone,
        funcao: 'gerente',
        status_vinculacao: 'ativo',
        ultimo_status_vinculacao: new Date().toISOString()
      }]);
    
    if (error) throw error;
    
    setSuccess('Gerente associado com sucesso!');
    await loadAssociacoes(); // ✅ Agora esta função existe
    await loadUsuariosPendentes();
  } catch (err) {
    setError('Erro ao associar gerente: ' + err.message);
  } finally {
    setLoading(false);
  }
};
  // ============================================================================
  // 5. VERIFICAÇÕES DE ACESSO E LOADING
  // ============================================================================
  if (userLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // ============================================================================
  // 6. RENDERIZAÇÃO PRINCIPAL
  // ============================================================================
  return (
    <RouteGuard requiredRole="admin">
      {/* ✅ REMOVIDO: <Layout> wrapper (já é aplicado pelo _app.js) */}
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Painel Administrativo</h1>
        
        {/* Mensagens de status */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            {success}
          </div>
        )}

        {/* Navegação por abas */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="flex space-x-8">
            {['lojas', 'usuarios', 'associacoes'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                {tab === 'lojas' && 'Lojas'}
                {tab === 'usuarios' && 'Usuários Pendentes'}
                {tab === 'associacoes' && 'Associações'}
              </button>
            ))}
          </nav>
        </div>

        {/* Conteúdo das abas */}
        <div className="mt-6">
          {/* Aba: Lojas */}
          {activeTab === 'lojas' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Gerenciar Lojas</h2>
              
              {/* Formulário de criação */}
              <div className="bg-white p-4 rounded-lg shadow-md mb-4">
                <h3 className="text-lg font-medium mb-3">Criar Nova Loja</h3>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target);
                  handleCriarLoja({
                    id_loja: formData.get('id_loja'),
                    loja_nome: formData.get('loja_nome'),
                    loja_endereco: formData.get('loja_endereco'),
                    loja_telefone: formData.get('loja_telefone'),
                    loja_perimetro_entrega: formData.get('loja_perimetro_entrega'),
                    cnpj: formData.get('cnpj')
                  });
                }}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                    <input name="id_loja" placeholder="ID da Loja (ex: L1)" required />
                    <input name="loja_nome" placeholder="Nome da Loja" required />
                    <input name="loja_endereco" placeholder="Endereço" />
                    <input name="loja_telefone" placeholder="Telefone" />
                    <input name="loja_perimetro_entrega" placeholder="Perímetro de Entrega" />
                    <input name="cnpj" placeholder="CNPJ" />
                  </div>
                  <button type="submit" disabled={loading}>
                    {loading ? 'Criando...' : 'Criar Loja'}
                  </button>
                </form>
              </div>

              {/* Listagem de lojas */}
              <div>
                <h3 className="text-lg font-medium mb-3">Lojas Cadastradas</h3>
                {loading ? (
                  <div className="text-center py-4">Carregando...</div>
                ) : (
                  <div className="grid gap-4">
                    {lojas.map(loja => (
                      <div key={loja.id} className="bg-white p-4 rounded-lg shadow-md">
                        <h4 className="font-semibold">{loja.loja_nome} ({loja.id_loja})</h4>
                        <p className="text-gray-600">{loja.loja_endereco}</p>
                        <p className="text-gray-600">{loja.loja_telefone}</p>
                        <p className="text-gray-600">Perímetro: {loja.loja_perimetro_entrega}</p>
                        <span className={`inline-block px-2 py-1 rounded text-xs ${
                          loja.ativa ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {loja.ativa ? 'Ativa' : 'Inativa'}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Aba: Usuários Pendentes */}
          {activeTab === 'usuarios' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Usuários Pendentes</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {usuariosPendentes.map(usuario => (
                    <div key={usuario.uid} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{usuario.nome_completo}</h4>
                      <p className="text-gray-600">{usuario.email}</p>
                      <p className="text-gray-600">{usuario.telefone}</p>
                      <button
                        onClick={() => {
                          const lojaId = prompt('Digite o ID da loja para associar (ex: L1):');
                          if (lojaId) handleAssociarGerente(usuario.uid, lojaId);
                        }}
                        className="bg-green-500 text-white px-3 py-1 rounded text-sm mt-2"
                      >
                        Associar como Gerente
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Aba: Associações */}
          {activeTab === 'associacoes' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Associações Ativas</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {associacoes.map(associacao => (
                    <div key={associacao.id} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{associacao.nome_completo}</h4>
                      <p className="text-gray-600">Função: {associacao.funcao}</p>
                      <p className="text-gray-600">Loja: {associacao.loja_nome}</p>
                      <p className="text-gray-600">Status: {associacao.status_vinculacao}</p>
                      <p className="text-gray-600 text-sm">
                        Última atualização: {new Date(associacao.ultimo_status_vinculacao).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}

// ==============================================================================
// MARCAÇÃO: ESTA PÁGINA NÃO USA LAYOUT PADRÃO (já é aplicado pelo _app.js)
// ==============================================================================



// =========================================
// 4. pages\atualizar-senha.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import Link from 'next/link';

export default function AtualizarSenha() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [session, setSession] = useState(null);
  const router = useRouter();

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
    });

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    return () => subscription.unsubscribe();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    if (password !== confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }

    if (password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) throw error;

      setSuccess('Senha atualizada com sucesso!');
      
      setTimeout(() => {
        router.push('/login');
      }, 2000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  if (!session) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 flex items-center justify-center">
        <div className="bg-white p-8 rounded-2xl shadow-2xl text-center">
          <p className="text-red-600 mb-4">Link inválido ou expirado</p>
          <Link href="/recuperar-senha" className="text-purple-600 hover:text-purple-800">
            Solicitar novo link
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">Nova Senha</h2>
          <p className="text-purple-200 mt-2">Digite sua nova senha</p>
        </div>

        {/* Card de Atualização */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Atualizar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Campo Nova Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                Nova Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Mínimo 6 caracteres"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            {/* Campo Confirmar Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                Confirmar Nova Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Digite novamente a senha"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Atualizando...' : 'Atualizar Senha'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
AtualizarSenha.noLayout = true;


// =========================================
// 5. pages\cadastro.js
// =========================================

// pages/cadastro.js
import { useState } from 'react';
import { supabase } from '../../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE CADASTRO COM NOME E TELEFONE
// ==============================================================================
/**
 * Inclui campos para nome completo e telefone, essenciais para credenciamento de motoristas.
 * Exibe mensagem sobre confirmação de email após cadastro.
 * Redireciona para /login após sucesso para tentativa de login.
 * Aprendizado: Integre mensagens de suporte ao fluxo de autenticação do Supabase.
 */
export default function Cadastro() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE (BLOCO DE ESTADOS)
  // ============================================================================
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    nome_completo: '',
    telefone: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. FUNÇÃO: ATUALIZAÇÃO DOS CAMPOS (BLOCO DE FUNÇÃO)
  // ============================================================================
  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  // ============================================================================
  // 3. FUNÇÃO: SUBMISSÃO DO CADASTRO (BLOCO DE FUNÇÃO ASSÍNCRONA)
  // ============================================================================
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    // 3.1. VALIDAÇÕES
    if (formData.password !== formData.confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }
    if (formData.password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }
    if (!formData.nome_completo.trim()) {
      setError('O nome completo é obrigatório');
      setLoading(false);
      return;
    }
    if (!formData.telefone.trim()) {
      setError('O telefone é obrigatório');
      setLoading(false);
      return;
    }

    try {
      // 3.2. CRIAÇÃO NO AUTH
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
        options: {
          data: {
            nome_completo: formData.nome_completo,
            telefone: formData.telefone
          }
        }
      });

      if (authError) throw authError;

      // 3.3. INSERÇÃO NA TABELA USUÁRIOS
      const { error: userError } = await supabase
        .from('usuarios')
        .insert({
          uid: authData.user.id,
          email: formData.email,
          nome_usuario: formData.email,
          nome_completo: formData.nome_completo,
          telefone: formData.telefone,
          foto: '',
          is_admin: false
        });

      if (userError) throw userError;

      // 3.4. SUCESSO E REDIRECIONAMENTO
      setSuccess('Cadastro realizado! Verifique seu email e clique no link de confirmação para fazer login.');
      setTimeout(() => {
        router.push('/login');
      }, 2000);
    } catch (error) {
      console.error('Erro detalhado:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO COMPONENTE (BLOCO DE JSX)
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 4.1. SEÇÃO VISUAL: LOGO E TÍTULO */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Criar Nova Conta</p>
        </div>

        {/* 4.2. CARD PRINCIPAL: CONTAINER DE CADASTRO */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Cadastro
          </h3>

          {/* 4.2.1. EXIBIÇÃO DE ERRO OU SUCESSO */}
          {error && <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">{error}</div>}
          {success && <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">{success}</div>}

          {/* 4.2.2. FORMULÁRIO COM NOME E TELEFONE */}
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="nome_completo" className="block text-sm font-medium text-gray-700">
                Nome Completo
              </label>
              <input
                id="nome_completo"
                name="nome_completo"
                type="text"
                value={formData.nome_completo}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="Seu nome completo"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="telefone" className="block text-sm font-medium text-gray-700">
                Telefone
              </label>
              <input
                id="telefone"
                name="telefone"
                type="tel"
                value={formData.telefone}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="(11) 99999-9999"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
                disabled={loading}
              />
            </div>

            <div className="relative">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  value={formData.password}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Mínimo 6 caracteres"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={loading}
                >
                  {showPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <div className="relative">
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirmar Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Digite novamente sua senha"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  disabled={loading}
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Criando conta...' : 'Criar Conta'}
            </button>
          </form>

          {/* 4.2.3. LINK PARA LOGIN */}
          <div className="mt-6 text-center">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Já tem uma conta? Faça login
            </Link>
          </div>
        </div>

        {/* 4.3. SEÇÃO DE RODAPÉ */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2025 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
Cadastro.noLayout = true;


// =========================================
// 6. pages\gestao-entregadores.js
// =========================================

// pages/gestao-entregadores.js (VERSÃO MELHORADA)
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// PÁGINA: GESTÃO DE ENTREGADORES
// ==============================================================================
export default function GestaoEntregadores() {
  const [entregadores, setEntregadores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [buscaEmail, setBuscaEmail] = useState('');
  const [usuarioEncontrado, setUsuarioEncontrado] = useState(null);
  const [buscando, setBuscando] = useState(false);

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 1. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 2. CARREGAR ENTREGADORES DA LOJA (COM MAIS CAMPOS)
  // ============================================================================
  useEffect(() => {
    if (userRole === 'gerente' || userRole === 'admin') {
      carregarEntregadores();
    }
  }, [userRole]);

  const carregarEntregadores = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('loja_associada')
        .select('*');

      // Gerente só vê pessoas da sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      // Filtrar apenas entregadores e gerentes
      const pessoasLoja = data.filter(pessoa => 
        pessoa.funcao === 'entregador' || pessoa.funcao === 'gerente'
      );
      
      setEntregadores(pessoasLoja || []);
    } catch (error) {
      console.error('Erro ao carregar pessoas da loja:', error);
      alert('Erro ao carregar lista de pessoas');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 3. BUSCAR USUÁRIO POR EMAIL NO SISTEMA (COM MAIS DETALHES)
  // ============================================================================
  const buscarUsuarioPorEmail = async () => {
    if (!buscaEmail.trim()) {
      alert('Por favor, digite um email para buscar');
      return;
    }
    
    try {
      setBuscando(true);
      
      // Buscar usuário na tabela usuarios pelo email
      const { data: usuario, error: usuarioError } = await supabase
        .from('usuarios')
        .select('uid, email, nome_completo, telefone, foto')
        .eq('email', buscaEmail.trim())
        .single();

      if (usuarioError) {
        if (usuarioError.code === 'PGRST116') {
          setUsuarioEncontrado(null);
          alert('Usuário não encontrado no sistema');
        } else {
          throw usuarioError;
        }
        return;
      }

      // Buscar TODOS os detalhes das lojas associadas a este usuário
      const { data: lojasAssociadas, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', usuario.uid);

      if (lojasError) throw lojasError;

      // Combinar dados do usuário com suas lojas
      setUsuarioEncontrado({
        ...usuario,
        lojasAssociadas: lojasAssociadas || []
      });

    } catch (error) {
      console.error('Erro ao buscar usuário:', error);
      alert('Erro ao buscar usuário. Verifique o console.');
      setUsuarioEncontrado(null);
    } finally {
      setBuscando(false);
    }
  };

  // ============================================================================
  // 4. VINCULAR USUÁRIO COMO ENTREGADOR
  // ============================================================================
  const vincularComoEntregador = async (usuario) => {
    if (!confirm(`Vincular ${usuario.nome_completo} como entregador nesta loja?`)) return;
    
    try {
      if (userRole === 'gerente' && (!userLojas || userLojas.length === 0)) {
        alert('Erro: Gerente não está vinculado a nenhuma loja');
        return;
      }

      const lojaId = userRole === 'gerente' ? userLojas[0].id_loja : prompt('Digite o ID da loja (admin):');
      const lojaNome = userRole === 'gerente' ? userLojas[0].loja_nome : prompt('Digite o nome da loja (admin):');

      if (!lojaId || !lojaNome) return;

      // Verificar se usuário já está vinculado a esta loja
      const { data: vinculoExistente } = await supabase
        .from('loja_associada')
        .select('id')
        .eq('uid_usuario', usuario.uid)
        .eq('id_loja', lojaId)
        .single();

      if (vinculoExistente) {
        alert('Este usuário já está vinculado a esta loja');
        return;
      }

      // Vincular usuário como entregador
      const { error } = await supabase
        .from('loja_associada')
        .insert({
          uid_usuario: usuario.uid,
          nome_completo: usuario.nome_completo,
          email_usuario: usuario.email, // ✅ NOVO CAMPO
          funcao: 'entregador',
          id_loja: lojaId,
          loja_nome: lojaNome,
          status_vinculacao: 'ativo',
          veiculo: 'Não informado',
          carga_maxima: 0,
          perimetro_entrega: 'Não definido',
          ultimo_status_vinculacao: new Date().toISOString()
        });

      if (error) throw error;

      alert('✅ Entregador vinculado com sucesso!');
      setBuscaEmail('');
      setUsuarioEncontrado(null);
      carregarEntregadores();
    } catch (error) {
      console.error('Erro ao vincular entregador:', error);
      alert('❌ Erro ao vincular entregador');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: FORMATAR VALOR NULO
  // ============================================================================
  const formatarValor = (valor) => {
    return valor || 'Não informado';
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  if (userRole !== 'admin' && userRole !== 'gerente') {
    return <div className="min-h-screen flex items-center justify-center">Acesso não autorizado</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">👥 Gestão de Entregadores</h1>

      {/* BUSCA POR EMAIL */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Buscar Usuário no Sistema</h2>
        <div className="flex gap-2 mb-4">
          <input
            type="email"
            placeholder="Digite o email do usuário"
            value={buscaEmail}
            onChange={(e) => setBuscaEmail(e.target.value)}
            className="flex-1 p-2 border border-gray-300 rounded"
            onKeyPress={(e) => e.key === 'Enter' && buscarUsuarioPorEmail()}
          />
          <button
            onClick={buscarUsuarioPorEmail}
            disabled={buscando}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
          >
            {buscando ? 'Buscando...' : 'Buscar'}
          </button>
        </div>

        {/* RESULTADO DA BUSCA - COM MAIS DETALHES */}
        {usuarioEncontrado && (
          <div className="mt-4 p-4 border border-green-200 bg-green-50 rounded">
            <h3 className="font-semibold text-green-800 mb-3">👤 Usuário encontrado:</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
              <div>
                <p><strong>Nome:</strong> {usuarioEncontrado.nome_completo}</p>
                <p><strong>Email:</strong> {usuarioEncontrado.email}</p>
                {usuarioEncontrado.telefone && (
                  <p><strong>Telefone:</strong> {usuarioEncontrado.telefone}</p>
                )}
              </div>
              
              {usuarioEncontrado.foto && (
                <div className="flex justify-center">
                  <img 
                    src={usuarioEncontrado.foto} 
                    alt="Foto do usuário"
                    className="w-16 h-16 rounded-full"
                  />
                </div>
              )}
            </div>

            <div className="mt-3">
              <strong>🏪 Lojas Associadas:</strong>
              {usuarioEncontrado.lojasAssociadas.length > 0 ? (
                <div className="ml-4 mt-2 space-y-2">
                  {usuarioEncontrado.lojasAssociadas.map((loja, index) => (
                    <div key={index} className="p-2 bg-white rounded border">
                      <p><strong>Loja:</strong> {loja.loja_nome} ({loja.id_loja})</p>
                      <p><strong>Função:</strong> 
                        <span className={`ml-1 ${
                          loja.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                        }`}>
                          {loja.funcao}
                        </span>
                      </p>
                      <p><strong>Status:</strong> 
                        <span className={`ml-1 ${
                          loja.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {loja.status_vinculacao}
                        </span>
                      </p>
                      {loja.veiculo && <p><strong>🚗 Veículo:</strong> {formatarValor(loja.veiculo)}</p>}
                      {loja.carga_maxima > 0 && <p><strong>📦 Carga Máxima:</strong> {loja.carga_maxima} kg</p>}
                      {loja.perimetro_entrega && <p><strong>📍 Perímetro:</strong> {formatarValor(loja.perimetro_entrega)}</p>}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-600 ml-4">Nenhuma loja associada</p>
              )}
            </div>

            <button
              onClick={() => vincularComoEntregador(usuarioEncontrado)}
              className="mt-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
            >
              ➕ Vincular como Entregador
            </button>
          </div>
        )}
      </div>

      {/* LISTA DE PESSOAS DA LOJA - COM MAIS DETALHES */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4">
          {userRole === 'gerente' ? '👥 Pessoas da Minha Loja' : '👥 Pessoas do Sistema'}
        </h2>
        
        {loading ? (
          <p className="text-gray-500">Carregando...</p>
        ) : entregadores.length === 0 ? (
          <p className="text-gray-500">Nenhuma pessoa encontrada</p>
        ) : (
          <div className="grid gap-4">
            {entregadores.map((pessoa) => (
              <div key={pessoa.id} className="border p-4 rounded-lg bg-gray-50">
                <h3 className="font-semibold text-lg text-purple-800">
                  {pessoa.funcao === 'gerente' ? '👑 ' : '🚚 '}
                  {pessoa.nome_completo}
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-2">
                  <div>
                    <p><strong>📧 Email:</strong> {pessoa.email_usuario}</p>
                    <p><strong>🎯 Função:</strong> 
                      <span className={`ml-1 ${
                        pessoa.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                      }`}>
                        {pessoa.funcao}
                      </span>
                    </p>
                    <p><strong>📊 Status:</strong> 
                      <span className={`ml-1 ${
                        pessoa.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {pessoa.status_vinculacao}
                      </span>
                    </p>
                  </div>
                  
<div>
  <p><strong>🏪 Loja:</strong> {pessoa.loja_nome} ({pessoa.id_loja})</p>
  
  {/* MOSTRAR CAMPOS DE ENTREGA APENAS PARA ENTREGADORES */}
  {pessoa.funcao === 'entregador' && (
    <>
      <p><strong>🚗 Veículo:</strong> {formatarValor(pessoa.veiculo)}</p>
      {pessoa.carga_maxima > 0 && (
        <p><strong>📦 Carga Máx:</strong> {pessoa.carga_maxima} kg</p>
      )}
      {pessoa.perimetro_entrega && (
        <p><strong>📍 Perímetro:</strong> {formatarValor(pessoa.perimetro_entrega)}</p>
      )}
    </>
  )}

  {/* MOSTRAR MENSAGEM ESPECIAL PARA GERENTES */}
  {pessoa.funcao === 'gerente' && (
    <p className="text-green-600 text-sm mt-1">
      👑 Gerente da loja
    </p>
  )}
</div>
                </div>
                
                {pessoa.data_desligamento && (
                  <p className="text-red-600 text-sm mt-2">
                    <strong>🗓️ Data desligamento:</strong> {new Date(pessoa.data_desligamento).toLocaleDateString('pt-BR')}
                  </p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


// =========================================
// 7. pages\index.js
// =========================================

// Importação de dependências necessárias do Next.js e React
import Head from 'next/head';
import Link from 'next/link';
import { useEffect } from 'react';

// Componente principal da página inicial
export default function HomePage() {
  // Hook useEffect para configurar a navegação suave
  useEffect(() => {
    // Seleção de todos os links internos que começam com '#'
    const anchors = document.querySelectorAll('a[href^="#"]');

    // Função para lidar com o clique em links internos
    const handleAnchorClick = (e) => {
      e.preventDefault();
      const targetId = e.currentTarget.getAttribute('href');

      // Verifica se o link não é apenas '#'
      if (targetId === '#') return;

      // Encontra o elemento alvo pelo ID
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        // Realiza a rolagem suave com offset para compensar o cabeçalho
        window.scrollTo({
          top: targetElement.offsetTop - 80, // Ajuste de 80px para o cabeçalho
          behavior: 'smooth'
        });
      }
    };

    // Adiciona event listeners para todos os links internos
    anchors.forEach(anchor => {
      anchor.addEventListener('click', handleAnchorClick);
    });

    // Cleanup: remove os event listeners quando o componente é desmontado
    return () => {
      anchors.forEach(anchor => {
        anchor.removeEventListener('click', handleAnchorClick);
      });
    };
  }, []);

  return (
    <>
      {/* Configuração do cabeçalho HTML com título e importação de Font Awesome */}
      <Head>
        <title>VendasWoo + EntregasWoo - Sistema Completo para E-commerce e Entregas</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
      </Head>

      {/* Cabeçalho da página com apenas o título */}
      <header>
        <div className="container">
          <div className="header-content">
            <div className="logo">
              <h1>VendasWoo <span>+ EntregasWoo</span></h1>
            </div>
          </div>
        </div>
      </header>

      {/* Seção Hero com chamada principal */}
      <section className="hero">
        <div className="container">
          <h2>Sistema Completo para E-commerce e Entregas</h2>
          <p>Conectamos lojas a entregadores locais para simplificar e agilizar as entregas na sua região.</p>
          <div className="hero-buttons">
            <Link href="#para-lojas" className="btn">Sou Lojista</Link>
            <Link href="#para-entregadores" className="btn btn-accent">Sou Entregador</Link>
            <a href="https://wa.me/552132727548" className="btn btn-outline" target="_blank" rel="noopener noreferrer">Fale no WhatsApp</a>
          </div>
        </div>
      </section>

      {/* Seção Como Funciona com passos para entregadores e lojas */}
      <section className="how-it-works" id="como-funciona">
        <div className="container">
          <div className="section-title">
            <h2>Como Funciona</h2>
            <p>Dois sistemas integrados para atender lojas e entregadores</p>
          </div>
          
          <div className="dual-steps">
            <div className="steps-container">
              <h3 className="steps-title">Para Entregadores</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Cadastro Simplificado</h4>
                  <p>Faça seu cadastro como motorista autônomo MEI com documentação em ordem.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Defina sua Área de Atuação</h4>
                  <p>Informe seu veículo, capacidade de carga e o perímetro onde quer trabalhar.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Conexão com Lojas</h4>
                  <p>Conectamos você às empresas que precisam de entregas na sua região.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Combine Preços e Área</h4>
                  <p>Negocie diretamente com as lojas os valores e detalhes do serviço.</p>
                </div>
              </div>
            </div>
            
            <div className="steps-container">
              <h3 className="steps-title">Para Lojas</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Plataforma Completa</h4>
                  <p>Tenha seu e-commerce com catálogo de produtos, atualização de preços fácil e múltiplas formas de pagamento.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Integração Total</h4>
                  <p>Receba pedidos pelo app, computador e WhatsApp integrados em um único sistema.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Gestão Completa</h4>
                  <p>Controle de estoque, relatórios, emissão de recibos e muito mais.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Entregas Terceirizadas</h4>
                  <p>Use o EntregasWoo para conectar-se a entregadores de bairro e terceirizar suas entregas.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Seção Para Lojas com benefícios */}
      <section id="para-lojas" className="benefits">
        <div className="container">
          <div className="section-title">
            <h2>Para Lojas e Empresas</h2>
            <p>Sistema completo para vendas online e gestão de entregas</p>
          </div>
          <ul className="benefits-list">
            <li>Plataforma online para apresentar seus produtos de forma profissional</li>
            <li>Atualização de preços fácil e intuitiva</li>
            <li>Múltiplas formas de pagamento integradas (PIX, cartão, etc)</li>
            <li>Recebimento de pedidos por app, computador e WhatsApp</li>
            <li>Controle de estoque em tempo real</li>
            <li>Relatórios detalhados de vendas e desempenho</li>
            <li>Emissão de recibos e comprovantes</li>
            <li>App EntregasWoo para terceirizar entregas para motoristas de bairro</li>
            <li>Gestão integrada de pedidos e entregas em um único sistema</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de saber mais sobre o sistema para lojas" className="btn">Quero saber mais</a>
          </div>
        </div>
      </section>

      {/* Seção Para Entregadores com benefícios */}
      <section id="para-entregadores" className="benefits" style={{backgroundColor: 'var(--light-gray)'}}>
        <div className="container">
          <div className="section-title">
            <h2>Para Entregadores</h2>
            <p>Conecte-se com lojas da sua região e aumente sua renda</p>
          </div>
          <ul className="benefits-list">
            <li>Cadastro gratuito para motoristas MEI com documentação regular</li>
            <li>Defina o tipo de veículo, capacidade de carga e área de atuação</li>
            <li>Escolha o perímetro onde quer trabalhar (bairros, regiões)</li>
            <li>Conexão direta com empresas que precisam de entregas na sua área</li>
            <li>Negociação direta de preços e condições de serviço</li>
            <li>Flexibilidade de horários - trabalhe quando quiser</li>
            <li>App simples para gerenciar corridas e ganhos</li>
            <li>Pagamentos rápidos e transparentes</li>
            <li>Construa sua reputação com avaliações das lojas</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de me cadastrar como entregador" className="btn btn-accent">Quero me cadastrar</a>
          </div>
        </div>
      </section>

      {/* Seção de Chamada para Ação (CTA) */}
      <section className="cta">
        <div className="container">
          <h2>Pronto para transformar seu negócio ou aumentar sua renda?</h2>
          <p>Entre em contato e faça um teste grátis dos nossos sistemas</p>
          <a href="https://wa.me/552132727548" className="btn" target="_blank" rel="noopener noreferrer">Fale conosco no WhatsApp</a>
        </div>
      </section>

      {/* Rodapé com links rápidos e informações de contato */}
      <footer id="contato">
        <div className="container">
          <div className="footer-content">
            <div className="footer-column">
              <h3>VendasWoo + EntregasWoo</h3>
              <p>Sistema integrado de e-commerce e gestão de entregas</p>
            </div>
            <div className="footer-column">
              <h3>Links Rápidos</h3>
              <ul>
                <li><Link href="#como-funciona">Como Funciona</Link></li>
                <li><Link href="#para-lojas">Para Lojas</Link></li>
                <li><Link href="#para-entregadores">Para Entregadores</Link></li>
                <li><a href="https://pedidossimples.com.br/vendaswoo/" target="_blank" rel="noopener noreferrer">VendasWoo</a></li>
              </ul>
            </div>
            <div className="footer-column">
              <h3>Contato</h3>
              <ul>
                <li>Email: comercial@abistec.com.br</li>
                <li>WhatsApp: (21) 3272-7548</li>
                <li>Site: <a href="https://pedidossimples.com.br">pedidossimples.com.br</a></li>
              </ul>
            </div>
          </div>
          <div className="copyright">
            <p>&copy; 2023 VendasWoo + EntregasWoo - Abistec Serviços Tecnológicos Ltda</p>
          </div>
        </div>
      </footer>

      {/* Estilos globais usando styled-jsx */}
      <style jsx global>{`
        :root {
          --primary: #3b7b2b;
          --secondary: #5c3b27;
          --accent: #f39c12;
          --light: #fdfaf6;
          --dark: #333;
          --gray: #777;
          --light-gray: #f5f5f5;
        }
        
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
          background-color: var(--light);
          color: var(--dark);
          line-height: 1.6;
        }
        
        .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0 20px;
        }
        
        /* Estilos do Cabeçalho */
        header {
          background-color: white;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          /* Removido o comportamento sticky para fluir com a rolagem */
        }
        
        .header-content {
          display: flex;
          justify-content: center;
          align-items: center;
          padding: 15px 0;
        }
        
        .logo {
          display: flex;
          align-items: center;
        }
        
        .logo h1 {
          color: var(--primary);
          font-size: 1.8rem;
          font-weight: bold;
        }
        
        .logo span {
          color: var(--secondary);
        }
        
        nav ul {
          display: flex;
          list-style: none;
        }
        
        nav li {
          margin-left: 25px;
        }
        
        nav a {
          text-decoration: none;
          color: var(--dark);
          font-weight: 500;
          transition: color 0.3s;
        }
        
        nav a:hover {
          color: var(--primary);
        }
        
        .btn {
          display: inline-block;
          padding: 12px 25px;
          background-color: var(--primary);
          color: white;
          border-radius: 5px;
          text-decoration: none;
          font-weight: 600;
          transition: all 0.3s;
          border: none;
          cursor: pointer;
        }
        
        .btn:hover {
          background-color: #2c5e20;
          transform: translateY(-2px);
        }
        
        .btn-outline {
          background-color: transparent;
          border: 2px solid var(--primary);
          color: var(--primary);
        }
        
        .btn-outline:hover {
          background-color: var(--primary);
          color: white;
        }
        
        .btn-accent {
          background-color: var(--accent);
        }
        
        .btn-accent:hover {
          background-color: #e67e22;
        }
        
        /* Estilos da Seção Hero */
        .hero {
          padding: 80px 0;
          background: linear-gradient(135deg, rgba(59,123,43,0.1) 0%, rgba(92,59,39,0.1) 100%);
          text-align: center;
        }
        
        .hero h2 {
          font-size: 2.5rem;
          margin-bottom: 20px;
          color: var(--secondary);
        }
        
        .hero p {
          font-size: 1.2rem;
          max-width: 800px;
          margin: 0 auto 30px;
          color: var(--gray);
        }
        
        .hero-buttons {
          display: flex;
          justify-content: center;
          gap: 15px;
          margin-top: 30px;
          flex-wrap: wrap;
        }
        
        /* Estilos da Seção Como Funciona */
        .how-it-works {
          padding: 80px 0;
          background-color: var(--light-gray);
        }
        
        .section-title {
          text-align: center;
          margin-bottom: 50px;
        }
        
        .section-title h2 {
          font-size: 2rem;
          color: var(--secondary);
          margin-bottom: 15px;
        }
        
        .section-title p {
          color: var(--gray);
          max-width: 700px;
          margin: 0 auto;
        }
        
        .dual-steps {
          display: flex;
          justify-content: space-between;
          flex-wrap: wrap;
          gap: 40px;
        }
        
        .steps-container {
          flex: 1;
          min-width: 300px;
          background: white;
          border-radius: 10px;
          padding: 30px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        .steps-title {
          text-align: center;
          margin-bottom: 30px;
          color: var(--primary);
          font-size: 1.5rem;
        }
        
        .step {
          display: flex;
          margin-bottom: 25px;
          align-items: flex-start;
        }
        
        .step-number {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background-color: var(--primary);
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          margin-right: 15px;
          flex-shrink: 0;
        }
        
        .step-content {
          flex: 1;
        }
        
        /* Estilos da Seção Benefícios */
        .benefits {
          padding: 80px 0;
          background-color: white;
        }
        
        .benefits-list {
          list-style: none;
          max-width: 800px;
          margin: 0 auto;
        }
        
        .benefits-list li {
          padding: 15px 0;
          border-bottom: 1px solid #eee;
          display: flex;
          align-items: center;
        }
        
        .benefits-list li:before {
          content: "✓";
          color: var(--primary);
          font-weight: bold;
          margin-right: 10px;
          font-size: 1.2rem;
        }
        
        /* Estilos da Seção CTA */
        .cta {
          padding: 80px 0;
          background: linear-gradient(135deg, var(--primary) 0%, #2c5e20 100%);
          color: white;
          text-align: center;
        }
        
        .cta h2 {
          font-size: 2.2rem;
          margin-bottom: 20px;
        }
        
        .cta p {
          max-width: 700px;
          margin: 0 auto 30px;
          font-size: 1.1rem;
        }
        
        .cta .btn {
          background-color: white;
          color: var(--primary);
        }
        
        .cta .btn:hover {
          background-color: #f0f0f0;
        }
        
        /* Estilos do Rodapé */
        footer {
          background-color: var(--secondary);
          color: white;
          padding: 50px 0 20px;
        }
        
        .footer-content {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 30px;
          margin-bottom: 30px;
        }
        
        .footer-column h3 {
          margin-bottom: 20px;
          font-size: 1.2rem;
        }
        
        .footer-column ul {
          list-style: none;
        }
        
        .footer-column li {
          margin-bottom: 10px;
        }
        
        .footer-column a {
          color: #ddd;
          text-decoration: none;
          transition: color 0.3s;
        }
        
        .footer-column a:hover {
          color: white;
        }
        
        .copyright {
          text-align: center;
          padding-top: 20px;
          border-top: 1px solid rgba(255,255,255,0.1);
          font-size: 0.9rem;
          color: #ddd;
        }
        
        /* Estilos Responsivos */
        @media (max-width: 768px) {
          .header-content {
            flex-direction: column;
          }
          
          .hero h2 {
            font-size: 2rem;
          }
          
          .hero-buttons {
            flex-direction: column;
            align-items: center;
          }
          
          .dual-steps {
            flex-direction: column;
          }
        }
      `}</style>
    </>
  );
}



// =========================================
// 8. pages\login.js
// =========================================

// pages/login.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE LOGIN
// ==============================================================================
/**
 * Página de login com suporte a autenticação via Google OAuth e email/senha.
 * Inclui modal controlado, redirecionamento baseado em perfil (admin, gerente, entregador)
 * e links para cadastro e recuperação de senha.
 * Aprimoramentos: Validação de formulário, acessibilidade e feedback visual.
 */
export default function Login() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [email, setEmail] = useState('');              // Email do usuário
  const [password, setPassword] = useState('');        // Senha do usuário
  const [loading, setLoading] = useState(false);       // Estado de carregamento
  const [error, setError] = useState('');              // Mensagens de erro
  const [showPassword, setShowPassword] = useState(false); // Visibilidade da senha
  const [isModalOpen, setIsModalOpen] = useState(false);  // Controle do modal
  const [formValid, setFormValid] = useState(false);    // Validação do formulário
  const router = useRouter();

  // ============================================================================
  // 2. EFFECT: VALIDAR FORMULÁRIO EM TEMPO REAL
  // ============================================================================
  /**
   * Valida email e senha em tempo real, atualizando o estado de validade.
   * Requisitos: Email válido e senha com no mínimo 6 caracteres.
   */
  useEffect(() => {
    const emailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    const passwordValid = password.length >= 6;
    setFormValid(emailValid && passwordValid);
  }, [email, password]);

  // ============================================================================
  // 3. FUNÇÃO: TRADUZIR ERROS TÉCNICOS PARA MENSAGENS AMIGÁVEIS
  // ============================================================================
  /**
   * Converte erros técnicos do Supabase em mensagens amigáveis para o usuário
   */
  const translateError = (error) => {
    if (error.message.includes('Invalid login credentials')) {
      return 'E-mail ou senha incorretos. Verifique suas credenciais.';
    } else if (error.message.includes('Email not confirmed')) {
      return 'E-mail não confirmado. Verifique sua caixa de entrada.';
    } else if (error.message.includes('User not found')) {
      return 'Usuário não encontrado. Verifique o e-mail ou crie uma conta.';
    } else if (error.message.includes('Network error')) {
      return 'Erro de conexão. Verifique sua internet e tente novamente.';
    } else if (error.message.includes('Too many requests')) {
      return 'Muitas tentativas. Tente novamente em alguns minutos.';
    } else {
      return 'Erro ao fazer login. Tente novamente.';
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: LOGIN COM EMAIL/SENHA
  // ============================================================================
  /**
   * Autentica o usuário com email/senha e redireciona com base no perfil.
   * Inclui validação prévia e tratamento de erros detalhado.
   */
  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    if (!formValid) {
      setError('Por favor, insira um email válido e uma senha com pelo menos 6 caracteres.');
      setLoading(false);
      return;
    }

    try {
      // 4.1. AUTENTICAÇÃO COM SUPABASE
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      
      if (authError) {
        throw authError;
      }

      // 4.2. VERIFICAÇÃO DE PERFIL E REDIRECIONAMENTO
      const { data: usuario, error: userError } = await supabase
        .from('usuarios')
        .select('is_admin')
        .eq('uid', authData.user.id)
        .single();
      
      if (userError) throw userError;

      if (usuario.is_admin) {
        router.push('/admin');
        return;
      }

      const { data: associacoes, error: assocError } = await supabase
        .from('loja_associada')
        .select('funcao')
        .eq('uid_usuario', authData.user.id)
        .eq('status_vinculacao', 'ativo');
      
      if (assocError) throw new Error('Erro ao verificar permissões: ' + assocError.message);

      if (!associacoes || associacoes.length === 0) {
        setError('Você não possui acesso ativo. Contate o administrador.');
        await supabase.auth.signOut(); // Desconta usuário sem acesso
        return;
      }

      const primeiraAssociacao = associacoes[0];
      switch (primeiraAssociacao.funcao) {
        case 'gerente':
          router.push('/todos-pedidos');
          break;
        case 'entregador':
          router.push('/pedidos-pendentes');
          break;
        default:
          throw new Error('Função não reconhecida.');
      }
    } catch (error) {
      // 4.3. TRATAMENTO DE ERROS AMIGÁVEL
      setError(translateError(error));
      console.error('Erro no login:', error);
    } finally {
      // 4.4. FINALIZAÇÃO
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: LOGIN COM GOOGLE
  // ============================================================================
  /**
   * Inicia o fluxo de login com Google OAuth, redirecionando para completar perfil.
   * Inclui tratamento de erros e feedback visual.
   */
  const handleGoogleLogin = async () => {
    try {
      setLoading(true);
      setError('');
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/perfil`,
        },
      });
      if (error) throw error;
    } catch (error) {
      setError(translateError(error));
      console.error('Erro no login Google:', error);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 6.1. SEÇÃO VISUAL: LOGO E TÍTULO */}
        <div className="text-center mb-8">
          <div
            className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center"
            role="img"
            aria-label="Ícone de entrega"
          >
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h1 className="text-3xl font-bold text-white">EntregasWoo</h1>
          <p className="text-purple-200 mt-2">Sistema de Gestão de Entregas</p>
        </div>

        {/* 6.2. CARD PRINCIPAL: CONTAINER DE LOGIN */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h2 className="text-2xl font-bold text-gray-800 text-center mb-6" id="login-title">
            Acessar Sistema
          </h2>

          {/* 6.2.1. EXIBIÇÃO DE ERRO */}
          {error && (
            <div
              className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4 flex items-start"
              role="alert"
            >
              <svg className="w-5 h-5 mr-2 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>{error}</span>
            </div>
          )}

          {/* 6.2.2. BOTÃO DE LOGIN GOOGLE */}
          <button
            onClick={handleGoogleLogin}
            disabled={loading}
            className="w-full flex items-center justify-center py-3 px-4 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Login com Google"
          >
            {loading ? (
              <span className="flex items-center">
                <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Carregando...
              </span>
            ) : (
              <>
                <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Entrar com Google
              </>
            )}
          </button>

          {/* 6.2.3. ABRE MODAL PARA LOGIN EMAIL/SENHA */}
          <div className="mt-4 text-center">
            <button
              onClick={() => setIsModalOpen(true)}
              className="text-purple-600 hover:text-purple-800 font-medium"
              aria-controls="email-login-modal"
            >
              Ou entre com email e senha
            </button>
          </div>

          {/* 6.2.4. MODAL DE LOGIN EMAIL/SENHA */}
          {isModalOpen && (
            <div
              className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
              role="dialog"
              aria-labelledby="email-login-modal-title"
              aria-modal="true"
              onClick={() => setIsModalOpen(false)}
            >
              <div 
                className="bg-white rounded-2xl shadow-2xl p-6 w-full max-w-md"
                onClick={(e) => e.stopPropagation()}
              >
                <div className="flex justify-between items-center mb-4">
                  <h3
                    id="email-login-modal-title"
                    className="text-xl font-bold text-gray-800"
                  >
                    Login com Email
                  </h3>
                  <button
                    onClick={() => setIsModalOpen(false)}
                    className="text-gray-500 hover:text-gray-700"
                    aria-label="Fechar modal"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                <form onSubmit={handleLogin} className="space-y-4">
                  <div>
                    <label
                      htmlFor="email-input"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Email
                    </label>
                    <input
                      id="email-input"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      required
                      disabled={loading}
                      aria-required="true"
                      placeholder="seu@email.com"
                    />
                  </div>
                  
                  <div className="relative">
                    <label
                      htmlFor="password-input"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Senha
                    </label>
                    <input
                      id="password-input"
                      type={showPassword ? "text" : "password"}
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      required
                      disabled={loading}
                      aria-required="true"
                      placeholder="Sua senha"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute right-3 top-9 text-gray-500"
                      disabled={loading}
                      aria-label={showPassword ? "Ocultar senha" : "Mostrar senha"}
                    >
                      {showPassword ? (
                        <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                        </svg>
                      ) : (
                        <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                        </svg>
                      )}
                    </button>
                  </div>
                  
                  <button
                    type="submit"
                    disabled={loading || !formValid}
                    className="w-full bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {loading ? (
                      <span className="flex items-center justify-center">
                        <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Entrando...
                      </span>
                    ) : (
                      'Entrar'
                    )}
                  </button>
                </form>
                
                <div className="mt-4 text-center">
                  <Link
                    href="/recuperar-senha"
                    className="text-purple-600 hover:text-purple-800 text-sm"
                    onClick={() => setIsModalOpen(false)}
                  >
                    Esqueceu sua senha?
                  </Link>
                </div>
              </div>
            </div>
          )}

          {/* 6.2.5. LINKS EXTRAS */}
          <div className="mt-6 text-center space-y-3">
            <p className="text-gray-600 text-sm">
              Não tem uma conta?{' '}
              <Link
                href="/cadastro"
                className="text-purple-600 hover:text-purple-800 font-medium"
              >
                Criar nova conta
              </Link>
            </p>
          </div>
        </div>

        {/* 6.3. SEÇÃO DE RODAPÉ */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2025 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 9. pages\orders.js
// =========================================

import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const { data, error } = await supabase.from('pedidos').select('*');
        if (error) throw error;
        setOrders(data || []);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

  if (loading) return <p>Carregando pedidos...</p>;
  if (error) return <p>Erro: {error}</p>;

  return (
    <div>
      <h1>Lista de Pedidos</h1>
      {orders.length === 0 ? (
        <p>Nenhum pedido encontrado.</p>
      ) : (
        <ul>
          {orders.map((order) => (
            <li key={order.id} style={{ marginBottom: '10px' }}>
              <strong>Pedido #{order.id_woo}</strong> - Cliente: {order.nome_cliente} - 
              Total: R${order.total} - Status: {order.status_transporte || 'Pendente'}
              <button
                onClick={() => handleAcceptOrder(order.id)}
                style={{ marginLeft: '10px', padding: '5px 10px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '3px' }}
                disabled={order.status_transporte === 'Entregue'}
              >
                Aceitar
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );

  async function handleAcceptOrder(orderId) {
    const { error } = await supabase
      .from('pedidos')
      .update({ status_transporte: 'Aceito' })
      .eq('id', orderId);
    if (error) {
      setError(`Erro ao aceitar pedido: ${error.message}`);
    } else {
      setOrders(orders.map(order =>
        order.id === orderId ? { ...order, status_transporte: 'Aceito' } : order
      ));
    }
  }
}


// =========================================
// 10. pages\pedidos-aceitos.js
// =========================================

// pages/pedidos-aceitos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { filterPedidosPorUsuario } from '../utils/filterPedidos';
import { OrderModal, WithCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS ACEITOS
// ==============================================================================
export default function PedidosAceitos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]); // Todos os pedidos do banco
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [loadingAcoes, setLoadingAcoes] = useState(false); // Loading para ações
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null); // Pedido para modal
  const [modalAberto, setModalAberto] = useState(false); // Controle do modal
  
  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getPedidosAceitos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS ACEITOS/EM ROTA
  // ============================================================================
  const getPedidosAceitos = async () => {
    try {
      setLoading(true);
      
      // Busca TODOS os pedidos com status aceito ou em rota
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aceito', 'em rota'])
        .order('data', { ascending: false });

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. FILTRAR PEDIDOS POR USUÁRIO
  // ============================================================================
  const pedidosFiltrados = filterPedidosPorUsuario(
    todosPedidos,
    userRole, 
    userLojas
  );

  // ============================================================================
  // 6. FUNÇÕES DE AÇÃO: SAIR PARA ENTREGA / ENTREGAR / CANCELAR
  // ============================================================================
  const handleSairEntrega = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'em rota' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Atualiza lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, status_transporte: 'em rota' } : p
      ));
      
    } catch (error) {
      console.error('Erro ao atualizar status:', error);
      alert('Erro ao sair para entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleEntregar = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'entregue' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista (pedido entregue vai para outra página)
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Pedido marcado como entregue com sucesso!');
      
    } catch (error) {
      console.error('Erro ao entregar pedido:', error);
      alert('Erro ao marcar como entregue.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleCancelar = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja cancelar esta entrega?')) return;
    
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'cancelado' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Entrega cancelada com sucesso.');
      
    } catch (error) {
      console.error('Erro ao cancelar pedido:', error);
      alert('Erro ao cancelar entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  // ============================================================================
  // 7. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 8. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Carregando perfil...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">✅ Pedidos Aceitos</h1>

      {/* ESTADO DE CARREGAMENTO */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        /* LISTA DE PEDIDOS */
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido aceito encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>

{/* FRETE OFERECIDO - ADICIONADO */}
{pedido.frete_oferecido && (
  <p className="text-sm text-green-600 font-medium mt-1">
    💰 Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
  </p>
)}

<p className="text-sm">
  <span className="font-medium">Status:</span> 
  <span className={pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-green-600'}>
    {pedido.status_transporte === 'em rota' ? ' 🚚 Em Rota' : ' ✅ Aceito'}
  </span>
</p>
                  </div>

                  {/* BOTÕES DE AÇÃO */}
                  <div className="flex flex-col gap-2 ml-4">
                    {pedido.status_transporte === 'aceito' && (
                      <button 
                        onClick={() => handleSairEntrega(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-orange-500 text-white px-4 py-2 rounded text-sm hover:bg-orange-600 transition-colors"
                      >
                        🚚 Sair para Entrega
                      </button>
                    )}
                    
                    {pedido.status_transporte === 'em rota' && (
                      <button 
                        onClick={() => handleEntregar(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-green-500 text-white px-4 py-2 rounded text-sm hover:bg-green-600 transition-colors"
                      >
                        ✅ Entregar
                      </button>
                    )}
                    
                    <button 
                      onClick={() => handleCancelar(pedido.id)}
                      disabled={loadingAcoes}
                      className="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600 transition-colors"
                    >
                      ❌ Cancelar
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 11. pages\pedidos-entregues.js
// =========================================

// pages/pedidos-entregues.js
import PedidosEntregues from '../components/PedidosEntregues';

/**
 * Página principal de Pedidos Entregues
 * Delega a renderização para o componente PedidosEntregues
 * que decide qual versão mostrar (Admin, Gerente ou Entregador)
 */
export default function PedidosEntreguesPage() {
  return <PedidosEntregues />;
}


// =========================================
// 12. pages\pedidos-pendentes.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { OrderModal, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS PENDENTES
// ==============================================================================
export default function PedidosPendentes() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [pedidos, setPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [loadingAceitar, setLoadingAceitar] = useState(false);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    checkAuthAndGetPedidos();
  }, []);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }
      await getPedidosPendentes();
    } catch (error) {
      console.error('Erro na autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS PENDENTES
  // ============================================================================
  const getPedidosPendentes = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aguardando', 'revertido'])
        .order('data', { ascending: false });

      if (error) throw error;
      setPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos.');
    } finally {
      setLoading(false);
    }
  };

// ============================================================================
// 5. FUNÇÃO: ACEITAR PEDIDO (CORRIGIDA - ESTRUTURA CORRETA)
// ============================================================================
const handleAceitarPedido = async (pedidoId) => {
  try {
    setLoadingAceitar(true);
    
    // 1. Verificar se usuário está autenticado
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      alert('Sessão expirada. Faça login novamente.');
      router.push('/login');
      return;
    }

    // 2. ✅ BUSCAR TELEFONE DO USUÁRIO na tabela usuarios
    const { data: usuarioData, error: usuarioError } = await supabase
      .from('usuarios')
      .select('telefone, nome_completo')
      .eq('uid', user.id)
      .single();

    if (usuarioError) {
      console.warn('Erro ao buscar telefone do usuário:', usuarioError);
      // Não impede a continuação - usamos valores padrão
    }

    // 3. ✅ BUSCAR DADOS DA LOJA ASSOCIADA
    const { data: entregadorData, error: entregadorError } = await supabase
      .from('loja_associada')
      .select('nome_completo, loja_telefone, loja_nome')
      .eq('uid_usuario', user.id)
      .limit(1);

    if (entregadorError) {
      console.warn('Erro ao buscar dados da loja:', entregadorError);
      // Não impede a continuação
    }

    const entregador = entregadorData?.[0];
    const usuario = usuarioData;

    // 4. ✅ ATUALIZAR PEDIDO COM DADOS CORRETOS
    const { error: updateError } = await supabase
      .from('pedidos')
      .update({
        status_transporte: 'aceito',
        aceito_por_uid: user.id,
        aceito_por_nome: entregador?.nome_completo || usuario?.nome_completo || user.email,
        aceito_por_email: user.email,
        aceito_por_telefone: usuario?.telefone || entregador?.loja_telefone || 'Não informado',
        ultimo_status: new Date().toISOString()
      })
      .eq('id', pedidoId);

    if (updateError) {
      throw new Error('Erro ao atualizar pedido: ' + updateError.message);
    }

    // 5. Atualizar lista localmente
    setPedidos(pedidos.filter(pedido => pedido.id !== pedidoId));
    alert('✅ Pedido aceito com sucesso!');

  } catch (error) {
    console.error('Erro ao aceitar pedido:', error);
    alert(`❌ ${error.message}`);
  } finally {
    setLoadingAceitar(false);
  }
};

  // ============================================================================
  // 6. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 7. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📋 Pedidos Pendentes</h1>
      
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidos.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido pendente encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>
                    {pedido.frete_oferecido && (
                      <p className="text-sm text-green-600 font-medium mt-1">
                        💰 Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
                      </p>
                    )}
                  </div>

                  <button 
                    onClick={() => handleAceitarPedido(pedido.id)}
                    disabled={loadingAceitar}
                    className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 
                             transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed
                             ml-4 min-w-[80px]"
                  >
                    {loadingAceitar ? '⏳' : '✅'} Aceitar
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithoutCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 13. pages\perfil.js
// =========================================

// pages/perfil.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import EditUsuarioModal from '../components/EditUsuarioModal';
import EditLojaModal from '../components/EditLojaModal';

// ==============================================================================
// PÁGINA: PERFIL DO USUÁRIO
// ==============================================================================
export default function Perfil() {
  const router = useRouter();
  const { userProfile, userRole, userLojas, loading, error } = useUserProfile();
  const [modalUsuarioOpen, setModalUsuarioOpen] = useState(false);
  const [modalLojaOpen, setModalLojaOpen] = useState(false);
  const [lojaSelecionada, setLojaSelecionada] = useState(null);
  const [lojasAtualizadas, setLojasAtualizadas] = useState([]);

  // ============================================================================
  // 1. MAPEAMENTO DOS NOMES CORRETOS DAS LOJAS
  // ============================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ============================================================================
  // 2. ATUALIZAR OS NOMES DAS LOJAS COM OS VALORES CORRETOS
  // ============================================================================
  useEffect(() => {
    if (userLojas && userLojas.length > 0) {
      const lojasCorrigidas = userLojas.map(loja => ({
        ...loja,
        // Usa o nome correto do mapeamento, mantendo o original como fallback
        loja_nome: mapeamentoLojas[loja.id_loja] || loja.loja_nome
      }));
      setLojasAtualizadas(lojasCorrigidas);
    }
  }, [userLojas]);

  // ============================================================================
  // 3. REDIRECIONAR SE NÃO ESTIVER LOGADO
  // ============================================================================
  if (!loading && !userProfile) {
    router.push('/login');
    return null;
  }

  // ============================================================================
  // 4. ABRIR MODAL DE EDIÇÃO DA LOJA
  // ============================================================================
  const abrirModalLoja = (loja) => {
    setLojaSelecionada(loja);
    setModalLojaOpen(true);
  };

  // ============================================================================
  // 5. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      
      {/* CABEÇALHO */}
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-purple-800 mb-2">👤 Meu Perfil</h1>
        <p className="text-gray-600">Gerencie suas informações pessoais e de entrega</p>
      </div>

      {loading ? (
        <div className="text-center">
          <p className="text-purple-600">Carregando...</p>
        </div>
      ) : error ? (
        <div className="bg-red-100 border border-red-400 text-red-700 p-4 rounded">
          <p>Erro: {error}</p>
        </div>
      ) : (
        <div className="grid md:grid-cols-2 gap-8">
          
          {/* ================================================================== */}
          {/* CARD: DADOS DO USUÁRIO */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">📋 Dados Pessoais</h2>
            
            <div className="space-y-3 mb-4">
              {userProfile.foto && (
                <div className="text-center">
                  <img
                    src={userProfile.foto}
                    alt="Foto do perfil"
                    className="w-20 h-20 rounded-full mx-auto border-2 border-purple-600"
                  />
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome Completo</label>
                <p className="text-gray-800 font-medium">{userProfile.nome_completo || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome de Usuário</label>
                <p className="text-gray-800">{userProfile.nome_usuario || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Email</label>
                <p className="text-gray-800">{userProfile.email}</p>
              </div>
              
              {userProfile.telefone && (
                <div>
                  <label className="block text-sm font-medium text-gray-600">Telefone</label>
                  <p className="text-gray-800">{userProfile.telefone}</p>
                </div>
              )}
            </div>

            <button
              onClick={() => setModalUsuarioOpen(true)}
              className="w-full bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700 transition-colors"
            >
              ✏️ Editar Dados Pessoais
            </button>
          </div>

          {/* ================================================================== */}
          {/* CARD: LOJAS ASSOCIADAS */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            {/* Título dinâmico baseado na função */}
            <h2 className="text-xl font-semibold text-purple-800 mb-4">
              {userRole === 'entregador' ? '🏪 Lojas Associadas' : '👑 Sua Gerência'}
            </h2>
            
            {lojasAtualizadas.length === 0 ? (
              <p className="text-gray-600 text-center py-4">Nenhuma loja associada</p>
            ) : (
              <div className="space-y-3">
                {lojasAtualizadas.map((loja) => (
                  <div key={loja.id} className="border rounded-lg p-3 hover:bg-gray-50">
                    <h3 className="font-semibold text-gray-800">{loja.loja_nome}</h3>
                    <p className="text-sm text-gray-600">ID: {loja.id_loja}</p>
                    <p className="text-sm text-purple-600">Função: {loja.funcao}</p>
                    
                    {/* BLOCO: Mostrar campos de ENTREGADOR apenas se a função na LOJA for 'entregador' */}
                    {loja.funcao === 'entregador' && (
                      <div className="mt-2 text-sm text-gray-700">
                        <p>🚗 Veículo: {loja.veiculo || 'Não informado'}</p>
                        <p>📦 Carga máxima: {loja.carga_maxima || '0'} kg</p>
                        <p>📍 Perímetro: {loja.perimetro_entrega || 'Não definido'}</p>
                      </div>
                    )}

                    {/* BLOCO: Mostrar mensagem especial para GERENTES */}
                    {loja.funcao === 'gerente' && (
                      <div className="mt-2">
                        <p className="text-sm text-green-600 font-medium">👑 Você é o gerente desta loja.</p>
                        <p className="text-xs text-gray-500">Para editar dados da loja, contate um administrador.</p>
                      </div>
                    )}

                    {/* BOTÃO: Mostrar botão de edição APENAS para lojas onde o usuário é ENTREGADOR */}
                    {loja.funcao === 'entregador' && (
                      <button
                        onClick={() => abrirModalLoja(loja)}
                        className="mt-2 w-full bg-blue-600 text-white py-1 px-3 rounded text-sm hover:bg-blue-700 transition-colors"
                      >
                        ✏️ Editar Dados de Entrega
                      </button>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* ====================================================================== */}
      {/* MODAIS */}
      {/* ====================================================================== */}
      <EditUsuarioModal
        isOpen={modalUsuarioOpen}
        onClose={() => setModalUsuarioOpen(false)}
        userProfile={userProfile}
      />
      
      {lojaSelecionada && (
        <EditLojaModal
          isOpen={modalLojaOpen}
          onClose={() => setModalLojaOpen(false)}
          loja={lojaSelecionada}
        />
      )}
    </div>
  );
}


// =========================================
// 14. pages\recuperar-senha.js
// =========================================

import { useState } from 'react';
import { supabase } from '../../lib/supabase';
import Link from 'next/link';

export default function RecuperarSenha() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/atualizar-senha`,
      });

      if (error) throw error;

      setSuccess('Email de recuperação enviado! Verifique sua caixa de entrada.');

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Recuperar Senha</p>
        </div>

        {/* Card de Recuperação */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Recuperar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Enviando...' : 'Enviar Email de Recuperação'}
            </button>
          </form>

          {/* Links */}
          <div className="mt-6 text-center space-y-3">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Voltar para o login
            </Link>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2024 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
RecuperarSenha.noLayout = true;


// =========================================
// 15. pages\relatorios.js
// =========================================

// pages/relatorios.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE RELATÓRIOS
// ============================================================================
export default function Relatorios() {
  // ==========================================================================
  // 1. ESTADOS E HOOKS
  // ==========================================================================
  const { userRole, userLojas, userProfile, loading: userLoading } = useUserProfile();
  const [loading, setLoading] = useState(true);
  const [dadosRelatorios, setDadosRelatorios] = useState(null);
  const [periodo, setPeriodo] = useState('mes'); // dia, semana, mes, ano
  const [dadosTempoReal, setDadosTempoReal] = useState([]); // Dados do dia atual

  // ==========================================================================
  // 2. MAPEAMENTO DOS NOMES DAS LOJAS
  // ==========================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ==========================================================================
  // 3. FUNÇÃO PARA CORRIGIR NOME DA LOJA
  // ==========================================================================
  const corrigirNomeLoja = (idLoja, nomeOriginal) => {
    return mapeamentoLojas[idLoja] || nomeOriginal;
  };

  // ==========================================================================
  // 4. EFFECT PRINCIPAL - CARREGAR DADOS
  // ==========================================================================
  useEffect(() => {
    if (!userLoading) {
      carregarRelatorios();
      carregarDadosTempoReal(); // Dados do dia atual em tempo real
    }
  }, [userLoading, periodo]);

// ==========================================================================
// 5. CARREGAR DADOS EM TEMPO REAL (HOJE) - CORRIGIDO
// ==========================================================================
const carregarDadosTempoReal = async () => {
  try {
    // Data de hoje no formato YYYY-MM-DD
    const hoje = new Date().toISOString().split('T')[0];
    
    let query = supabase
      .from('pedidos')
      .select('*')
      .eq('status_transporte', 'entregue')
      .gte('ultimo_status', `${hoje}T00:00:00`)  // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
      .lte('ultimo_status', `${hoje}T23:59:59`); // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
    
    // Aplicar filtros por perfil
    if (userRole === 'gerente' && userLojas.length > 0) {
      query = query.eq('id_loja', userLojas[0].id_loja);
    } else if (userRole === 'entregador') {
      query = query.eq('aceito_por_uid', userProfile?.uid); // ✅ CORRIGIDO: aceito_por_uid em vez de aceito_por
    }
    
    const { data, error } = await query;
    
    if (error) throw error;
    
    // Processar dados para exibição
    const processados = data.map(pedido => ({
      id: pedido.id,
      pedido: pedido.id_loja_woo,
      cliente: pedido.nome_cliente,
      loja: corrigirNomeLoja(pedido.id_loja, pedido.loja_nome),
      entregador: pedido.aceito_por_nome,
      valor: pedido.frete_pago || 0,
      data: pedido.ultimo_status // ✅ CORRIGIDO: ultimo_status em vez de data_entrega
    }));
    
    setDadosTempoReal(processados);
  } catch (error) {
    console.error('Erro ao carregar dados em tempo real:', error);
  }
};

  // ==========================================================================
  // 6. CARREGAR RELATÓRIOS PRINCIPAIS (CUMULATIVOS)
  // ==========================================================================
  const carregarRelatorios = async () => {
    try {
      setLoading(true);
      
      let dados = null;

      // LÓGICA POR TIPO DE USUÁRIO
      if (userRole === 'admin') {
        dados = await carregarRelatoriosAdmin();
      } else if (userRole === 'gerente') {
        dados = await carregarRelatoriosGerente();
      } else if (userRole === 'entregador') {
        dados = await carregarRelatoriosEntregador();
      }

      setDadosRelatorios(dados);
      
    } catch (error) {
      console.error('Erro ao carregar relatórios:', error);
    } finally {
      setLoading(false);
    }
  };

  // ==========================================================================
  // 7. RELATÓRIOS PARA ADMIN - TODAS AS LOJAS
  // ==========================================================================
  const carregarRelatoriosAdmin = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado,
        usuarios:uid_usuario(nome_completo, email)
      `)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador');

    if (error) throw error;

    // Aplicar correção dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const totalEntregadores = new Set(lojasCorrigidas.map(item => item.uid_usuario)).size;
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'admin',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      totalEntregadores,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // ==========================================================================
  // 8. RELATÓRIOS PARA GERENTE - APENAS SUA LOJA
  // ==========================================================================
  const carregarRelatoriosGerente = async () => {
    if (!userLojas || userLojas.length === 0) return null;

    const idLoja = userLojas[0].id_loja;
    const nomeLojaCorrigido = corrigirNomeLoja(idLoja, userLojas[0].loja_nome);

    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        nome_completo,
        email_usuario,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado,
        veiculo
      `)
      .eq('id_loja', idLoja)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador')
      .order('mes_entregue', { ascending: false });

    if (error) throw error;

    const totalEntregas = data.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = data.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'gerente',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      totalEntregadores: data.length,
      entregadores: data,
      loja: nomeLojaCorrigido,
      periodo
    };
  };

  // ==========================================================================
  // 9. RELATÓRIOS PARA ENTREGADOR - SEUS DADOS
  // ==========================================================================
  const carregarRelatoriosEntregador = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        semana_cancelado,
        mes_entregue,
        mes_cancelado,
        ano_entregue,
        ano_cancelado
      `)
      .eq('uid_usuario', userProfile?.uid)
      .eq('status_vinculacao', 'ativo');

    if (error) throw error;

    // Aplicar correção dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalCancelamentos = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_cancelado`], 0);
    const taxaSucesso = totalEntregas > 0 ? 
      ((totalEntregas - totalCancelamentos) / totalEntregas * 100).toFixed(1) : 0;

    return {
      tipo: 'entregador',
      totalEntregas,
      totalCancelamentos,
      taxaSucesso,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // ==========================================================================
  // 10. CALCULAR TOTAL DE FRETE DOS DADOS EM TEMPO REAL
  // ==========================================================================
  const calcularTotalFreteHoje = () => {
    return dadosTempoReal.reduce((total, pedido) => total + (pedido.valor || 0), 0);
  };

  // ==========================================================================
  // 11. COMPONENTE DE CARREGAMENTO
  // ==========================================================================
  if (userLoading || loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        <span className="ml-3">Carregando relatórios...</span>
      </div>
    );
  }

  // ==========================================================================
  // 12. RENDERIZAÇÃO PRINCIPAL
  // ==========================================================================
  return (
    <RouteGuard requiredRole="entregador">
      <div className="container mx-auto px-4 py-8">
        {/* CABEÇALHO E FILTROS */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
          <h1 className="text-3xl font-bold text-purple-800 mb-4 md:mb-0">
            📊 Relatórios - {userRole?.toUpperCase()}
          </h1>
          
          <select
            value={periodo}
            onChange={(e) => setPeriodo(e.target.value)}
            className="bg-white border border-gray-300 rounded-lg px-4 py-2"
          >
            <option value="dia">Hoje</option>
            <option value="semana">Esta Semana</option>
            <option value="mes">Este Mês</option>
            <option value="ano">Este Ano</option>
          </select>
        </div>

        {/* SEÇÃO DE DADOS EM TEMPO REAL (HOJE) */}
        <div className="bg-blue-50 p-6 rounded-lg shadow-md mb-8">
          <h2 className="text-xl font-semibold mb-4 text-blue-800">
            🕒 Entregas de Hoje (Tempo Real)
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-blue-600 mb-1">
                {dadosTempoReal.length}
              </div>
              <div className="text-sm text-gray-600">Entregas Hoje</div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-green-600 mb-1">
                R$ {calcularTotalFreteHoje().toFixed(2)}
              </div>
              <div className="text-sm text-gray-600">Total em Fretes</div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow-sm text-center">
              <div className="text-2xl font-bold text-purple-600 mb-1">
                {new Date().toLocaleDateString('pt-BR')}
              </div>
              <div className="text-sm text-gray-600">Data</div>
            </div>
          </div>
          
          {/* LISTA DE ENTREGAS DO DIA */}
          {dadosTempoReal.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white rounded-lg">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Pedido</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Cliente</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Loja</th>
                    <th className="p-3 text-left text-xs font-medium text-gray-500 uppercase">Valor</th>
                  </tr>
                </thead>
                <tbody>
                  {dadosTempoReal.map((pedido, index) => (
                    <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                      <td className="p-3 text-sm">{pedido.pedido}</td>
                      <td className="p-3 text-sm">{pedido.cliente}</td>
                      <td className="p-3 text-sm">{pedido.loja}</td>
                      <td className="p-3 text-sm font-medium">R$ {pedido.valor.toFixed(2)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p className="text-gray-500 text-center py-4">Nenhuma entrega registrada hoje</p>
          )}
        </div>

        {/* ESTATÍSTICAS CUMULATIVAS */}
        <div className="bg-white p-6 rounded-lg shadow-md mb-8">
          <h2 className="text-xl font-semibold mb-4">
            {periodo === 'dia' ? 'Estatísticas de Hoje' : 
             periodo === 'semana' ? 'Estatísticas da Semana' :
             periodo === 'mes' ? 'Estatísticas do Mês' : 'Estatísticas do Ano'}
          </h2>

          {/* CARDS DE ESTATÍSTICAS */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-green-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">
                {dadosRelatorios?.totalEntregas || 0}
              </div>
              <div className="text-gray-600">Total de Entregas</div>
            </div>
            
            <div className="bg-red-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-red-600 mb-2">
                {dadosRelatorios?.totalCancelamentos || 0}
              </div>
              <div className="text-gray-600">Cancelamentos</div>
            </div>
            
            <div className="bg-blue-50 p-6 rounded-lg shadow-sm text-center">
              <div className="text-3xl font-bold text-blue-600 mb-2">
                {dadosRelatorios?.taxaSucesso || 0}%
              </div>
              <div className="text-gray-600">Taxa de Sucesso</div>
            </div>
            
            {userRole !== 'entregador' && (
              <div className="bg-purple-50 p-6 rounded-lg shadow-sm text-center">
                <div className="text-3xl font-bold text-purple-600 mb-2">
                  {dadosRelatorios?.totalEntregadores || 0}
                </div>
                <div className="text-gray-600">Entregadores</div>
              </div>
            )}
          </div>

          {/* DETALHES ESPECÍFICOS POR TIPO DE USUÁRIO */}
          <h3 className="text-lg font-medium mb-4">
            {userRole === 'admin' && '🏢 Desempenho por Loja'}
            {userRole === 'gerente' && `👥 Desempenho por Entregador - ${dadosRelatorios?.loja}`}
            {userRole === 'entregador' && '🏪 Meu Desempenho por Loja'}
          </h3>

          {userRole === 'admin' && dadosRelatorios?.lojas && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {dadosRelatorios.lojas.map((loja, index) => {
                const entregas = loja[`${periodo}_entregue`] || 0;
                const cancelamentos = loja[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{loja.loja_nome}</h4>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                      <div>
                        <span className="font-semibold">Entregadores:</span> {loja.usuarios ? 1 : 0}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {userRole === 'gerente' && dadosRelatorios?.entregadores && (
            <div className="space-y-4">
              {dadosRelatorios.entregadores.map((entregador, index) => {
                const entregas = entregador[`${periodo}_entregue`] || 0;
                const cancelamentos = entregador[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{entregador.nome_completo}</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                      <div>
                        <span className="font-semibold">Veículo:</span> {entregador.veiculo}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {userRole === 'entregador' && dadosRelatorios?.lojas && (
            <div className="space-y-4">
              {dadosRelatorios.lojas.map((loja, index) => {
                const entregas = loja[`${periodo}_entregue`] || 0;
                const cancelamentos = loja[`${periodo}_cancelado`] || 0;
                const taxaSucesso = entregas > 0 ? 
                  ((entregas - cancelamentos) / entregas * 100).toFixed(1) : 0;
                
                return (
                  <div key={index} className="p-4 border rounded-lg bg-gray-50">
                    <h4 className="font-medium mb-2">{loja.loja_nome}</h4>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2 text-sm">
                      <div>
                        <span className="font-semibold">Entregas:</span> {entregas}
                      </div>
                      <div>
                        <span className="font-semibold">Cancelamentos:</span> {cancelamentos}
                      </div>
                      <div>
                        <span className="font-semibold">Taxa Sucesso:</span> {taxaSucesso}%
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}


// =========================================
// 16. pages\todos-pedidos.js
// =========================================

// pages/todos-pedidos.js
import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { OrderModal, WithCourier, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - TODOS OS PEDIDOS
// ==============================================================================
export default function TodosPedidos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  
  // Estados para filtros
  const [filtroStatus, setFiltroStatus] = useState('');
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [editandoFrete, setEditandoFrete] = useState(null);
  const [valorFrete, setValorFrete] = useState('');

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 4. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getTodosPedidos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: BUSCAR TODOS OS PEDIDOS
  // ============================================================================
  const getTodosPedidos = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('pedidos')
        .select('*')
        .order('data', { ascending: false });

      // Se for gerente, filtrar apenas pela sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: FILTRAR PEDIDOS
  // ============================================================================
  const pedidosFiltrados = todosPedidos.filter(pedido => {
    // Filtro por status
    if (filtroStatus && pedido.status_transporte !== filtroStatus) {
      return false;
    }
    
    // Filtro por entregador
    if (filtroEntregador && pedido.aceito_por_nome !== filtroEntregador) {
      return false;
    }
    
    // Filtro por loja (apenas para admin)
    if (userRole === 'admin' && filtroLoja && pedido.id_loja !== filtroLoja) {
      return false;
    }
    
    return true;
  });

  // ============================================================================
  // 7. FUNÇÃO: REVERTER PEDIDO (BOTÃO GERENTE/ADMIN)
  // ============================================================================
  const handleReverterPedido = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja reverter este pedido?')) return;
    
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { 
          ...p, 
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null
        } : p
      ));
      
      alert('✅ Pedido revertido com sucesso!');
    } catch (error) {
      console.error('Erro ao reverter pedido:', error);
      alert('❌ Erro ao reverter pedido.');
    }
  };

  // ============================================================================
  // 8. FUNÇÃO: EDITAR FRETE OFERECIDO
  // ============================================================================
  const handleEditarFrete = (pedido, valor) => {
    setEditandoFrete(pedido.id);
    setValorFrete(valor || '');
  };

  const handleSalvarFrete = async (pedidoId) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ 
          frete_oferecido: parseFloat(valorFrete) || null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, frete_oferecido: parseFloat(valorFrete) || null } : p
      ));
      
      setEditandoFrete(null);
      alert('✅ Frete atualizado com sucesso!');
    } catch (error) {
      console.error('Erro ao atualizar frete:', error);
      alert('❌ Erro ao atualizar frete.');
    }
  };

  // ============================================================================
  // 9. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 10. DADOS PARA FILTROS
  // ============================================================================
  const statusUnicos = [...new Set(todosPedidos.map(p => p.status_transporte))].filter(Boolean);
  const entregadoresUnicos = [...new Set(todosPedidos.map(p => p.aceito_por_nome))].filter(Boolean);
  const lojasUnicas = [...new Set(todosPedidos.map(p => p.id_loja))].filter(Boolean);

  // ============================================================================
  // 11. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📊 Todos os Pedidos</h1>

      {/* FILTROS */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Filtros</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Filtro Status */}
          <div>
            <label className="block text-sm font-medium mb-1">Status</label>
            <select
              value={filtroStatus}
              onChange={(e) => setFiltroStatus(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os status</option>
              {statusUnicos.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>

          {/* Filtro Entregador */}
          <div>
            <label className="block text-sm font-medium mb-1">Entregador</label>
            <select
              value={filtroEntregador}
              onChange={(e) => setFiltroEntregador(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os entregadores</option>
              {entregadoresUnicos.map(entregador => (
                <option key={entregador} value={entregador}>{entregador}</option>
              ))}
            </select>
          </div>

          {/* Filtro Loja (apenas admin) */}
          {userRole === 'admin' && (
            <div>
              <label className="block text-sm font-medium mb-1">Loja</label>
              <select
                value={filtroLoja}
                onChange={(e) => setFiltroLoja(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded"
              >
                <option value="">Todas as lojas</option>
                {lojasUnicas.map(loja => (
                  <option key={loja} value={loja}>{loja}</option>
                ))}
              </select>
            </div>
          )}
        </div>
      </div>

      {/* LISTA DE PEDIDOS */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-start justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Status:</span> 
                      <span className={`ml-1 ${
                        pedido.status_transporte === 'entregue' ? 'text-green-600' :
                        pedido.status_transporte === 'cancelado' ? 'text-red-600' :
                        pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-blue-600'
                      }`}>
                        {pedido.status_transporte}
                      </span>
                    </p>
                    
                    {pedido.aceito_por_nome && (
                      <p className="text-sm"><span className="font-medium">Entregador:</span> {pedido.aceito_por_nome}</p>
                    )}

                    {/* EDIÇÃO DE FRETE */}
                    <div className="mt-2">
                      <span className="text-sm font-medium">Frete oferecido: </span>
                      {editandoFrete === pedido.id ? (
                        <div className="flex items-center gap-2 mt-1">
                          <input
                            type="number"
                            step="0.01"
                            value={valorFrete}
                            onChange={(e) => setValorFrete(e.target.value)}
                            className="w-20 p-1 border border-gray-300 rounded"
                            placeholder="0.00"
                          />
                          <button
                            onClick={() => handleSalvarFrete(pedido.id)}
                            className="bg-green-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ✅
                          </button>
                          <button
                            onClick={() => setEditandoFrete(null)}
                            className="bg-gray-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ❌
                          </button>
                        </div>
                      ) : (
                        <span className="text-green-600">
                          R$ {pedido.frete_oferecido?.toFixed(2) || '0.00'} 
                          <button
                            onClick={() => handleEditarFrete(pedido, pedido.frete_oferecido)}
                            className="ml-2 text-blue-600 text-sm"
                          >
                            ✏️
                          </button>
                        </span>
                      )}
                    </div>
                  </div>

                  {/* BOTÕES DE AÇÃO (GERENTE/ADMIN) */}
                  <div className="flex flex-col gap-2 ml-4">
                    {/* BOTÃO REVERTER (para pedidos aceitos/em rota) */}
                    {['aceito', 'em rota'].includes(pedido.status_transporte) && (
                      <button 
                        onClick={() => handleReverterPedido(pedido.id)}
                        className="bg-yellow-500 text-white px-4 py-2 rounded text-sm hover:bg-yellow-600"
                      >
                        ↩️ Reverter
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        {pedidoSelecionado?.aceito_por_nome ? (
          <WithCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        ) : (
          <WithoutCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        )}
      </OrderModal>
    </div>
  );
}


// =========================================
// 1. public\favicon.ico
// =========================================

 



// =========================================
// 2. public\manifest.json
// =========================================

 {
  "name": "EntregasWoo - Sistema de Gestão",
  "short_name": "EntregasWoo",
  "description": "Sistema de gestão de entregas para WooCommerce",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#000000",
  "icons": [
    {
      "src": "/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}



// =========================================
// 1. styles\globals.css
// =========================================

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Estilos globais para WooCommerce */
:root {
  --woo-purple: #7f54b3;
  --woo-purple-dark: #6b3fa0;
  --woo-purple-light: #f0e6ff;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  margin: 0;
  padding: 0;
}

/* Cabeçalho fixo */
.sticky-header {
  position: sticky;
  top: 0;
  z-index: 50;
  background: white;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  border-bottom: 2px solid #e9d5ff;
}


// =========================================
// 1. utils\filterPedidos.js
// =========================================

// utils/filterPedidos.js
export const filterPedidosPorUsuario = (pedidos, userRole, userLojas) => {
  if (userRole === 'admin') {
    // Admin vê TUDO
    return pedidos;
  }

  if (userRole === 'gerente' && userLojas.length === 1) {
    // Gerente vê apenas sua loja
    return pedidos.filter(pedido => pedido.id_loja === userLojas[0].id_loja);
  }

  if (userRole === 'entregador' && userLojas.length > 0) {
    // Entregador vê pedidos de todas as suas lojas
    const lojasIds = userLojas.map(loja => loja.id_loja);
    return pedidos.filter(pedido => lojasIds.includes(pedido.id_loja));
  }

  // Visitante ou erro não vê nada
  return [];
};


// =========================================
// 2. utils\formatters.js
// =========================================

 



// =========================================
// 3. utils\notificationSender.js
// =========================================

import { supabase } from '../lib/supabase';

export const sendNotification = async (userId, title, body, data = {}) => {
  try {
    const { error } = await supabase.functions.invoke('send-notification', {
      body: { userId, title, body, data }
    });

    if (error) {
      console.error('Erro ao enviar notificação:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Erro ao enviar notificação:', error);
    return false;
  }
};

// Funções específicas para seu sistema
export const notifyNewOrder = (userId, orderId, storeName) => {
  return sendNotification(
    userId,
    'Novo Pedido Disponível',
    `Um novo pedido da loja ${storeName} está aguardando entrega.`,
    { type: 'new_order', orderId, storeName }
  );
};

export const notifyOrderStatusChange = (userId, orderId, status, customerName) => {
  const statusMessages = {
    'aceito': `Pedido para ${customerName} foi aceito`,
    'em rota': `Pedido para ${customerName} saiu para entrega`,
    'entregue': `Pedido para ${customerName} foi entregue`,
    'cancelado': `Pedido para ${customerName} foi cancelado`
  };

  return sendNotification(
    userId,
    'Status do Pedido Atualizado',
    statusMessages[status] || `Status do pedido alterado para ${status}`,
    { type: 'status_change', orderId, status, customerName }
  );
};


// =========================================
// 4. utils\pdfUtils.js
// =========================================

// utils/pdfUtils.js
import { jsPDF } from 'jspdf';

// ==============================================================================
// FUNÇÕES UTILITÁRIAS PARA GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
export const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
export const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};


// =========================================
// 1. serviceWorker.js
// =========================================

 




// =========================================
// ÁRVORE DE DIRETÓRIOS
// =========================================
📦src/
📦components/
  📦components/Filters/
    1 📜components\Filters\CourierFilter.js
    2 📜components\Filters\StatusFilter.js
  📦components/OrderModal/
    1 📜components\OrderModal\index.js
    2 📜components\OrderModal\OrderModal.js
    3 📜components\OrderModal\WithCourier.js
    4 📜components\OrderModal\WithoutCourier.js
  1 📜components\DeliveryStatus.js
  2 📜components\EditLojaModal.js
  3 📜components\EditProfileModal.js
  4 📜components\EditUsuarioModal.js
  5 📜components\Header.js
  6 📜components\Layout.js
  7 📜components\MobileMenu.js
  8 📜components\Notification.js
  9 📜components\OrderCard.js
  10 📜components\Pagination.js
  11 📜components\PedidosEntregues.js
  12 📜components\PedidosEntreguesAdmin.js
  13 📜components\PedidosEntreguesEntregador.js
  14 📜components\PedidosEntreguesGerente.js
  15 📜components\RouteGuard.js
  16 📜components\Sidebar.js
  17 📜components\UserProfile.js
📦hooks/
  1 📜hooks\useFirebaseNotifications.js
  2 📜hooks\useOrders.js
  3 📜hooks\useRealtimePedidos.js
  4 📜hooks\useUserProfile.js
📦pages/
  📦pages/tests/
    1 📜pages\tests\test-notifications.js
  1 📜pages\_app.js
  2 📜pages\_document.js
  3 📜pages\admin.js
  4 📜pages\atualizar-senha.js
  5 📜pages\cadastro.js
  6 📜pages\gestao-entregadores.js
  7 📜pages\index.js
  8 📜pages\login.js
  9 📜pages\orders.js
  10 📜pages\pedidos-aceitos.js
  11 📜pages\pedidos-entregues.js
  12 📜pages\pedidos-pendentes.js
  13 📜pages\perfil.js
  14 📜pages\recuperar-senha.js
  15 📜pages\relatorios.js
  16 📜pages\todos-pedidos.js
📦public/
  1 📜public\favicon.ico
  2 📜public\manifest.json
📦styles/
  1 📜styles\globals.css
📦utils/
  1 📜utils\filterPedidos.js
  2 📜utils\formatters.js
  3 📜utils\notificationSender.js
  4 📜utils\pdfUtils.js
1 📜serviceWorker.js



// =========================================
// 17. tailwind.config.js
// =========================================

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./pages/**/*.{js,ts,jsx,tsx,mdx}", // ← Mantenha esta linha também
    "./components/**/*.{js,ts,jsx,tsx,mdx}", // ← Mantenha esta linha também
  ],
  theme: {
    extend: {
      colors: {
        woo: {
          purple: '#7f54b3',
          purpleDark: '#6b3fa0', 
          purpleLight: '#f0e6ff',
        }
      }
    },
  },
  plugins: [],
}


// =========================================
// 18. vercel.json
// =========================================

{
  "headers": [
    {
      "source": "/lib/(.*)",
      "headers": [
        {
          "key": "Content-Type",
          "value": "application/javascript"
        }
      ]
    }
  ]
}



// =========================================
// ÁRVORE DE DIRETÓRIOS
// =========================================
📦frontend/
📦lib/
  1 📜lib\supabase.js
  2 📜lib\wooCommerce.js
📦public/
  1 📜public\firebase-messaging-sw.js
  2 📜public\firebase.js
  3 📜public\sw.js
  4 📜public\useFirebaseNotifications.js
  5 📜public\workbox-e43f5367.js
📦src/
  📦src/components/
    📦src/components/Filters/
      1 📜src\components\Filters\CourierFilter.js
      2 📜src\components\Filters\StatusFilter.js
    📦src/components/OrderModal/
      1 📜src\components\OrderModal\index.js
      2 📜src\components\OrderModal\OrderModal.js
      3 📜src\components\OrderModal\WithCourier.js
      4 📜src\components\OrderModal\WithoutCourier.js
    1 📜src\components\DeliveryStatus.js
    2 📜src\components\EditLojaModal.js
    3 📜src\components\EditProfileModal.js
    4 📜src\components\EditUsuarioModal.js
    5 📜src\components\Header.js
    6 📜src\components\Layout.js
    7 📜src\components\MobileMenu.js
    8 📜src\components\Notification.js
    9 📜src\components\OrderCard.js
    10 📜src\components\Pagination.js
    11 📜src\components\PedidosEntregues.js
    12 📜src\components\PedidosEntreguesAdmin.js
    13 📜src\components\PedidosEntreguesEntregador.js
    14 📜src\components\PedidosEntreguesGerente.js
    15 📜src\components\RouteGuard.js
    16 📜src\components\Sidebar.js
    17 📜src\components\UserProfile.js
  📦src/hooks/
    1 📜src\hooks\useFirebaseNotifications.js
    2 📜src\hooks\useOrders.js
    3 📜src\hooks\useRealtimePedidos.js
    4 📜src\hooks\useUserProfile.js
  📦src/pages/
    📦src/pages/tests/
      1 📜src\pages\tests\test-notifications.js
    1 📜src\pages\_app.js
    2 📜src\pages\_document.js
    3 📜src\pages\admin.js
    4 📜src\pages\atualizar-senha.js
    5 📜src\pages\cadastro.js
    6 📜src\pages\gestao-entregadores.js
    7 📜src\pages\index.js
    8 📜src\pages\login.js
    9 📜src\pages\orders.js
    10 📜src\pages\pedidos-aceitos.js
    11 📜src\pages\pedidos-entregues.js
    12 📜src\pages\pedidos-pendentes.js
    13 📜src\pages\perfil.js
    14 📜src\pages\recuperar-senha.js
    15 📜src\pages\relatorios.js
    16 📜src\pages\todos-pedidos.js
  📦src/public/
    1 📜src\public\favicon.ico
    2 📜src\public\manifest.json
  📦src/styles/
    1 📜src\styles\globals.css
  📦src/utils/
    1 📜src\utils\filterPedidos.js
    2 📜src\utils\formatters.js
    3 📜src\utils\notificationSender.js
    4 📜src\utils\pdfUtils.js
  1 📜src\serviceWorker.js
📦tests/
  1 📜tests\orders.test.js
  2 📜tests\test-notifications.js
1 📜.gitignore
2 📜components.txt
3 📜concatenar-js.ps1
4 📜concatenar(b)-js.ps1
5 📜EntregasWoo.txt
6 📜EntregasWoo210920250009.txt
7 📜hooks.txt
8 📜middleware.js
9 📜next.config.js
10 📜OrderModal.txt
11 📜package-lock.json
12 📜package.json
13 📜pages.txt
14 📜postcss.config.js
15 📜saida_inclui_push.txt
16 📜saida2.txt
17 📜tailwind.config.js
18 📜vercel.json
