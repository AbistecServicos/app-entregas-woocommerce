===== _app.js =====
// pages/_app.js
import '../styles/globals.css';
import Layout from '../components/Layout';

// ==============================================================================
// COMPONENTE MyApp - PONTO DE ENTRADA DA APLICAÇÃO
// ==============================================================================
/**
 * MyApp é o componente raiz que envolve todas as páginas
 * Aqui definimos layouts globais, providers e configurações comuns
 * 
 * @param {Object} props - Propriedades do Next.js
 * @param {React.Component} props.Component - Componente da página atual
 * @param {Object} props.pageProps - Props específicas da página
 */
function MyApp({ Component, pageProps }) {
  
  // ============================================================================
  // 1. DECISÃO DE LAYOUT POR PÁGINA
  // ============================================================================
  /**
   * Estratégia: Cada página pode definir se quer ou não o layout padrão
   * através da propriedade estática `noLayout`
   * 
   * Páginas que devem SEM layout:
   * - Login, Cadastro, Erros, Admin (porque tem layout próprio)
   */
  
  // Verificar se a página atual deve usar layout
  const shouldUseLayout = !Component.noLayout;

  // ============================================================================
  // 2. RENDERIZAÇÃO CONDICIONAL
  // ============================================================================
  return (
    <>
      {shouldUseLayout ? (
        // PÁGINAS COM LAYOUT PADRÃO (com sidebar e header)
        <Layout>
          <Component {...pageProps} />
        </Layout>
      ) : (
        // PÁGINAS SEM LAYOUT PADRÃO (renderizar apenas o conteúdo)
        <Component {...pageProps} />
      )}
    </>
  );
}

export default MyApp;


===== _document.js =====
 import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link rel="manifest" href="/manifest.json" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;


===== admin.js =====
// pages/admin.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ==============================================================================
// PÁGINA DE ADMINISTRAÇÃO
// ==============================================================================
/**
 * Painel administrativo para gerenciamento do sistema
 * Acessível apenas para usuários com role 'admin'
 * 
 * IMPORTANTE: Esta página NÃO usa o Layout padrão (já é aplicado pelo _app.js)
 * Por isso NÃO devemos envolver com <Layout> aqui
 */
export default function Admin() {
  // ============================================================================
  // 1. ESTADOS E HOOKS
  // ============================================================================
  const { userRole, loading: userLoading } = useUserProfile();
  const [activeTab, setActiveTab] = useState('lojas');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  // Estados para dados das abas
  const [lojas, setLojas] = useState([]);
  const [usuariosPendentes, setUsuariosPendentes] = useState([]);
  const [associacoes, setAssociacoes] = useState([]);

  // ============================================================================
  // 2. EFFECT: CARREGAR DADOS COM BASE NA ABA ATIVA
  // ============================================================================
  useEffect(() => {
    if (activeTab === 'lojas') {
      loadLojas();
    } else if (activeTab === 'usuarios') {
      loadUsuariosPendentes();
    } else if (activeTab === 'associacoes') {
      loadAssociacoes();
    }
  }, [activeTab]);

// ============================================================================
// 3. FUNÇÕES: CARREGAMENTO DE DADOS
// ============================================================================
/**
 * Carrega lista de lojas cadastradas
 */
const loadLojas = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('lojas')
      .select('*')
      .order('loja_nome');
    
    if (error) throw error;
    setLojas(data || []);
  } catch (err) {
    setError('Erro ao carregar lojas: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Carrega usuários não vinculados a lojas (pendentes)
 */
const loadUsuariosPendentes = async () => {
  try {
    setLoading(true);
    // ✅ CORREÇÃO: Consulta mais simples para evitar erro de UUID
    const { data: usuariosAssociados, error: errorAssociados } = await supabase
      .from('loja_associada')
      .select('uid_usuario')
      .eq('status_vinculacao', 'ativo');

    if (errorAssociados) {
      throw new Error('Erro ao buscar usuários associados: ' + errorAssociados.message);
    }

    // Extrair apenas os UIDs
    const uidsAssociados = usuariosAssociados?.map(ua => ua.uid_usuario) || [];

    // Buscar usuários NÃO presentes na lista de associados
    let query = supabase
      .from('usuarios')
      .select('*');

    // Aplicar filtro apenas se houver usuários associados
    if (uidsAssociados.length > 0) {
      query = query.not('uid', 'in', `(${uidsAssociados.map(uid => `"${uid}"`).join(',')})`);
    }

    const { data, error } = await query;

    if (error) {
      throw new Error('Erro ao buscar usuários pendentes: ' + error.message);
    }

    setUsuariosPendentes(data || []);

  } catch (err) {
    setError('Erro ao carregar usuários: ' + err.message);
    console.error('Erro detalhado:', err);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// ✅ CORREÇÃO: FUNÇÃO loadAssociacoes ADICIONADA
// ============================================================================
/**
 * Carrega associações ativas entre usuários e lojas
 */
const loadAssociacoes = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        *,
        usuarios:uid_usuario(nome_completo, email),
        lojas:id_loja(loja_nome)
      `)
      .order('ultimo_status_vinculacao', { ascending: false });
    
    if (error) throw error;
    setAssociacoes(data || []);
  } catch (err) {
    setError('Erro ao carregar associações: ' + err.message);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// 4. FUNÇÕES: AÇÕES DO ADMIN
// ============================================================================
/**
 * Cria uma nova loja no sistema
 */
const handleCriarLoja = async (dadosLoja) => {
  try {
    setLoading(true);
    setError(null);
    
    const { error } = await supabase
      .from('lojas')
      .insert([{
        id_loja: dadosLoja.id_loja,
        loja_nome: dadosLoja.loja_nome,
        loja_endereco: dadosLoja.loja_endereco,
        loja_telefone: dadosLoja.loja_telefone,
        loja_perimetro_entrega: dadosLoja.loja_perimetro_entrega,
        cnpj: dadosLoja.cnpj,
        ativa: true
      }]);
    
    if (error) throw error;
    
    setSuccess('Loja criada com sucesso!');
    await loadLojas();
  } catch (err) {
    setError('Erro ao criar loja: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Associa um usuário como gerente de uma loja
 */
const handleAssociarGerente = async (usuarioId, lojaId) => {
  try {
    setLoading(true);
    setError(null);
    
    // Buscar dados do usuário e loja em paralelo
    const [{ data: usuario }, { data: loja }] = await Promise.all([
      supabase.from('usuarios').select('*').eq('uid', usuarioId).single(),
      supabase.from('lojas').select('*').eq('id_loja', lojaId).single()
    ]);
    
    if (!usuario || !loja) throw new Error('Usuário ou loja não encontrados');
    
    // Criar associação
    const { error } = await supabase
      .from('loja_associada')
      .insert([{
        uid_usuario: usuarioId,
        nome_completo: usuario.nome_completo,
        id_loja: lojaId,
        loja_nome: loja.loja_nome,
        loja_endereco: loja.loja_endereco,
        loja_telefone: loja.loja_telefone,
        funcao: 'gerente',
        status_vinculacao: 'ativo',
        ultimo_status_vinculacao: new Date().toISOString()
      }]);
    
    if (error) throw error;
    
    setSuccess('Gerente associado com sucesso!');
    await loadAssociacoes(); // ✅ Agora esta função existe
    await loadUsuariosPendentes();
  } catch (err) {
    setError('Erro ao associar gerente: ' + err.message);
  } finally {
    setLoading(false);
  }
};
  // ============================================================================
  // 5. VERIFICAÇÕES DE ACESSO E LOADING
  // ============================================================================
  if (userLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // ============================================================================
  // 6. RENDERIZAÇÃO PRINCIPAL
  // ============================================================================
  return (
    <RouteGuard requiredRole="admin">
      {/* ✅ REMOVIDO: <Layout> wrapper (já é aplicado pelo _app.js) */}
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Painel Administrativo</h1>
        
        {/* Mensagens de status */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            {success}
          </div>
        )}

        {/* Navegação por abas */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="flex space-x-8">
            {['lojas', 'usuarios', 'associacoes'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                {tab === 'lojas' && 'Lojas'}
                {tab === 'usuarios' && 'Usuários Pendentes'}
                {tab === 'associacoes' && 'Associações'}
              </button>
            ))}
          </nav>
        </div>

        {/* Conteúdo das abas */}
        <div className="mt-6">
          {/* Aba: Lojas */}
          {activeTab === 'lojas' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Gerenciar Lojas</h2>
              
              {/* Formulário de criação */}
              <div className="bg-white p-4 rounded-lg shadow-md mb-4">
                <h3 className="text-lg font-medium mb-3">Criar Nova Loja</h3>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target);
                  handleCriarLoja({
                    id_loja: formData.get('id_loja'),
                    loja_nome: formData.get('loja_nome'),
                    loja_endereco: formData.get('loja_endereco'),
                    loja_telefone: formData.get('loja_telefone'),
                    loja_perimetro_entrega: formData.get('loja_perimetro_entrega'),
                    cnpj: formData.get('cnpj')
                  });
                }}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                    <input name="id_loja" placeholder="ID da Loja (ex: L1)" required />
                    <input name="loja_nome" placeholder="Nome da Loja" required />
                    <input name="loja_endereco" placeholder="Endereço" />
                    <input name="loja_telefone" placeholder="Telefone" />
                    <input name="loja_perimetro_entrega" placeholder="Perímetro de Entrega" />
                    <input name="cnpj" placeholder="CNPJ" />
                  </div>
                  <button type="submit" disabled={loading}>
                    {loading ? 'Criando...' : 'Criar Loja'}
                  </button>
                </form>
              </div>

              {/* Listagem de lojas */}
              <div>
                <h3 className="text-lg font-medium mb-3">Lojas Cadastradas</h3>
                {loading ? (
                  <div className="text-center py-4">Carregando...</div>
                ) : (
                  <div className="grid gap-4">
                    {lojas.map(loja => (
                      <div key={loja.id} className="bg-white p-4 rounded-lg shadow-md">
                        <h4 className="font-semibold">{loja.loja_nome} ({loja.id_loja})</h4>
                        <p className="text-gray-600">{loja.loja_endereco}</p>
                        <p className="text-gray-600">{loja.loja_telefone}</p>
                        <p className="text-gray-600">Perímetro: {loja.loja_perimetro_entrega}</p>
                        <span className={`inline-block px-2 py-1 rounded text-xs ${
                          loja.ativa ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {loja.ativa ? 'Ativa' : 'Inativa'}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Aba: Usuários Pendentes */}
          {activeTab === 'usuarios' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Usuários Pendentes</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {usuariosPendentes.map(usuario => (
                    <div key={usuario.uid} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{usuario.nome_completo}</h4>
                      <p className="text-gray-600">{usuario.email}</p>
                      <p className="text-gray-600">{usuario.telefone}</p>
                      <button
                        onClick={() => {
                          const lojaId = prompt('Digite o ID da loja para associar (ex: L1):');
                          if (lojaId) handleAssociarGerente(usuario.uid, lojaId);
                        }}
                        className="bg-green-500 text-white px-3 py-1 rounded text-sm mt-2"
                      >
                        Associar como Gerente
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Aba: Associações */}
          {activeTab === 'associacoes' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Associações Ativas</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {associacoes.map(associacao => (
                    <div key={associacao.id} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{associacao.nome_completo}</h4>
                      <p className="text-gray-600">Função: {associacao.funcao}</p>
                      <p className="text-gray-600">Loja: {associacao.loja_nome}</p>
                      <p className="text-gray-600">Status: {associacao.status_vinculacao}</p>
                      <p className="text-gray-600 text-sm">
                        Última atualização: {new Date(associacao.ultimo_status_vinculacao).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}

// ==============================================================================
// MARCAÇÃO: ESTA PÁGINA NÃO USA LAYOUT PADRÃO (já é aplicado pelo _app.js)
// ==============================================================================


===== atualizar-senha.js =====
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import Link from 'next/link';

export default function AtualizarSenha() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [session, setSession] = useState(null);
  const router = useRouter();

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
    });

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    return () => subscription.unsubscribe();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    if (password !== confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }

    if (password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) throw error;

      setSuccess('Senha atualizada com sucesso!');
      
      setTimeout(() => {
        router.push('/login');
      }, 2000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  if (!session) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 flex items-center justify-center">
        <div className="bg-white p-8 rounded-2xl shadow-2xl text-center">
          <p className="text-red-600 mb-4">Link inválido ou expirado</p>
          <Link href="/recuperar-senha" className="text-purple-600 hover:text-purple-800">
            Solicitar novo link
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">Nova Senha</h2>
          <p className="text-purple-200 mt-2">Digite sua nova senha</p>
        </div>

        {/* Card de Atualização */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Atualizar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Campo Nova Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                Nova Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Mínimo 6 caracteres"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            {/* Campo Confirmar Senha com botão mostrar/ocultar */}
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                Confirmar Nova Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Digite novamente a senha"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Atualizando...' : 'Atualizar Senha'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
AtualizarSenha.noLayout = true;


===== cadastro.js =====
import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

export default function Cadastro() {
  const [formData, setFormData] = useState({
    nome_completo: '',
    email: '',
    telefone: '',
    password: '',
    confirmPassword: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const router = useRouter();

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    // Validações
    if (formData.password !== formData.confirmPassword) {
      setError('As senhas não coincidem');
      setLoading(false);
      return;
    }

    if (formData.password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }

    try {
      // 1. Criar usuário no Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
        options: {
          data: {
            nome_completo: formData.nome_completo,
            telefone: formData.telefone
          }
        }
      });

      if (authError) throw authError;

      // 2. Inserir na tabela usuarios
      const { error: userError } = await supabase
        .from('usuarios')
        .insert({
          uid: authData.user.id,
          email: formData.email,
          nome_completo: formData.nome_completo,
          telefone: formData.telefone,
          is_admin: false
        });

      if (userError) throw userError;

      setSuccess('Cadastro realizado com sucesso! Aguarde aprovação do administrador.');
      
      // Redirecionar após 3 segundos
      setTimeout(() => {
        router.push('/login');
      }, 3000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Criar Nova Conta</p>
        </div>

        {/* Card de Cadastro */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Cadastro
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="nome_completo" className="block text-sm font-medium text-gray-700">
                Nome Completo
              </label>
              <input
                id="nome_completo"
                name="nome_completo"
                type="text"
                value={formData.nome_completo}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="Seu nome completo"
              />
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
              />
            </div>

            <div>
              <label htmlFor="telefone" className="block text-sm font-medium text-gray-700">
                Telefone
              </label>
              <input
                id="telefone"
                name="telefone"
                type="tel"
                value={formData.telefone}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="(11) 99999-9999"
              />
            </div>

            <div className="relative">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  value={formData.password}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Mínimo 6 caracteres"
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <div className="relative">
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirmar Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Digite novamente sua senha"
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                >
                  {showConfirmPassword ? (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Criando conta...' : 'Criar Conta'}
            </button>
          </form>

          {/* Link para login */}
          <div className="mt-6 text-center">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Já tem uma conta? Faça login
            </Link>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2024 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
Cadastro.noLayout = true;


===== gestao-entregadores.js =====
// pages/gestao-entregadores.js (VERSÃO MELHORADA)
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// PÁGINA: GESTÃO DE ENTREGADORES
// ==============================================================================
export default function GestaoEntregadores() {
  const [entregadores, setEntregadores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [buscaEmail, setBuscaEmail] = useState('');
  const [usuarioEncontrado, setUsuarioEncontrado] = useState(null);
  const [buscando, setBuscando] = useState(false);

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 1. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 2. CARREGAR ENTREGADORES DA LOJA (COM MAIS CAMPOS)
  // ============================================================================
  useEffect(() => {
    if (userRole === 'gerente' || userRole === 'admin') {
      carregarEntregadores();
    }
  }, [userRole]);

  const carregarEntregadores = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('loja_associada')
        .select('*');

      // Gerente só vê pessoas da sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      // Filtrar apenas entregadores e gerentes
      const pessoasLoja = data.filter(pessoa => 
        pessoa.funcao === 'entregador' || pessoa.funcao === 'gerente'
      );
      
      setEntregadores(pessoasLoja || []);
    } catch (error) {
      console.error('Erro ao carregar pessoas da loja:', error);
      alert('Erro ao carregar lista de pessoas');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 3. BUSCAR USUÁRIO POR EMAIL NO SISTEMA (COM MAIS DETALHES)
  // ============================================================================
  const buscarUsuarioPorEmail = async () => {
    if (!buscaEmail.trim()) {
      alert('Por favor, digite um email para buscar');
      return;
    }
    
    try {
      setBuscando(true);
      
      // Buscar usuário na tabela usuarios pelo email
      const { data: usuario, error: usuarioError } = await supabase
        .from('usuarios')
        .select('uid, email, nome_completo, telefone, foto')
        .eq('email', buscaEmail.trim())
        .single();

      if (usuarioError) {
        if (usuarioError.code === 'PGRST116') {
          setUsuarioEncontrado(null);
          alert('Usuário não encontrado no sistema');
        } else {
          throw usuarioError;
        }
        return;
      }

      // Buscar TODOS os detalhes das lojas associadas a este usuário
      const { data: lojasAssociadas, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', usuario.uid);

      if (lojasError) throw lojasError;

      // Combinar dados do usuário com suas lojas
      setUsuarioEncontrado({
        ...usuario,
        lojasAssociadas: lojasAssociadas || []
      });

    } catch (error) {
      console.error('Erro ao buscar usuário:', error);
      alert('Erro ao buscar usuário. Verifique o console.');
      setUsuarioEncontrado(null);
    } finally {
      setBuscando(false);
    }
  };

  // ============================================================================
  // 4. VINCULAR USUÁRIO COMO ENTREGADOR
  // ============================================================================
  const vincularComoEntregador = async (usuario) => {
    if (!confirm(`Vincular ${usuario.nome_completo} como entregador nesta loja?`)) return;
    
    try {
      if (userRole === 'gerente' && (!userLojas || userLojas.length === 0)) {
        alert('Erro: Gerente não está vinculado a nenhuma loja');
        return;
      }

      const lojaId = userRole === 'gerente' ? userLojas[0].id_loja : prompt('Digite o ID da loja (admin):');
      const lojaNome = userRole === 'gerente' ? userLojas[0].loja_nome : prompt('Digite o nome da loja (admin):');

      if (!lojaId || !lojaNome) return;

      // Verificar se usuário já está vinculado a esta loja
      const { data: vinculoExistente } = await supabase
        .from('loja_associada')
        .select('id')
        .eq('uid_usuario', usuario.uid)
        .eq('id_loja', lojaId)
        .single();

      if (vinculoExistente) {
        alert('Este usuário já está vinculado a esta loja');
        return;
      }

      // Vincular usuário como entregador
      const { error } = await supabase
        .from('loja_associada')
        .insert({
          uid_usuario: usuario.uid,
          nome_completo: usuario.nome_completo,
          email_usuario: usuario.email, // ✅ NOVO CAMPO
          funcao: 'entregador',
          id_loja: lojaId,
          loja_nome: lojaNome,
          status_vinculacao: 'ativo',
          veiculo: 'Não informado',
          carga_maxima: 0,
          perimetro_entrega: 'Não definido',
          ultimo_status_vinculacao: new Date().toISOString()
        });

      if (error) throw error;

      alert('✅ Entregador vinculado com sucesso!');
      setBuscaEmail('');
      setUsuarioEncontrado(null);
      carregarEntregadores();
    } catch (error) {
      console.error('Erro ao vincular entregador:', error);
      alert('❌ Erro ao vincular entregador');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: FORMATAR VALOR NULO
  // ============================================================================
  const formatarValor = (valor) => {
    return valor || 'Não informado';
  };

  // ============================================================================
  // 6. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  if (userRole !== 'admin' && userRole !== 'gerente') {
    return <div className="min-h-screen flex items-center justify-center">Acesso não autorizado</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">👥 Gestão de Entregadores</h1>

      {/* BUSCA POR EMAIL */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Buscar Usuário no Sistema</h2>
        <div className="flex gap-2 mb-4">
          <input
            type="email"
            placeholder="Digite o email do usuário"
            value={buscaEmail}
            onChange={(e) => setBuscaEmail(e.target.value)}
            className="flex-1 p-2 border border-gray-300 rounded"
            onKeyPress={(e) => e.key === 'Enter' && buscarUsuarioPorEmail()}
          />
          <button
            onClick={buscarUsuarioPorEmail}
            disabled={buscando}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
          >
            {buscando ? 'Buscando...' : 'Buscar'}
          </button>
        </div>

        {/* RESULTADO DA BUSCA - COM MAIS DETALHES */}
        {usuarioEncontrado && (
          <div className="mt-4 p-4 border border-green-200 bg-green-50 rounded">
            <h3 className="font-semibold text-green-800 mb-3">👤 Usuário encontrado:</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
              <div>
                <p><strong>Nome:</strong> {usuarioEncontrado.nome_completo}</p>
                <p><strong>Email:</strong> {usuarioEncontrado.email}</p>
                {usuarioEncontrado.telefone && (
                  <p><strong>Telefone:</strong> {usuarioEncontrado.telefone}</p>
                )}
              </div>
              
              {usuarioEncontrado.foto && (
                <div className="flex justify-center">
                  <img 
                    src={usuarioEncontrado.foto} 
                    alt="Foto do usuário"
                    className="w-16 h-16 rounded-full"
                  />
                </div>
              )}
            </div>

            <div className="mt-3">
              <strong>🏪 Lojas Associadas:</strong>
              {usuarioEncontrado.lojasAssociadas.length > 0 ? (
                <div className="ml-4 mt-2 space-y-2">
                  {usuarioEncontrado.lojasAssociadas.map((loja, index) => (
                    <div key={index} className="p-2 bg-white rounded border">
                      <p><strong>Loja:</strong> {loja.loja_nome} ({loja.id_loja})</p>
                      <p><strong>Função:</strong> 
                        <span className={`ml-1 ${
                          loja.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                        }`}>
                          {loja.funcao}
                        </span>
                      </p>
                      <p><strong>Status:</strong> 
                        <span className={`ml-1 ${
                          loja.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {loja.status_vinculacao}
                        </span>
                      </p>
                      {loja.veiculo && <p><strong>🚗 Veículo:</strong> {formatarValor(loja.veiculo)}</p>}
                      {loja.carga_maxima > 0 && <p><strong>📦 Carga Máxima:</strong> {loja.carga_maxima} kg</p>}
                      {loja.perimetro_entrega && <p><strong>📍 Perímetro:</strong> {formatarValor(loja.perimetro_entrega)}</p>}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-600 ml-4">Nenhuma loja associada</p>
              )}
            </div>

            <button
              onClick={() => vincularComoEntregador(usuarioEncontrado)}
              className="mt-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
            >
              ➕ Vincular como Entregador
            </button>
          </div>
        )}
      </div>

      {/* LISTA DE PESSOAS DA LOJA - COM MAIS DETALHES */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4">
          {userRole === 'gerente' ? '👥 Pessoas da Minha Loja' : '👥 Pessoas do Sistema'}
        </h2>
        
        {loading ? (
          <p className="text-gray-500">Carregando...</p>
        ) : entregadores.length === 0 ? (
          <p className="text-gray-500">Nenhuma pessoa encontrada</p>
        ) : (
          <div className="grid gap-4">
            {entregadores.map((pessoa) => (
              <div key={pessoa.id} className="border p-4 rounded-lg bg-gray-50">
                <h3 className="font-semibold text-lg text-purple-800">
                  {pessoa.funcao === 'gerente' ? '👑 ' : '🚚 '}
                  {pessoa.nome_completo}
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-2">
                  <div>
                    <p><strong>📧 Email:</strong> {pessoa.email_usuario}</p>
                    <p><strong>🎯 Função:</strong> 
                      <span className={`ml-1 ${
                        pessoa.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                      }`}>
                        {pessoa.funcao}
                      </span>
                    </p>
                    <p><strong>📊 Status:</strong> 
                      <span className={`ml-1 ${
                        pessoa.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {pessoa.status_vinculacao}
                      </span>
                    </p>
                  </div>
                  
                  <div>
                    <p><strong>🏪 Loja:</strong> {pessoa.loja_nome} ({pessoa.id_loja})</p>
                    <p><strong>🚗 Veículo:</strong> {formatarValor(pessoa.veiculo)}</p>
                    {pessoa.carga_maxima > 0 && (
                      <p><strong>📦 Carga Máx:</strong> {pessoa.carga_maxima} kg</p>
                    )}
                    {pessoa.perimetro_entrega && (
                      <p><strong>📍 Perímetro:</strong> {formatarValor(pessoa.perimetro_entrega)}</p>
                    )}
                  </div>
                </div>
                
                {pessoa.data_desligamento && (
                  <p className="text-red-600 text-sm mt-2">
                    <strong>🗓️ Data desligamento:</strong> {new Date(pessoa.data_desligamento).toLocaleDateString('pt-BR')}
                  </p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


===== index.js =====
// Importação de dependências necessárias do Next.js e React
import Head from 'next/head';
import Link from 'next/link';
import { useEffect } from 'react';

// Componente principal da página inicial
export default function HomePage() {
  // Hook useEffect para configurar a navegação suave
  useEffect(() => {
    // Seleção de todos os links internos que começam com '#'
    const anchors = document.querySelectorAll('a[href^="#"]');

    // Função para lidar com o clique em links internos
    const handleAnchorClick = (e) => {
      e.preventDefault();
      const targetId = e.currentTarget.getAttribute('href');

      // Verifica se o link não é apenas '#'
      if (targetId === '#') return;

      // Encontra o elemento alvo pelo ID
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        // Realiza a rolagem suave com offset para compensar o cabeçalho
        window.scrollTo({
          top: targetElement.offsetTop - 80, // Ajuste de 80px para o cabeçalho
          behavior: 'smooth'
        });
      }
    };

    // Adiciona event listeners para todos os links internos
    anchors.forEach(anchor => {
      anchor.addEventListener('click', handleAnchorClick);
    });

    // Cleanup: remove os event listeners quando o componente é desmontado
    return () => {
      anchors.forEach(anchor => {
        anchor.removeEventListener('click', handleAnchorClick);
      });
    };
  }, []);

  return (
    <>
      {/* Configuração do cabeçalho HTML com título e importação de Font Awesome */}
      <Head>
        <title>VendasWoo + EntregasWoo - Sistema Completo para E-commerce e Entregas</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
      </Head>

      {/* Cabeçalho da página com apenas o título */}
      <header>
        <div className="container">
          <div className="header-content">
            <div className="logo">
              <h1>VendasWoo <span>+ EntregasWoo</span></h1>
            </div>
          </div>
        </div>
      </header>

      {/* Seção Hero com chamada principal */}
      <section className="hero">
        <div className="container">
          <h2>Sistema Completo para E-commerce e Entregas</h2>
          <p>Conectamos lojas a entregadores locais para simplificar e agilizar as entregas na sua região.</p>
          <div className="hero-buttons">
            <Link href="#para-lojas" className="btn">Sou Lojista</Link>
            <Link href="#para-entregadores" className="btn btn-accent">Sou Entregador</Link>
            <a href="https://wa.me/552132727548" className="btn btn-outline" target="_blank" rel="noopener noreferrer">Fale no WhatsApp</a>
          </div>
        </div>
      </section>

      {/* Seção Como Funciona com passos para entregadores e lojas */}
      <section className="how-it-works" id="como-funciona">
        <div className="container">
          <div className="section-title">
            <h2>Como Funciona</h2>
            <p>Dois sistemas integrados para atender lojas e entregadores</p>
          </div>
          
          <div className="dual-steps">
            <div className="steps-container">
              <h3 className="steps-title">Para Entregadores</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Cadastro Simplificado</h4>
                  <p>Faça seu cadastro como motorista autônomo MEI com documentação em ordem.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Defina sua Área de Atuação</h4>
                  <p>Informe seu veículo, capacidade de carga e o perímetro onde quer trabalhar.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Conexão com Lojas</h4>
                  <p>Conectamos você às empresas que precisam de entregas na sua região.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Combine Preços e Área</h4>
                  <p>Negocie diretamente com as lojas os valores e detalhes do serviço.</p>
                </div>
              </div>
            </div>
            
            <div className="steps-container">
              <h3 className="steps-title">Para Lojas</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Plataforma Completa</h4>
                  <p>Tenha seu e-commerce com catálogo de produtos, atualização de preços fácil e múltiplas formas de pagamento.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Integração Total</h4>
                  <p>Receba pedidos pelo app, computador e WhatsApp integrados em um único sistema.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Gestão Completa</h4>
                  <p>Controle de estoque, relatórios, emissão de recibos e muito mais.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Entregas Terceirizadas</h4>
                  <p>Use o EntregasWoo para conectar-se a entregadores de bairro e terceirizar suas entregas.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Seção Para Lojas com benefícios */}
      <section id="para-lojas" className="benefits">
        <div className="container">
          <div className="section-title">
            <h2>Para Lojas e Empresas</h2>
            <p>Sistema completo para vendas online e gestão de entregas</p>
          </div>
          <ul className="benefits-list">
            <li>Plataforma online para apresentar seus produtos de forma profissional</li>
            <li>Atualização de preços fácil e intuitiva</li>
            <li>Múltiplas formas de pagamento integradas (PIX, cartão, etc)</li>
            <li>Recebimento de pedidos por app, computador e WhatsApp</li>
            <li>Controle de estoque em tempo real</li>
            <li>Relatórios detalhados de vendas e desempenho</li>
            <li>Emissão de recibos e comprovantes</li>
            <li>App EntregasWoo para terceirizar entregas para motoristas de bairro</li>
            <li>Gestão integrada de pedidos e entregas em um único sistema</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de saber mais sobre o sistema para lojas" className="btn">Quero saber mais</a>
          </div>
        </div>
      </section>

      {/* Seção Para Entregadores com benefícios */}
      <section id="para-entregadores" className="benefits" style={{backgroundColor: 'var(--light-gray)'}}>
        <div className="container">
          <div className="section-title">
            <h2>Para Entregadores</h2>
            <p>Conecte-se com lojas da sua região e aumente sua renda</p>
          </div>
          <ul className="benefits-list">
            <li>Cadastro gratuito para motoristas MEI com documentação regular</li>
            <li>Defina o tipo de veículo, capacidade de carga e área de atuação</li>
            <li>Escolha o perímetro onde quer trabalhar (bairros, regiões)</li>
            <li>Conexão direta com empresas que precisam de entregas na sua área</li>
            <li>Negociação direta de preços e condições de serviço</li>
            <li>Flexibilidade de horários - trabalhe quando quiser</li>
            <li>App simples para gerenciar corridas e ganhos</li>
            <li>Pagamentos rápidos e transparentes</li>
            <li>Construa sua reputação com avaliações das lojas</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de me cadastrar como entregador" className="btn btn-accent">Quero me cadastrar</a>
          </div>
        </div>
      </section>

      {/* Seção de Chamada para Ação (CTA) */}
      <section className="cta">
        <div className="container">
          <h2>Pronto para transformar seu negócio ou aumentar sua renda?</h2>
          <p>Entre em contato e faça um teste grátis dos nossos sistemas</p>
          <a href="https://wa.me/552132727548" className="btn" target="_blank" rel="noopener noreferrer">Fale conosco no WhatsApp</a>
        </div>
      </section>

      {/* Rodapé com links rápidos e informações de contato */}
      <footer id="contato">
        <div className="container">
          <div className="footer-content">
            <div className="footer-column">
              <h3>VendasWoo + EntregasWoo</h3>
              <p>Sistema integrado de e-commerce e gestão de entregas</p>
            </div>
            <div className="footer-column">
              <h3>Links Rápidos</h3>
              <ul>
                <li><Link href="#como-funciona">Como Funciona</Link></li>
                <li><Link href="#para-lojas">Para Lojas</Link></li>
                <li><Link href="#para-entregadores">Para Entregadores</Link></li>
                <li><a href="https://pedidossimples.com.br/vendaswoo/" target="_blank" rel="noopener noreferrer">VendasWoo</a></li>
              </ul>
            </div>
            <div className="footer-column">
              <h3>Contato</h3>
              <ul>
                <li>Email: comercial@abistec.com.br</li>
                <li>WhatsApp: (21) 3272-7548</li>
                <li>Site: <a href="https://pedidossimples.com.br">pedidossimples.com.br</a></li>
              </ul>
            </div>
          </div>
          <div className="copyright">
            <p>&copy; 2023 VendasWoo + EntregasWoo - Abistec Serviços Tecnológicos Ltda</p>
          </div>
        </div>
      </footer>

      {/* Estilos globais usando styled-jsx */}
      <style jsx global>{`
        :root {
          --primary: #3b7b2b;
          --secondary: #5c3b27;
          --accent: #f39c12;
          --light: #fdfaf6;
          --dark: #333;
          --gray: #777;
          --light-gray: #f5f5f5;
        }
        
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
          background-color: var(--light);
          color: var(--dark);
          line-height: 1.6;
        }
        
        .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0 20px;
        }
        
        /* Estilos do Cabeçalho */
        header {
          background-color: white;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          /* Removido o comportamento sticky para fluir com a rolagem */
        }
        
        .header-content {
          display: flex;
          justify-content: center;
          align-items: center;
          padding: 15px 0;
        }
        
        .logo {
          display: flex;
          align-items: center;
        }
        
        .logo h1 {
          color: var(--primary);
          font-size: 1.8rem;
          font-weight: bold;
        }
        
        .logo span {
          color: var(--secondary);
        }
        
        nav ul {
          display: flex;
          list-style: none;
        }
        
        nav li {
          margin-left: 25px;
        }
        
        nav a {
          text-decoration: none;
          color: var(--dark);
          font-weight: 500;
          transition: color 0.3s;
        }
        
        nav a:hover {
          color: var(--primary);
        }
        
        .btn {
          display: inline-block;
          padding: 12px 25px;
          background-color: var(--primary);
          color: white;
          border-radius: 5px;
          text-decoration: none;
          font-weight: 600;
          transition: all 0.3s;
          border: none;
          cursor: pointer;
        }
        
        .btn:hover {
          background-color: #2c5e20;
          transform: translateY(-2px);
        }
        
        .btn-outline {
          background-color: transparent;
          border: 2px solid var(--primary);
          color: var(--primary);
        }
        
        .btn-outline:hover {
          background-color: var(--primary);
          color: white;
        }
        
        .btn-accent {
          background-color: var(--accent);
        }
        
        .btn-accent:hover {
          background-color: #e67e22;
        }
        
        /* Estilos da Seção Hero */
        .hero {
          padding: 80px 0;
          background: linear-gradient(135deg, rgba(59,123,43,0.1) 0%, rgba(92,59,39,0.1) 100%);
          text-align: center;
        }
        
        .hero h2 {
          font-size: 2.5rem;
          margin-bottom: 20px;
          color: var(--secondary);
        }
        
        .hero p {
          font-size: 1.2rem;
          max-width: 800px;
          margin: 0 auto 30px;
          color: var(--gray);
        }
        
        .hero-buttons {
          display: flex;
          justify-content: center;
          gap: 15px;
          margin-top: 30px;
          flex-wrap: wrap;
        }
        
        /* Estilos da Seção Como Funciona */
        .how-it-works {
          padding: 80px 0;
          background-color: var(--light-gray);
        }
        
        .section-title {
          text-align: center;
          margin-bottom: 50px;
        }
        
        .section-title h2 {
          font-size: 2rem;
          color: var(--secondary);
          margin-bottom: 15px;
        }
        
        .section-title p {
          color: var(--gray);
          max-width: 700px;
          margin: 0 auto;
        }
        
        .dual-steps {
          display: flex;
          justify-content: space-between;
          flex-wrap: wrap;
          gap: 40px;
        }
        
        .steps-container {
          flex: 1;
          min-width: 300px;
          background: white;
          border-radius: 10px;
          padding: 30px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        .steps-title {
          text-align: center;
          margin-bottom: 30px;
          color: var(--primary);
          font-size: 1.5rem;
        }
        
        .step {
          display: flex;
          margin-bottom: 25px;
          align-items: flex-start;
        }
        
        .step-number {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background-color: var(--primary);
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          margin-right: 15px;
          flex-shrink: 0;
        }
        
        .step-content {
          flex: 1;
        }
        
        /* Estilos da Seção Benefícios */
        .benefits {
          padding: 80px 0;
          background-color: white;
        }
        
        .benefits-list {
          list-style: none;
          max-width: 800px;
          margin: 0 auto;
        }
        
        .benefits-list li {
          padding: 15px 0;
          border-bottom: 1px solid #eee;
          display: flex;
          align-items: center;
        }
        
        .benefits-list li:before {
          content: "✓";
          color: var(--primary);
          font-weight: bold;
          margin-right: 10px;
          font-size: 1.2rem;
        }
        
        /* Estilos da Seção CTA */
        .cta {
          padding: 80px 0;
          background: linear-gradient(135deg, var(--primary) 0%, #2c5e20 100%);
          color: white;
          text-align: center;
        }
        
        .cta h2 {
          font-size: 2.2rem;
          margin-bottom: 20px;
        }
        
        .cta p {
          max-width: 700px;
          margin: 0 auto 30px;
          font-size: 1.1rem;
        }
        
        .cta .btn {
          background-color: white;
          color: var(--primary);
        }
        
        .cta .btn:hover {
          background-color: #f0f0f0;
        }
        
        /* Estilos do Rodapé */
        footer {
          background-color: var(--secondary);
          color: white;
          padding: 50px 0 20px;
        }
        
        .footer-content {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 30px;
          margin-bottom: 30px;
        }
        
        .footer-column h3 {
          margin-bottom: 20px;
          font-size: 1.2rem;
        }
        
        .footer-column ul {
          list-style: none;
        }
        
        .footer-column li {
          margin-bottom: 10px;
        }
        
        .footer-column a {
          color: #ddd;
          text-decoration: none;
          transition: color 0.3s;
        }
        
        .footer-column a:hover {
          color: white;
        }
        
        .copyright {
          text-align: center;
          padding-top: 20px;
          border-top: 1px solid rgba(255,255,255,0.1);
          font-size: 0.9rem;
          color: #ddd;
        }
        
        /* Estilos Responsivos */
        @media (max-width: 768px) {
          .header-content {
            flex-direction: column;
          }
          
          .hero h2 {
            font-size: 2rem;
          }
          
          .hero-buttons {
            flex-direction: column;
            align-items: center;
          }
          
          .dual-steps {
            flex-direction: column;
          }
        }
      `}</style>
    </>
  );
}


===== login.js =====
import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - PÁGINA DE LOGIN
// ==============================================================================
export default function Login() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [email, setEmail] = useState('');              // Email do usuário
  const [password, setPassword] = useState('');        // Senha do usuário
  const [loading, setLoading] = useState(false);       // Estado de carregamento
  const [error, setError] = useState('');              // Mensagens de erro
  const [showPassword, setShowPassword] = useState(false); // Controla visibilidade da senha
  const router = useRouter();                          // Router para navegação

  // ============================================================================
  // 2. FUNÇÃO PRINCIPAL: LOGIN COM EMAIL/SENHA
  // ============================================================================
  const handleLogin = async (e) => {
    e.preventDefault(); // Previne comportamento padrão do formulário
    setLoading(true);   // Inicia estado de carregamento
    setError('');       // Limpa erros anteriores

    try {
      // ========================================================================
      // 2.1. AUTENTICAÇÃO NO SUPABASE
      // ========================================================================
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password
      });

      if (authError) throw authError; // Se houver erro na autenticação

      // ========================================================================
      // 2.2. VERIFICAÇÃO SE É ADMINISTRADOR
      // ========================================================================
      /**
       * Administradores têm acesso total e não precisam de vinculação com lojas
       * Verificamos pela flag is_admin na tabela usuarios
       */
      const { data: usuario, error: userError } = await supabase
        .from('usuarios')
        .select('is_admin')
        .eq('uid', authData.user.id)
        .single();

      if (userError) throw userError;

      // Se for admin, redireciona diretamente para painel admin
      if (usuario.is_admin) {
        router.push('/admin');
        return; // Interrompe a execução aqui
      }

      // ========================================================================
      // 2.3. VERIFICAÇÃO DE VINCULO COM LOJAS (NÃO-ADMIN)
      // ========================================================================
      /**
       * Para usuários não-admin, verificamos se estão vinculados a alguma loja ativa
       * UM GERENTE só pode ter UMA loja
       * UM ENTREGADOR pode ter MÚLTIPLAS lojas
       */
      const { data: associacoes, error: assocError } = await supabase
        .from('loja_associada')
        .select('funcao, id_loja, loja_nome')
        .eq('uid_usuario', authData.user.id)
        .eq('status_vinculacao', 'ativo');
        // ⚠️ REMOVIDO .single() para permitir múltiplas lojas

      // Verifica erros na consulta
      if (assocError) {
        throw new Error('Erro ao verificar permissões: ' + assocError.message);
      }

      // Verifica se usuário tem pelo menos uma loja ativa
      if (!associacoes || associacoes.length === 0) {
        throw new Error('Usuário não possui acesso ativo ao sistema. Entre em contato com o administrador.');
      }

      // ========================================================================
      // 2.4. VALIDAÇÃO ESPECÍFICA PARA GERENTES
      // ========================================================================
      /**
       * Gerentes não podem estar vinculados a múltiplas lojas
       * Se encontrar um gerente com mais de uma loja, é um erro de configuração
       */
      const gerentes = associacoes.filter(assoc => assoc.funcao === 'gerente');
      if (gerentes.length > 0 && associacoes.length > 1) {
        throw new Error('Gerente não pode estar associado a múltiplas lojas. Contate o administrador.');
      }

      // ========================================================================
      // 2.5. REDIRECIONAMENTO BASEADO NA FUNÇÃO
      // ========================================================================
      /**
       * Usa a PRIMEIRA associação para determinar o redirecionamento
       * Para entregadores com múltiplas lojas, todas serão consideradas depois
       */
      const primeiraAssociacao = associacoes[0];
      
      switch (primeiraAssociacao.funcao) {
        case 'gerente':
          router.push('/todos-pedidos'); // Gerente vai para gestão completa
          break;
        case 'entregador':
          router.push('/pedidos-pendentes'); // Entregador vai para pedidos disponíveis
          break;
        default:
          throw new Error('Função não reconhecida: ' + primeiraAssociacao.funcao);
      }

    } catch (error) {
      // ========================================================================
      // 2.6. TRATAMENTO DE ERROS
      // ========================================================================
      setError(error.message);
      console.error('Erro no login:', error);
    } finally {
      // ========================================================================
      // 2.7. FINALIZAÇÃO (EXECUTA SEMPRE, COM SUCESSO OU ERRO)
      // ========================================================================
      setLoading(false); // Finaliza estado de carregamento
    }
  };

  // ============================================================================
  // 3. FUNÇÃO: LOGIN COM GOOGLE (OAUTH)
  // ============================================================================
  const handleGoogleLogin = async () => {
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
      });
      if (error) throw error;
    } catch (error) {
      setError(error.message);
    }
  };

  // ============================================================================
  // 4. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        
        {/* ==================================================================== */}
        {/* LOGO E IDENTIDADE VISUAL */}
        {/* ==================================================================== */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🚚</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Sistema de Gestão de Entregas</p>
        </div>

        {/* ==================================================================== */}
        {/* CARD PRINCIPAL DE LOGIN */}
        {/* ==================================================================== */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Acessar Sistema
          </h3>

          {/* MENSAGENS DE ERRO */}
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {/* ================================================================ */}
          {/* FORMULÁRIO DE LOGIN */}
          {/* ================================================================ */}
          <form onSubmit={handleLogin} className="space-y-6">
            
            {/* CAMPO EMAIL */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
                disabled={loading}
              />
            </div>

            {/* CAMPO SENHA COM BOTÃO DE VISUALIZAÇÃO */}
            <div className="relative">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Sua senha"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={loading}
                >
                  {/* Ícone dinâmico (mostrar/ocultar senha) */}
                  {showPassword ? (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            {/* BOTÃO DE SUBMIT */}
            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'Entrando...' : 'Entrar'}
            </button>
          </form>

          {/* ================================================================ */}
          {/* LOGIN ALTERNATIVO (GOOGLE) */}
          {/* ================================================================ */}
          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white text-gray-500">Ou</span>
              </div>
            </div>

            <button
              onClick={handleGoogleLogin}
              disabled={loading}
              className="w-full mt-4 bg-white border border-gray-300 text-gray-700 py-3 px-4 rounded-lg font-medium hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Entrar com Google
            </button>
          </div>

          {/* ================================================================ */}
          {/* LINKS EXTRAS */}
          {/* ================================================================ */}
          <div className="mt-6 text-center space-y-3">
            <Link 
              href="/cadastro" 
              className="text-purple-600 hover:text-purple-800 text-sm font-medium"
            >
              Criar nova conta
            </Link>
            <br />
            <Link 
              href="/recuperar-senha" 
              className="text-gray-500 hover:text-gray-700 text-sm"
            >
              Esqueceu sua senha?
            </Link>
          </div>
        </div>

        {/* ==================================================================== */}
        {/* FOOTER */}
        {/* ==================================================================== */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2024 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}


===== orders.js =====
import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const { data, error } = await supabase.from('pedidos').select('*');
        if (error) throw error;
        setOrders(data || []);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

  if (loading) return <p>Carregando pedidos...</p>;
  if (error) return <p>Erro: {error}</p>;

  return (
    <div>
      <h1>Lista de Pedidos</h1>
      {orders.length === 0 ? (
        <p>Nenhum pedido encontrado.</p>
      ) : (
        <ul>
          {orders.map((order) => (
            <li key={order.id} style={{ marginBottom: '10px' }}>
              <strong>Pedido #{order.id_woo}</strong> - Cliente: {order.nome_cliente} - 
              Total: R${order.total} - Status: {order.status_transporte || 'Pendente'}
              <button
                onClick={() => handleAcceptOrder(order.id)}
                style={{ marginLeft: '10px', padding: '5px 10px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '3px' }}
                disabled={order.status_transporte === 'Entregue'}
              >
                Aceitar
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );

  async function handleAcceptOrder(orderId) {
    const { error } = await supabase
      .from('pedidos')
      .update({ status_transporte: 'Aceito' })
      .eq('id', orderId);
    if (error) {
      setError(`Erro ao aceitar pedido: ${error.message}`);
    } else {
      setOrders(orders.map(order =>
        order.id === orderId ? { ...order, status_transporte: 'Aceito' } : order
      ));
    }
  }
}


===== pedidos-aceitos.js =====
// pages/pedidos-aceitos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { filterPedidosPorUsuario } from '../utils/filterPedidos';
import { OrderModal, WithCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS ACEITOS
// ==============================================================================
export default function PedidosAceitos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]); // Todos os pedidos do banco
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [loadingAcoes, setLoadingAcoes] = useState(false); // Loading para ações
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null); // Pedido para modal
  const [modalAberto, setModalAberto] = useState(false); // Controle do modal
  
  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getPedidosAceitos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS ACEITOS/EM ROTA
  // ============================================================================
  const getPedidosAceitos = async () => {
    try {
      setLoading(true);
      
      // Busca TODOS os pedidos com status aceito ou em rota
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aceito', 'em rota'])
        .order('data', { ascending: false });

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. FILTRAR PEDIDOS POR USUÁRIO
  // ============================================================================
  const pedidosFiltrados = filterPedidosPorUsuario(
    todosPedidos,
    userRole, 
    userLojas
  );

  // ============================================================================
  // 6. FUNÇÕES DE AÇÃO: SAIR PARA ENTREGA / ENTREGAR / CANCELAR
  // ============================================================================
  const handleSairEntrega = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'em rota' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Atualiza lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, status_transporte: 'em rota' } : p
      ));
      
    } catch (error) {
      console.error('Erro ao atualizar status:', error);
      alert('Erro ao sair para entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleEntregar = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'entregue' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista (pedido entregue vai para outra página)
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Pedido marcado como entregue com sucesso!');
      
    } catch (error) {
      console.error('Erro ao entregar pedido:', error);
      alert('Erro ao marcar como entregue.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleCancelar = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja cancelar esta entrega?')) return;
    
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'cancelado' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Entrega cancelada com sucesso.');
      
    } catch (error) {
      console.error('Erro ao cancelar pedido:', error);
      alert('Erro ao cancelar entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  // ============================================================================
  // 7. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 8. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Carregando perfil...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">✅ Pedidos Aceitos</h1>

      {/* ESTADO DE CARREGAMENTO */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        /* LISTA DE PEDIDOS */
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido aceito encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>
                    <p className="text-sm">
                      <span className="font-medium">Status:</span> 
                      <span className={pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-green-600'}>
                        {pedido.status_transporte === 'em rota' ? ' 🚚 Em Rota' : ' ✅ Aceito'}
                      </span>
                    </p>
                  </div>

                  {/* BOTÕES DE AÇÃO */}
                  <div className="flex flex-col gap-2 ml-4">
                    {pedido.status_transporte === 'aceito' && (
                      <button 
                        onClick={() => handleSairEntrega(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-orange-500 text-white px-4 py-2 rounded text-sm hover:bg-orange-600 transition-colors"
                      >
                        🚚 Sair para Entrega
                      </button>
                    )}
                    
                    {pedido.status_transporte === 'em rota' && (
                      <button 
                        onClick={() => handleEntregar(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-green-500 text-white px-4 py-2 rounded text-sm hover:bg-green-600 transition-colors"
                      >
                        ✅ Entregar
                      </button>
                    )}
                    
                    <button 
                      onClick={() => handleCancelar(pedido.id)}
                      disabled={loadingAcoes}
                      className="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600 transition-colors"
                    >
                      ❌ Cancelar
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


===== pedidos-entregues.js =====
import React, { useState, useEffect, useCallback } from 'react';
import { createClient } from '@supabase/supabase-js';
import { jsPDF } from 'jspdf';

// ==============================================================================
// 1. CONFIGURAÇÃO DO SUPABASE
// ==============================================================================
const supabaseUrl = 'https://czzidhzzpqegfvvmdgno.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6emlkaHp6cHFlZ2Z2dm1kZ25vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5NTIwMDMsImV4cCI6MjA2ODUyODAwM30.zK2iFp-b4e5vghpHgWGuOk0LooujlyU7kVm4sbM85m0';
const supabase = createClient(supabaseUrl, supabaseKey);

// ==============================================================================
// 2. FUNÇÕES AUXILIARES
// ==============================================================================

/**
 * Formata data para o padrão do Supabase (YYYY-MM-DD)
 */
const formatarDataParaSupabase = (dataString) => {
  if (!dataString) return '';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) return dataString;
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) {
    const [dia, mes, ano] = dataString.split('/');
    return `${ano}-${mes}-${dia}`;
  }
  return dataString;
};

/**
 * Formata data para exibição (DD/MM/YYYY)
 */
const formatarDataParaExibicao = (dataString) => {
  if (!dataString) return '-';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) {
    const [ano, mes, dia] = dataString.split('-');
    return `${dia}/${mes}/${ano}`;
  }
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) return dataString;
  try {
    const data = new Date(dataString);
    if (!isNaN(data.getTime())) return data.toLocaleDateString('pt-BR');
  } catch (e) {
    console.error('Erro ao formatar data:', e);
  }
  return dataString;
};

// ==============================================================================
// 3. COMPONENTE MODAL DE DETALHES
// ==============================================================================
const ModalDetalhesPedido = ({ pedido, isOpen, onClose }) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabeçalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              ×
            </button>
          </div>

          {/* Informações da Loja */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p><strong>ID:</strong> {pedido.id}</p>
                <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
                <p><strong>Data:</strong> {pedido.data ? new Date(pedido.data).toLocaleString('pt-BR') : 'N/A'}</p>
              </div>
              <div>
                <p><strong>Telefone da Loja:</strong> {pedido.loja_telefone || 'N/A'}</p>
                <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
              </div>
            </div>
          </div>

          {/* Informações do Cliente */}
          <div className="mb-6 p-4 bg-gray-50 rounded">
            <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
            <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
            <p><strong>Endereço:</strong> {pedido.endereco_entrega || 'N/A'}</p>
          </div>

          {/* Produtos */}
          <div className="mb-6">
            <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
            <div className="bg-white border rounded p-3">
              {pedido.produto ? (
                <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
              ) : (
                <p>Nenhum produto informado</p>
              )}
            </div>
          </div>

          {/* Informações de Pagamento e Total */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div>
              <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
              <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p><strong>Frete Pago:</strong> R$ {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            </div>
            <div>
              <p><strong>Status Pagamento:</strong> {pedido.status_pagamento ? 'Pago' : 'Pendente'}</p>
              <p><strong>Data Pagamento:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
            </div>
          </div>

          {/* Observações */}
          {pedido.observacao_pedido && (
            <div className="mb-6">
              <h4 className="font-semibold text-gray-800 mb-2">Observações</h4>
              <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
            </div>
          )}

          {/* Entregador */}
          <div className="mb-6 p-4 bg-purple-50 rounded">
            <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
            <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
          </div>

          {/* Botão Fechar */}
          <div className="flex justify-end">
            <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition-colors">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// ==============================================================================
// 4. FUNÇÕES DE CARREGAMENTO DE IMAGEM E GERAÇÃO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configurações de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relatório de pedidos entregues',
      creator: 'Sistema de Gestão'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLUÇÃO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo proporção
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo não carregada:', error);
          yPosition += 10;
        }
      }

      // Título
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informações
      pdf.text(`Entregador: ${loja.entregador || 'Não informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Responsável', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};

// ==============================================================================
// 5. COMPONENTE PRINCIPAL
// ==============================================================================
export default function PedidosEntregues() {
  // Estados do componente
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);

  // ============================================================================
  // 5.1 FUNÇÕES DE CÁLCULO E CARREGAMENTO
  // ============================================================================

  /**
   * Calcula o total dos pedidos selecionados
   */
  const calcularTotais = useCallback((pedidosList, selecionados) => {
    const total = Array.from(selecionados).reduce((sum, id) => {
      const pedido = pedidosList.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, []);

  /**
   * Carrega pedidos do Supabase com filtros aplicados
   */
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      let query = supabase.from('pedidos').select('*, loja_logo').eq('status_transporte', 'entregue');
      
      if (filtroEntregador) query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      if (filtroLoja) query = query.eq('id_loja', filtroLoja);
      if (filtroStatus) query = query.eq('status_pagamento', filtroStatus === 'true');
      
      const { data, error } = await query;
      if (error) throw error;
      
      setPedidos(data || []);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Atualiza pedidos selecionados no Supabase
   */
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }
    
    const dataFormatada = formatarDataParaSupabase(dataPagamento);
    
    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;
        
        const { error } = await supabase
          .from('pedidos')
          .update({
            frete_pago: fretePago,
            status_pagamento: fretePago > 0,
            data_pagamento: dataFormatada,
          })
          .eq('id', id);
        
        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pedidos atualizados com sucesso!');
      
      // Atualizar estado local
      setPedidos(prevPedidos => 
        prevPedidos.map(pedido => 
          pedidosSelecionados.has(pedido.id) 
            ? { 
                ...pedido, 
                data_pagamento: dataFormatada,
                status_pagamento: parseFloat(pedido.frete_pago || 0) > 0
              } 
            : pedido
        )
      );
      
      setPedidosSelecionados(new Set());
      
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ============================================================================
  // 5.2 HANDLERS DE INTERAÇÃO
  // ============================================================================

  /**
   * Manipula seleção/deseleção de pedidos
   */
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) {
      newSet.add(pedidoId);
    } else {
      newSet.delete(pedidoId);
    }
    setPedidosSelecionados(newSet);
  };

  /**
   * Atualiza valor do frete de um pedido
   */
  const handleAtualizarFrete = (pedidoId, novoValor) => {
    const newPedidos = pedidos.map(p => 
      p.id === pedidoId ? { ...p, frete_pago: novoValor } : p
    );
    setPedidos(newPedidos);
  };

  /**
   * Abre modal com detalhes do pedido
   */
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  /**
   * Fecha modal de detalhes
   */
  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 5.3 USE EFFECTS
  // ============================================================================

  // Carrega pedidos quando os filtros mudam
  useEffect(() => {
    carregarPedidos();
  }, [filtroEntregador, filtroLoja, filtroStatus]);

  // Calcula totais quando a seleção ou pedidos mudam
  useEffect(() => {
    calcularTotais(pedidos, pedidosSelecionados);
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ============================================================================
  // 5.4 DADOS DERIVADOS
  // ============================================================================

  // Lista de lojas únicas para o filtro
  const lojasUnicas = [...new Set(pedidos.map(p => p.id_loja))].map(id => {
    const nome = pedidos.find(p => p.id_loja === id)?.loja_nome;
    return { id, nome: nome || id };
  });

  // ============================================================================
  // 5.5 RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================

  return (
    <div className="bg-gray-50 min-h-screen mobile-optimized">
      {/* Modal de Detalhes */}
      <ModalDetalhesPedido
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={fecharModal}
      />

      {/* Cabeçalho Otimizado para Mobile */}
      <div className="bg-white shadow-md rounded-lg p-3 mb-3 sticky top-2 z-10 mobile-header">
        <div className="flex justify-between items-center mb-3">
          <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">{pedidosSelecionados.size}</span>
            <div className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </div>
          </div>
        </div>

        {/* Filtros sem rótulos */}
        <div className="grid grid-cols-1 gap-2 mb-3">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Entregadores</option>
            {[...new Set(pedidos.map(p => p.aceito_por_nome).filter(Boolean))].map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todas Lojas</option>
            {lojasUnicas.map(loja => (
              <option key={loja.id} value={loja.id}>{loja.nome}</option>
            ))}
          </select>
          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data e Botões na mesma linha */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded mobile-field"
          />
          <button 
            onClick={atualizarPedidos} 
            className="bg-purple-600 text-white p-2 rounded hover:bg-purple-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Atualizar
          </button>
          <button 
            onClick={async () => await gerarRecibosPDF(pedidosSelecionados, pedidos)}
            className="bg-green-600 text-white p-2 rounded hover:bg-green-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Recibo
          </button>
        </div>
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        <div className="grid grid-cols-1 gap-3">
          {isLoading ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Carregando...</p>
            </div>
          ) : pedidos.length === 0 ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow card-pedido p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="mobile-checkbox h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800 mobile-text-small">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 mobile-text-small">
                  <p><span className="font-semibold">Entregador:</span> {pedido.aceito_por_nome || 'Não informado'}</p>
                  <p><span className="font-semibold">Pago em:</span> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p className="flex items-center">
                    <span className="font-semibold mr-1">Pagamento:</span> 
                    {pedido.status_pagamento ? (
                      <span className="text-green-600 mr-1">✔</span>
                    ) : (
                      <span className="text-red-600 mr-1">✘</span>
                    )} 
                    {pedido.status_pagamento ? 'Pago' : 'Pendente'}
                  </p>
                  <p className="flex items-center">
                    <span className="font-semibold">Frete Pago: R$</span>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0.0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500 focus:border-transparent mobile-text-small"
                    />
                  </p>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

{/* Estilos inline para mobile */}
<style jsx>{`
  @media (max-width: 768px) {
    .mobile-optimized :global(*) {
      font-size: 14px !important;
    }
    .mobile-header :global(*) {
      padding: 0px 10px !important;
    }
    .mobile-field :global(*) {
      padding: 10px !important;
      font-size: 14px !important;
    }
    .mobile-button :global(*) {
      padding: 10px 12px !important;
      font-size: 14px !important;
    }
    .mobile-text-small :global(*) {
      font-size: 13px !important;
    }
    .mobile-checkbox :global(*) {
      width: 18px !important;
      height: 18px !important;
    }
  }

  /* Estilos para tablet/PC (acima de 768px) - mantém o padrão */
  @media (min-width: 769px) {
    .mobile-header :global(*) {
      padding: 12px 10px !important; /* Valor original para tablet/PC */
    }
  }
`}</style>
    </div>
  );
}


===== pedidos-pendentes.js =====
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { OrderModal, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS PENDENTES
// ==============================================================================
export default function PedidosPendentes() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [pedidos, setPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [loadingAceitar, setLoadingAceitar] = useState(false);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    checkAuthAndGetPedidos();
  }, []);

  // ============================================================================
  // 3. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }
      await getPedidosPendentes();
    } catch (error) {
      console.error('Erro na autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUNÇÃO: BUSCAR PEDIDOS PENDENTES
  // ============================================================================
  const getPedidosPendentes = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aguardando', 'revertido'])
        .order('data', { ascending: false });

      if (error) throw error;
      setPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos.');
    } finally {
      setLoading(false);
    }
  };

// ============================================================================
// 5. FUNÇÃO: ACEITAR PEDIDO (CORRIGIDA - ESTRUTURA CORRETA)
// ============================================================================
const handleAceitarPedido = async (pedidoId) => {
  try {
    setLoadingAceitar(true);
    
    // 1. Verificar se usuário está autenticado
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      alert('Sessão expirada. Faça login novamente.');
      router.push('/login');
      return;
    }

    // 2. ✅ BUSCAR TELEFONE DO USUÁRIO na tabela usuarios
    const { data: usuarioData, error: usuarioError } = await supabase
      .from('usuarios')
      .select('telefone, nome_completo')
      .eq('uid', user.id)
      .single();

    if (usuarioError) {
      console.warn('Erro ao buscar telefone do usuário:', usuarioError);
      // Não impede a continuação - usamos valores padrão
    }

    // 3. ✅ BUSCAR DADOS DA LOJA ASSOCIADA
    const { data: entregadorData, error: entregadorError } = await supabase
      .from('loja_associada')
      .select('nome_completo, loja_telefone, loja_nome')
      .eq('uid_usuario', user.id)
      .limit(1);

    if (entregadorError) {
      console.warn('Erro ao buscar dados da loja:', entregadorError);
      // Não impede a continuação
    }

    const entregador = entregadorData?.[0];
    const usuario = usuarioData;

    // 4. ✅ ATUALIZAR PEDIDO COM DADOS CORRETOS
    const { error: updateError } = await supabase
      .from('pedidos')
      .update({
        status_transporte: 'aceito',
        aceito_por_uid: user.id,
        aceito_por_nome: entregador?.nome_completo || usuario?.nome_completo || user.email,
        aceito_por_email: user.email,
        aceito_por_telefone: usuario?.telefone || entregador?.loja_telefone || 'Não informado',
        ultimo_status: new Date().toISOString()
      })
      .eq('id', pedidoId);

    if (updateError) {
      throw new Error('Erro ao atualizar pedido: ' + updateError.message);
    }

    // 5. Atualizar lista localmente
    setPedidos(pedidos.filter(pedido => pedido.id !== pedidoId));
    alert('✅ Pedido aceito com sucesso!');

  } catch (error) {
    console.error('Erro ao aceitar pedido:', error);
    alert(`❌ ${error.message}`);
  } finally {
    setLoadingAceitar(false);
  }
};

  // ============================================================================
  // 6. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 7. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📋 Pedidos Pendentes</h1>
      
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidos.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido pendente encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endereço:</span> {pedido.endereco_entrega}</p>
                    {pedido.frete_oferecido && (
                      <p className="text-sm text-green-600 font-medium mt-1">
                        💰 Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
                      </p>
                    )}
                  </div>

                  <button 
                    onClick={() => handleAceitarPedido(pedido.id)}
                    disabled={loadingAceitar}
                    className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 
                             transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed
                             ml-4 min-w-[80px]"
                  >
                    {loadingAceitar ? '⏳' : '✅'} Aceitar
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithoutCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


===== perfil.js =====
// pages/perfil.js
import { useState } from 'react';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import EditUsuarioModal from '../components/EditUsuarioModal';
import EditLojaModal from '../components/EditLojaModal';

// ==============================================================================
// PÁGINA: PERFIL DO USUÁRIO
// ==============================================================================
export default function Perfil() {
  const router = useRouter();
  const { userProfile, userRole, userLojas, loading, error } = useUserProfile();
  const [modalUsuarioOpen, setModalUsuarioOpen] = useState(false);
  const [modalLojaOpen, setModalLojaOpen] = useState(false);
  const [lojaSelecionada, setLojaSelecionada] = useState(null);

  // ============================================================================
  // 1. REDIRECIONAR SE NÃO ESTIVER LOGADO
  // ============================================================================
  if (!loading && !userProfile) {
    router.push('/login');
    return null;
  }

  // ============================================================================
  // 2. ABRIR MODAL DE EDIÇÃO DA LOJA
  // ============================================================================
  const abrirModalLoja = (loja) => {
    setLojaSelecionada(loja);
    setModalLojaOpen(true);
  };

  // ============================================================================
  // 3. RENDERIZAÇÃO DA PÁGINA
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      
      {/* CABEÇALHO */}
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-purple-800 mb-2">👤 Meu Perfil</h1>
        <p className="text-gray-600">Gerencie suas informações pessoais e de entrega</p>
      </div>

      {loading ? (
        <div className="text-center">
          <p className="text-purple-600">Carregando...</p>
        </div>
      ) : error ? (
        <div className="bg-red-100 border border-red-400 text-red-700 p-4 rounded">
          <p>Erro: {error}</p>
        </div>
      ) : (
        <div className="grid md:grid-cols-2 gap-8">
          
          {/* ================================================================== */}
          {/* CARD: DADOS DO USUÁRIO */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">📋 Dados Pessoais</h2>
            
            <div className="space-y-3 mb-4">
              {userProfile.foto && (
                <div className="text-center">
                  <img
                    src={userProfile.foto}
                    alt="Foto do perfil"
                    className="w-20 h-20 rounded-full mx-auto border-2 border-purple-600"
                  />
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome Completo</label>
                <p className="text-gray-800 font-medium">{userProfile.nome_completo || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome de Usuário</label>
                <p className="text-gray-800">{userProfile.nome_usuario || 'Não informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Email</label>
                <p className="text-gray-800">{userProfile.email}</p>
              </div>
              
              {userProfile.telefone && (
                <div>
                  <label className="block text-sm font-medium text-gray-600">Telefone</label>
                  <p className="text-gray-800">{userProfile.telefone}</p>
                </div>
              )}
            </div>

            <button
              onClick={() => setModalUsuarioOpen(true)}
              className="w-full bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700 transition-colors"
            >
              ✏️ Editar Dados Pessoais
            </button>
          </div>

          {/* ================================================================== */}
          {/* CARD: LOJAS ASSOCIADAS */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">🏪 Lojas Associadas</h2>
            
            {userLojas.length === 0 ? (
              <p className="text-gray-600 text-center py-4">Nenhuma loja associada</p>
            ) : (
              <div className="space-y-3">
                {userLojas.map((loja) => (
                  <div key={loja.id} className="border rounded-lg p-3 hover:bg-gray-50">
                    <h3 className="font-semibold text-gray-800">{loja.loja_nome}</h3>
                    <p className="text-sm text-gray-600">ID: {loja.id_loja}</p>
                    <p className="text-sm text-purple-600">Função: {loja.funcao}</p>
                    
                    <div className="mt-2 text-sm text-gray-700">
                      <p>🚗 Veículo: {loja.veiculo || 'Não informado'}</p>
                      <p>📦 Carga máxima: {loja.carga_maxima || '0'} kg</p>
                      <p>📍 Perímetro: {loja.perimetro_entrega || 'Não definido'}</p>
                    </div>

                    <button
                      onClick={() => abrirModalLoja(loja)}
                      className="mt-2 w-full bg-blue-600 text-white py-1 px-3 rounded text-sm hover:bg-blue-700 transition-colors"
                    >
                      ✏️ Editar Esta Loja
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* ====================================================================== */}
      {/* MODAIS */}
      {/* ====================================================================== */}
      <EditUsuarioModal
        isOpen={modalUsuarioOpen}
        onClose={() => setModalUsuarioOpen(false)}
        userProfile={userProfile}
      />
      
      {lojaSelecionada && (
        <EditLojaModal
          isOpen={modalLojaOpen}
          onClose={() => setModalLojaOpen(false)}
          loja={lojaSelecionada}
        />
      )}
    </div>
  );
}


===== recuperar-senha.js =====
import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';

export default function RecuperarSenha() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/atualizar-senha`,
      });

      if (error) throw error;

      setSuccess('Email de recuperação enviado! Verifique sua caixa de entrada.');

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">🔒</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Recuperar Senha</p>
        </div>

        {/* Card de Recuperação */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Recuperar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Enviando...' : 'Enviar Email de Recuperação'}
            </button>
          </form>

          {/* Links */}
          <div className="mt-6 text-center space-y-3">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Voltar para o login
            </Link>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            © 2024 EntregasWoo - Sistema de Gestão
          </p>
        </div>
      </div>
    </div>
  );
}

// Não usar layout para esta página
RecuperarSenha.noLayout = true;


===== relatorios.js =====
// pages/relatorios.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

export default function Relatorios() {
  const { userRole, userLojas, loading: userLoading } = useUserProfile();
  const [loading, setLoading] = useState(true);
  const [dadosRelatorios, setDadosRelatorios] = useState(null);

  useEffect(() => {
    carregarRelatorios();
  }, []);

  const carregarRelatorios = async () => {
    try {
      setLoading(true);
      // Aqui você implementará a lógica para buscar dados de relatórios
      
      setDadosRelatorios({
        totalPedidos: 150,
        pedidosEntregues: 120,
        pedidosCancelados: 10,
        taxaSucesso: '92%'
      });
      
    } catch (error) {
      console.error('Erro ao carregar relatórios:', error);
    } finally {
      setLoading(false);
    }
  };

  if (userLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <RouteGuard requiredRole="gerente">
      {/* ✅ REMOVIDO: <Layout> wrapper (já é aplicado pelo _app.js) */}
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Relatórios</h1>
        
        {loading ? (
          <div className="flex justify-center items-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500"></div>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-white p-6 rounded-lg shadow-md text-center">
              <div className="text-3xl font-bold text-purple-600 mb-2">150</div>
              <div className="text-gray-600">Total de Pedidos</div>
            </div>
            
            <div className="bg-white p-6 rounded-lg shadow-md text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">120</div>
              <div className="text-gray-600">Pedidos Entregues</div>
            </div>
            
            <div className="bg-white p-6 rounded-lg shadow-md text-center">
              <div className="text-3xl font-bold text-red-600 mb-2">10</div>
              <div className="text-gray-600">Pedidos Cancelados</div>
            </div>
            
            <div className="bg-white p-6 rounded-lg shadow-md text-center">
              <div className="text-3xl font-bold text-blue-600 mb-2">92%</div>
              <div className="text-gray-600">Taxa de Sucesso</div>
            </div>
          </div>
        )}

        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4">Relatórios Disponíveis</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="p-4 border rounded-lg">
              <h3 className="font-medium mb-2">📊 Relatório de Entregas</h3>
              <p className="text-gray-600 text-sm">Relatório detalhado de pedidos entregues por período</p>
            </div>
            
            <div className="p-4 border rounded-lg">
              <h3 className="font-medium mb-2">👥 Desempenho de Entregadores</h3>
              <p className="text-gray-600 text-sm">Estatísticas de performance por entregador</p>
            </div>
            
            <div className="p-4 border rounded-lg">
              <h3 className="font-medium mb-2">🏬 Relatório por Loja</h3>
              <p className="text-gray-600 text-sm">Dados de pedidos organizados por loja</p>
            </div>
            
            <div className="p-4 border rounded-lg">
              <h3 className="font-medium mb-2">📅 Relatório Mensal</h3>
              <p className="text-gray-600 text-sm">Consolidado mensal de todas as métricas</p>
            </div>
          </div>
        </div>
      </div>
    </RouteGuard>
  );
}


===== test-css.js =====
export default function TestCSS() {
  return (
    <div className="bg-red-500 text-white p-8 text-center">
      <h1 className="text-2xl font-bold">TESTE CSS - Next.js 15</h1>
      <p>Se isso estiver vermelho, o CSS funciona!</p>
      <button className="bg-woo-purple text-white px-4 py-2 rounded mt-4">
        Botão Woo Purple
      </button>
    </div>
  );
}


===== test-modal.js =====
// pages/test-modal.js
import React, { useState } from 'react';
import { OrderModal, WithCourier } from '../components/OrderModal';

export default function TestModal() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  
  // Dados de exemplo para testar
  const pedidoTeste = {
    id: 1,
    id_loja_woo: '12-739',
    loja_nome: '36 Luanda Hortifruti',
    loja_telefone: '(11) 9999-9999',
    status_transporte: 'entregue',
    nome_cliente: 'João Silva',
    telefone_cliente: '(11) 8888-8888',
    email_cliente: 'joao@email.com',
    endereco_entrega: 'Rua Teste, 123 - São Paulo',
    produto: '2x Maçã Verde\n1x Banana Nanica\n3x Laranja Lima',
    forma_pagamento: 'Cartão de Crédito',
    total: '89.90',
    aceito_por_nome: 'Almir da Silva Salles',
    aceito_por_telefone: '(11) 7777-7777',
    aceito_por_email: 'almir@entregador.com',
    observacao_pedido: 'Deixar na portaria'
  };

return (
    <div className="p-8">
      <h1 className="text-2xl font-bold mb-4">Teste do Modal</h1>
      
      <button 
        onClick={() => setIsModalOpen(true)}
        className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700"
      >
        Abrir Modal de Teste
      </button>

      <OrderModal 
        pedido={pedidoTeste} 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)}
      >
        <WithCourier 
          pedido={pedidoTeste} 
          onClose={() => setIsModalOpen(false)} 
        />
      </OrderModal>
    </div>
  );
}


===== test-tailwind.js =====
// pages/test-tailwind.js
export default function TestTailwind() {
  return (
    <div className="bg-purple-600 text-white p-8 text-center">
      <h1 className="text-2xl font-bold">Teste Tailwind</h1>
      <p className="text-lg">Se isso estiver roxo, o Tailwind funciona!</p>
      <button className="bg-white text-purple-600 px-4 py-2 rounded mt-4">
        Botão de Teste
      </button>
    </div>
  );
}


===== todos-pedidos.js =====
// pages/todos-pedidos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { OrderModal, WithCourier, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - TODOS OS PEDIDOS
// ==============================================================================
export default function TodosPedidos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  
  // Estados para filtros
  const [filtroStatus, setFiltroStatus] = useState('');
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [editandoFrete, setEditandoFrete] = useState(null);
  const [valorFrete, setValorFrete] = useState('');

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. VERIFICAÇÃO DE PERMISSÕES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 4. FUNÇÃO: VERIFICAR AUTENTICAÇÃO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getTodosPedidos();
    } catch (error) {
      console.error('Erro de autenticação:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: BUSCAR TODOS OS PEDIDOS
  // ============================================================================
  const getTodosPedidos = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('pedidos')
        .select('*')
        .order('data', { ascending: false });

      // Se for gerente, filtrar apenas pela sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUNÇÃO: FILTRAR PEDIDOS
  // ============================================================================
  const pedidosFiltrados = todosPedidos.filter(pedido => {
    // Filtro por status
    if (filtroStatus && pedido.status_transporte !== filtroStatus) {
      return false;
    }
    
    // Filtro por entregador
    if (filtroEntregador && pedido.aceito_por_nome !== filtroEntregador) {
      return false;
    }
    
    // Filtro por loja (apenas para admin)
    if (userRole === 'admin' && filtroLoja && pedido.id_loja !== filtroLoja) {
      return false;
    }
    
    return true;
  });

  // ============================================================================
  // 7. FUNÇÃO: REVERTER PEDIDO (BOTÃO GERENTE/ADMIN)
  // ============================================================================
  const handleReverterPedido = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja reverter este pedido?')) return;
    
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { 
          ...p, 
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null
        } : p
      ));
      
      alert('✅ Pedido revertido com sucesso!');
    } catch (error) {
      console.error('Erro ao reverter pedido:', error);
      alert('❌ Erro ao reverter pedido.');
    }
  };

  // ============================================================================
  // 8. FUNÇÃO: EDITAR FRETE OFERECIDO
  // ============================================================================
  const handleEditarFrete = (pedido, valor) => {
    setEditandoFrete(pedido.id);
    setValorFrete(valor || '');
  };

  const handleSalvarFrete = async (pedidoId) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ 
          frete_oferecido: parseFloat(valorFrete) || null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, frete_oferecido: parseFloat(valorFrete) || null } : p
      ));
      
      setEditandoFrete(null);
      alert('✅ Frete atualizado com sucesso!');
    } catch (error) {
      console.error('Erro ao atualizar frete:', error);
      alert('❌ Erro ao atualizar frete.');
    }
  };

  // ============================================================================
  // 9. FUNÇÕES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 10. DADOS PARA FILTROS
  // ============================================================================
  const statusUnicos = [...new Set(todosPedidos.map(p => p.status_transporte))].filter(Boolean);
  const entregadoresUnicos = [...new Set(todosPedidos.map(p => p.aceito_por_nome))].filter(Boolean);
  const lojasUnicas = [...new Set(todosPedidos.map(p => p.id_loja))].filter(Boolean);

  // ============================================================================
  // 11. RENDERIZAÇÃO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* TÍTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">📊 Todos os Pedidos</h1>

      {/* FILTROS */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Filtros</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Filtro Status */}
          <div>
            <label className="block text-sm font-medium mb-1">Status</label>
            <select
              value={filtroStatus}
              onChange={(e) => setFiltroStatus(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os status</option>
              {statusUnicos.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>

          {/* Filtro Entregador */}
          <div>
            <label className="block text-sm font-medium mb-1">Entregador</label>
            <select
              value={filtroEntregador}
              onChange={(e) => setFiltroEntregador(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os entregadores</option>
              {entregadoresUnicos.map(entregador => (
                <option key={entregador} value={entregador}>{entregador}</option>
              ))}
            </select>
          </div>

          {/* Filtro Loja (apenas admin) */}
          {userRole === 'admin' && (
            <div>
              <label className="block text-sm font-medium mb-1">Loja</label>
              <select
                value={filtroLoja}
                onChange={(e) => setFiltroLoja(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded"
              >
                <option value="">Todas as lojas</option>
                {lojasUnicas.map(loja => (
                  <option key={loja} value={loja}>{loja}</option>
                ))}
              </select>
            </div>
          )}
        </div>
      </div>

      {/* LISTA DE PEDIDOS */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-start justify-between">
                  
                  {/* INFORMAÇÕES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Status:</span> 
                      <span className={`ml-1 ${
                        pedido.status_transporte === 'entregue' ? 'text-green-600' :
                        pedido.status_transporte === 'cancelado' ? 'text-red-600' :
                        pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-blue-600'
                      }`}>
                        {pedido.status_transporte}
                      </span>
                    </p>
                    
                    {pedido.aceito_por_nome && (
                      <p className="text-sm"><span className="font-medium">Entregador:</span> {pedido.aceito_por_nome}</p>
                    )}

                    {/* EDIÇÃO DE FRETE */}
                    <div className="mt-2">
                      <span className="text-sm font-medium">Frete oferecido: </span>
                      {editandoFrete === pedido.id ? (
                        <div className="flex items-center gap-2 mt-1">
                          <input
                            type="number"
                            step="0.01"
                            value={valorFrete}
                            onChange={(e) => setValorFrete(e.target.value)}
                            className="w-20 p-1 border border-gray-300 rounded"
                            placeholder="0.00"
                          />
                          <button
                            onClick={() => handleSalvarFrete(pedido.id)}
                            className="bg-green-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ✅
                          </button>
                          <button
                            onClick={() => setEditandoFrete(null)}
                            className="bg-gray-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ❌
                          </button>
                        </div>
                      ) : (
                        <span className="text-green-600">
                          R$ {pedido.frete_oferecido?.toFixed(2) || '0.00'} 
                          <button
                            onClick={() => handleEditarFrete(pedido, pedido.frete_oferecido)}
                            className="ml-2 text-blue-600 text-sm"
                          >
                            ✏️
                          </button>
                        </span>
                      )}
                    </div>
                  </div>

                  {/* BOTÕES DE AÇÃO (GERENTE/ADMIN) */}
                  <div className="flex flex-col gap-2 ml-4">
                    {/* BOTÃO REVERTER (para pedidos aceitos/em rota) */}
                    {['aceito', 'em rota'].includes(pedido.status_transporte) && (
                      <button 
                        onClick={() => handleReverterPedido(pedido.id)}
                        className="bg-yellow-500 text-white px-4 py-2 rounded text-sm hover:bg-yellow-600"
                      >
                        ↩️ Reverter
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        {pedidoSelecionado?.aceito_por_nome ? (
          <WithCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        ) : (
          <WithoutCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        )}
      </OrderModal>
    </div>
  );
}


