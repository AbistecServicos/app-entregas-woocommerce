// =========================================
// 1. components\Filters\CourierFilter.js
// =========================================



// =========================================
// 2. components\Filters\StatusFilter.js
// =========================================



// =========================================
// 1. components\OrderModal\index.js
// =========================================

// components/OrderModal/index.js
import OrderModal from './OrderModal';
import WithCourier from './WithCourier';
import WithoutCourier from './WithoutCourier';

export { OrderModal, WithCourier, WithoutCourier };


// =========================================
// 2. components\OrderModal\OrderModal.js
// =========================================

// components/OrderModal/OrderModal.js
import React from 'react';

const OrderModal = ({ 
  pedido, 
  isOpen, 
  onClose, 
  children 
}) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabe√ßalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              √ó
            </button>
          </div>

          {/* Conte√∫do espec√≠fico (ser√° injetado via children) */}
          {children}
        </div>
      </div>
    </div>
  );
};

export default OrderModal;


// =========================================
// 3. components\OrderModal\WithCourier.js
// =========================================

// components/OrderModal/WithCourier.js
import React from 'react';

const WithCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informa√ß√µes da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endere√ßo:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Entregador */}
      <div className="mb-6 p-4 bg-purple-50 rounded">
        <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
        <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
      </div>

      {/* Observa√ß√µes */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observa√ß√µes</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Bot√£o Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithCourier;


// =========================================
// 4. components\OrderModal\WithoutCourier.js
// =========================================

// components/OrderModal/WithoutCourier.js
import React from 'react';

const WithoutCourier = ({ pedido, onClose }) => {
  const formatarData = (dataString) => {
    if (!dataString) return '-';
    try {
      return new Date(dataString).toLocaleDateString('pt-BR');
    } catch {
      return dataString;
    }
  };

  return (
    <>
      {/* Informa√ß√µes da Loja */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>ID:</strong> {pedido.id}</p>
            <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
            <p><strong>Data:</strong> {formatarData(pedido.data)}</p>
          </div>
          <div>
            <p><strong>Telefone:</strong> {pedido.loja_telefone || 'N/A'}</p>
            <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
          </div>
        </div>
      </div>

      {/* Cliente */}
      <div className="mb-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
        <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
        <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
        <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
        <p><strong>Endere√ßo:</strong> {pedido.endereco_entrega || 'N/A'}</p>
      </div>

      {/* Produtos */}
      <div className="mb-6">
        <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
        <div className="bg-white border rounded p-3">
          {pedido.produto ? (
            <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
          ) : (
            <p>Nenhum produto informado</p>
          )}
        </div>
      </div>

      {/* Pagamento */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
          <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR')}</p>
        </div>
      </div>

      {/* Observa√ß√µes */}
      {pedido.observacao_pedido && (
        <div className="mb-6">
          <h4 className="font-semibold text-gray-800 mb-2">Observa√ß√µes</h4>
          <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
        </div>
      )}

      {/* Bot√£o Fechar */}
      <div className="flex justify-end">
        <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700">
          Fechar
        </button>
      </div>
    </>
  );
};

export default WithoutCourier;


// =========================================
// 1. components\DeliveryStatus.js
// =========================================

 



// =========================================
// 2. components\EditLojaModal.js
// =========================================

// components/EditLojaModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function EditLojaModal({ isOpen, onClose, loja }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  useEffect(() => {
    if (isOpen && loja) {
      setFormData({
        veiculo: loja.veiculo || '',
        carga_maxima: loja.carga_maxima || '',
        perimetro_entrega: loja.perimetro_entrega || ''
      });
    }
  }, [isOpen, loja]);

  const handleSave = async () => {
    try {
      setLoading(true);
      
      const { error } = await supabase
        .from('loja_associada')
        .update({
          veiculo: formData.veiculo,
          carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
          perimetro_entrega: formData.perimetro_entrega
        })
        .eq('id', loja.id);

      if (error) throw error;

      alert('Dados da loja atualizados com sucesso!');
      onClose();
      window.location.reload();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      alert('Erro ao atualizar dados da loja');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2 className="text-xl font-bold text-gray-800 mb-4">üè™ Editar Loja: {loja.loja_nome}</h2>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm font-medium text-gray-700">Ve√≠culo</label>
            <select
              value={formData.veiculo}
              onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            >
              <option value="">Selecione o ve√≠culo</option>
              <option value="carro">Carro</option>
              <option value="moto">Moto</option>
              <option value="bicicleta">Bicicleta</option>
              <option value="caminhao">Caminh√£o</option>
              <option value="van">Van</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Carga M√°xima (kg)</label>
            <input
              type="number"
              value={formData.carga_maxima}
              onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Per√≠metro de Entrega</label>
            <input
              type="text"
              value={formData.perimetro_entrega}
              onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
            />
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 rounded"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-blue-600 text-white py-2 rounded disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 3. components\EditProfileModal.js
// =========================================

// components/EditProfileModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDI√á√ÉO DE PERFIL
// ==============================================================================
export default function EditProfileModal({ isOpen, onClose, userProfile, userRole, userLojas }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: '',
    veiculo: '',
    carga_maxima: '',
    perimetro_entrega: ''
  });

  // ============================================================================
  // 1. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  useEffect(() => {
    if (isOpen && userProfile) {
      setFormData({
        nome_completo: userProfile.nome_completo || '',
        nome_usuario: userProfile.nome_usuario || '',
        telefone: userProfile.telefone || '',
        foto: userProfile.foto || '',
        veiculo: userLojas[0]?.veiculo || '',
        carga_maxima: userLojas[0]?.carga_maxima || '',
        perimetro_entrega: userLojas[0]?.perimetro_entrega || ''
      });
    }
  }, [isOpen, userProfile, userLojas]);

  // ============================================================================
  // 2. FUN√á√ÉO: SALVAR ALTERA√á√ïES
  // ============================================================================
  const handleSave = async () => {
    try {
      setLoading(true);

      const { error: userError } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (userError) throw userError;

      if (userRole === 'entregador' && userLojas.length > 0) {
        const { error: lojaError } = await supabase
          .from('loja_associada')
          .update({
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          })
          .eq('uid_usuario', userProfile.uid)
          .eq('id_loja', userLojas[0].id_loja);

        if (lojaError) throw lojaError;
      }

      alert('Perfil atualizado com sucesso!');
      onClose();
      window.location.reload();

    } catch (error) {
      console.error('Erro ao atualizar perfil:', error);
      alert('Erro ao atualizar perfil');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw max-h-95vh overflow-y-auto">
        
        {/* CABE√áALHO */}
        <h2 className="text-xl font-bold mb-4 text-gray-800">‚úèÔ∏è Editar Perfil</h2>
        
        {/* CAMPOS DO FORMUL√ÅRIO */}
        <div className="space-y-4">
          {/* NOME COMPLETO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome Completo
            </label>
            <input
              type="text"
              value={formData.nome_completo}
              onChange={(e) => setFormData({...formData, nome_completo: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome completo"
            />
          </div>

          {/* NOME DE USU√ÅRIO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome de Usu√°rio
            </label>
            <input
              type="text"
              value={formData.nome_usuario}
              onChange={(e) => setFormData({...formData, nome_usuario: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="Seu nome de usu√°rio"
            />
          </div>

          {/* TELEFONE */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone
            </label>
            <input
              type="tel"
              value={formData.telefone}
              onChange={(e) => setFormData({...formData, telefone: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="(11) 99999-9999"
            />
          </div>

          {/* FOTO */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL da Foto
            </label>
            <input
              type="url"
              value={formData.foto}
              onChange={(e) => setFormData({...formData, foto: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
              placeholder="https://exemplo.com/foto.jpg"
            />
          </div>

          {/* CAMPOS ESPEC√çFICOS PARA ENTREGADORES */}
          {userRole === 'entregador' && (
            <>
              {/* VE√çCULO */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Ve√≠culo
                </label>
                <select
                  value={formData.veiculo}
                  onChange={(e) => setFormData({...formData, veiculo: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                >
                  <option value="">Selecione o ve√≠culo</option>
                  <option value="carro">Carro</option>
                  <option value="moto">Moto</option>
                  <option value="bicicleta">Bicicleta</option>
                  <option value="caminhao">Caminh√£o</option>
                  <option value="van">Van</option>
                </select>
              </div>

              {/* CARGA M√ÅXIMA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Carga M√°xima (kg)
                </label>
                <input
                  type="number"
                  value={formData.carga_maxima}
                  onChange={(e) => setFormData({...formData, carga_maxima: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: 50"
                />
              </div>

              {/* PER√çMETRO DE ENTREGA */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Per√≠metro de Entrega
                </label>
                <input
                  type="text"
                  value={formData.perimetro_entrega}
                  onChange={(e) => setFormData({...formData, perimetro_entrega: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded text-gray-800 bg-white"
                  placeholder="Ex: Zona Norte, at√© 10km"
                />
              </div>
            </>
          )}
        </div>

        {/* BOT√ïES DE A√á√ÉO */}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded font-medium hover:bg-gray-400 transition-colors"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading}
            className="flex-1 bg-purple-600 text-white py-2 px-4 rounded font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? 'Salvando...' : 'Salvar'}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 4. components\EditUsuarioModal.js
// =========================================

// components/EditUsuarioModal.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// MODAL DE EDI√á√ÉO DE DADOS PESSOAIS DO USU√ÅRIO
// ==============================================================================
/**
 * Componente de modal para edi√ß√£o de dados pessoais, incluindo upload de foto.
 * Suporta normaliza√ß√£o de nomes de arquivos e integra√ß√£o com Supabase Storage.
 * Aprimoramentos: Valida√ß√£o, acessibilidade e feedback visual.
 */
export default function EditUsuarioModal({ isOpen, onClose, userProfile }) {
  // ============================================================================
  // 1. DEFINI√á√ÉO DE ESTADOS
  // ============================================================================
  /**
   * Gerencia carregamento, dados do formul√°rio, arquivo selecionado e erros.
   * Adicionado estado para valida√ß√£o de formul√°rio.
   */
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    nome_completo: '',
    nome_usuario: '',
    telefone: '',
    foto: ''
  });
  const [selectedFile, setSelectedFile] = useState(null);
  const [error, setError] = useState('');
  const [formValid, setFormValid] = useState(false); // Novo estado para valida√ß√£o

  // ============================================================================
  // 2. CARREGAR DADOS ATUAIS AO ABRIR MODAL
  // ============================================================================
  /**
   * Carrega os dados do perfil do usu√°rio ao abrir o modal e valida o formul√°rio.
   * Executa apenas se o modal estiver aberto e userProfile existir.
   */
  useEffect(() => {
    if (isOpen && userProfile) {
      setFormData({
        nome_completo: userProfile.nome_completo || '',
        nome_usuario: userProfile.nome_usuario || '',
        telefone: userProfile.telefone || '',
        foto: userProfile.foto || ''
      });
      validateForm(); // Valida ap√≥s carregar dados
    }
  }, [isOpen, userProfile]);

  // ============================================================================
  // 3. FUN√á√ÉO: VALIDAR FORMUL√ÅRIO
  // ============================================================================
  /**
   * Valida campos obrigat√≥rios (nome_completo e telefone) e atualiza estado de validade.
   * Requisitos: Nome completo e telefone n√£o podem ser vazios.
   */
  const validateForm = () => {
    const isValid = formData.nome_completo.trim() !== '' && formData.telefone.trim() !== '';
    setFormValid(isValid);
  };

  // ============================================================================
  // 4. FUN√á√ÉO: ATUALIZAR CAMPOS DO FORMUL√ÅRIO
  // ============================================================================
  /**
   * Atualiza o estado do formul√°rio com base nos inputs e revalida.
   * @param {Object} e - Evento de mudan√ßa do input.
   */
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => {
      const newData = { ...prev, [name]: value };
      validateForm(newData); // Revalida ap√≥s mudan√ßa
      return newData;
    });
  };

  // ============================================================================
  // 5. FUN√á√ÉO: NORMALIZAR NOME DO ARQUIVO
  // ============================================================================
  /**
   * Remove acentos e caracteres especiais do nome do arquivo para compatibilidade.
   * @param {string} fileName - Nome original do arquivo.
   * @returns {string} Nome normalizado.
   */
  const normalizeFileName = (fileName) => {
    return fileName
      .normalize('NFD') // Decomp√µe caracteres acentuados
      .replace(/[\u0300-\u036f]/g, '') // Remove diacr√≠ticos
      .replace(/[^a-zA-Z0-9.-]/g, '_'); // Substitui especiais por underscore
  };

  // ============================================================================
  // 6. FUN√á√ÉO: ATUALIZAR ARQUIVO DE FOTO
  // ============================================================================
  /**
   * Valida e armazena o arquivo de imagem selecionado, com limite de tamanho (5MB).
   * @param {Object} e - Evento de mudan√ßa do input de arquivo.
   */
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        setError('Por favor, selecione um arquivo de imagem.');
        setSelectedFile(null);
        return;
      }
      if (file.size > 5 * 1024 * 1024) { // Limite de 5MB
        setError('O arquivo excede o limite de 5MB.');
        setSelectedFile(null);
        return;
      }
      setSelectedFile(file);
      setError(''); // Limpa erro se v√°lido
    }
  };

  // ============================================================================
  // 7. FUN√á√ÉO: SALVAR ALTERA√á√ïES
  // ============================================================================
  /**
   * Salva os dados atualizados no Supabase, incluindo upload de foto se houver.
   * Inclui tratamento de erros e feedback ao usu√°rio.
   */
  const handleSave = async () => {
    if (!formValid) {
      setError('Preencha o nome completo e o telefone.');
      return;
    }

    try {
      setLoading(true);
      setError('');

      let photoUrl = formData.foto;

      if (selectedFile) {
        const baseName = normalizeFileName(selectedFile.name);
        const fileName = `${userProfile.uid}-${Date.now()}-${baseName}`;
        const { error: uploadError } = await supabase.storage
          .from('box/fotos')
          .upload(fileName, selectedFile, {
            cacheControl: '3600',
            upsert: false,
          });

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('box/fotos')
          .getPublicUrl(fileName);
        photoUrl = urlData.publicUrl;
      }

      const { error } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: photoUrl
        })
        .eq('uid', userProfile.uid);

      if (error) throw error;

      alert('Dados pessoais atualizados com sucesso!');
      onClose();
      window.location.reload();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      setError('Erro ao atualizar dados. Tente novamente.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 8. RENDERIZA√á√ÉO DO COMPONENTE
  // ============================================================================
  /**
   * Renderiza o modal apenas se estiver aberto, com formul√°rio e bot√µes de a√ß√£o.
   * Inclui feedback visual e acessibilidade.
   */
  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
      role="dialog"
      aria-labelledby="edit-user-modal-title"
      aria-modal="true"
    >
      <div className="bg-white p-6 rounded-lg w-96 max-w-95vw">
        <h2
          id="edit-user-modal-title"
          className="text-xl font-bold text-gray-800 mb-4"
        >
          ‚úèÔ∏è Editar Dados Pessoais
        </h2>
        
        {error && (
          <div
            className="bg-red-50 border border-red-200 text-red-600 p-2 mb-4"
            role="alert"
          >
            {error}
          </div>
        )}

        <div className="space-y-3">
          <div>
            <label
              htmlFor="nome-completo-input"
              className="block text-sm font-medium text-gray-700"
            >
              Nome Completo
            </label>
            <input
              id="nome-completo-input"
              type="text"
              name="nome_completo"
              value={formData.nome_completo}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
              required
              disabled={loading}
              aria-required="true"
            />
          </div>

          <div>
            <label
              htmlFor="nome-usuario-input"
              className="block text-sm font-medium text-gray-700"
            >
              Nome de Usu√°rio
            </label>
            <input
              id="nome-usuario-input"
              type="text"
              name="nome_usuario"
              value={formData.nome_usuario}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
              disabled={loading}
            />
          </div>

          <div>
            <label
              htmlFor="telefone-input"
              className="block text-sm font-medium text-gray-700"
            >
              Telefone
            </label>
            <input
              id="telefone-input"
              type="tel"
              name="telefone"
              value={formData.telefone}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded text-gray-800"
              required
              disabled={loading}
              aria-required="true"
            />
          </div>

          <div>
            <label
              htmlFor="foto-input"
              className="block text-sm font-medium text-gray-700"
            >
              Foto de Perfil
            </label>
            {formData.foto && (
              <img
                src={formData.foto}
                alt="Foto atual do perfil"
                className="mt-2 h-20 w-20 object-cover rounded-full mb-2"
              />
            )}
            <input
              id="foto-input"
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className="w-full p-2 border border-gray-300 rounded text-gray-800 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-purple-600 file:text-white hover:file:bg-purple-700"
              disabled={loading}
              aria-label="Selecionar foto de perfil"
            />
            <p className="text-xs text-gray-500 mt-1">Escolha uma imagem ou tire uma foto com a c√¢mera (m√°x. 5MB).</p>
          </div>
        </div>

        <div className="flex gap-2 mt-6">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-300 text-gray-700 py-2 rounded"
            disabled={loading}
            aria-label="Cancelar edi√ß√£o"
          >
            Cancelar
          </button>
          <button
            onClick={handleSave}
            disabled={loading || !formValid}
            className="flex-1 bg-purple-600 text-white py-2 rounded disabled:opacity-50"
            aria-label="Salvar altera√ß√µes"
          >
            {loading ? (
              <span className="flex items-center justify-center">
                <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Salvando...
              </span>
            ) : (
              'Salvar'
            )}
          </button>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 5. components\Header.js
// =========================================

// components/Header.js
export default function Header({ toggleSidebar, showMenuButton = true, title }) {
  return (
    <header className="bg-white shadow-sm border-b border-gray-200">
      <div className="flex items-center justify-between px-4 py-3">
        
        {/* ================================================================== */}
        {/* BOT√ÉO HAMBURGUER (CONDICIONAL) */}
        {/* ================================================================== */}
        <div className="flex items-center">
          {showMenuButton && (
            <button
              onClick={toggleSidebar}
              className="lg:hidden p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100"
              aria-label="Abrir menu"
            >
              {/* √çcone do hamburger */}
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          )}
          
          {/* Espa√ßo para alinhamento quando n√£o h√° bot√£o */}
          {!showMenuButton && <div className="w-10 h-10"></div>}
        </div>

        {/* ================================================================== */}
        {/* T√çTULO (CUSTOMIZ√ÅVEL PARA P√ÅGINAS SEM SIDEBAR) */}
        {/* ================================================================== */}
        <div className="flex-1 text-center lg:text-left">
          <h1 className="text-xl font-semibold text-gray-900">
            {title || 'EntregasWoo'} {/* Usa t√≠tulo customizado ou padr√£o */}
          </h1>
        </div>

        {/* ================================================================== */}
        {/* ESPA√áO PARA ELEMENTOS √Ä DIREITA (BOT√ÉO DE PERFIL, ETC) */}
        {/* ================================================================== */}
        <div className="w-10 h-10"></div>
      </div>
    </header>
  );
}


// =========================================
// 6. components\Layout.js
// =========================================

// components/Layout.js
import { useState, useEffect } from 'react';
import Header from './Header';
import Sidebar from './Sidebar';

// ==============================================================================
// COMPONENTE LAYOUT PRINCIPAL
// ==============================================================================
/**
 * Layout √© o componente que define a estrutura b√°sica de todas as p√°ginas
 * Ele gerencia: Sidebar, Header e Conte√∫do principal
 * 
 * @param {Object} props - Propriedades do componente
 * @param {ReactNode} props.children - Conte√∫do da p√°gina
 * @param {boolean} [props.hideSidebar=false] - Oculta a sidebar (para p√°ginas como Admin)
 */
const Layout = ({ children, hideSidebar = false }) => {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  // ============================================================================
  // 2. EFFECT: DETECTAR TAMANHO DA TELA
  // ============================================================================
  useEffect(() => {
    const checkIsMobile = () => setIsMobile(window.innerWidth < 1024);
    
    // Verificar inicialmente
    checkIsMobile();
    
    // Adicionar listener para redimensionamento
    window.addEventListener('resize', checkIsMobile);
    
    // Cleanup
    return () => window.removeEventListener('resize', checkIsMobile);
  }, []);

  // ============================================================================
  // 3. FUN√á√ïES: CONTROLE DA SIDEBAR
  // ============================================================================
  /**
   * Alterna o estado da sidebar (aberto/fechado)
   */
  const toggleSidebar = () => {
    setSidebarOpen(prev => !prev);
  };

  /**
   * Fecha a sidebar (√∫til para links mobile)
   */
  const closeSidebar = () => {
    if (isMobile) {
      setSidebarOpen(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZA√á√ÉO DO LAYOUT
  // ============================================================================
  return (
    <div className="flex h-screen bg-gray-50">
      
      {/* ====================================================================== */}
      {/* SIDEBAR - MENU LATERAL (CONDICIONAL) */}
      {/* ====================================================================== */}
      {/**
       * A sidebar √© opcional (pode ser ocultada com hideSidebar=true)
       * Mas o Header SEMPRE deve aparecer, mesmo sem sidebar
       */}
      {!hideSidebar && (
        <Sidebar 
          isOpen={sidebarOpen} 
          toggleSidebar={toggleSidebar}
          onItemClick={closeSidebar}
        />
      )}
      
      {/* ====================================================================== */}
      {/* CONTE√öDO PRINCIPAL */}
      {/* ====================================================================== */}
      <div className="flex-1 flex flex-col overflow-hidden">
        
        {/* ================================================================== */}
        {/* HEADER - CABE√áALHO (SEMPRE VIS√çVEL, INDEPENDENTE DA SIDEBAR) */}
        {/* ================================================================== */}
        {/**
         * ‚úÖ CORRE√á√ÉO: Header SEMPRE vis√≠vel, mas o bot√£o hamburger √© condicional
         * showMenuButton=false quando hideSidebar=true
         */}
        <Header 
          toggleSidebar={toggleSidebar} 
          showMenuButton={!hideSidebar} // Bot√£o s√≥ aparece se sidebar existir
          title={hideSidebar ? "Painel Administrativo" : undefined} // T√≠tulo customizado para Admin
        />
        
        {/* ================================================================== */}
        {/* CONTE√öDO DA P√ÅGINA */}
        {/* ================================================================== */}
        <main 
          className="flex-1 overflow-y-auto p-4 lg:p-6"
          id="main-content"
          tabIndex={-1}
        >
          {children}
        </main>
      </div>

      {/* ====================================================================== */}
      {/* OVERLAY - SOMENTE MOBILE E QUANDO SIDEBAR N√ÉO EST√Å OCULTA */}
      {/* ====================================================================== */}
      {!hideSidebar && sidebarOpen && isMobile && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
          onClick={closeSidebar}
          aria-hidden="true"
          role="button"
          aria-label="Fechar menu"
        />
      )}
    </div>
  );
};

export default Layout;


// =========================================
// 7. components\MobileMenu.js
// =========================================



// =========================================
// 8. components\Notification.js
// =========================================

 



// =========================================
// 9. components\OrderCard.js
// =========================================

 



// =========================================
// 10. components\Pagination.js
// =========================================

// components/Pagination.js
// ==============================================================================
// COMPONENTE PAGINATION (SEM DEPEND√äNCIAS EXTERNAS)
// ==============================================================================
export default function Pagination({ currentPage, totalPages, onPageChange }) {
  // ============================================================================
  // 1. FUN√á√ÉO: GERAR BOT√ïES DE P√ÅGINA
  // ============================================================================
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 5; // M√°ximo de p√°ginas vis√≠veis
    
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    // Ajustar se estiver no in√≠cio
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  };

  // ============================================================================
  // 2. RENDERIZA√á√ÉO DO COMPONENTE
  // ============================================================================
  if (totalPages <= 1) return null; // N√£o mostrar pagina√ß√£o se s√≥ tiver uma p√°gina

  return (
    <div className="flex items-center justify-between border-t border-gray-200 px-4 py-3 sm:px-6">
      
      {/* ‚úÖ PAGINA√á√ÉO MOBILE */}
      <div className="flex flex-1 justify-between sm:hidden">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          ‚Üê Anterior
        </button>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Pr√≥xima ‚Üí
        </button>
      </div>
      
      {/* ‚úÖ PAGINA√á√ÉO DESKTOP */}
      <div className="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        
        {/* ‚úÖ CONTADOR DE P√ÅGINAS */}
        <div>
          <p className="text-sm text-gray-700">
            P√°gina <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        
        {/* ‚úÖ NAVEGA√á√ÉO */}
        <div>
          <nav className="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
            
            {/* ‚úÖ BOT√ÉO ANTERIOR */}
            <button
              onClick={() => onPageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Anterior</span>
              ‚Üê {/* Emoji seta esquerda */}
            </button>
            
            {/* ‚úÖ BOT√ïES DE P√ÅGINA */}
            {getPageNumbers().map((page) => (
              <button
                key={page}
                onClick={() => onPageChange(page)}
                className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                  currentPage === page
                    ? 'bg-purple-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600'
                    : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                }`}
              >
                {page}
              </button>
            ))}
            
            {/* ‚úÖ BOT√ÉO PR√ìXIMA */}
            <button
              onClick={() => onPageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="sr-only">Pr√≥xima</span>
              ‚Üí {/* Emoji seta direita */}
            </button>
          </nav>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 11. components\RouteGuard.js
// =========================================

// components/RouteGuard.js
import { useUserProfile } from '../hooks/useUserProfile';
import { useRouter } from 'next/router';
import { useEffect } from 'react';

const RouteGuard = ({ children, requiredRole }) => {
  const { userRole, loading } = useUserProfile();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      // Definir hierarquia de permiss√µes
      const rolesHierarchy = {
        'visitante': 0,
        'entregador': 1,
        'gerente': 2,
        'admin': 3
      };

      // Verificar se usu√°rio tem permiss√£o
      const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];
      
      if (!hasPermission) {
        // Redirecionar para p√°gina n√£o autorizada ou home
        router.push('/');
      }
    }
  }, [userRole, loading, requiredRole, router]);

  // Mostrar loading enquanto verifica permiss√µes
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Verifica√ß√£o final (caso o useEffect n√£o tenha redirecionado ainda)
  const rolesHierarchy = {
    'visitante': 0,
    'entregador': 1,
    'gerente': 2,
    'admin': 3
  };
  
  const hasPermission = rolesHierarchy[userRole] >= rolesHierarchy[requiredRole];

  if (!hasPermission) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600">Acesso N√£o Autorizado</h1>
          <p className="text-gray-600 mt-2">Voc√™ n√£o tem permiss√£o para acessar esta p√°gina.</p>
        </div>
      </div>
    );
  }

  return children;
};

export default RouteGuard;


// =========================================
// 12. components\Sidebar.js
// =========================================

// components/Sidebar.js
import { useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import UserProfile from './UserProfile';

// ==============================================================================
// COMPONENTE SIDEBAR - MENU LATERAL
// ==============================================================================
/**
 * Sidebar √© o menu de navega√ß√£o lateral do sistema.
 * Cont√©m: Logo, Menu de navega√ß√£o, Perfil do usu√°rio e Bot√£o de login/logout.
 * Responsivo: Mobile (overlay) e Desktop (fixo).
 * Integra com useUserProfile para gerenciar autentica√ß√£o e visibilidade de menus.
 */
const Sidebar = ({ isOpen, toggleSidebar }) => {
  const router = useRouter();
  const { user, userRole, userLojas, loading: loadingUser } = useUserProfile();
  
  // ============================================================================
  // 1. DEFINI√á√ÉO DOS ITENS DO MENU (INDIVIDUAIS)
  // ============================================================================
  /**
   * Definimos cada item separadamente para facilitar a montagem condicional.
   * Cada item tem: path (rota), icon (emoji), label (texto).
   */
  const homeItem = { path: '/', icon: 'üè†', label: 'Home' };
  const perfilItem = { path: '/perfil', icon: 'üë§', label: 'Meu Perfil' };
  const pendentesItem = { path: '/pedidos-pendentes', icon: 'üìã', label: 'Pedidos Pendentes' };
  const aceitosItem = { path: '/pedidos-aceitos', icon: '‚úÖ', label: 'Pedidos Aceitos' };
  const entreguesItem = { path: '/pedidos-entregues', icon: 'üöö', label: 'Pedidos Entregues' };
  const gestaoItem = { path: '/gestao-entregadores', icon: 'üë•', label: 'Gest√£o de Entregadores' };
  const todosItem = { path: '/todos-pedidos', icon: 'üìä', label: 'Todos os Pedidos' };
  const relatoriosItem = { path: '/relatorios', icon: 'üìà', label: 'Relat√≥rios' };
  const adminItem = { path: '/admin', icon: '‚öôÔ∏è', label: 'Administra√ß√£o' };

// ============================================================================
// 2. MONTAGEM CONDICIONAL DOS ITENS DO MENU
// ============================================================================
/**
 * Constr√≥i a lista de menuItems dinamicamente com base no user e userRole.
 * - Sempre inclui 'Home'.
 * - Para logados: Adiciona 'Meu Perfil'.
 * - Para 'entregador', 'gerente' e 'admin': Adiciona menus de pedidos.
 * - Para associados √† loja (userLojas.length > 0) ou admin: Adiciona 'Relat√≥rios'.
 * - Para 'gerente' ou 'admin': Adiciona gest√£o e todos os pedidos.
 * - Para 'admin': Adiciona administra√ß√£o.
 * 
 * üîß ATUALIZA√á√ÉO: O item 'Pedidos Entregues' agora √© vis√≠vel tamb√©m para gerente e admin.
 */
let menuItems = [homeItem]; // Sempre vis√≠vel (at√© para n√£o logados)

if (user) { // Apenas para usu√°rios logados
  menuItems.push(perfilItem);

  // --------------------------------------------------------------------------
  // BLOCO A: ITENS DE PEDIDOS (pendentes, aceitos, entregues)
  // --------------------------------------------------------------------------
  if (['entregador', 'gerente', 'admin'].includes(userRole)) {
    menuItems.push(pendentesItem, aceitosItem, entreguesItem);
  }

  // --------------------------------------------------------------------------
  // BLOCO B: RELAT√ìRIOS (para quem est√° vinculado a loja ou admin)
  // --------------------------------------------------------------------------
  if (userLojas.length > 0 || userRole === 'admin') {
    menuItems.push(relatoriosItem);
  }

  // --------------------------------------------------------------------------
  // BLOCO C: GEST√ÉO E TODOS OS PEDIDOS (gerente e admin)
  // --------------------------------------------------------------------------
  if (['gerente', 'admin'].includes(userRole)) {
    menuItems.push(gestaoItem, todosItem);
  }

  // --------------------------------------------------------------------------
  // BLOCO D: ADMINISTRA√á√ÉO (apenas admin)
  // --------------------------------------------------------------------------
  if (userRole === 'admin') {
    menuItems.push(adminItem);
  }
}

  // ============================================================================
  // 3. FUN√á√ÉO: LOGOUT DO USU√ÅRIO
  // ============================================================================
  /**
   * Realiza o logout do usu√°rio via Supabase.
   * O useUserProfile lida com a atualiza√ß√£o dos estados e redirecionamento.
   */
  const handleLogout = async () => {
    try {
      // Fechar sidebar no mobile antes do logout
      if (window.innerWidth < 1024) {
        toggleSidebar();
      }
      
      // Realizar logout
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      console.log('Logout realizado com sucesso');
    } catch (error) {
      console.error('Erro ao fazer logout:', error);
    }
  };

  // ============================================================================
  // 4. FUN√á√ÉO: REDIRECIONAR PARA LOGIN
  // ============================================================================
  /**
   * Redireciona para a p√°gina de login quando o usu√°rio n√£o est√° autenticado.
   */
  const handleLoginRedirect = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
    router.push('/login');
  };

  // ============================================================================
  // 5. FUN√á√ÉO: FECHAR SIDEBAR AO CLICAR EM ITEM (MOBILE)
  // ============================================================================
  /**
   * Fecha o sidebar no mobile quando um item de menu √© clicado.
   */
  const handleMenuItemClick = () => {
    if (window.innerWidth < 1024) {
      toggleSidebar();
    }
  };

  // ============================================================================
  // 6. RENDERIZA√á√ÉO DO COMPONENTE
  // ============================================================================
  return (
    <>
      {/* Overlay para mobile */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={toggleSidebar}
        />
      )}
      
      {/* Sidebar principal */}
      <div className={`
        fixed lg:static inset-y-0 left-0 z-50
        w-64 bg-purple-800 text-white
        transform transition-transform duration-300 ease-in-out
        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}
        flex flex-col h-full
      `}>
        {/* Logo / Marca do sistema */}
        <div className="p-6 border-b border-purple-700">
          <Link href="/" passHref onClick={handleMenuItemClick}>
            <div className="cursor-pointer">
              <h1 className="text-2xl font-bold">EntregasWoo</h1>
              <p className="text-purple-300 text-sm">Sistema de Gest√£o</p>
            </div>
          </Link>
        </div>

        {/* Menu de navega√ß√£o */}
        <nav className="flex-1 p-4 overflow-y-auto">
          {menuItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`flex items-center py-3 px-4 rounded-lg mb-2 transition-colors
                ${router.pathname === item.path
                  ? 'bg-purple-900 text-white shadow-md'
                  : 'hover:bg-purple-700 text-purple-200'
                }`}
              onClick={handleMenuItemClick}
            >
              <span className="text-xl mr-3">{item.icon}</span>
              <span className="font-medium">{item.label}</span>
            </Link>
          ))}
        </nav>

        {/* Perfil do usu√°rio (condicional) */}
        {user && (
          <div className="p-4 border-t border-purple-700 bg-purple-900">
            <UserProfile />
          </div>
        )}

        {/* Bot√£o din√¢mico: Entrar/Sair */}
        <div className="p-4 border-t border-purple-700">
          {user ? (
            <button
              onClick={handleLogout}
              className="w-full flex items-center justify-center py-2 px-4 bg-purple-700 hover:bg-purple-600 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              Sair
            </button>
          ) : (
            <button
              onClick={handleLoginRedirect}
              className="w-full flex items-center justify-center py-2 px-4 bg-green-600 hover:bg-green-500 text-white rounded-lg transition-colors"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l-4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
              </svg>
              Entrar
            </button>
          )}
        </div>
      </div>
    </>
  );
};

export default Sidebar;


// =========================================
// 13. components\UserProfile.js
// =========================================

// components/UserProfile.js (VERS√ÉO SIMPLIFICADA)
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// COMPONENTE: PERFIL DO USU√ÅRIO (VERS√ÉO SIMPLIFICADA)
// ==============================================================================
/**
 * Componente de perfil simplificado para sidebar, exibindo informa√ß√µes b√°sicas
 * (foto, nome, email, fun√ß√£o e status) sem op√ß√µes de edi√ß√£o.
 * Utiliza hook useUserProfile para dados e suporta modo mobile.
 * Aprimoramentos: Acessibilidade, feedback de erro e design responsivo.
 */
const UserProfile = ({ isMobile = false }) => {
  // ============================================================================
  // 1. OBTEN√á√ÉO DE DADOS DO USU√ÅRIO
  // ============================================================================
  /**
   * Usa o hook useUserProfile para obter perfil, fun√ß√£o e estado de carregamento.
   * Desestrutura√ß√£o para acessar os valores retornados.
   */
  const { userProfile, userRole, loading, error } = useUserProfile();

  // ============================================================================
  // 2. ESTADO DE CARREGAMENTO
  // ============================================================================
  /**
   * Exibe um placeholder animado durante o carregamento dos dados.
   * Design aprimorado com m√∫ltiplos elementos para simular conte√∫do.
   */
  if (loading) {
    return (
      <div
        className="p-4 border-t"
        role="status"
        aria-label="Carregando perfil do usu√°rio"
      >
        <div className="animate-pulse space-y-2">
          <div className="h-4 bg-purple-700 rounded w-3/4 mb-2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/2"></div>
          <div className="h-3 bg-purple-700 rounded w-1/3 mt-2"></div>
        </div>
      </div>
    );
  }

  // ============================================================================
  // 3. TRATAMENTO DE ERRO
  // ============================================================================
  /**
   * Exibe uma mensagem de erro se a busca de perfil falhar.
   * Permite ao usu√°rio tentar novamente ou entrar em contato com suporte.
   */
  if (error) {
    return (
      <div
        className="p-4 border-t"
        role="alert"
        aria-label="Erro ao carregar perfil"
      >
        <p className="text-sm text-red-300">Erro ao carregar perfil.</p>
        <p className="text-xs text-red-400">Tente novamente ou contate o suporte.</p>
      </div>
    );
  }

  // ============================================================================
  // 4. USU√ÅRIO N√ÉO AUTENTICADO
  // ============================================================================
  /**
   * Exibe mensagem para visitantes n√£o autenticados, incentivando login.
   */
  if (!userProfile) {
    return (
      <div
        className="p-4 border-t"
        role="region"
        aria-label="Status de visitante"
      >
        <p className="text-sm text-purple-300">Visitante</p>
        <p className="text-xs text-purple-400">Fa√ßa login para acessar</p>
      </div>
    );
  }

  // ============================================================================
  // 5. RENDERIZA√á√ÉO SIMPLIFICADA
  // ============================================================================
  /**
   * Exibe informa√ß√µes do usu√°rio autenticado com foto, nome, email, fun√ß√£o e status.
   * Ajustes para responsividade em modo mobile e acessibilidade.
   */
  return (
    <div
      className={`p-4 border-t ${isMobile ? 'text-sm' : 'text-base'}`}
      role="region"
      aria-label="Perfil do usu√°rio"
    >
      {/* INFORMA√á√ïES B√ÅSICAS DO USU√ÅRIO */}
      <div className="space-y-2">
        {/* NOME E EMAIL */}
        <div className="flex items-center">
          {userProfile.foto && (
            <img
              src={userProfile.foto}
              alt={`${userProfile.nome_completo || userProfile.nome_usuario} foto de perfil`}
              className="w-8 h-8 rounded-full mr-3 border-2 border-purple-600"
              loading="lazy" // Otimiza√ß√£o de carregamento
            />
          )}
          <div className="flex-1 min-w-0">
            <p
              className="text-sm font-semibold text-white truncate"
              title={userProfile.nome_completo || userProfile.nome_usuario}
            >
              {userProfile.nome_completo || userProfile.nome_usuario}
            </p>
            <p
              className="text-xs text-purple-300 truncate"
              title={userProfile.email}
            >
              {userProfile.email}
            </p>
          </div>
        </div>

        {/* FUN√á√ÉO/ROLE (APENAS TEXTO) */}
        <div className="bg-purple-700 rounded p-1">
          <p
            className="text-xs text-center text-white"
            role="status"
            aria-label={`Fun√ß√£o: ${userRole}`}
          >
            {userRole === 'admin' && 'üëë Admin'}
            {userRole === 'gerente' && 'üíº Gerente'}
            {userRole === 'entregador' && 'üöö Entregador'}
            {userRole === 'visitante' && 'üë§ Visitante'}
          </p>
        </div>

        {/* STATUS DE CONEX√ÉO (SIMPLES) */}
        <div
          className="flex items-center justify-between text-xs text-purple-400"
          role="status"
          aria-label="Status de conex√£o"
        >
          <span>üü¢ Conectado</span>
        </div>
      </div>
    </div>
  );
};

export default UserProfile;


// =========================================
// 1. hooks\useOrders.js
// =========================================

 



// =========================================
// 2. hooks\useRealtimePedidos.js
// =========================================

// hooks/useRealtimePedidos.js
import { useEffect } from 'react';
import { supabase } from '../lib/supabase';

export const useRealtimePedidos = (callback) => {
  useEffect(() => {
    const subscription = supabase
      .channel('pedidos-realtime')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'pedidos' 
        }, 
        (payload) => {
          callback(payload);
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, [callback]);
};

// Como usar em uma p√°gina:
const [pedidos, setPedidos] = useState([]);

useRealtimePedidos((payload) => {
  // Atualizar a lista de pedidos em tempo real
  if (payload.eventType === 'INSERT') {
    setPedidos(prev => [payload.new, ...prev]);
  } else if (payload.eventType === 'UPDATE') {
    setPedidos(prev => prev.map(p => 
      p.id === payload.new.id ? payload.new : p
    ));
  } else if (payload.eventType === 'DELETE') {
    setPedidos(prev => prev.filter(p => p.id !== payload.old.id));
  }
});


// =========================================
// 3. hooks\useUserProfile.js
// =========================================

// hooks/useUserProfile.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// HOOK PERSONALIZADO: useUserProfile
// ==============================================================================
/**
 * Hook para gerenciar dados do usu√°rio autenticado, incluindo perfil, fun√ß√£o (role)
 * e lojas associadas. Escuta mudan√ßas de autentica√ß√£o em tempo real e atualiza
 * estados automaticamente. Retorna estados e fun√ß√µes para uso em componentes.
 * Aprimoramentos: Otimiza√ß√£o de desempenho, valida√ß√£o e logging detalhado.
 * @returns {Object} Objeto com estados (user, userProfile, userRole, etc.) e fun√ß√µes.
 */
export const useUserProfile = () => {
  // ============================================================================
  // 1. DEFINI√á√ÉO DOS ESTADOS
  // ============================================================================
  /**
   * Estados para gerenciar usu√°rio, perfil, fun√ß√£o, lojas, carregamento e erros.
   * @type {Object|null} user - Dados do usu√°rio autenticado
   * @type {Object|null} userProfile - Dados do perfil (tabela 'usuarios')
   * @type {string} userRole - Papel do usu√°rio ('admin', 'gerente', 'entregador', 'visitante')
   * @type {Array} userLojas - Lojas associadas (tabela 'loja_associada')
   * @type {boolean} loading - Indicador de carregamento inicial
   * @type {string|null} error - Mensagem de erro
   * @type {boolean} updating - Indicador de atualiza√ß√£o do perfil
   */
  const [user, setUser] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [userRole, setUserRole] = useState('visitante');
  const [userLojas, setUserLojas] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [updating, setUpdating] = useState(false);

  // ============================================================================
  // 2. FUN√á√ÉO: CARREGAR DADOS DO USU√ÅRIO
  // ============================================================================
  /**
   * Carrega dados do usu√°rio autenticado, perfil e lojas associadas.
   * Utiliza Promise.all para otimizar requisi√ß√µes paralelas.
   */
  const loadUserData = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('Iniciando loadUserData...');

      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
      if (authError) {
        console.error('Erro de autentica√ß√£o:', authError.message);
        setError('Erro de autentica√ß√£o: ' + authError.message);
        setUser(null);
        setUserProfile(null);
        setUserRole('visitante');
        setUserLojas([]);
        return;
      }

      if (!authUser) {
        console.log('Nenhum usu√°rio autenticado encontrado.');
        setUser(null);
        setUserProfile(null);
        setUserRole('visitante');
        setUserLojas([]);
        return;
      }

      setUser(authUser);
      console.log('Usu√°rio autenticado:', authUser.id);

      const [usuarioResponse, lojaResponse] = await Promise.all([
        supabase
          .from('usuarios')
          .select('*')
          .eq('uid', authUser.id)
          .single(),
        supabase
          .from('loja_associada')
          .select(`
            *,
            semana_entregue,
            semana_cancelado,
            mes_entregue,
            mes_cancelado, 
            ano_entregue,
            ano_cancelado
          `) // ‚Üê CORRE√á√ÉO AQUI: Incluir campos de estat√≠sticas
          .eq('uid_usuario', authUser.id)
          .eq('status_vinculacao', 'ativo')
      ]);

      if (usuarioResponse.error) {
        console.error('Erro ao buscar perfil:', usuarioResponse.error.message);
        setError('Erro ao buscar perfil: ' + usuarioResponse.error.message);
        setUserProfile(null);
        setUserRole('visitante');
        setUserLojas([]);
        return;
      }

      const usuarioData = usuarioResponse.data;
      setUserProfile(usuarioData);
      console.log('Perfil carregado:', usuarioData);

      if (usuarioData?.is_admin) {
        setUserRole('admin');
        setUserLojas([]);
        console.log('Usu√°rio √© admin.');
        return;
      }

      if (lojaResponse.error) {
        console.error('Erro ao buscar lojas:', lojaResponse.error.message);
        setError('Erro ao buscar lojas: ' + lojaResponse.error.message);
        setUserLojas([]);
        setUserRole('visitante');
        return;
      }

      const lojaData = lojaResponse.data || [];
      if (lojaData.length === 0) {
        setUserRole('visitante');
        setUserLojas([]);
        console.log('Nenhuma loja associada encontrada.');
        return;
      }

      setUserLojas(lojaData);
      console.log('Lojas carregadas:', lojaData);

      const gerente = lojaData.find(loja => loja.funcao === 'gerente');
      if (gerente) {
        const lojasGerente = lojaData.filter(loja => loja.funcao === 'gerente');
        if (lojasGerente.length > 1) {
          setError('ERRO: Usu√°rio n√£o pode ser gerente em m√∫ltiplas lojas');
          setUserRole('erro');
          console.error('M√∫ltiplas lojas gerenciadas detectadas.');
        } else {
          setUserRole('gerente');
          console.log('Usu√°rio √© gerente.');
        }
      } else {
        setUserRole('entregador');
        console.log('Usu√°rio √© entregador.');
      }
    } catch (error) {
      console.error('Erro inesperado no loadUserData:', error);
      setError('Erro inesperado: ' + error.message);
    } finally {
      setLoading(false);
      console.log('loadUserData finalizado.');
    }
  };

  // ... o restante do c√≥digo permanece igual ...

  // ============================================================================
  // 3. EFFECT: CARREGAMENTO INICIAL E ESCUTA DE AUTENTICA√á√ÉO
  // ============================================================================
  /**
   * Carrega dados iniciais e escuta mudan√ßas de autentica√ß√£o em tempo real.
   * Utiliza debounce impl√≠cito via useEffect para evitar chamadas excessivas.
   */
  useEffect(() => {
    loadUserData();

    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('Mudan√ßa de autentica√ß√£o detectada:', event);
        if (event === 'SIGNED_IN') {
          await loadUserData();
        } else if (event === 'SIGNED_OUT') {
          setUser(null);
          setUserProfile(null);
          setUserRole('visitante');
          setUserLojas([]);
          setLoading(false);
          console.log('Usu√°rio desconectado.');
        }
      }
    );

    return () => {
      if (authListener?.subscription) {
        authListener.subscription.unsubscribe();
        console.log('Listener de autentica√ß√£o desinscrevido.');
      }
    };
  }, []);

  // ============================================================================
  // 4. FUN√á√ÉO: ATUALIZAR PERFIL DO USU√ÅRIO
  // ============================================================================
  /**
   * Atualiza os dados do perfil na tabela 'usuarios' e, se aplic√°vel, em 'loja_associada'.
   * Valida dados antes de atualizar e retorna resultado.
   * @param {Object} formData - Dados a serem atualizados (nome, telefone, foto, etc.)
   * @returns {Object} Resultado com sucesso e mensagem
   */
  const updateUserProfile = async (formData) => {
    try {
      setUpdating(true);
      setError(null);
      console.log('Iniciando updateUserProfile com:', formData);

      if (!userProfile || !userProfile.uid) {
        throw new Error('Usu√°rio n√£o autenticado ou perfil inv√°lido');
      }

      if (!formData.nome_completo || !formData.telefone) {
        throw new Error('Nome completo e telefone s√£o obrigat√≥rios');
      }

      const { error: userError } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario || userProfile.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto || userProfile.foto
        })
        .eq('uid', userProfile.uid);

      if (userError) throw userError;

      if (userRole === 'entregador' && userLojas.length > 0) {
        const { error: lojaError } = await supabase
          .from('loja_associada')
          .update({
            veiculo: formData.veiculo || userLojas[0].veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : userLojas[0].carga_maxima,
            perimetro_entrega: formData.perimetro_entrega || userLojas[0].perimetro_entrega,
            nome_completo: formData.nome_completo
          })
          .eq('uid_usuario', userProfile.uid)
          .eq('id_loja', userLojas[0].id_loja);

        if (lojaError) throw lojaError;
      }

      setUserProfile(prev => ({
        ...prev,
        nome_completo: formData.nome_completo,
        nome_usuario: formData.nome_usuario || prev.nome_usuario,
        telefone: formData.telefone,
        foto: formData.foto || prev.foto
      }));

      if (userRole === 'entregador' && userLojas.length > 0) {
        setUserLojas(prev => prev.map(loja =>
          loja.id_loja === userLojas[0].id_loja ? {
            ...loja,
            veiculo: formData.veiculo || loja.veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : loja.carga_maxima,
            perimetro_entrega: formData.perimetro_entrega || loja.perimetro_entrega,
            nome_completo: formData.nome_completo
          } : loja
        ));
      }

      console.log('Perfil atualizado com sucesso.');
      return { success: true, message: 'Perfil atualizado com sucesso!' };
    } catch (error) {
      const errorMsg = 'Erro ao atualizar perfil: ' + error.message;
      setError(errorMsg);
      console.error('Erro no updateUserProfile:', error);
      return { success: false, message: errorMsg };
    } finally {
      setUpdating(false);
      console.log('updateUserProfile finalizado.');
    }
  };

  // ============================================================================
  // 5. FUN√á√ÉO: RECARREGAR DADOS DO USU√ÅRIO
  // ============================================================================
  /**
   * For√ßa a recarga dos dados do usu√°rio, reutilizando loadUserData.
   * √ötil para sincronizar ap√≥s atualiza√ß√µes externas.
   */
  const reloadUserData = async () => {
    console.log('Recarregando dados do usu√°rio...');
    await loadUserData();
  };

  // ============================================================================
  // 6. RETORNO DO HOOK
  // ============================================================================
  /**
   * Retorna todos os estados e fun√ß√µes para uso em componentes.
   * @returns {Object} Contendo user, userProfile, userRole, userLojas, etc.
   */
  return {
    user,
    userProfile,
    userRole,
    userLojas,
    loading,
    error,
    updating,
    updateUserProfile,
    reloadUserData
  };
};


// =========================================
// 1. lib\firebase.js
// =========================================

 



// =========================================
// 2. lib\supabase.js
// =========================================

 import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase URL or Anon Key. Check .env.local');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);



// =========================================
// 3. lib\wooCommerce.js
// =========================================

 



// =========================================
// 1. pages\_app.js
// =========================================

// pages/_app.js
import '../styles/globals.css';
import Layout from '../components/Layout';

// ==============================================================================
// COMPONENTE MyApp - PONTO DE ENTRADA DA APLICA√á√ÉO
// ==============================================================================
/**
 * MyApp √© o componente raiz que envolve todas as p√°ginas
 * Aqui definimos layouts globais, providers e configura√ß√µes comuns
 * 
 * @param {Object} props - Propriedades do Next.js
 * @param {React.Component} props.Component - Componente da p√°gina atual
 * @param {Object} props.pageProps - Props espec√≠ficas da p√°gina
 */
function MyApp({ Component, pageProps }) {
  
  // ============================================================================
  // 1. DECIS√ÉO DE LAYOUT POR P√ÅGINA
  // ============================================================================
  /**
   * Estrat√©gia: Cada p√°gina pode definir se quer ou n√£o o layout padr√£o
   * atrav√©s da propriedade est√°tica `noLayout`
   * 
   * P√°ginas que devem SEM layout:
   * - Login, Cadastro, Erros, Admin (porque tem layout pr√≥prio)
   */
  
  // Verificar se a p√°gina atual deve usar layout
  const shouldUseLayout = !Component.noLayout;

  // ============================================================================
  // 2. RENDERIZA√á√ÉO CONDICIONAL
  // ============================================================================
  return (
    <>
      {shouldUseLayout ? (
        // P√ÅGINAS COM LAYOUT PADR√ÉO (com sidebar e header)
        <Layout>
          <Component {...pageProps} />
        </Layout>
      ) : (
        // P√ÅGINAS SEM LAYOUT PADR√ÉO (renderizar apenas o conte√∫do)
        <Component {...pageProps} />
      )}
    </>
  );
}

export default MyApp;


// =========================================
// 2. pages\_document.js
// =========================================

 import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link rel="manifest" href="/manifest.json" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;



// =========================================
// 3. pages\admin.js
// =========================================

// pages/admin.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

// ==============================================================================
// P√ÅGINA DE ADMINISTRA√á√ÉO
// ==============================================================================
/**
 * Painel administrativo para gerenciamento do sistema
 * Acess√≠vel apenas para usu√°rios com role 'admin'
 * 
 * IMPORTANTE: Esta p√°gina N√ÉO usa o Layout padr√£o (j√° √© aplicado pelo _app.js)
 * Por isso N√ÉO devemos envolver com <Layout> aqui
 */
export default function Admin() {
  // ============================================================================
  // 1. ESTADOS E HOOKS
  // ============================================================================
  const { userRole, loading: userLoading } = useUserProfile();
  const [activeTab, setActiveTab] = useState('lojas');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  // Estados para dados das abas
  const [lojas, setLojas] = useState([]);
  const [usuariosPendentes, setUsuariosPendentes] = useState([]);
  const [associacoes, setAssociacoes] = useState([]);

  // ============================================================================
  // 2. EFFECT: CARREGAR DADOS COM BASE NA ABA ATIVA
  // ============================================================================
  useEffect(() => {
    if (activeTab === 'lojas') {
      loadLojas();
    } else if (activeTab === 'usuarios') {
      loadUsuariosPendentes();
    } else if (activeTab === 'associacoes') {
      loadAssociacoes();
    }
  }, [activeTab]);

// ============================================================================
// 3. FUN√á√ïES: CARREGAMENTO DE DADOS
// ============================================================================
/**
 * Carrega lista de lojas cadastradas
 */
const loadLojas = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('lojas')
      .select('*')
      .order('loja_nome');
    
    if (error) throw error;
    setLojas(data || []);
  } catch (err) {
    setError('Erro ao carregar lojas: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Carrega usu√°rios n√£o vinculados a lojas (pendentes)
 */
const loadUsuariosPendentes = async () => {
  try {
    setLoading(true);
    // ‚úÖ CORRE√á√ÉO: Consulta mais simples para evitar erro de UUID
    const { data: usuariosAssociados, error: errorAssociados } = await supabase
      .from('loja_associada')
      .select('uid_usuario')
      .eq('status_vinculacao', 'ativo');

    if (errorAssociados) {
      throw new Error('Erro ao buscar usu√°rios associados: ' + errorAssociados.message);
    }

    // Extrair apenas os UIDs
    const uidsAssociados = usuariosAssociados?.map(ua => ua.uid_usuario) || [];

    // Buscar usu√°rios N√ÉO presentes na lista de associados
    let query = supabase
      .from('usuarios')
      .select('*');

    // Aplicar filtro apenas se houver usu√°rios associados
    if (uidsAssociados.length > 0) {
      query = query.not('uid', 'in', `(${uidsAssociados.map(uid => `"${uid}"`).join(',')})`);
    }

    const { data, error } = await query;

    if (error) {
      throw new Error('Erro ao buscar usu√°rios pendentes: ' + error.message);
    }

    setUsuariosPendentes(data || []);

  } catch (err) {
    setError('Erro ao carregar usu√°rios: ' + err.message);
    console.error('Erro detalhado:', err);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// ‚úÖ CORRE√á√ÉO: FUN√á√ÉO loadAssociacoes ADICIONADA
// ============================================================================
/**
 * Carrega associa√ß√µes ativas entre usu√°rios e lojas
 */
const loadAssociacoes = async () => {
  try {
    setLoading(true);
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        *,
        usuarios:uid_usuario(nome_completo, email),
        lojas:id_loja(loja_nome)
      `)
      .order('ultimo_status_vinculacao', { ascending: false });
    
    if (error) throw error;
    setAssociacoes(data || []);
  } catch (err) {
    setError('Erro ao carregar associa√ß√µes: ' + err.message);
  } finally {
    setLoading(false);
  }
};

// ============================================================================
// 4. FUN√á√ïES: A√á√ïES DO ADMIN
// ============================================================================
/**
 * Cria uma nova loja no sistema
 */
const handleCriarLoja = async (dadosLoja) => {
  try {
    setLoading(true);
    setError(null);
    
    const { error } = await supabase
      .from('lojas')
      .insert([{
        id_loja: dadosLoja.id_loja,
        loja_nome: dadosLoja.loja_nome,
        loja_endereco: dadosLoja.loja_endereco,
        loja_telefone: dadosLoja.loja_telefone,
        loja_perimetro_entrega: dadosLoja.loja_perimetro_entrega,
        cnpj: dadosLoja.cnpj,
        ativa: true
      }]);
    
    if (error) throw error;
    
    setSuccess('Loja criada com sucesso!');
    await loadLojas();
  } catch (err) {
    setError('Erro ao criar loja: ' + err.message);
  } finally {
    setLoading(false);
  }
};

/**
 * Associa um usu√°rio como gerente de uma loja
 */
const handleAssociarGerente = async (usuarioId, lojaId) => {
  try {
    setLoading(true);
    setError(null);
    
    // Buscar dados do usu√°rio e loja em paralelo
    const [{ data: usuario }, { data: loja }] = await Promise.all([
      supabase.from('usuarios').select('*').eq('uid', usuarioId).single(),
      supabase.from('lojas').select('*').eq('id_loja', lojaId).single()
    ]);
    
    if (!usuario || !loja) throw new Error('Usu√°rio ou loja n√£o encontrados');
    
    // Criar associa√ß√£o
    const { error } = await supabase
      .from('loja_associada')
      .insert([{
        uid_usuario: usuarioId,
        nome_completo: usuario.nome_completo,
        id_loja: lojaId,
        loja_nome: loja.loja_nome,
        loja_endereco: loja.loja_endereco,
        loja_telefone: loja.loja_telefone,
        funcao: 'gerente',
        status_vinculacao: 'ativo',
        ultimo_status_vinculacao: new Date().toISOString()
      }]);
    
    if (error) throw error;
    
    setSuccess('Gerente associado com sucesso!');
    await loadAssociacoes(); // ‚úÖ Agora esta fun√ß√£o existe
    await loadUsuariosPendentes();
  } catch (err) {
    setError('Erro ao associar gerente: ' + err.message);
  } finally {
    setLoading(false);
  }
};
  // ============================================================================
  // 5. VERIFICA√á√ïES DE ACESSO E LOADING
  // ============================================================================
  if (userLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // ============================================================================
  // 6. RENDERIZA√á√ÉO PRINCIPAL
  // ============================================================================
  return (
    <RouteGuard requiredRole="admin">
      {/* ‚úÖ REMOVIDO: <Layout> wrapper (j√° √© aplicado pelo _app.js) */}
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Painel Administrativo</h1>
        
        {/* Mensagens de status */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            {success}
          </div>
        )}

        {/* Navega√ß√£o por abas */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="flex space-x-8">
            {['lojas', 'usuarios', 'associacoes'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                {tab === 'lojas' && 'Lojas'}
                {tab === 'usuarios' && 'Usu√°rios Pendentes'}
                {tab === 'associacoes' && 'Associa√ß√µes'}
              </button>
            ))}
          </nav>
        </div>

        {/* Conte√∫do das abas */}
        <div className="mt-6">
          {/* Aba: Lojas */}
          {activeTab === 'lojas' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Gerenciar Lojas</h2>
              
              {/* Formul√°rio de cria√ß√£o */}
              <div className="bg-white p-4 rounded-lg shadow-md mb-4">
                <h3 className="text-lg font-medium mb-3">Criar Nova Loja</h3>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target);
                  handleCriarLoja({
                    id_loja: formData.get('id_loja'),
                    loja_nome: formData.get('loja_nome'),
                    loja_endereco: formData.get('loja_endereco'),
                    loja_telefone: formData.get('loja_telefone'),
                    loja_perimetro_entrega: formData.get('loja_perimetro_entrega'),
                    cnpj: formData.get('cnpj')
                  });
                }}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                    <input name="id_loja" placeholder="ID da Loja (ex: L1)" required />
                    <input name="loja_nome" placeholder="Nome da Loja" required />
                    <input name="loja_endereco" placeholder="Endere√ßo" />
                    <input name="loja_telefone" placeholder="Telefone" />
                    <input name="loja_perimetro_entrega" placeholder="Per√≠metro de Entrega" />
                    <input name="cnpj" placeholder="CNPJ" />
                  </div>
                  <button type="submit" disabled={loading}>
                    {loading ? 'Criando...' : 'Criar Loja'}
                  </button>
                </form>
              </div>

              {/* Listagem de lojas */}
              <div>
                <h3 className="text-lg font-medium mb-3">Lojas Cadastradas</h3>
                {loading ? (
                  <div className="text-center py-4">Carregando...</div>
                ) : (
                  <div className="grid gap-4">
                    {lojas.map(loja => (
                      <div key={loja.id} className="bg-white p-4 rounded-lg shadow-md">
                        <h4 className="font-semibold">{loja.loja_nome} ({loja.id_loja})</h4>
                        <p className="text-gray-600">{loja.loja_endereco}</p>
                        <p className="text-gray-600">{loja.loja_telefone}</p>
                        <p className="text-gray-600">Per√≠metro: {loja.loja_perimetro_entrega}</p>
                        <span className={`inline-block px-2 py-1 rounded text-xs ${
                          loja.ativa ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                        }`}>
                          {loja.ativa ? 'Ativa' : 'Inativa'}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Aba: Usu√°rios Pendentes */}
          {activeTab === 'usuarios' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Usu√°rios Pendentes</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {usuariosPendentes.map(usuario => (
                    <div key={usuario.uid} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{usuario.nome_completo}</h4>
                      <p className="text-gray-600">{usuario.email}</p>
                      <p className="text-gray-600">{usuario.telefone}</p>
                      <button
                        onClick={() => {
                          const lojaId = prompt('Digite o ID da loja para associar (ex: L1):');
                          if (lojaId) handleAssociarGerente(usuario.uid, lojaId);
                        }}
                        className="bg-green-500 text-white px-3 py-1 rounded text-sm mt-2"
                      >
                        Associar como Gerente
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Aba: Associa√ß√µes */}
          {activeTab === 'associacoes' && (
            <div>
              <h2 className="text-xl font-semibold mb-4">Associa√ß√µes Ativas</h2>
              {loading ? (
                <div className="text-center py-4">Carregando...</div>
              ) : (
                <div className="grid gap-4">
                  {associacoes.map(associacao => (
                    <div key={associacao.id} className="bg-white p-4 rounded-lg shadow-md">
                      <h4 className="font-semibold">{associacao.nome_completo}</h4>
                      <p className="text-gray-600">Fun√ß√£o: {associacao.funcao}</p>
                      <p className="text-gray-600">Loja: {associacao.loja_nome}</p>
                      <p className="text-gray-600">Status: {associacao.status_vinculacao}</p>
                      <p className="text-gray-600 text-sm">
                        √öltima atualiza√ß√£o: {new Date(associacao.ultimo_status_vinculacao).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}

// ==============================================================================
// MARCA√á√ÉO: ESTA P√ÅGINA N√ÉO USA LAYOUT PADR√ÉO (j√° √© aplicado pelo _app.js)
// ==============================================================================



// =========================================
// 4. pages\atualizar-senha.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import Link from 'next/link';

export default function AtualizarSenha() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [session, setSession] = useState(null);
  const router = useRouter();

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
    });

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    return () => subscription.unsubscribe();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    if (password !== confirmPassword) {
      setError('As senhas n√£o coincidem');
      setLoading(false);
      return;
    }

    if (password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) throw error;

      setSuccess('Senha atualizada com sucesso!');
      
      setTimeout(() => {
        router.push('/login');
      }, 2000);

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  if (!session) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 flex items-center justify-center">
        <div className="bg-white p-8 rounded-2xl shadow-2xl text-center">
          <p className="text-red-600 mb-4">Link inv√°lido ou expirado</p>
          <Link href="/recuperar-senha" className="text-purple-600 hover:text-purple-800">
            Solicitar novo link
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">üîí</span>
          </div>
          <h2 className="text-3xl font-bold text-white">Nova Senha</h2>
          <p className="text-purple-200 mt-2">Digite sua nova senha</p>
        </div>

        {/* Card de Atualiza√ß√£o */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Atualizar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Campo Nova Senha com bot√£o mostrar/ocultar */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                Nova Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="M√≠nimo 6 caracteres"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            {/* Campo Confirmar Senha com bot√£o mostrar/ocultar */}
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                Confirmar Nova Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent pr-12"
                  required
                  placeholder="Digite novamente a senha"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  ) : (
                    <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Atualizando...' : 'Atualizar Senha'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

// N√£o usar layout para esta p√°gina
AtualizarSenha.noLayout = true;


// =========================================
// 5. pages\cadastro.js
// =========================================

// pages/cadastro.js
import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - P√ÅGINA DE CADASTRO COM NOME E TELEFONE
// ==============================================================================
/**
 * Inclui campos para nome completo e telefone, essenciais para credenciamento de motoristas.
 * Exibe mensagem sobre confirma√ß√£o de email ap√≥s cadastro.
 * Redireciona para /login ap√≥s sucesso para tentativa de login.
 * Aprendizado: Integre mensagens de suporte ao fluxo de autentica√ß√£o do Supabase.
 */
export default function Cadastro() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE (BLOCO DE ESTADOS)
  // ============================================================================
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    nome_completo: '',
    telefone: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. FUN√á√ÉO: ATUALIZA√á√ÉO DOS CAMPOS (BLOCO DE FUN√á√ÉO)
  // ============================================================================
  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  // ============================================================================
  // 3. FUN√á√ÉO: SUBMISS√ÉO DO CADASTRO (BLOCO DE FUN√á√ÉO ASS√çNCRONA)
  // ============================================================================
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    // 3.1. VALIDA√á√ïES
    if (formData.password !== formData.confirmPassword) {
      setError('As senhas n√£o coincidem');
      setLoading(false);
      return;
    }
    if (formData.password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      setLoading(false);
      return;
    }
    if (!formData.nome_completo.trim()) {
      setError('O nome completo √© obrigat√≥rio');
      setLoading(false);
      return;
    }
    if (!formData.telefone.trim()) {
      setError('O telefone √© obrigat√≥rio');
      setLoading(false);
      return;
    }

    try {
      // 3.2. CRIA√á√ÉO NO AUTH
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
        options: {
          data: {
            nome_completo: formData.nome_completo,
            telefone: formData.telefone
          }
        }
      });

      if (authError) throw authError;

      // 3.3. INSER√á√ÉO NA TABELA USU√ÅRIOS
      const { error: userError } = await supabase
        .from('usuarios')
        .insert({
          uid: authData.user.id,
          email: formData.email,
          nome_usuario: formData.email,
          nome_completo: formData.nome_completo,
          telefone: formData.telefone,
          foto: '',
          is_admin: false
        });

      if (userError) throw userError;

      // 3.4. SUCESSO E REDIRECIONAMENTO
      setSuccess('Cadastro realizado! Verifique seu email e clique no link de confirma√ß√£o para fazer login.');
      setTimeout(() => {
        router.push('/login');
      }, 2000);
    } catch (error) {
      console.error('Erro detalhado:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 4. RENDERIZA√á√ÉO DO COMPONENTE (BLOCO DE JSX)
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 4.1. SE√á√ÉO VISUAL: LOGO E T√çTULO */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">üöö</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Criar Nova Conta</p>
        </div>

        {/* 4.2. CARD PRINCIPAL: CONTAINER DE CADASTRO */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Cadastro
          </h3>

          {/* 4.2.1. EXIBI√á√ÉO DE ERRO OU SUCESSO */}
          {error && <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">{error}</div>}
          {success && <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">{success}</div>}

          {/* 4.2.2. FORMUL√ÅRIO COM NOME E TELEFONE */}
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="nome_completo" className="block text-sm font-medium text-gray-700">
                Nome Completo
              </label>
              <input
                id="nome_completo"
                name="nome_completo"
                type="text"
                value={formData.nome_completo}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="Seu nome completo"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="telefone" className="block text-sm font-medium text-gray-700">
                Telefone
              </label>
              <input
                id="telefone"
                name="telefone"
                type="tel"
                value={formData.telefone}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="(11) 99999-9999"
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
                disabled={loading}
              />
            </div>

            <div className="relative">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  value={formData.password}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="M√≠nimo 6 caracteres"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={loading}
                >
                  {showPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <div className="relative">
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirmar Senha
              </label>
              <div className="relative">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  required
                  placeholder="Digite novamente sua senha"
                  disabled={loading}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  disabled={loading}
                >
                  {showConfirmPassword ? (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  ) : (
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                    </svg>
                  )}
                </button>
              </div>
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Criando conta...' : 'Criar Conta'}
            </button>
          </form>

          {/* 4.2.3. LINK PARA LOGIN */}
          <div className="mt-6 text-center">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              J√° tem uma conta? Fa√ßa login
            </Link>
          </div>
        </div>

        {/* 4.3. SE√á√ÉO DE RODAP√â */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            ¬© 2025 EntregasWoo - Sistema de Gest√£o
          </p>
        </div>
      </div>
    </div>
  );
}

// N√£o usar layout para esta p√°gina
Cadastro.noLayout = true;


// =========================================
// 6. pages\gestao-entregadores.js
// =========================================

// pages/gestao-entregadores.js (VERS√ÉO MELHORADA)
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';

// ==============================================================================
// P√ÅGINA: GEST√ÉO DE ENTREGADORES
// ==============================================================================
export default function GestaoEntregadores() {
  const [entregadores, setEntregadores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [buscaEmail, setBuscaEmail] = useState('');
  const [usuarioEncontrado, setUsuarioEncontrado] = useState(null);
  const [buscando, setBuscando] = useState(false);

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 1. VERIFICA√á√ÉO DE PERMISS√ïES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 2. CARREGAR ENTREGADORES DA LOJA (COM MAIS CAMPOS)
  // ============================================================================
  useEffect(() => {
    if (userRole === 'gerente' || userRole === 'admin') {
      carregarEntregadores();
    }
  }, [userRole]);

  const carregarEntregadores = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('loja_associada')
        .select('*');

      // Gerente s√≥ v√™ pessoas da sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      // Filtrar apenas entregadores e gerentes
      const pessoasLoja = data.filter(pessoa => 
        pessoa.funcao === 'entregador' || pessoa.funcao === 'gerente'
      );
      
      setEntregadores(pessoasLoja || []);
    } catch (error) {
      console.error('Erro ao carregar pessoas da loja:', error);
      alert('Erro ao carregar lista de pessoas');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 3. BUSCAR USU√ÅRIO POR EMAIL NO SISTEMA (COM MAIS DETALHES)
  // ============================================================================
  const buscarUsuarioPorEmail = async () => {
    if (!buscaEmail.trim()) {
      alert('Por favor, digite um email para buscar');
      return;
    }
    
    try {
      setBuscando(true);
      
      // Buscar usu√°rio na tabela usuarios pelo email
      const { data: usuario, error: usuarioError } = await supabase
        .from('usuarios')
        .select('uid, email, nome_completo, telefone, foto')
        .eq('email', buscaEmail.trim())
        .single();

      if (usuarioError) {
        if (usuarioError.code === 'PGRST116') {
          setUsuarioEncontrado(null);
          alert('Usu√°rio n√£o encontrado no sistema');
        } else {
          throw usuarioError;
        }
        return;
      }

      // Buscar TODOS os detalhes das lojas associadas a este usu√°rio
      const { data: lojasAssociadas, error: lojasError } = await supabase
        .from('loja_associada')
        .select('*')
        .eq('uid_usuario', usuario.uid);

      if (lojasError) throw lojasError;

      // Combinar dados do usu√°rio com suas lojas
      setUsuarioEncontrado({
        ...usuario,
        lojasAssociadas: lojasAssociadas || []
      });

    } catch (error) {
      console.error('Erro ao buscar usu√°rio:', error);
      alert('Erro ao buscar usu√°rio. Verifique o console.');
      setUsuarioEncontrado(null);
    } finally {
      setBuscando(false);
    }
  };

  // ============================================================================
  // 4. VINCULAR USU√ÅRIO COMO ENTREGADOR
  // ============================================================================
  const vincularComoEntregador = async (usuario) => {
    if (!confirm(`Vincular ${usuario.nome_completo} como entregador nesta loja?`)) return;
    
    try {
      if (userRole === 'gerente' && (!userLojas || userLojas.length === 0)) {
        alert('Erro: Gerente n√£o est√° vinculado a nenhuma loja');
        return;
      }

      const lojaId = userRole === 'gerente' ? userLojas[0].id_loja : prompt('Digite o ID da loja (admin):');
      const lojaNome = userRole === 'gerente' ? userLojas[0].loja_nome : prompt('Digite o nome da loja (admin):');

      if (!lojaId || !lojaNome) return;

      // Verificar se usu√°rio j√° est√° vinculado a esta loja
      const { data: vinculoExistente } = await supabase
        .from('loja_associada')
        .select('id')
        .eq('uid_usuario', usuario.uid)
        .eq('id_loja', lojaId)
        .single();

      if (vinculoExistente) {
        alert('Este usu√°rio j√° est√° vinculado a esta loja');
        return;
      }

      // Vincular usu√°rio como entregador
      const { error } = await supabase
        .from('loja_associada')
        .insert({
          uid_usuario: usuario.uid,
          nome_completo: usuario.nome_completo,
          email_usuario: usuario.email, // ‚úÖ NOVO CAMPO
          funcao: 'entregador',
          id_loja: lojaId,
          loja_nome: lojaNome,
          status_vinculacao: 'ativo',
          veiculo: 'N√£o informado',
          carga_maxima: 0,
          perimetro_entrega: 'N√£o definido',
          ultimo_status_vinculacao: new Date().toISOString()
        });

      if (error) throw error;

      alert('‚úÖ Entregador vinculado com sucesso!');
      setBuscaEmail('');
      setUsuarioEncontrado(null);
      carregarEntregadores();
    } catch (error) {
      console.error('Erro ao vincular entregador:', error);
      alert('‚ùå Erro ao vincular entregador');
    }
  };

  // ============================================================================
  // 5. FUN√á√ÉO: FORMATAR VALOR NULO
  // ============================================================================
  const formatarValor = (valor) => {
    return valor || 'N√£o informado';
  };

  // ============================================================================
  // 6. RENDERIZA√á√ÉO DA P√ÅGINA
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  if (userRole !== 'admin' && userRole !== 'gerente') {
    return <div className="min-h-screen flex items-center justify-center">Acesso n√£o autorizado</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* T√çTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">üë• Gest√£o de Entregadores</h1>

      {/* BUSCA POR EMAIL */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Buscar Usu√°rio no Sistema</h2>
        <div className="flex gap-2 mb-4">
          <input
            type="email"
            placeholder="Digite o email do usu√°rio"
            value={buscaEmail}
            onChange={(e) => setBuscaEmail(e.target.value)}
            className="flex-1 p-2 border border-gray-300 rounded"
            onKeyPress={(e) => e.key === 'Enter' && buscarUsuarioPorEmail()}
          />
          <button
            onClick={buscarUsuarioPorEmail}
            disabled={buscando}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
          >
            {buscando ? 'Buscando...' : 'Buscar'}
          </button>
        </div>

        {/* RESULTADO DA BUSCA - COM MAIS DETALHES */}
        {usuarioEncontrado && (
          <div className="mt-4 p-4 border border-green-200 bg-green-50 rounded">
            <h3 className="font-semibold text-green-800 mb-3">üë§ Usu√°rio encontrado:</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
              <div>
                <p><strong>Nome:</strong> {usuarioEncontrado.nome_completo}</p>
                <p><strong>Email:</strong> {usuarioEncontrado.email}</p>
                {usuarioEncontrado.telefone && (
                  <p><strong>Telefone:</strong> {usuarioEncontrado.telefone}</p>
                )}
              </div>
              
              {usuarioEncontrado.foto && (
                <div className="flex justify-center">
                  <img 
                    src={usuarioEncontrado.foto} 
                    alt="Foto do usu√°rio"
                    className="w-16 h-16 rounded-full"
                  />
                </div>
              )}
            </div>

            <div className="mt-3">
              <strong>üè™ Lojas Associadas:</strong>
              {usuarioEncontrado.lojasAssociadas.length > 0 ? (
                <div className="ml-4 mt-2 space-y-2">
                  {usuarioEncontrado.lojasAssociadas.map((loja, index) => (
                    <div key={index} className="p-2 bg-white rounded border">
                      <p><strong>Loja:</strong> {loja.loja_nome} ({loja.id_loja})</p>
                      <p><strong>Fun√ß√£o:</strong> 
                        <span className={`ml-1 ${
                          loja.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                        }`}>
                          {loja.funcao}
                        </span>
                      </p>
                      <p><strong>Status:</strong> 
                        <span className={`ml-1 ${
                          loja.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {loja.status_vinculacao}
                        </span>
                      </p>
                      {loja.veiculo && <p><strong>üöó Ve√≠culo:</strong> {formatarValor(loja.veiculo)}</p>}
                      {loja.carga_maxima > 0 && <p><strong>üì¶ Carga M√°xima:</strong> {loja.carga_maxima} kg</p>}
                      {loja.perimetro_entrega && <p><strong>üìç Per√≠metro:</strong> {formatarValor(loja.perimetro_entrega)}</p>}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-600 ml-4">Nenhuma loja associada</p>
              )}
            </div>

            <button
              onClick={() => vincularComoEntregador(usuarioEncontrado)}
              className="mt-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
            >
              ‚ûï Vincular como Entregador
            </button>
          </div>
        )}
      </div>

      {/* LISTA DE PESSOAS DA LOJA - COM MAIS DETALHES */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4">
          {userRole === 'gerente' ? 'üë• Pessoas da Minha Loja' : 'üë• Pessoas do Sistema'}
        </h2>
        
        {loading ? (
          <p className="text-gray-500">Carregando...</p>
        ) : entregadores.length === 0 ? (
          <p className="text-gray-500">Nenhuma pessoa encontrada</p>
        ) : (
          <div className="grid gap-4">
            {entregadores.map((pessoa) => (
              <div key={pessoa.id} className="border p-4 rounded-lg bg-gray-50">
                <h3 className="font-semibold text-lg text-purple-800">
                  {pessoa.funcao === 'gerente' ? 'üëë ' : 'üöö '}
                  {pessoa.nome_completo}
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-2">
                  <div>
                    <p><strong>üìß Email:</strong> {pessoa.email_usuario}</p>
                    <p><strong>üéØ Fun√ß√£o:</strong> 
                      <span className={`ml-1 ${
                        pessoa.funcao === 'gerente' ? 'text-purple-600 font-bold' : 'text-blue-600'
                      }`}>
                        {pessoa.funcao}
                      </span>
                    </p>
                    <p><strong>üìä Status:</strong> 
                      <span className={`ml-1 ${
                        pessoa.status_vinculacao === 'ativo' ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {pessoa.status_vinculacao}
                      </span>
                    </p>
                  </div>
                  
                  <div>
                    <p><strong>üè™ Loja:</strong> {pessoa.loja_nome} ({pessoa.id_loja})</p>
                    <p><strong>üöó Ve√≠culo:</strong> {formatarValor(pessoa.veiculo)}</p>
                    {pessoa.carga_maxima > 0 && (
                      <p><strong>üì¶ Carga M√°x:</strong> {pessoa.carga_maxima} kg</p>
                    )}
                    {pessoa.perimetro_entrega && (
                      <p><strong>üìç Per√≠metro:</strong> {formatarValor(pessoa.perimetro_entrega)}</p>
                    )}
                  </div>
                </div>
                
                {pessoa.data_desligamento && (
                  <p className="text-red-600 text-sm mt-2">
                    <strong>üóìÔ∏è Data desligamento:</strong> {new Date(pessoa.data_desligamento).toLocaleDateString('pt-BR')}
                  </p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


// =========================================
// 7. pages\index.js
// =========================================

// Importa√ß√£o de depend√™ncias necess√°rias do Next.js e React
import Head from 'next/head';
import Link from 'next/link';
import { useEffect } from 'react';

// Componente principal da p√°gina inicial
export default function HomePage() {
  // Hook useEffect para configurar a navega√ß√£o suave
  useEffect(() => {
    // Sele√ß√£o de todos os links internos que come√ßam com '#'
    const anchors = document.querySelectorAll('a[href^="#"]');

    // Fun√ß√£o para lidar com o clique em links internos
    const handleAnchorClick = (e) => {
      e.preventDefault();
      const targetId = e.currentTarget.getAttribute('href');

      // Verifica se o link n√£o √© apenas '#'
      if (targetId === '#') return;

      // Encontra o elemento alvo pelo ID
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        // Realiza a rolagem suave com offset para compensar o cabe√ßalho
        window.scrollTo({
          top: targetElement.offsetTop - 80, // Ajuste de 80px para o cabe√ßalho
          behavior: 'smooth'
        });
      }
    };

    // Adiciona event listeners para todos os links internos
    anchors.forEach(anchor => {
      anchor.addEventListener('click', handleAnchorClick);
    });

    // Cleanup: remove os event listeners quando o componente √© desmontado
    return () => {
      anchors.forEach(anchor => {
        anchor.removeEventListener('click', handleAnchorClick);
      });
    };
  }, []);

  return (
    <>
      {/* Configura√ß√£o do cabe√ßalho HTML com t√≠tulo e importa√ß√£o de Font Awesome */}
      <Head>
        <title>VendasWoo + EntregasWoo - Sistema Completo para E-commerce e Entregas</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
      </Head>

      {/* Cabe√ßalho da p√°gina com apenas o t√≠tulo */}
      <header>
        <div className="container">
          <div className="header-content">
            <div className="logo">
              <h1>VendasWoo <span>+ EntregasWoo</span></h1>
            </div>
          </div>
        </div>
      </header>

      {/* Se√ß√£o Hero com chamada principal */}
      <section className="hero">
        <div className="container">
          <h2>Sistema Completo para E-commerce e Entregas</h2>
          <p>Conectamos lojas a entregadores locais para simplificar e agilizar as entregas na sua regi√£o.</p>
          <div className="hero-buttons">
            <Link href="#para-lojas" className="btn">Sou Lojista</Link>
            <Link href="#para-entregadores" className="btn btn-accent">Sou Entregador</Link>
            <a href="https://wa.me/552132727548" className="btn btn-outline" target="_blank" rel="noopener noreferrer">Fale no WhatsApp</a>
          </div>
        </div>
      </section>

      {/* Se√ß√£o Como Funciona com passos para entregadores e lojas */}
      <section className="how-it-works" id="como-funciona">
        <div className="container">
          <div className="section-title">
            <h2>Como Funciona</h2>
            <p>Dois sistemas integrados para atender lojas e entregadores</p>
          </div>
          
          <div className="dual-steps">
            <div className="steps-container">
              <h3 className="steps-title">Para Entregadores</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Cadastro Simplificado</h4>
                  <p>Fa√ßa seu cadastro como motorista aut√¥nomo MEI com documenta√ß√£o em ordem.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Defina sua √Årea de Atua√ß√£o</h4>
                  <p>Informe seu ve√≠culo, capacidade de carga e o per√≠metro onde quer trabalhar.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Conex√£o com Lojas</h4>
                  <p>Conectamos voc√™ √†s empresas que precisam de entregas na sua regi√£o.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Combine Pre√ßos e √Årea</h4>
                  <p>Negocie diretamente com as lojas os valores e detalhes do servi√ßo.</p>
                </div>
              </div>
            </div>
            
            <div className="steps-container">
              <h3 className="steps-title">Para Lojas</h3>
              <div className="step">
                <div className="step-number">1</div>
                <div className="step-content">
                  <h4>Plataforma Completa</h4>
                  <p>Tenha seu e-commerce com cat√°logo de produtos, atualiza√ß√£o de pre√ßos f√°cil e m√∫ltiplas formas de pagamento.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">2</div>
                <div className="step-content">
                  <h4>Integra√ß√£o Total</h4>
                  <p>Receba pedidos pelo app, computador e WhatsApp integrados em um √∫nico sistema.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">3</div>
                <div className="step-content">
                  <h4>Gest√£o Completa</h4>
                  <p>Controle de estoque, relat√≥rios, emiss√£o de recibos e muito mais.</p>
                </div>
              </div>
              <div className="step">
                <div className="step-number">4</div>
                <div className="step-content">
                  <h4>Entregas Terceirizadas</h4>
                  <p>Use o EntregasWoo para conectar-se a entregadores de bairro e terceirizar suas entregas.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Se√ß√£o Para Lojas com benef√≠cios */}
      <section id="para-lojas" className="benefits">
        <div className="container">
          <div className="section-title">
            <h2>Para Lojas e Empresas</h2>
            <p>Sistema completo para vendas online e gest√£o de entregas</p>
          </div>
          <ul className="benefits-list">
            <li>Plataforma online para apresentar seus produtos de forma profissional</li>
            <li>Atualiza√ß√£o de pre√ßos f√°cil e intuitiva</li>
            <li>M√∫ltiplas formas de pagamento integradas (PIX, cart√£o, etc)</li>
            <li>Recebimento de pedidos por app, computador e WhatsApp</li>
            <li>Controle de estoque em tempo real</li>
            <li>Relat√≥rios detalhados de vendas e desempenho</li>
            <li>Emiss√£o de recibos e comprovantes</li>
            <li>App EntregasWoo para terceirizar entregas para motoristas de bairro</li>
            <li>Gest√£o integrada de pedidos e entregas em um √∫nico sistema</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de saber mais sobre o sistema para lojas" className="btn">Quero saber mais</a>
          </div>
        </div>
      </section>

      {/* Se√ß√£o Para Entregadores com benef√≠cios */}
      <section id="para-entregadores" className="benefits" style={{backgroundColor: 'var(--light-gray)'}}>
        <div className="container">
          <div className="section-title">
            <h2>Para Entregadores</h2>
            <p>Conecte-se com lojas da sua regi√£o e aumente sua renda</p>
          </div>
          <ul className="benefits-list">
            <li>Cadastro gratuito para motoristas MEI com documenta√ß√£o regular</li>
            <li>Defina o tipo de ve√≠culo, capacidade de carga e √°rea de atua√ß√£o</li>
            <li>Escolha o per√≠metro onde quer trabalhar (bairros, regi√µes)</li>
            <li>Conex√£o direta com empresas que precisam de entregas na sua √°rea</li>
            <li>Negocia√ß√£o direta de pre√ßos e condi√ß√µes de servi√ßo</li>
            <li>Flexibilidade de hor√°rios - trabalhe quando quiser</li>
            <li>App simples para gerenciar corridas e ganhos</li>
            <li>Pagamentos r√°pidos e transparentes</li>
            <li>Construa sua reputa√ß√£o com avalia√ß√µes das lojas</li>
          </ul>
          <div style={{textAlign: 'center', marginTop: '30px'}}>
            <a href="https://wa.me/552132727548?text=Gostaria de me cadastrar como entregador" className="btn btn-accent">Quero me cadastrar</a>
          </div>
        </div>
      </section>

      {/* Se√ß√£o de Chamada para A√ß√£o (CTA) */}
      <section className="cta">
        <div className="container">
          <h2>Pronto para transformar seu neg√≥cio ou aumentar sua renda?</h2>
          <p>Entre em contato e fa√ßa um teste gr√°tis dos nossos sistemas</p>
          <a href="https://wa.me/552132727548" className="btn" target="_blank" rel="noopener noreferrer">Fale conosco no WhatsApp</a>
        </div>
      </section>

      {/* Rodap√© com links r√°pidos e informa√ß√µes de contato */}
      <footer id="contato">
        <div className="container">
          <div className="footer-content">
            <div className="footer-column">
              <h3>VendasWoo + EntregasWoo</h3>
              <p>Sistema integrado de e-commerce e gest√£o de entregas</p>
            </div>
            <div className="footer-column">
              <h3>Links R√°pidos</h3>
              <ul>
                <li><Link href="#como-funciona">Como Funciona</Link></li>
                <li><Link href="#para-lojas">Para Lojas</Link></li>
                <li><Link href="#para-entregadores">Para Entregadores</Link></li>
                <li><a href="https://pedidossimples.com.br/vendaswoo/" target="_blank" rel="noopener noreferrer">VendasWoo</a></li>
              </ul>
            </div>
            <div className="footer-column">
              <h3>Contato</h3>
              <ul>
                <li>Email: comercial@abistec.com.br</li>
                <li>WhatsApp: (21) 3272-7548</li>
                <li>Site: <a href="https://pedidossimples.com.br">pedidossimples.com.br</a></li>
              </ul>
            </div>
          </div>
          <div className="copyright">
            <p>&copy; 2023 VendasWoo + EntregasWoo - Abistec Servi√ßos Tecnol√≥gicos Ltda</p>
          </div>
        </div>
      </footer>

      {/* Estilos globais usando styled-jsx */}
      <style jsx global>{`
        :root {
          --primary: #3b7b2b;
          --secondary: #5c3b27;
          --accent: #f39c12;
          --light: #fdfaf6;
          --dark: #333;
          --gray: #777;
          --light-gray: #f5f5f5;
        }
        
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
          background-color: var(--light);
          color: var(--dark);
          line-height: 1.6;
        }
        
        .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0 20px;
        }
        
        /* Estilos do Cabe√ßalho */
        header {
          background-color: white;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          /* Removido o comportamento sticky para fluir com a rolagem */
        }
        
        .header-content {
          display: flex;
          justify-content: center;
          align-items: center;
          padding: 15px 0;
        }
        
        .logo {
          display: flex;
          align-items: center;
        }
        
        .logo h1 {
          color: var(--primary);
          font-size: 1.8rem;
          font-weight: bold;
        }
        
        .logo span {
          color: var(--secondary);
        }
        
        nav ul {
          display: flex;
          list-style: none;
        }
        
        nav li {
          margin-left: 25px;
        }
        
        nav a {
          text-decoration: none;
          color: var(--dark);
          font-weight: 500;
          transition: color 0.3s;
        }
        
        nav a:hover {
          color: var(--primary);
        }
        
        .btn {
          display: inline-block;
          padding: 12px 25px;
          background-color: var(--primary);
          color: white;
          border-radius: 5px;
          text-decoration: none;
          font-weight: 600;
          transition: all 0.3s;
          border: none;
          cursor: pointer;
        }
        
        .btn:hover {
          background-color: #2c5e20;
          transform: translateY(-2px);
        }
        
        .btn-outline {
          background-color: transparent;
          border: 2px solid var(--primary);
          color: var(--primary);
        }
        
        .btn-outline:hover {
          background-color: var(--primary);
          color: white;
        }
        
        .btn-accent {
          background-color: var(--accent);
        }
        
        .btn-accent:hover {
          background-color: #e67e22;
        }
        
        /* Estilos da Se√ß√£o Hero */
        .hero {
          padding: 80px 0;
          background: linear-gradient(135deg, rgba(59,123,43,0.1) 0%, rgba(92,59,39,0.1) 100%);
          text-align: center;
        }
        
        .hero h2 {
          font-size: 2.5rem;
          margin-bottom: 20px;
          color: var(--secondary);
        }
        
        .hero p {
          font-size: 1.2rem;
          max-width: 800px;
          margin: 0 auto 30px;
          color: var(--gray);
        }
        
        .hero-buttons {
          display: flex;
          justify-content: center;
          gap: 15px;
          margin-top: 30px;
          flex-wrap: wrap;
        }
        
        /* Estilos da Se√ß√£o Como Funciona */
        .how-it-works {
          padding: 80px 0;
          background-color: var(--light-gray);
        }
        
        .section-title {
          text-align: center;
          margin-bottom: 50px;
        }
        
        .section-title h2 {
          font-size: 2rem;
          color: var(--secondary);
          margin-bottom: 15px;
        }
        
        .section-title p {
          color: var(--gray);
          max-width: 700px;
          margin: 0 auto;
        }
        
        .dual-steps {
          display: flex;
          justify-content: space-between;
          flex-wrap: wrap;
          gap: 40px;
        }
        
        .steps-container {
          flex: 1;
          min-width: 300px;
          background: white;
          border-radius: 10px;
          padding: 30px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        .steps-title {
          text-align: center;
          margin-bottom: 30px;
          color: var(--primary);
          font-size: 1.5rem;
        }
        
        .step {
          display: flex;
          margin-bottom: 25px;
          align-items: flex-start;
        }
        
        .step-number {
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background-color: var(--primary);
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          margin-right: 15px;
          flex-shrink: 0;
        }
        
        .step-content {
          flex: 1;
        }
        
        /* Estilos da Se√ß√£o Benef√≠cios */
        .benefits {
          padding: 80px 0;
          background-color: white;
        }
        
        .benefits-list {
          list-style: none;
          max-width: 800px;
          margin: 0 auto;
        }
        
        .benefits-list li {
          padding: 15px 0;
          border-bottom: 1px solid #eee;
          display: flex;
          align-items: center;
        }
        
        .benefits-list li:before {
          content: "‚úì";
          color: var(--primary);
          font-weight: bold;
          margin-right: 10px;
          font-size: 1.2rem;
        }
        
        /* Estilos da Se√ß√£o CTA */
        .cta {
          padding: 80px 0;
          background: linear-gradient(135deg, var(--primary) 0%, #2c5e20 100%);
          color: white;
          text-align: center;
        }
        
        .cta h2 {
          font-size: 2.2rem;
          margin-bottom: 20px;
        }
        
        .cta p {
          max-width: 700px;
          margin: 0 auto 30px;
          font-size: 1.1rem;
        }
        
        .cta .btn {
          background-color: white;
          color: var(--primary);
        }
        
        .cta .btn:hover {
          background-color: #f0f0f0;
        }
        
        /* Estilos do Rodap√© */
        footer {
          background-color: var(--secondary);
          color: white;
          padding: 50px 0 20px;
        }
        
        .footer-content {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 30px;
          margin-bottom: 30px;
        }
        
        .footer-column h3 {
          margin-bottom: 20px;
          font-size: 1.2rem;
        }
        
        .footer-column ul {
          list-style: none;
        }
        
        .footer-column li {
          margin-bottom: 10px;
        }
        
        .footer-column a {
          color: #ddd;
          text-decoration: none;
          transition: color 0.3s;
        }
        
        .footer-column a:hover {
          color: white;
        }
        
        .copyright {
          text-align: center;
          padding-top: 20px;
          border-top: 1px solid rgba(255,255,255,0.1);
          font-size: 0.9rem;
          color: #ddd;
        }
        
        /* Estilos Responsivos */
        @media (max-width: 768px) {
          .header-content {
            flex-direction: column;
          }
          
          .hero h2 {
            font-size: 2rem;
          }
          
          .hero-buttons {
            flex-direction: column;
            align-items: center;
          }
          
          .dual-steps {
            flex-direction: column;
          }
        }
      `}</style>
    </>
  );
}


// =========================================
// 8. pages\login.js
// =========================================

// pages/login.js
import { useState, useEffect } from 'react'; // Adicionado useEffect
import { supabase } from '../lib/supabase';
import Link from 'next/link';
import { useRouter } from 'next/router';

// ==============================================================================
// COMPONENTE PRINCIPAL - P√ÅGINA DE LOGIN
// ==============================================================================
/**
 * P√°gina de login com suporte a autentica√ß√£o via Google OAuth e email/senha.
 * Inclui modal controlado, redirecionamento baseado em perfil (admin, gerente, entregador)
 * e links para cadastro e recupera√ß√£o de senha.
 * Aprimoramentos: Valida√ß√£o de formul√°rio, acessibilidade e feedback visual.
 */
export default function Login() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  /**
   * Gerencia dados do formul√°rio, estado de carregamento, erros e visibilidade.
   * Adicionado estado para valida√ß√£o de formul√°rio.
   */
  const [email, setEmail] = useState('');              // Email do usu√°rio
  const [password, setPassword] = useState('');        // Senha do usu√°rio
  const [loading, setLoading] = useState(false);       // Estado de carregamento
  const [error, setError] = useState('');              // Mensagens de erro
  const [showPassword, setShowPassword] = useState(false); // Visibilidade da senha
  const [isModalOpen, setIsModalOpen] = useState(false);  // Controle do modal
  const [formValid, setFormValid] = useState(false);    // Valida√ß√£o do formul√°rio
  const router = useRouter();

  // ============================================================================
  // 2. FUN√á√ÉO: VALIDAR FORMUL√ÅRIO
  // ============================================================================
  /**
   * Valida email e senha em tempo real, atualizando o estado de validade.
   * Requisitos: Email v√°lido e senha com no m√≠nimo 6 caracteres.
   */
  const validateForm = () => {
    const emailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    const passwordValid = password.length >= 6;
    setFormValid(emailValid && passwordValid);
  };

  useEffect(() => {
    validateForm();
  }, [email, password]);

  // ============================================================================
  // 3. FUN√á√ÉO: LOGIN COM EMAIL/SENHA
  // ============================================================================
  /**
   * Autentica o usu√°rio com email/senha e redireciona com base no perfil.
   * Inclui valida√ß√£o pr√©via e tratamento de erros detalhado.
   */
  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    if (!formValid) {
      setError('Por favor, insira um email v√°lido e uma senha com pelo menos 6 caracteres.');
      setLoading(false);
      return;
    }

    try {
      // 3.1. AUTENTICA√á√ÉO COM SUPABASE
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (authError) throw authError;

      // 3.2. VERIFICA√á√ÉO DE PERFIL E REDIRECIONAMENTO
      const { data: usuario, error: userError } = await supabase
        .from('usuarios')
        .select('is_admin')
        .eq('uid', authData.user.id)
        .single();
      if (userError) throw userError;

      if (usuario.is_admin) {
        router.push('/admin');
        return;
      }

      const { data: associacoes, error: assocError } = await supabase
        .from('loja_associada')
        .select('funcao')
        .eq('uid_usuario', authData.user.id)
        .eq('status_vinculacao', 'ativo');
      if (assocError) throw new Error('Erro ao verificar permiss√µes: ' + assocError.message);

      if (!associacoes || associacoes.length === 0) {
        alert('Voc√™ n√£o possui acesso ativo. Contate o administrador.');
        throw new Error('Usu√°rio sem acesso ativo. Contate o administrador.');
      }

      const primeiraAssociacao = associacoes[0];
      switch (primeiraAssociacao.funcao) {
        case 'gerente':
          router.push('/todos-pedidos');
          break;
        case 'entregador':
          router.push('/pedidos-pendentes');
          break;
        default:
          throw new Error('Fun√ß√£o n√£o reconhecida.');
      }
    } catch (error) {
      // 3.3. TRATAMENTO DE ERROS
      setError(error.message.includes('Invalid login credentials')
        ? 'Email ou senha inv√°lidos.'
        : error.message);
      console.error('Erro no login:', error);
    } finally {
      // 3.4. FINALIZA√á√ÉO
      setLoading(false);
    }
  };

  // ============================================================================
  // 4. FUN√á√ÉO: LOGIN COM GOOGLE
  // ============================================================================
  /**
   * Inicia o fluxo de login com Google OAuth, redirecionando para completar perfil.
   * Inclui tratamento de erros e feedback visual.
   */
  const handleGoogleLogin = async () => {
    try {
      setLoading(true);
      setError('');
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/perfil`,
        },
      });
      if (error) throw error;
    } catch (error) {
      setError('Erro ao fazer login com Google: ' + error.message);
      console.error('Erro no login Google:', error);
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. RENDERIZA√á√ÉO DO COMPONENTE
  // ============================================================================
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800">
      <div className="max-w-md w-full mx-auto">
        
        {/* 5.1. SE√á√ÉO VISUAL: LOGO E T√çTULO */}
        <div className="text-center mb-8">
          <div
            className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center"
            role="img"
            aria-label="√çcone de entrega"
          >
            <span className="text-3xl text-purple-600">üöö</span>
          </div>
          <h1 className="text-3xl font-bold text-white">EntregasWoo</h1>
          <p className="text-purple-200 mt-2">Sistema de Gest√£o de Entregas</p>
        </div>

        {/* 5.2. CARD PRINCIPAL: CONTAINER DE LOGIN */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h2 className="text-2xl font-bold text-gray-800 text-center mb-6" id="login-title">
            Acessar Sistema
          </h2>

          {/* 5.2.1. EXIBI√á√ÉO DE ERRO */}
          {error && (
            <div
              className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4"
              role="alert"
            >
              {error}
            </div>
          )}

          {/* 5.2.2. BOT√ÉO DE LOGIN GOOGLE */}
          <button
            onClick={handleGoogleLogin}
            disabled={loading}
            className="w-full flex items-center justify-center py-3 px-4 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Login com Google"
          >
            {loading ? (
              <span className="flex items-center">
                <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Carregando...
              </span>
            ) : (
              <>
                <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Entrar com Google
              </>
            )}
          </button>

          {/* 5.2.3. ABRE MODAL PARA LOGIN EMAIL/SENHA */}
          <div className="mt-4 text-center">
            <button
              onClick={() => setIsModalOpen(true)}
              className="text-purple-600 hover:text-purple-800 font-medium"
              aria-controls="email-login-modal"
            >
              Ou entre com email e senha
            </button>
          </div>

          {/* 5.2.4. MODAL DE LOGIN EMAIL/SENHA */}
          {isModalOpen && (
            <div
              className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
              role="dialog"
              aria-labelledby="email-login-modal-title"
              aria-modal="true"
            >
              <div className="bg-white rounded-2xl shadow-2xl p-6 w-96">
                <h3
                  id="email-login-modal-title"
                  className="text-xl font-bold text-gray-800 mb-4"
                >
                  Login com Email
                </h3>
                {error && (
                  <div
                    className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4"
                    role="alert"
                  >
                    {error}
                  </div>
                )}
                <form onSubmit={handleLogin} className="space-y-4">
                  <div>
                    <label
                      htmlFor="email-input"
                      className="block text-sm font-medium text-gray-700"
                    >
                      Email
                    </label>
                    <input
                      id="email-input"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
                      required
                      disabled={loading}
                      aria-required="true"
                    />
                  </div>
                  <div className="relative">
                    <label
                      htmlFor="password-input"
                      className="block text-sm font-medium text-gray-700"
                    >
                      Senha
                    </label>
                    <input
                      id="password-input"
                      type={showPassword ? "text" : "password"}
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
                      required
                      disabled={loading}
                      aria-required="true"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute inset-y-0 right-0 pr-3 flex items-center mt-1"
                      disabled={loading}
                      aria-label={showPassword ? "Ocultar senha" : "Mostrar senha"}
                    >
                      {showPassword ? (
                        <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                        </svg>
                      ) : (
                        <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                        </svg>
                      )}
                    </button>
                  </div>
                  <button
                    type="submit"
                    disabled={loading || !formValid}
                    className="w-full bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50 disabled:cursor-not-allowed"
                    aria-label="Enviar login"
                  >
                    {loading ? (
                      <span className="flex items-center justify-center">
                        <svg className="animate-spin h-5 w-5 mr-2 text-white" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Entrando...
                      </span>
                    ) : (
                      'Entrar'
                    )}
                  </button>
                </form>
                <button
                  onClick={() => setIsModalOpen(false)}
                  className="mt-4 w-full text-gray-500 hover:text-gray-700"
                  aria-label="Fechar modal"
                >
                  Fechar
                </button>
              </div>
            </div>
          )}

          {/* 5.2.5. LINKS EXTRAS */}
          <div className="mt-6 text-center space-y-3">
            <Link
              href="/cadastro"
              className="text-purple-600 hover:text-purple-800 text-sm font-medium"
              aria-label="Criar nova conta"
            >
              Criar nova conta
            </Link>
            <Link
              href="/recuperar-senha"
              className="text-gray-500 hover:text-gray-700 text-sm"
              aria-label="Recuperar senha"
            >
              Esqueceu sua senha?
            </Link>
          </div>
        </div>

        {/* 5.3. SE√á√ÉO DE RODAP√â */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm" aria-label="Copyright 2025">
            ¬© 2025 EntregasWoo - Sistema de Gest√£o
          </p>
        </div>
      </div>
    </div>
  );
}


// =========================================
// 9. pages\orders.js
// =========================================

import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const { data, error } = await supabase.from('pedidos').select('*');
        if (error) throw error;
        setOrders(data || []);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

  if (loading) return <p>Carregando pedidos...</p>;
  if (error) return <p>Erro: {error}</p>;

  return (
    <div>
      <h1>Lista de Pedidos</h1>
      {orders.length === 0 ? (
        <p>Nenhum pedido encontrado.</p>
      ) : (
        <ul>
          {orders.map((order) => (
            <li key={order.id} style={{ marginBottom: '10px' }}>
              <strong>Pedido #{order.id_woo}</strong> - Cliente: {order.nome_cliente} - 
              Total: R${order.total} - Status: {order.status_transporte || 'Pendente'}
              <button
                onClick={() => handleAcceptOrder(order.id)}
                style={{ marginLeft: '10px', padding: '5px 10px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '3px' }}
                disabled={order.status_transporte === 'Entregue'}
              >
                Aceitar
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );

  async function handleAcceptOrder(orderId) {
    const { error } = await supabase
      .from('pedidos')
      .update({ status_transporte: 'Aceito' })
      .eq('id', orderId);
    if (error) {
      setError(`Erro ao aceitar pedido: ${error.message}`);
    } else {
      setOrders(orders.map(order =>
        order.id === orderId ? { ...order, status_transporte: 'Aceito' } : order
      ));
    }
  }
}


// =========================================
// 10. pages\pedidos-aceitos.js
// =========================================

// pages/pedidos-aceitos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { filterPedidosPorUsuario } from '../utils/filterPedidos';
import { OrderModal, WithCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS ACEITOS
// ==============================================================================
export default function PedidosAceitos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]); // Todos os pedidos do banco
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [loadingAcoes, setLoadingAcoes] = useState(false); // Loading para a√ß√µes
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null); // Pedido para modal
  const [modalAberto, setModalAberto] = useState(false); // Controle do modal
  
  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. FUN√á√ÉO: VERIFICAR AUTENTICA√á√ÉO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getPedidosAceitos();
    } catch (error) {
      console.error('Erro de autentica√ß√£o:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUN√á√ÉO: BUSCAR PEDIDOS ACEITOS/EM ROTA
  // ============================================================================
  const getPedidosAceitos = async () => {
    try {
      setLoading(true);
      
      // Busca TODOS os pedidos com status aceito ou em rota
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aceito', 'em rota'])
        .order('data', { ascending: false });

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 5. FILTRAR PEDIDOS POR USU√ÅRIO
  // ============================================================================
  const pedidosFiltrados = filterPedidosPorUsuario(
    todosPedidos,
    userRole, 
    userLojas
  );

  // ============================================================================
  // 6. FUN√á√ïES DE A√á√ÉO: SAIR PARA ENTREGA / ENTREGAR / CANCELAR
  // ============================================================================
  const handleSairEntrega = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'em rota' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Atualiza lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, status_transporte: 'em rota' } : p
      ));
      
    } catch (error) {
      console.error('Erro ao atualizar status:', error);
      alert('Erro ao sair para entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleEntregar = async (pedidoId) => {
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'entregue' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista (pedido entregue vai para outra p√°gina)
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Pedido marcado como entregue com sucesso!');
      
    } catch (error) {
      console.error('Erro ao entregar pedido:', error);
      alert('Erro ao marcar como entregue.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  const handleCancelar = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja cancelar esta entrega?')) return;
    
    try {
      setLoadingAcoes(true);
      
      const { error } = await supabase
        .from('pedidos')
        .update({ status_transporte: 'cancelado' })
        .eq('id', pedidoId);

      if (error) throw error;
      
      // Remove da lista
      setTodosPedidos(prev => prev.filter(p => p.id !== pedidoId));
      
      alert('Entrega cancelada com sucesso.');
      
    } catch (error) {
      console.error('Erro ao cancelar pedido:', error);
      alert('Erro ao cancelar entrega.');
    } finally {
      setLoadingAcoes(false);
    }
  };

  // ============================================================================
  // 7. FUN√á√ïES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 8. RENDERIZA√á√ÉO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Carregando perfil...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* T√çTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">‚úÖ Pedidos Aceitos</h1>

      {/* ESTADO DE CARREGAMENTO */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        /* LISTA DE PEDIDOS */
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido aceito encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  
                  {/* INFORMA√á√ïES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endere√ßo:</span> {pedido.endereco_entrega}</p>
                    <p className="text-sm">
                      <span className="font-medium">Status:</span> 
                      <span className={pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-green-600'}>
                        {pedido.status_transporte === 'em rota' ? ' üöö Em Rota' : ' ‚úÖ Aceito'}
                      </span>
                    </p>
                  </div>

                  {/* BOT√ïES DE A√á√ÉO */}
                  <div className="flex flex-col gap-2 ml-4">
                    {pedido.status_transporte === 'aceito' && (
                      <button 
                        onClick={() => handleSairEntrega(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-orange-500 text-white px-4 py-2 rounded text-sm hover:bg-orange-600 transition-colors"
                      >
                        üöö Sair para Entrega
                      </button>
                    )}
                    
                    {pedido.status_transporte === 'em rota' && (
                      <button 
                        onClick={() => handleEntregar(pedido.id)}
                        disabled={loadingAcoes}
                        className="bg-green-500 text-white px-4 py-2 rounded text-sm hover:bg-green-600 transition-colors"
                      >
                        ‚úÖ Entregar
                      </button>
                    )}
                    
                    <button 
                      onClick={() => handleCancelar(pedido.id)}
                      disabled={loadingAcoes}
                      className="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600 transition-colors"
                    >
                      ‚ùå Cancelar
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 11. pages\pedidos-entregues.js
// =========================================

import React, { useState, useEffect, useCallback } from 'react';
import { createClient } from '@supabase/supabase-js';
import { jsPDF } from 'jspdf';

// ==============================================================================
// 1. CONFIGURA√á√ÉO DO SUPABASE
// ==============================================================================
const supabaseUrl = 'https://czzidhzzpqegfvvmdgno.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN6emlkaHp6cHFlZ2Z2dm1kZ25vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5NTIwMDMsImV4cCI6MjA2ODUyODAwM30.zK2iFp-b4e5vghpHgWGuOk0LooujlyU7kVm4sbM85m0';
const supabase = createClient(supabaseUrl, supabaseKey);

// ==============================================================================
// 2. FUN√á√ïES AUXILIARES
// ==============================================================================

/**
 * Formata data para o padr√£o do Supabase (YYYY-MM-DD)
 */
const formatarDataParaSupabase = (dataString) => {
  if (!dataString) return '';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) return dataString;
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) {
    const [dia, mes, ano] = dataString.split('/');
    return `${ano}-${mes}-${dia}`;
  }
  return dataString;
};

/**
 * Formata data para exibi√ß√£o (DD/MM/YYYY)
 */
const formatarDataParaExibicao = (dataString) => {
  if (!dataString) return '-';
  if (/^\d{4}-\d{2}-\d{2}$/.test(dataString)) {
    const [ano, mes, dia] = dataString.split('-');
    return `${dia}/${mes}/${ano}`;
  }
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dataString)) return dataString;
  try {
    const data = new Date(dataString);
    if (!isNaN(data.getTime())) return data.toLocaleDateString('pt-BR');
  } catch (e) {
    console.error('Erro ao formatar data:', e);
  }
  return dataString;
};

// ==============================================================================
// 3. COMPONENTE MODAL DE DETALHES
// ==============================================================================
const ModalDetalhesPedido = ({ pedido, isOpen, onClose }) => {
  if (!isOpen || !pedido) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Cabe√ßalho do Modal */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-purple-800">Detalhes do Pedido</h2>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700 text-2xl">
              √ó
            </button>
          </div>

          {/* Informa√ß√µes da Loja */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-800 mb-2">{pedido.loja_nome}</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p><strong>ID:</strong> {pedido.id}</p>
                <p><strong>Pedido:</strong> {pedido.id_loja_woo}</p>
                <p><strong>Data:</strong> {pedido.data ? new Date(pedido.data).toLocaleString('pt-BR') : 'N/A'}</p>
              </div>
              <div>
                <p><strong>Telefone da Loja:</strong> {pedido.loja_telefone || 'N/A'}</p>
                <p><strong>Status:</strong> {pedido.status_transporte || 'N/A'}</p>
              </div>
            </div>
          </div>

          {/* Informa√ß√µes do Cliente */}
          <div className="mb-6 p-4 bg-gray-50 rounded">
            <h4 className="font-semibold text-gray-800 mb-2">Cliente</h4>
            <p><strong>Nome:</strong> {pedido.nome_cliente || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.telefone_cliente || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.email_cliente || 'N/A'}</p>
            <p><strong>Endere√ßo:</strong> {pedido.endereco_entrega || 'N/A'}</p>
          </div>

          {/* Produtos */}
          <div className="mb-6">
            <h4 className="font-semibold text-gray-800 mb-2">Produtos</h4>
            <div className="bg-white border rounded p-3">
              {pedido.produto ? (
                <pre className="text-sm whitespace-pre-wrap">{pedido.produto}</pre>
              ) : (
                <p>Nenhum produto informado</p>
              )}
            </div>
          </div>

          {/* Informa√ß√µes de Pagamento e Total */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div>
              <p><strong>Forma de Pagamento:</strong> {pedido.forma_pagamento || 'N/A'}</p>
              <p><strong>Total:</strong> R$ {parseFloat(pedido.total || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p><strong>Frete Pago:</strong> R$ {parseFloat(pedido.frete_pago || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            </div>
            <div>
              <p><strong>Status Pagamento:</strong> {pedido.status_pagamento ? 'Pago' : 'Pendente'}</p>
              <p><strong>Data Pagamento:</strong> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
            </div>
          </div>

          {/* Observa√ß√µes */}
          {pedido.observacao_pedido && (
            <div className="mb-6">
              <h4 className="font-semibold text-gray-800 mb-2">Observa√ß√µes</h4>
              <p className="bg-yellow-50 p-3 rounded">{pedido.observacao_pedido}</p>
            </div>
          )}

          {/* Entregador */}
          <div className="mb-6 p-4 bg-purple-50 rounded">
            <h4 className="font-semibold text-purple-800 mb-2">Entregador</h4>
            <p><strong>Nome:</strong> {pedido.aceito_por_nome || 'N/A'}</p>
            <p><strong>Telefone:</strong> {pedido.aceito_por_telefone || 'N/A'}</p>
            <p><strong>Email:</strong> {pedido.aceito_por_email || 'N/A'}</p>
          </div>

          {/* Bot√£o Fechar */}
          <div className="flex justify-end">
            <button onClick={onClose} className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition-colors">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// ==============================================================================
// 4. FUN√á√ïES DE CARREGAMENTO DE IMAGEM E GERA√á√ÉO DE PDF
// ==============================================================================

/**
 * Carrega uma imagem a partir de uma URL e retorna dados base64 com formato detectado
 */
const carregarImagem = async (url) => {
  try {
    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
      return null;
    }

    const urlComTimestamp = url.includes('?') 
      ? `${url}&t=${Date.now()}`
      : `${url}?t=${Date.now()}`;

    const response = await fetch(urlComTimestamp);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const blob = await response.blob();
    
    if (!blob.type.startsWith('image/')) {
      return null;
    }
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.result && typeof reader.result === 'string') {
          const img = new Image();
          img.onload = () => {
            resolve({
              data: reader.result,
              format: blob.type.split('/')[1].toUpperCase()
            });
          };
          img.onerror = () => {
            resolve(null);
          };
          img.src = reader.result;
        } else {
          resolve(null);
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    return null;
  }
};

/**
 * Gera recibos em PDF agrupados por loja
 */
const gerarRecibosPDF = async (pedidosSelecionados, todosPedidos) => {
  if (pedidosSelecionados.size === 0) {
    alert('Selecione pelo menos um pedido para gerar recibos.');
    return;
  }

  try {
    // Agrupar pedidos por loja
    const pedidosPorLoja = {};
    Array.from(pedidosSelecionados).forEach(id => {
      const pedido = todosPedidos.find(p => p.id === id);
      if (pedido) {
        const lojaId = pedido.id_loja;
        if (!pedidosPorLoja[lojaId]) {
          pedidosPorLoja[lojaId] = {
            loja_nome: pedido.loja_nome,
            loja_logo: pedido.loja_logo,
            entregador: pedido.aceito_por_nome,
            pedidos: []
          };
        }
        pedidosPorLoja[lojaId].pedidos.push({
          id_loja_woo: pedido.id_loja_woo,
          frete_pago: parseFloat(pedido.frete_pago || 0)
        });
      }
    });

    // Criar PDF com configura√ß√µes de alta qualidade
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: false
    });

    // Configurar propriedades do PDF
    pdf.setProperties({
      title: 'Recibos de Fretes',
      subject: 'Relat√≥rio de pedidos entregues',
      creator: 'Sistema de Gest√£o'
    });

    let yPosition = 20;

    // Processar cada loja
    for (const loja of Object.values(pedidosPorLoja)) {
      const pageIndex = Object.values(pedidosPorLoja).indexOf(loja);
      if (pageIndex > 0) {
        pdf.addPage();
        yPosition = 20;
      }

      // Adicionar logo em ALTA RESOLU√á√ÉO
      if (loja.loja_logo) {
        try {
          const imagem = await carregarImagem(loja.loja_logo);
          if (imagem && imagem.data) {
            const img = new Image();
            img.src = imagem.data;
            
            await new Promise((resolve, reject) => {
              img.onload = resolve;
              img.onerror = reject;
            });
            
            // Ajustar tamanho mantendo propor√ß√£o
            const maxWidth = 80;
            const maxHeight = 80;
            const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
            const width = img.width * ratio;
            const height = img.height * ratio;
            const xPos = (210 - width) / 2;
            
            // Adicionar imagem ao PDF
            pdf.addImage({
              imageData: imagem.data,
              format: imagem.format,
              x: xPos,
              y: yPosition,
              width: width,
              height: height,
              compression: 'NONE'
            });
            
            yPosition += height + 15;
          }
        } catch (error) {
          console.warn('Logo n√£o carregada:', error);
          yPosition += 10;
        }
      }

      // T√≠tulo
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('RECIBO DE FRETES', 105, yPosition, { align: 'center' });
      yPosition += 10;

      // Data
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, yPosition, { align: 'center' });
      yPosition += 15;

      // Informa√ß√µes
      pdf.text(`Entregador: ${loja.entregador || 'N√£o informado'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Empresa: ${loja.loja_nome}`, 20, yPosition);
      yPosition += 15;

      // Lista de pedidos
      pdf.setFont('helvetica', 'bold');
      pdf.text('PEDIDOS ENTREGUES:', 20, yPosition);
      yPosition += 10;

      pdf.setFont('helvetica', 'normal');
      let totalLoja = 0;
      
      loja.pedidos.forEach(pedido => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const texto = `${pedido.id_loja_woo} - R$ ${pedido.frete_pago.toFixed(2)}`;
        pdf.text(texto, 25, yPosition);
        yPosition += 8;
        totalLoja += pedido.frete_pago;
      });

      yPosition += 10;

      // Total
      pdf.setFont('helvetica', 'bold');
      pdf.text(`TOTAL: R$ ${totalLoja.toFixed(2)}`, 20, yPosition);
      yPosition += 15;

      // Linha de assinatura
      pdf.setLineWidth(0.5);
      pdf.line(20, yPosition, 190, yPosition);
      yPosition += 5;
      
      pdf.setFontSize(11);
      pdf.text('Assinatura do Respons√°vel', 20, yPosition);
      yPosition += 8;
      
      pdf.setFontSize(10);
      pdf.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 20, yPosition);
      yPosition += 20;
    }

    // Salvar PDF
    const dataAtual = new Date().toISOString().split('T')[0];
    pdf.save(`recibos-fretes-${dataAtual}.pdf`);

  } catch (error) {
    console.error('Erro ao gerar PDF:', error);
    alert('Erro ao gerar PDF. Verifique o console.');
  }
};

// ==============================================================================
// 5. COMPONENTE PRINCIPAL
// ==============================================================================
export default function PedidosEntregues() {
  // Estados do componente
  const [pedidos, setPedidos] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [dataPagamento, setDataPagamento] = useState('');
  const [pedidosSelecionados, setPedidosSelecionados] = useState(new Set());
  const [totalSelecionados, setTotalSelecionados] = useState(0.0);
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [filtroStatus, setFiltroStatus] = useState('');
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);

  // ============================================================================
  // 5.1 FUN√á√ïES DE C√ÅLCULO E CARREGAMENTO
  // ============================================================================

  /**
   * Calcula o total dos pedidos selecionados
   */
  const calcularTotais = useCallback((pedidosList, selecionados) => {
    const total = Array.from(selecionados).reduce((sum, id) => {
      const pedido = pedidosList.find(p => p.id === id);
      return sum + (parseFloat(pedido?.frete_pago) || 0.0);
    }, 0.0);
    setTotalSelecionados(total);
  }, []);

  /**
   * Carrega pedidos do Supabase com filtros aplicados
   */
  const carregarPedidos = async () => {
    setIsLoading(true);
    try {
      let query = supabase.from('pedidos').select('*, loja_logo').eq('status_transporte', 'entregue');
      
      if (filtroEntregador) query = query.ilike('aceito_por_nome', `%${filtroEntregador}%`);
      if (filtroLoja) query = query.eq('id_loja', filtroLoja);
      if (filtroStatus) query = query.eq('status_pagamento', filtroStatus === 'true');
      
      const { data, error } = await query;
      if (error) throw error;
      
      setPedidos(data || []);
    } catch (err) {
      console.error('Erro ao carregar pedidos:', err.message);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Atualiza pedidos selecionados no Supabase
   */
  const atualizarPedidos = async () => {
    if (pedidosSelecionados.size === 0) {
      alert('Selecione pelo menos um pedido.');
      return;
    }
    
    if (!dataPagamento) {
      alert('Selecione uma data de pagamento.');
      return;
    }
    
    const dataFormatada = formatarDataParaSupabase(dataPagamento);
    
    try {
      const updates = Array.from(pedidosSelecionados).map(async (id) => {
        const pedido = pedidos.find(p => p.id === id);
        const fretePago = parseFloat(pedido?.frete_pago) || 0.0;
        
        const { error } = await supabase
          .from('pedidos')
          .update({
            frete_pago: fretePago,
            status_pagamento: fretePago > 0,
            data_pagamento: dataFormatada,
          })
          .eq('id', id);
        
        if (error) throw error;
      });

      await Promise.all(updates);
      alert('Pedidos atualizados com sucesso!');
      
      // Atualizar estado local
      setPedidos(prevPedidos => 
        prevPedidos.map(pedido => 
          pedidosSelecionados.has(pedido.id) 
            ? { 
                ...pedido, 
                data_pagamento: dataFormatada,
                status_pagamento: parseFloat(pedido.frete_pago || 0) > 0
              } 
            : pedido
        )
      );
      
      setPedidosSelecionados(new Set());
      
    } catch (err) {
      console.error('Erro ao atualizar pedidos:', err.message);
      alert('Erro ao atualizar. Verifique o console.');
    }
  };

  // ============================================================================
  // 5.2 HANDLERS DE INTERA√á√ÉO
  // ============================================================================

  /**
   * Manipula sele√ß√£o/desele√ß√£o de pedidos
   */
  const handleSelecionarPedido = (pedidoId, isChecked) => {
    const newSet = new Set(pedidosSelecionados);
    if (isChecked) {
      newSet.add(pedidoId);
    } else {
      newSet.delete(pedidoId);
    }
    setPedidosSelecionados(newSet);
  };

  /**
   * Atualiza valor do frete de um pedido
   */
  const handleAtualizarFrete = (pedidoId, novoValor) => {
    const newPedidos = pedidos.map(p => 
      p.id === pedidoId ? { ...p, frete_pago: novoValor } : p
    );
    setPedidos(newPedidos);
  };

  /**
   * Abre modal com detalhes do pedido
   */
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  /**
   * Fecha modal de detalhes
   */
  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 5.3 USE EFFECTS
  // ============================================================================

  // Carrega pedidos quando os filtros mudam
  useEffect(() => {
    carregarPedidos();
  }, [filtroEntregador, filtroLoja, filtroStatus]);

  // Calcula totais quando a sele√ß√£o ou pedidos mudam
  useEffect(() => {
    calcularTotais(pedidos, pedidosSelecionados);
  }, [pedidosSelecionados, pedidos, calcularTotais]);

  // ============================================================================
  // 5.4 DADOS DERIVADOS
  // ============================================================================

  // Lista de lojas √∫nicas para o filtro
  const lojasUnicas = [...new Set(pedidos.map(p => p.id_loja))].map(id => {
    const nome = pedidos.find(p => p.id_loja === id)?.loja_nome;
    return { id, nome: nome || id };
  });

  // ============================================================================
  // 5.5 RENDERIZA√á√ÉO DO COMPONENTE
  // ============================================================================

  return (
    <div className="bg-gray-50 min-h-screen mobile-optimized">
      {/* Modal de Detalhes */}
      <ModalDetalhesPedido
        pedido={pedidoSelecionado}
        isOpen={modalAberto}
        onClose={fecharModal}
      />

      {/* Cabe√ßalho Otimizado para Mobile */}
      <div className="bg-white shadow-md rounded-lg p-3 mb-3 sticky top-2 z-10 mobile-header">
        <div className="flex justify-between items-center mb-3">
          <h1 className="text-xl font-bold text-purple-800">Pedidos Entregues</h1>
          <div className="flex items-center">
            <span className="text-sm text-gray-600 mr-2">{pedidosSelecionados.size}</span>
            <div className="text-lg font-semibold text-green-600">
              R$ {totalSelecionados.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
            </div>
          </div>
        </div>

        {/* Filtros sem r√≥tulos */}
        <div className="grid grid-cols-1 gap-2 mb-3">
          <select
            value={filtroEntregador}
            onChange={(e) => setFiltroEntregador(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Entregadores</option>
            {[...new Set(pedidos.map(p => p.aceito_por_nome).filter(Boolean))].map((nome, index) => (
              <option key={index} value={nome}>{nome}</option>
            ))}
          </select>
          <select
            value={filtroLoja}
            onChange={(e) => setFiltroLoja(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todas Lojas</option>
            {lojasUnicas.map(loja => (
              <option key={loja.id} value={loja.id}>{loja.nome}</option>
            ))}
          </select>
          <select
            value={filtroStatus}
            onChange={(e) => setFiltroStatus(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded mobile-field"
          >
            <option value="">Todos Status</option>
            <option value="true">Pago</option>
            <option value="false">Pendente</option>
          </select>
        </div>

        {/* Data e Bot√µes na mesma linha */}
        <div className="flex gap-2 items-center">
          <input
            type="date"
            value={dataPagamento}
            onChange={(e) => setDataPagamento(e.target.value)}
            className="flex-grow p-2 border border-gray-300 rounded mobile-field"
          />
          <button 
            onClick={atualizarPedidos} 
            className="bg-purple-600 text-white p-2 rounded hover:bg-purple-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Atualizar
          </button>
          <button 
            onClick={async () => await gerarRecibosPDF(pedidosSelecionados, pedidos)}
            className="bg-green-600 text-white p-2 rounded hover:bg-green-700 transition-colors font-semibold mobile-button flex-grow text-center"
          >
            Recibo
          </button>
        </div>
      </div>

      {/* Lista de Pedidos */}
      <div className="container mx-auto px-2">
        <div className="grid grid-cols-1 gap-3">
          {isLoading ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Carregando...</p>
            </div>
          ) : pedidos.length === 0 ? (
            <div className="col-span-full text-center py-8">
              <p className="text-purple-600">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white rounded-lg shadow card-pedido p-3">
                <div className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    checked={pedidosSelecionados.has(pedido.id)}
                    onChange={(e) => handleSelecionarPedido(pedido.id, e.target.checked)}
                    className="mobile-checkbox h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                  />
                  <div className="flex-1 ml-2">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-base font-bold text-purple-800 hover:text-purple-600 hover:underline text-left"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm font-semibold text-blue-800 mobile-text-small">{pedido.loja_nome}</p>
                  </div>
                </div>
                <div className="ml-6 space-y-1 mobile-text-small">
                  <p><span className="font-semibold">Entregador:</span> {pedido.aceito_por_nome || 'N√£o informado'}</p>
                  <p><span className="font-semibold">Pago em:</span> {formatarDataParaExibicao(pedido.data_pagamento)}</p>
                  <p className="flex items-center">
                    <span className="font-semibold mr-1">Pagamento:</span> 
                    {pedido.status_pagamento ? (
                      <span className="text-green-600 mr-1">‚úî</span>
                    ) : (
                      <span className="text-red-600 mr-1">‚úò</span>
                    )} 
                    {pedido.status_pagamento ? 'Pago' : 'Pendente'}
                  </p>
                  <p className="flex items-center">
                    <span className="font-semibold">Frete Pago: R$</span>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={pedido.frete_pago || 0.0}
                      onChange={(e) => handleAtualizarFrete(pedido.id, e.target.value)}
                      className="w-16 p-1 border border-gray-300 rounded ml-1 focus:ring-2 focus:ring-purple-500 focus:border-transparent mobile-text-small"
                    />
                  </p>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

{/* Estilos inline para mobile */}
<style jsx>{`
  @media (max-width: 768px) {
    .mobile-optimized :global(*) {
      font-size: 14px !important;
    }
    .mobile-header :global(*) {
      padding: 0px 10px !important;
    }
    .mobile-field :global(*) {
      padding: 10px !important;
      font-size: 14px !important;
    }
    .mobile-button :global(*) {
      padding: 10px 12px !important;
      font-size: 14px !important;
    }
    .mobile-text-small :global(*) {
      font-size: 13px !important;
    }
    .mobile-checkbox :global(*) {
      width: 18px !important;
      height: 18px !important;
    }
  }

  /* Estilos para tablet/PC (acima de 768px) - mant√©m o padr√£o */
  @media (min-width: 769px) {
    .mobile-header :global(*) {
      padding: 12px 10px !important; /* Valor original para tablet/PC */
    }
  }
`}</style>
    </div>
  );
}


// =========================================
// 12. pages\pedidos-pendentes.js
// =========================================

import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { OrderModal, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - PEDIDOS PENDENTES
// ==============================================================================
export default function PedidosPendentes() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [pedidos, setPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [loadingAceitar, setLoadingAceitar] = useState(false);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  const router = useRouter();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    checkAuthAndGetPedidos();
  }, []);

  // ============================================================================
  // 3. FUN√á√ÉO: VERIFICAR AUTENTICA√á√ÉO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }
      await getPedidosPendentes();
    } catch (error) {
      console.error('Erro na autentica√ß√£o:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 4. FUN√á√ÉO: BUSCAR PEDIDOS PENDENTES
  // ============================================================================
  const getPedidosPendentes = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('pedidos')
        .select('*')
        .in('status_transporte', ['aguardando', 'revertido'])
        .order('data', { ascending: false });

      if (error) throw error;
      setPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos.');
    } finally {
      setLoading(false);
    }
  };

// ============================================================================
// 5. FUN√á√ÉO: ACEITAR PEDIDO (CORRIGIDA - ESTRUTURA CORRETA)
// ============================================================================
const handleAceitarPedido = async (pedidoId) => {
  try {
    setLoadingAceitar(true);
    
    // 1. Verificar se usu√°rio est√° autenticado
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      alert('Sess√£o expirada. Fa√ßa login novamente.');
      router.push('/login');
      return;
    }

    // 2. ‚úÖ BUSCAR TELEFONE DO USU√ÅRIO na tabela usuarios
    const { data: usuarioData, error: usuarioError } = await supabase
      .from('usuarios')
      .select('telefone, nome_completo')
      .eq('uid', user.id)
      .single();

    if (usuarioError) {
      console.warn('Erro ao buscar telefone do usu√°rio:', usuarioError);
      // N√£o impede a continua√ß√£o - usamos valores padr√£o
    }

    // 3. ‚úÖ BUSCAR DADOS DA LOJA ASSOCIADA
    const { data: entregadorData, error: entregadorError } = await supabase
      .from('loja_associada')
      .select('nome_completo, loja_telefone, loja_nome')
      .eq('uid_usuario', user.id)
      .limit(1);

    if (entregadorError) {
      console.warn('Erro ao buscar dados da loja:', entregadorError);
      // N√£o impede a continua√ß√£o
    }

    const entregador = entregadorData?.[0];
    const usuario = usuarioData;

    // 4. ‚úÖ ATUALIZAR PEDIDO COM DADOS CORRETOS
    const { error: updateError } = await supabase
      .from('pedidos')
      .update({
        status_transporte: 'aceito',
        aceito_por_uid: user.id,
        aceito_por_nome: entregador?.nome_completo || usuario?.nome_completo || user.email,
        aceito_por_email: user.email,
        aceito_por_telefone: usuario?.telefone || entregador?.loja_telefone || 'N√£o informado',
        ultimo_status: new Date().toISOString()
      })
      .eq('id', pedidoId);

    if (updateError) {
      throw new Error('Erro ao atualizar pedido: ' + updateError.message);
    }

    // 5. Atualizar lista localmente
    setPedidos(pedidos.filter(pedido => pedido.id !== pedidoId));
    alert('‚úÖ Pedido aceito com sucesso!');

  } catch (error) {
    console.error('Erro ao aceitar pedido:', error);
    alert(`‚ùå ${error.message}`);
  } finally {
    setLoadingAceitar(false);
  }
};

  // ============================================================================
  // 6. FUN√á√ïES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 7. RENDERIZA√á√ÉO DO COMPONENTE
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-purple-800 mb-6">üìã Pedidos Pendentes</h1>
      
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidos.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido pendente encontrado.</p>
            </div>
          ) : (
            pedidos.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Endere√ßo:</span> {pedido.endereco_entrega}</p>
                    {pedido.frete_oferecido && (
                      <p className="text-sm text-green-600 font-medium mt-1">
                        üí∞ Frete oferecido: R$ {parseFloat(pedido.frete_oferecido).toFixed(2)}
                      </p>
                    )}
                  </div>

                  <button 
                    onClick={() => handleAceitarPedido(pedido.id)}
                    disabled={loadingAceitar}
                    className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 
                             transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed
                             ml-4 min-w-[80px]"
                  >
                    {loadingAceitar ? '‚è≥' : '‚úÖ'} Aceitar
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        <WithoutCourier 
          pedido={pedidoSelecionado} 
          onClose={fecharModal} 
        />
      </OrderModal>
    </div>
  );
}


// =========================================
// 13. pages\perfil.js
// =========================================

// pages/perfil.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import EditUsuarioModal from '../components/EditUsuarioModal';
import EditLojaModal from '../components/EditLojaModal';

// ==============================================================================
// P√ÅGINA: PERFIL DO USU√ÅRIO
// ==============================================================================
export default function Perfil() {
  const router = useRouter();
  const { userProfile, userRole, userLojas, loading, error } = useUserProfile();
  const [modalUsuarioOpen, setModalUsuarioOpen] = useState(false);
  const [modalLojaOpen, setModalLojaOpen] = useState(false);
  const [lojaSelecionada, setLojaSelecionada] = useState(null);
  const [lojasAtualizadas, setLojasAtualizadas] = useState([]);

  // ============================================================================
  // 1. MAPEAMENTO DOS NOMES CORRETOS DAS LOJAS
  // ============================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ============================================================================
  // 2. ATUALIZAR OS NOMES DAS LOJAS COM OS VALORES CORRETOS
  // ============================================================================
  useEffect(() => {
    if (userLojas && userLojas.length > 0) {
      const lojasCorrigidas = userLojas.map(loja => ({
        ...loja,
        // Usa o nome correto do mapeamento, mantendo o original como fallback
        loja_nome: mapeamentoLojas[loja.id_loja] || loja.loja_nome
      }));
      setLojasAtualizadas(lojasCorrigidas);
    }
  }, [userLojas]);

  // ============================================================================
  // 3. REDIRECIONAR SE N√ÉO ESTIVER LOGADO
  // ============================================================================
  if (!loading && !userProfile) {
    router.push('/login');
    return null;
  }

  // ============================================================================
  // 4. ABRIR MODAL DE EDI√á√ÉO DA LOJA
  // ============================================================================
  const abrirModalLoja = (loja) => {
    setLojaSelecionada(loja);
    setModalLojaOpen(true);
  };

  // ============================================================================
  // 5. RENDERIZA√á√ÉO DA P√ÅGINA
  // ============================================================================
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      
      {/* CABE√áALHO */}
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-purple-800 mb-2">üë§ Meu Perfil</h1>
        <p className="text-gray-600">Gerencie suas informa√ß√µes pessoais e de entrega</p>
      </div>

      {loading ? (
        <div className="text-center">
          <p className="text-purple-600">Carregando...</p>
        </div>
      ) : error ? (
        <div className="bg-red-100 border border-red-400 text-red-700 p-4 rounded">
          <p>Erro: {error}</p>
        </div>
      ) : (
        <div className="grid md:grid-cols-2 gap-8">
          
          {/* ================================================================== */}
          {/* CARD: DADOS DO USU√ÅRIO */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">üìã Dados Pessoais</h2>
            
            <div className="space-y-3 mb-4">
              {userProfile.foto && (
                <div className="text-center">
                  <img
                    src={userProfile.foto}
                    alt="Foto do perfil"
                    className="w-20 h-20 rounded-full mx-auto border-2 border-purple-600"
                  />
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome Completo</label>
                <p className="text-gray-800 font-medium">{userProfile.nome_completo || 'N√£o informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Nome de Usu√°rio</label>
                <p className="text-gray-800">{userProfile.nome_usuario || 'N√£o informado'}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-600">Email</label>
                <p className="text-gray-800">{userProfile.email}</p>
              </div>
              
              {userProfile.telefone && (
                <div>
                  <label className="block text-sm font-medium text-gray-600">Telefone</label>
                  <p className="text-gray-800">{userProfile.telefone}</p>
                </div>
              )}
            </div>

            <button
              onClick={() => setModalUsuarioOpen(true)}
              className="w-full bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700 transition-colors"
            >
              ‚úèÔ∏è Editar Dados Pessoais
            </button>
          </div>

          {/* ================================================================== */}
          {/* CARD: LOJAS ASSOCIADAS */}
          {/* ================================================================== */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold text-purple-800 mb-4">üè™ Lojas Associadas</h2>
            
            {lojasAtualizadas.length === 0 ? (
              <p className="text-gray-600 text-center py-4">Nenhuma loja associada</p>
            ) : (
              <div className="space-y-3">
                {lojasAtualizadas.map((loja) => (
                  <div key={loja.id} className="border rounded-lg p-3 hover:bg-gray-50">
                    <h3 className="font-semibold text-gray-800">{loja.loja_nome}</h3>
                    <p className="text-sm text-gray-600">ID: {loja.id_loja}</p>
                    <p className="text-sm text-purple-600">Fun√ß√£o: {loja.funcao}</p>
                    
                    <div className="mt-2 text-sm text-gray-700">
                      <p>üöó Ve√≠culo: {loja.veiculo || 'N√£o informado'}</p>
                      <p>üì¶ Carga m√°xima: {loja.carga_maxima || '0'} kg</p>
                      <p>üìç Per√≠metro: {loja.perimetro_entrega || 'N√£o definido'}</p>
                    </div>

                    <button
                      onClick={() => abrirModalLoja(loja)}
                      className="mt-2 w-full bg-blue-600 text-white py-1 px-3 rounded text-sm hover:bg-blue-700 transition-colors"
                    >
                      ‚úèÔ∏è Editar Esta Loja
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* ====================================================================== */}
      {/* MODAIS */}
      {/* ====================================================================== */}
      <EditUsuarioModal
        isOpen={modalUsuarioOpen}
        onClose={() => setModalUsuarioOpen(false)}
        userProfile={userProfile}
      />
      
      {lojaSelecionada && (
        <EditLojaModal
          isOpen={modalLojaOpen}
          onClose={() => setModalLojaOpen(false)}
          loja={lojaSelecionada}
        />
      )}
    </div>
  );
}


// =========================================
// 14. pages\recuperar-senha.js
// =========================================

import { useState } from 'react';
import { supabase } from '../lib/supabase';
import Link from 'next/link';

export default function RecuperarSenha() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/atualizar-senha`,
      });

      if (error) throw error;

      setSuccess('Email de recupera√ß√£o enviado! Verifique sua caixa de entrada.');

    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-800 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center">
      <div className="max-w-md w-full mx-auto">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-white rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-3xl text-purple-600">üîí</span>
          </div>
          <h2 className="text-3xl font-bold text-white">EntregasWoo</h2>
          <p className="text-purple-200 mt-2">Recuperar Senha</p>
        </div>

        {/* Card de Recupera√ß√£o */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h3 className="text-2xl font-bold text-gray-800 text-center mb-6">
            Recuperar Senha
          </h3>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-4">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg mb-4">
              {success}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
                placeholder="seu@email.com"
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition disabled:opacity-50"
            >
              {loading ? 'Enviando...' : 'Enviar Email de Recupera√ß√£o'}
            </button>
          </form>

          {/* Links */}
          <div className="mt-6 text-center space-y-3">
            <Link href="/login" className="text-purple-600 hover:text-purple-800 text-sm font-medium">
              Voltar para o login
            </Link>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-purple-200 text-sm">
            ¬© 2024 EntregasWoo - Sistema de Gest√£o
          </p>
        </div>
      </div>
    </div>
  );
}

// N√£o usar layout para esta p√°gina
RecuperarSenha.noLayout = true;


// =========================================
// 15. pages\relatorios.js
// =========================================

// pages/relatorios.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useUserProfile } from '../hooks/useUserProfile';
import RouteGuard from '../components/RouteGuard';

export default function Relatorios() {
  const { userRole, userLojas, userProfile, loading: userLoading } = useUserProfile();
  const [loading, setLoading] = useState(true);
  const [dadosRelatorios, setDadosRelatorios] = useState(null);
  const [periodo, setPeriodo] = useState('mes'); // dia, semana, mes, ano

  // ============================================================================
  // 1. MAPEAMENTO DOS NOMES CORRETOS DAS LOJAS
  // ============================================================================
  const mapeamentoLojas = {
    'L1': 'Mercearia Luanda',
    'L2': 'Brasil Carne', 
    'L3': 'Mistos Angola',
    'L4': '3G Luanda'
  };

  // ============================================================================
  // 2. CORRIGIR O NOME DA LOJA COM BASE NO ID
  // ============================================================================
  const corrigirNomeLoja = (idLoja, nomeOriginal) => {
    return mapeamentoLojas[idLoja] || nomeOriginal;
  };

  useEffect(() => {
    if (!userLoading) {
      carregarRelatorios();
    }
  }, [userLoading, periodo]);

  const carregarRelatorios = async () => {
    try {
      setLoading(true);
      
      let dados = null;

      // üìä L√ìGICA POR TIPO DE USU√ÅRIO
      if (userRole === 'admin') {
        dados = await carregarRelatoriosAdmin();
      } else if (userRole === 'gerente') {
        dados = await carregarRelatoriosGerente();
      } else if (userRole === 'entregador') {
        dados = await carregarRelatoriosEntregador();
      }

      setDadosRelatorios(dados);
      
    } catch (error) {
      console.error('Erro ao carregar relat√≥rios:', error);
    } finally {
      setLoading(false);
    }
  };

  // üëë RELAT√ìRIOS PARA ADMIN - TODAS AS LOJAS
  const carregarRelatoriosAdmin = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        mes_entregue,
        ano_entregue,
        usuarios:uid_usuario(nome_completo, email)
      `)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador');

    if (error) throw error;

    // Aplicar corre√ß√£o dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);
    const totalEntregadores = new Set(lojasCorrigidas.map(item => item.uid_usuario)).size;

    return {
      tipo: 'admin',
      totalEntregas,
      totalEntregadores,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // üíº RELAT√ìRIOS PARA GERENTE - APENAS SUA LOJA
  const carregarRelatoriosGerente = async () => {
    if (!userLojas || userLojas.length === 0) return null;

    const idLoja = userLojas[0].id_loja;
    const nomeLojaCorrigido = corrigirNomeLoja(idLoja, userLojas[0].loja_nome);

    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        nome_completo,
        email_usuario,
        semana_entregue,
        mes_entregue,
        ano_entregue,
        veiculo
      `)
      .eq('id_loja', idLoja)
      .eq('status_vinculacao', 'ativo')
      .eq('funcao', 'entregador')
      .order('mes_entregue', { ascending: false });

    if (error) throw error;

    const totalEntregas = data.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);

    return {
      tipo: 'gerente',
      totalEntregas,
      totalEntregadores: data.length,
      entregadores: data,
      loja: nomeLojaCorrigido, // Usando o nome corrigido aqui
      periodo
    };
  };

  // üöö RELAT√ìRIOS PARA ENTREGADOR - SEUS DADOS
  const carregarRelatoriosEntregador = async () => {
    const { data, error } = await supabase
      .from('loja_associada')
      .select(`
        id_loja,
        loja_nome,
        semana_entregue,
        mes_entregue,
        ano_entregue
      `)
      .eq('uid_usuario', userProfile?.uid)
      .eq('status_vinculacao', 'ativo');

    if (error) throw error;

    // Aplicar corre√ß√£o dos nomes das lojas
    const lojasCorrigidas = data.map(loja => ({
      ...loja,
      loja_nome: corrigirNomeLoja(loja.id_loja, loja.loja_nome)
    }));

    const totalEntregas = lojasCorrigidas.reduce((sum, item) => sum + item[`${periodo}_entregue`], 0);

    return {
      tipo: 'entregador',
      totalEntregas,
      lojas: lojasCorrigidas,
      periodo
    };
  };

  // üé® COMPONENTE DE CARREGAMENTO
  if (userLoading || loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <RouteGuard requiredRole="entregador">
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
          <h1 className="text-3xl font-bold text-purple-800 mb-4 md:mb-0">
            üìä Relat√≥rios - {userRole?.toUpperCase()}
          </h1>
          
          <select
            value={periodo}
            onChange={(e) => setPeriodo(e.target.value)}
            className="bg-white border border-gray-300 rounded-lg px-4 py-2"
          >
            <option value="dia">Hoje</option>
            <option value="semana">Esta Semana</option>
            <option value="mes">Este M√™s</option>
            <option value="ano">Este Ano</option>
          </select>
        </div>

        {/* üìà CARDS DE ESTAT√çSTICAS */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white p-6 rounded-lg shadow-md text-center">
            <div className="text-3xl font-bold text-purple-600 mb-2">
              {dadosRelatorios?.totalEntregas || 0}
            </div>
            <div className="text-gray-600">Total de Entregas</div>
          </div>
          
          {userRole !== 'entregador' && (
            <div className="bg-white p-6 rounded-lg shadow-md text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">
                {dadosRelatorios?.totalEntregadores || 0}
              </div>
              <div className="text-gray-600">Total de Entregadores</div>
            </div>
          )}
          
          <div className="bg-white p-6 rounded-lg shadow-md text-center">
            <div className="text-3xl font-bold text-blue-600 mb-2">
              {periodo === 'dia' ? 'Hoje' : 
               periodo === 'semana' ? 'Esta Semana' :
               periodo === 'mes' ? 'Este M√™s' : 'Este Ano'}
            </div>
            <div className="text-gray-600">Per√≠odo</div>
          </div>
          
          {userRole === 'gerente' && (
            <div className="bg-white p-6 rounded-lg shadow-md text-center">
              <div className="text-3xl font-bold text-orange-600 mb-2">
                {dadosRelatorios?.loja || 'N/A'}
              </div>
              <div className="text-gray-600">Loja</div>
            </div>
          )}
        </div>

        {/* üìã DETALHES ESPEC√çFICOS POR TIPO DE USU√ÅRIO */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4">
            {userRole === 'admin' && 'üè¢ Todas as Lojas'}
            {userRole === 'gerente' && `üë• Entregadores - ${dadosRelatorios?.loja}`}
            {userRole === 'entregador' && 'üè™ Minhas Lojas'}
          </h2>

          {userRole === 'admin' && dadosRelatorios?.lojas && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {dadosRelatorios.lojas.map((loja, index) => (
                <div key={index} className="p-4 border rounded-lg">
                  <h3 className="font-medium mb-2">{loja.loja_nome}</h3>
                  <p className="text-gray-600">Entregas: {loja[`${periodo}_entregue`]}</p>
                </div>
              ))}
            </div>
          )}

          {userRole === 'gerente' && dadosRelatorios?.entregadores && (
            <div className="space-y-4">
              {dadosRelatorios.entregadores.map((entregador, index) => (
                <div key={index} className="p-4 border rounded-lg">
                  <h3 className="font-medium mb-2">{entregador.nome_completo}</h3>
                  <p className="text-gray-600">Entregas: {entregador[`${periodo}_entregue`]}</p>
                  <p className="text-gray-600">Ve√≠culo: {entregador.veiculo}</p>
                </div>
              ))}
            </div>
          )}

          {userRole === 'entregador' && dadosRelatorios?.lojas && (
            <div className="space-y-4">
              {dadosRelatorios.lojas.map((loja, index) => (
                <div key={index} className="p-4 border rounded-lg">
                  <h3 className="font-medium mb-2">{loja.loja_nome}</h3>
                  <p className="text-gray-600">Entregas: {loja[`${periodo}_entregue`]}</p>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </RouteGuard>
  );
}


// =========================================
// 16. pages\todos-pedidos.js
// =========================================

// pages/todos-pedidos.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useRouter } from 'next/router';
import { useUserProfile } from '../hooks/useUserProfile';
import { OrderModal, WithCourier, WithoutCourier } from '../components/OrderModal';

// ==============================================================================
// COMPONENTE PRINCIPAL - TODOS OS PEDIDOS
// ==============================================================================
export default function TodosPedidos() {
  // ============================================================================
  // 1. ESTADOS DO COMPONENTE
  // ============================================================================
  const [todosPedidos, setTodosPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [modalAberto, setModalAberto] = useState(false);
  
  // Estados para filtros
  const [filtroStatus, setFiltroStatus] = useState('');
  const [filtroEntregador, setFiltroEntregador] = useState('');
  const [filtroLoja, setFiltroLoja] = useState('');
  const [editandoFrete, setEditandoFrete] = useState(null);
  const [valorFrete, setValorFrete] = useState('');

  const router = useRouter();
  const { userRole, userLojas, loading: loadingUser } = useUserProfile();

  // ============================================================================
  // 2. EFFECT PARA CARREGAMENTO INICIAL
  // ============================================================================
  useEffect(() => {
    if (!loadingUser) {
      checkAuthAndGetPedidos();
    }
  }, [loadingUser]);

  // ============================================================================
  // 3. VERIFICA√á√ÉO DE PERMISS√ïES
  // ============================================================================
  useEffect(() => {
    if (!loadingUser && userRole !== 'admin' && userRole !== 'gerente') {
      alert('Acesso restrito a gerentes e administradores');
      router.push('/pedidos-pendentes');
    }
  }, [loadingUser, userRole, router]);

  // ============================================================================
  // 4. FUN√á√ÉO: VERIFICAR AUTENTICA√á√ÉO + BUSCAR PEDIDOS
  // ============================================================================
  const checkAuthAndGetPedidos = async () => {
    try {
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        router.push('/login');
        return;
      }

      await getTodosPedidos();
    } catch (error) {
      console.error('Erro de autentica√ß√£o:', error);
      router.push('/login');
    }
  };

  // ============================================================================
  // 5. FUN√á√ÉO: BUSCAR TODOS OS PEDIDOS
  // ============================================================================
  const getTodosPedidos = async () => {
    try {
      setLoading(true);
      
      let query = supabase
        .from('pedidos')
        .select('*')
        .order('data', { ascending: false });

      // Se for gerente, filtrar apenas pela sua loja
      if (userRole === 'gerente' && userLojas.length > 0) {
        query = query.eq('id_loja', userLojas[0].id_loja);
      }

      const { data, error } = await query;

      if (error) throw error;
      
      setTodosPedidos(data || []);
    } catch (error) {
      console.error('Erro ao buscar pedidos:', error);
      alert('Erro ao carregar pedidos. Verifique o console.');
    } finally {
      setLoading(false);
    }
  };

  // ============================================================================
  // 6. FUN√á√ÉO: FILTRAR PEDIDOS
  // ============================================================================
  const pedidosFiltrados = todosPedidos.filter(pedido => {
    // Filtro por status
    if (filtroStatus && pedido.status_transporte !== filtroStatus) {
      return false;
    }
    
    // Filtro por entregador
    if (filtroEntregador && pedido.aceito_por_nome !== filtroEntregador) {
      return false;
    }
    
    // Filtro por loja (apenas para admin)
    if (userRole === 'admin' && filtroLoja && pedido.id_loja !== filtroLoja) {
      return false;
    }
    
    return true;
  });

  // ============================================================================
  // 7. FUN√á√ÉO: REVERTER PEDIDO (BOT√ÉO GERENTE/ADMIN)
  // ============================================================================
  const handleReverterPedido = async (pedidoId) => {
    if (!confirm('Tem certeza que deseja reverter este pedido?')) return;
    
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { 
          ...p, 
          status_transporte: 'revertido',
          aceito_por_uid: null,
          aceito_por_nome: null,
          aceito_por_email: null,
          aceito_por_telefone: null
        } : p
      ));
      
      alert('‚úÖ Pedido revertido com sucesso!');
    } catch (error) {
      console.error('Erro ao reverter pedido:', error);
      alert('‚ùå Erro ao reverter pedido.');
    }
  };

  // ============================================================================
  // 8. FUN√á√ÉO: EDITAR FRETE OFERECIDO
  // ============================================================================
  const handleEditarFrete = (pedido, valor) => {
    setEditandoFrete(pedido.id);
    setValorFrete(valor || '');
  };

  const handleSalvarFrete = async (pedidoId) => {
    try {
      const { error } = await supabase
        .from('pedidos')
        .update({ 
          frete_oferecido: parseFloat(valorFrete) || null,
          ultimo_status: new Date().toISOString()
        })
        .eq('id', pedidoId);

      if (error) throw error;

      // Atualizar lista localmente
      setTodosPedidos(prev => prev.map(p => 
        p.id === pedidoId ? { ...p, frete_oferecido: parseFloat(valorFrete) || null } : p
      ));
      
      setEditandoFrete(null);
      alert('‚úÖ Frete atualizado com sucesso!');
    } catch (error) {
      console.error('Erro ao atualizar frete:', error);
      alert('‚ùå Erro ao atualizar frete.');
    }
  };

  // ============================================================================
  // 9. FUN√á√ïES: CONTROLE DO MODAL
  // ============================================================================
  const abrirModalDetalhes = (pedido) => {
    setPedidoSelecionado(pedido);
    setModalAberto(true);
  };

  const fecharModal = () => {
    setModalAberto(false);
    setPedidoSelecionado(null);
  };

  // ============================================================================
  // 10. DADOS PARA FILTROS
  // ============================================================================
  const statusUnicos = [...new Set(todosPedidos.map(p => p.status_transporte))].filter(Boolean);
  const entregadoresUnicos = [...new Set(todosPedidos.map(p => p.aceito_por_nome))].filter(Boolean);
  const lojasUnicas = [...new Set(todosPedidos.map(p => p.id_loja))].filter(Boolean);

  // ============================================================================
  // 11. RENDERIZA√á√ÉO DO COMPONENTE
  // ============================================================================
  if (loadingUser) {
    return <div className="min-h-screen flex items-center justify-center">Carregando perfil...</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* T√çTULO */}
      <h1 className="text-2xl font-bold text-purple-800 mb-6">üìä Todos os Pedidos</h1>

      {/* FILTROS */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Filtros</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Filtro Status */}
          <div>
            <label className="block text-sm font-medium mb-1">Status</label>
            <select
              value={filtroStatus}
              onChange={(e) => setFiltroStatus(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os status</option>
              {statusUnicos.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>

          {/* Filtro Entregador */}
          <div>
            <label className="block text-sm font-medium mb-1">Entregador</label>
            <select
              value={filtroEntregador}
              onChange={(e) => setFiltroEntregador(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="">Todos os entregadores</option>
              {entregadoresUnicos.map(entregador => (
                <option key={entregador} value={entregador}>{entregador}</option>
              ))}
            </select>
          </div>

          {/* Filtro Loja (apenas admin) */}
          {userRole === 'admin' && (
            <div>
              <label className="block text-sm font-medium mb-1">Loja</label>
              <select
                value={filtroLoja}
                onChange={(e) => setFiltroLoja(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded"
              >
                <option value="">Todas as lojas</option>
                {lojasUnicas.map(loja => (
                  <option key={loja} value={loja}>{loja}</option>
                ))}
              </select>
            </div>
          )}
        </div>
      </div>

      {/* LISTA DE PEDIDOS */}
      {loading ? (
        <div className="text-center py-8">
          <p className="text-purple-600">Carregando pedidos...</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {pedidosFiltrados.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Nenhum pedido encontrado.</p>
            </div>
          ) : (
            pedidosFiltrados.map(pedido => (
              <div key={pedido.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex items-start justify-between">
                  
                  {/* INFORMA√á√ïES DO PEDIDO */}
                  <div className="flex-1">
                    <button
                      onClick={() => abrirModalDetalhes(pedido)}
                      className="text-blue-600 hover:underline font-bold text-lg mb-1"
                    >
                      Pedido #{pedido.id_loja_woo}
                    </button>
                    
                    <p className="text-sm text-gray-600 font-semibold">{pedido.loja_nome}</p>
                    <p className="text-sm"><span className="font-medium">Cliente:</span> {pedido.nome_cliente}</p>
                    <p className="text-sm"><span className="font-medium">Status:</span> 
                      <span className={`ml-1 ${
                        pedido.status_transporte === 'entregue' ? 'text-green-600' :
                        pedido.status_transporte === 'cancelado' ? 'text-red-600' :
                        pedido.status_transporte === 'em rota' ? 'text-orange-600' : 'text-blue-600'
                      }`}>
                        {pedido.status_transporte}
                      </span>
                    </p>
                    
                    {pedido.aceito_por_nome && (
                      <p className="text-sm"><span className="font-medium">Entregador:</span> {pedido.aceito_por_nome}</p>
                    )}

                    {/* EDI√á√ÉO DE FRETE */}
                    <div className="mt-2">
                      <span className="text-sm font-medium">Frete oferecido: </span>
                      {editandoFrete === pedido.id ? (
                        <div className="flex items-center gap-2 mt-1">
                          <input
                            type="number"
                            step="0.01"
                            value={valorFrete}
                            onChange={(e) => setValorFrete(e.target.value)}
                            className="w-20 p-1 border border-gray-300 rounded"
                            placeholder="0.00"
                          />
                          <button
                            onClick={() => handleSalvarFrete(pedido.id)}
                            className="bg-green-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ‚úÖ
                          </button>
                          <button
                            onClick={() => setEditandoFrete(null)}
                            className="bg-gray-500 text-white px-2 py-1 rounded text-sm"
                          >
                            ‚ùå
                          </button>
                        </div>
                      ) : (
                        <span className="text-green-600">
                          R$ {pedido.frete_oferecido?.toFixed(2) || '0.00'} 
                          <button
                            onClick={() => handleEditarFrete(pedido, pedido.frete_oferecido)}
                            className="ml-2 text-blue-600 text-sm"
                          >
                            ‚úèÔ∏è
                          </button>
                        </span>
                      )}
                    </div>
                  </div>

                  {/* BOT√ïES DE A√á√ÉO (GERENTE/ADMIN) */}
                  <div className="flex flex-col gap-2 ml-4">
                    {/* BOT√ÉO REVERTER (para pedidos aceitos/em rota) */}
                    {['aceito', 'em rota'].includes(pedido.status_transporte) && (
                      <button 
                        onClick={() => handleReverterPedido(pedido.id)}
                        className="bg-yellow-500 text-white px-4 py-2 rounded text-sm hover:bg-yellow-600"
                      >
                        ‚Ü©Ô∏è Reverter
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* MODAL DE DETALHES */}
      <OrderModal 
        pedido={pedidoSelecionado} 
        isOpen={modalAberto} 
        onClose={fecharModal}
      >
        {pedidoSelecionado?.aceito_por_nome ? (
          <WithCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        ) : (
          <WithoutCourier pedido={pedidoSelecionado} onClose={fecharModal} />
        )}
      </OrderModal>
    </div>
  );
}


// =========================================
// 1. public\favicon.ico
// =========================================

 



// =========================================
// 2. public\manifest.json
// =========================================

 



// =========================================
// 1. styles\globals.css
// =========================================

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Estilos globais para WooCommerce */
:root {
  --woo-purple: #7f54b3;
  --woo-purple-dark: #6b3fa0;
  --woo-purple-light: #f0e6ff;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  margin: 0;
  padding: 0;
}

/* Cabe√ßalho fixo */
.sticky-header {
  position: sticky;
  top: 0;
  z-index: 50;
  background: white;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  border-bottom: 2px solid #e9d5ff;
}


// =========================================
// 1. utils\filterPedidos.js
// =========================================

// utils/filterPedidos.js
export const filterPedidosPorUsuario = (pedidos, userRole, userLojas) => {
  if (userRole === 'admin') {
    // Admin v√™ TUDO
    return pedidos;
  }

  if (userRole === 'gerente' && userLojas.length === 1) {
    // Gerente v√™ apenas sua loja
    return pedidos.filter(pedido => pedido.id_loja === userLojas[0].id_loja);
  }

  if (userRole === 'entregador' && userLojas.length > 0) {
    // Entregador v√™ pedidos de todas as suas lojas
    const lojasIds = userLojas.map(loja => loja.id_loja);
    return pedidos.filter(pedido => lojasIds.includes(pedido.id_loja));
  }

  // Visitante ou erro n√£o v√™ nada
  return [];
};


// =========================================
// 2. utils\formatters.js
// =========================================

 



// =========================================
// 1. serviceWorker.js
// =========================================

 




// =========================================
// √ÅRVORE DE DIRET√ìRIOS
// =========================================
üì¶src/
üì¶components/
  üì¶components/Filters/
    1 üìúcomponents\Filters\CourierFilter.js
    2 üìúcomponents\Filters\StatusFilter.js
  üì¶components/OrderModal/
    1 üìúcomponents\OrderModal\index.js
    2 üìúcomponents\OrderModal\OrderModal.js
    3 üìúcomponents\OrderModal\WithCourier.js
    4 üìúcomponents\OrderModal\WithoutCourier.js
  1 üìúcomponents\DeliveryStatus.js
  2 üìúcomponents\EditLojaModal.js
  3 üìúcomponents\EditProfileModal.js
  4 üìúcomponents\EditUsuarioModal.js
  5 üìúcomponents\Header.js
  6 üìúcomponents\Layout.js
  7 üìúcomponents\MobileMenu.js
  8 üìúcomponents\Notification.js
  9 üìúcomponents\OrderCard.js
  10 üìúcomponents\Pagination.js
  11 üìúcomponents\RouteGuard.js
  12 üìúcomponents\Sidebar.js
  13 üìúcomponents\UserProfile.js
üì¶hooks/
  1 üìúhooks\useOrders.js
  2 üìúhooks\useRealtimePedidos.js
  3 üìúhooks\useUserProfile.js
üì¶lib/
  1 üìúlib\firebase.js
  2 üìúlib\supabase.js
  3 üìúlib\wooCommerce.js
üì¶pages/
  1 üìúpages\_app.js
  2 üìúpages\_document.js
  3 üìúpages\admin.js
  4 üìúpages\atualizar-senha.js
  5 üìúpages\cadastro.js
  6 üìúpages\gestao-entregadores.js
  7 üìúpages\index.js
  8 üìúpages\login.js
  9 üìúpages\orders.js
  10 üìúpages\pedidos-aceitos.js
  11 üìúpages\pedidos-entregues.js
  12 üìúpages\pedidos-pendentes.js
  13 üìúpages\perfil.js
  14 üìúpages\recuperar-senha.js
  15 üìúpages\relatorios.js
  16 üìúpages\todos-pedidos.js
üì¶public/
  1 üìúpublic\favicon.ico
  2 üìúpublic\manifest.json
üì¶styles/
  1 üìústyles\globals.css
üì¶utils/
  1 üìúutils\filterPedidos.js
  2 üìúutils\formatters.js
1 üìúserviceWorker.js
