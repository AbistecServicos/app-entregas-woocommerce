===== useRealtimePedidos.js =====
// hooks/useRealtimePedidos.js
import { useEffect } from 'react';
import { supabase } from '../lib/supabase';

export const useRealtimePedidos = (callback) => {
  useEffect(() => {
    const subscription = supabase
      .channel('pedidos-realtime')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'pedidos' 
        }, 
        (payload) => {
          callback(payload);
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, [callback]);
};

// Como usar em uma página:
const [pedidos, setPedidos] = useState([]);

useRealtimePedidos((payload) => {
  // Atualizar a lista de pedidos em tempo real
  if (payload.eventType === 'INSERT') {
    setPedidos(prev => [payload.new, ...prev]);
  } else if (payload.eventType === 'UPDATE') {
    setPedidos(prev => prev.map(p => 
      p.id === payload.new.id ? payload.new : p
    ));
  } else if (payload.eventType === 'DELETE') {
    setPedidos(prev => prev.filter(p => p.id !== payload.old.id));
  }
});


===== useUserProfile.js =====
// hooks/useUserProfile.js
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

// ==============================================================================
// HOOK PERSONALIZADO: useUserProfile
// ==============================================================================
/**
 * Hook para gerenciar dados do usuário autenticado, incluindo perfil, função (role) e lojas associadas.
 * Escuta mudanças de autenticação em tempo real e atualiza estados automaticamente.
 * Retorna estados e funções para uso em outros componentes.
 */
export const useUserProfile = () => {
  // ============================================================================
  // 1. DEFINIÇÃO DOS ESTADOS
  // ============================================================================
  /**
   * Estados para armazenar:
   * - user: Dados do usuário autenticado (via supabase.auth)
   * - userProfile: Dados do perfil do usuário (tabela 'usuarios')
   * - userRole: Papel do usuário ('admin', 'gerente', 'entregador', 'visitante')
   * - userLojas: Lojas associadas ao usuário (tabela 'loja_associada')
   * - loading: Indicador de carregamento
   * - error: Mensagens de erro
   * - updating: Indicador de atualização do perfil
   */
  const [user, setUser] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [userRole, setUserRole] = useState('visitante');
  const [userLojas, setUserLojas] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [updating, setUpdating] = useState(false);

  // ============================================================================
  // 2. FUNÇÃO: CARREGAR DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Carrega dados do usuário autenticado, perfil e lojas associadas.
   * Usada no carregamento inicial e para recarregar dados após mudanças.
   */
  const loadUserData = async () => {
    try {
      // Iniciar carregamento e limpar erros
      setLoading(true);
      setError(null);

      // 2.1. Verificar autenticação do usuário
      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        setError('Erro de autenticação: ' + authError.message);
        setUser(null);
        setUserProfile(null);
        setUserRole('visitante');
        setUserLojas([]);
        return;
      }

      // 2.2. Se não houver usuário autenticado, limpar estados
      if (!authUser) {
        setUser(null);
        setUserProfile(null);
        setUserRole('visitante');
        setUserLojas([]);
        return;
      }

      // 2.3. Atualizar estado do usuário autenticado
      setUser(authUser);

      // 2.4. Buscar dados do perfil e lojas em paralelo
      const [usuarioResponse, lojaResponse] = await Promise.all([
        supabase
          .from('usuarios')
          .select('*')
          .eq('uid', authUser.id)
          .single(),
        supabase
          .from('loja_associada')
          .select('*')
          .eq('uid_usuario', authUser.id)
          .eq('status_vinculacao', 'ativo')
      ]);

      // 2.5. Verificar erros na busca do perfil
      if (usuarioResponse.error) {
        setError('Erro ao buscar perfil: ' + usuarioResponse.error.message);
        setUserProfile(null);
        setUserRole('visitante');
        setUserLojas([]);
        return;
      }

      const usuarioData = usuarioResponse.data;
      setUserProfile(usuarioData);

      // 2.6. Verificar se o usuário é admin
      if (usuarioData?.is_admin) {
        setUserRole('admin');
        setUserLojas([]);
        return;
      }

      // 2.7. Verificar erros na busca de lojas
      if (lojaResponse.error) {
        setError('Erro ao buscar lojas: ' + lojaResponse.error.message);
        setUserLojas([]);
        setUserRole('visitante');
        return;
      }

      const lojaData = lojaResponse.data || [];

      // 2.8. Se não houver lojas, definir como visitante
      if (lojaData.length === 0) {
        setUserRole('visitante');
        setUserLojas([]);
        return;
      }

      // 2.9. Atualizar lojas e determinar papel (gerente ou entregador)
      setUserLojas(lojaData);
      const gerente = lojaData.find(loja => loja.funcao === 'gerente');
      
      if (gerente) {
        const lojasGerente = lojaData.filter(loja => loja.funcao === 'gerente');
        if (lojasGerente.length > 1) {
          setError('ERRO: Usuário não pode ser gerente em múltiplas lojas');
          setUserRole('erro');
        } else {
          setUserRole('gerente');
        }
      } else {
        setUserRole('entregador');
      }

    } catch (error) {
      // 2.10. Tratar erros inesperados
      setError('Erro inesperado: ' + error.message);
      console.error('Erro no loadUserData:', error);
    } finally {
      // 2.11. Finalizar carregamento
      setLoading(false);
    }
  };

  // ============================================================================
  // 3. EFFECT: CARREGAMENTO INICIAL E ESCUTA DE AUTENTICAÇÃO
  // ============================================================================
  /**
   * Executa o carregamento inicial dos dados e escuta mudanças de autenticação
   * em tempo real usando supabase.auth.onAuthStateChange.
   */
  useEffect(() => {
    // 3.1. Carregar dados iniciais
    loadUserData();

    // 3.2. Escutar mudanças de autenticação (login/logout)
    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === 'SIGNED_IN') {
          // 3.3. Após login, carregar dados do usuário
          await loadUserData();
        } else if (event === 'SIGNED_OUT') {
          // 3.4. Após logout, limpar estados imediatamente
          setUser(null);
          setUserProfile(null);
          setUserRole('visitante');
          setUserLojas([]);
          setLoading(false);
        }
      }
    );

    // 3.5. Cleanup: Cancelar inscrição do listener ao desmontar
    return () => {
      if (authListener?.subscription) {
        authListener.subscription.unsubscribe();
      }
    };
  }, []);

  // ============================================================================
  // 4. FUNÇÃO: ATUALIZAR PERFIL DO USUÁRIO
  // ============================================================================
  /**
   * Atualiza os dados do perfil do usuário na tabela 'usuarios' e, se aplicável,
   * na tabela 'loja_associada' (para entregadores).
   */
  const updateUserProfile = async (formData) => {
    try {
      // 4.1. Iniciar atualização e limpar erros
      setUpdating(true);
      setError(null);

      // 4.2. Verificar se há usuário autenticado
      if (!userProfile || !userProfile.uid) {
        throw new Error('Usuário não autenticado');
      }

      // 4.3. Atualizar tabela 'usuarios'
      const { error: userError } = await supabase
        .from('usuarios')
        .update({
          nome_completo: formData.nome_completo,
          nome_usuario: formData.nome_usuario,
          telefone: formData.telefone,
          foto: formData.foto
        })
        .eq('uid', userProfile.uid);

      if (userError) throw userError;

      // 4.4. Atualizar tabela 'loja_associada' (apenas para entregadores)
      if (userRole === 'entregador' && userLojas.length > 0) {
        const { error: lojaError } = await supabase
          .from('loja_associada')
          .update({
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima ? parseInt(formData.carga_maxima) : null,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          })
          .eq('uid_usuario', userProfile.uid)
          .eq('id_loja', userLojas[0].id_loja);

        if (lojaError) throw lojaError;
      }

      // 4.5. Atualizar estados locais
      setUserProfile(prev => ({
        ...prev,
        nome_completo: formData.nome_completo,
        nome_usuario: formData.nome_usuario,
        telefone: formData.telefone,
        foto: formData.foto
      }));

      if (userRole === 'entregador' && userLojas.length > 0) {
        setUserLojas(prev => prev.map(loja => 
          loja.id_loja === userLojas[0].id_loja ? {
            ...loja,
            veiculo: formData.veiculo,
            carga_maxima: formData.carga_maxima,
            perimetro_entrega: formData.perimetro_entrega,
            nome_completo: formData.nome_completo
          } : loja
        ));
      }

      // 4.6. Retornar sucesso
      return { success: true, message: 'Perfil atualizado com sucesso!' };

    } catch (error) {
      // 4.7. Tratar erros
      const errorMsg = 'Erro ao atualizar perfil: ' + error.message;
      setError(errorMsg);
      console.error('Erro no updateUserProfile:', error);
      return { success: false, message: errorMsg };
    } finally {
      // 4.8. Finalizar atualização
      setUpdating(false);
    }
  };

  // ============================================================================
  // 5. FUNÇÃO: RECARREGAR DADOS DO USUÁRIO
  // ============================================================================
  /**
   * Recarrega os dados do usuário, reutilizando a função loadUserData.
   * Usada por outros componentes para forçar a atualização dos dados.
   */
  const reloadUserData = async () => {
    await loadUserData();
  };

  // ============================================================================
  // 6. RETORNO DO HOOK
  // ============================================================================
  /**
   * Retorna todos os estados e funções para uso nos componentes.
   */
  return { 
    user,
    userProfile, 
    userRole, 
    userLojas, 
    loading, 
    error,
    updating,
    updateUserProfile,
    reloadUserData
  };
};

